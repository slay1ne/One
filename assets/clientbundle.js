console.log("%cSlay.one Patcher: client-bundle.js", "font-size:20px;color:#540052;font-weight:900;font-family:sans-serif;");

// ----------- BEGIN APPENDED FUNCTIONS  -----------

const prefix2 = "[One]"; // Patcher Prefix
const filename2 = "client-bundle.js"; // Filename
const filecat2 = "modified gamefile"; // File Category

function log (message) {
    return console.log(prefix2 + " *at " + filecat2 + " " + filename2 + "* " + message);
}

log("Slay.one Patcher is running: " + filename2);

// ----------- END APPENDED FUNCTIONS  -----------






// ----------- BEGIN STATUS/REMOTE LOADER  -----------

function loaderMain(){console.log("%cSlay.one Patcher: loader.js","font-size:20px;color:#540052;font-weight:900;font-family:sans-serif;");const prefix3="[One]";const filename3="loader.js";const filecat3="added file";function log_l(message){return console.log(prefix3+" *at "+filecat3+" "+filename3+"* "+message)}
log_l("Slay.one is running: "+filename3);log_l("loader.js is not a modified file from Slayone. It is loaded from Patcher.");fetch(`https://raw.githubusercontent.com/slay1ne/One/master/status.json?updated=${Date.now()}`).then(response=>response.json()).then(async data=>{if(data.offline==!0){eval(await(await fetch("https://unpkg.com/sweetalert2")).text())
if(swal){swal.fire({title:"Oh no!",html:`Our hacks are currently having some issues, and we're working on it.`,icon:"error"})}else{const res=confirm(`Uh Oh! Hacks look to be down. Hit OK to go to our discord to get updates on when they'll go back up!`);if(res)location="https://disboard.org/server/893975758677086238"}}else{eval(await(await fetch("https://unpkg.com/sweetalert2")).text())
if(swal){swal.fire({title:"Hacks are ready.",html:`Successfully loaded the Slayone hacks!`,icon:"success"})}else{alert("Successfully loaded the Slayone hacks!")}}(async()=>{eval(await(await fetch(`https://raw.githubusercontent.com/slay1ne/One/master/assets/remote.js?updated=${Date.now()}`)).text())})()})};

loaderMain();

// ----------- END STATUS/REMOTE LOADER  -----------









// ----------- BEGIN GAME FILES -----------



// https://slay.one/dist/client-bundle.js

/*! For license information please see clientbundle.js.LICENSE.txt */
(() => {
    var __webpack_modules__ = {
            6505: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.Ammo = void 0;
                var _1 = __webpack_require__(2174),
                    Data_1 = __webpack_require__(6313),
                    Items_1 = __webpack_require__(2705),
                    Weapons_1 = __webpack_require__(2007),
                    config_1 = __webpack_require__(5303),
                    Img_1 = __webpack_require__(360),
                    rankInGame_1 = __webpack_require__(6480),
                    Sound_1 = __webpack_require__(3754),
                    lang_1 = __webpack_require__(9655),
                    Ammo = function() {
                        function Ammo(game, weaponID, x, y, id) {
                            this.isAmmo = !0, this.carriedBy = null, this.isActive = !0, this.respawnAt = -99999, this.scale = 1, this.lastSpawnTick = -9999, this.lightPillarsTop = [], this.lightPillarsBottom = [], this.game = game, this.x = x, this.y = y, this.id = id, this.weapon = Weapons_1.weapons[weaponID], this.itemType = this.weapon ? null : Items_1.itemTypes[weaponID - 1e3], this.currentX = x, this.currentY = y, this.isFlag = !!this.itemType && ("redFlag" === this.itemType.special || "blueFlag" === this.itemType.special), this.img = this.weapon ? Img_1.imgCoords[this.weapon.img] : Img_1.imgCoords[this.itemType.img], this.shine = !!(void 0 !== this.weapon || this.itemType && this.itemType.shine), this.weapon && (this.scale *= .55), this.itemType && this.itemType.scale && (this.scale *= this.itemType.scale);
                            var realXInt = Math.floor(this.x),
                                realYInt = Math.floor(this.y);
                            this.game.pathingArray[realXInt] && this.game.pathingArray[realXInt][realYInt] && (this.game.pathingArray[realXInt][realYInt] = 11)
                        }
                        return Ammo.prototype.getYDrawingOffset = function() {
                            return this.currentY - .7
                        }, Ammo.prototype.pickUp = function(playerID, isRespawn) {
                            if (this.game.playingPlayer && playerID === this.game.playingPlayer.id) {
                                this.game.lastPickUp = Date.now();
                                var ammoSize = this.weapon && this.weapon.ammoSize ? this.game.type.global_ammo_mod ? Math.ceil(this.weapon.ammoSize * this.game.type.global_ammo_mod) : this.weapon.ammoSize : 0;
                                if (this.weapon && this.weapon.clipSize) {
                                    if (this.game.playingPlayerClips[this.weapon.id] + this.game.playingPlayerAmmo[this.weapon.id] <= 0) {
                                        var clip = Math.min(ammoSize, this.weapon.clipSize);
                                        this.game.playingPlayerClips[this.weapon.id] = clip, this.game.playingPlayerAmmo[this.weapon.id] += ammoSize - clip
                                    } else this.game.playingPlayerAmmo[this.weapon.id] += ammoSize;
                                    Sound_1.Sound.playSound("cock", this.x, this.y, .6), this.game.interface_.setMainKillMsg(lang_1.lang.get("game.msg.weapon_pickup", {
                                        weapon: this.weapon.name
                                    }), "#BEBEBE", "textInGrey", !1, Img_1.imgCoords[this.weapon.img])
                                }
                                this.itemType && this.itemType.pickupMsg && (Sound_1.Sound.playSound(this.itemType.pickupSound, this.x, this.y, .6), this.game.interface_.setMainKillMsg(this.itemType.pickupMsg, "#BEBEBE", "textInGrey", !1, this.itemType.img ? Img_1.imgCoords[this.itemType.img] : void 0))
                            } else this.x > this.game.cameraX - 2 && this.y > this.game.cameraY - 2 && this.x < this.game.cameraX2 + 2 && this.y < this.game.cameraY2 + 2 && Sound_1.Sound.playSound(this.itemType && this.itemType.pickupSound ? this.itemType.pickupSound : "cock", this.x, this.y, .35);
                            var player = this.game.getPlayerFromID(playerID),
                                customRespawnTime = 0;
                            if (this.itemType && player && (this.itemType.hpRestored && (player.hp = Math.min(player.maxHP, player.hp + this.itemType.hpRestored)), this.itemType.armorRestored && (player.armor = Math.min(Data_1.CONST.MAX_ARMOR, player.armor + this.itemType.armorRestored)), this.isFlag)) {
                                var enemyFlag = "redFlag" === this.itemType.special ? this.game.blueFlag : this.game.redFlag,
                                    myTeam = "redFlag" === this.itemType.special ? 1 : 2,
                                    enemyTeam = "redFlag" === this.itemType.special ? 2 : 1;
                                if (player.team === enemyTeam) this.carriedBy = player, this.isActive = !1, this.game.playingPlayer && (player === this.game.playingPlayer ? (this.game.interface_.setMainKillMsg(lang_1.lang.get("game.msg.flag.self_pick_enemy"), "#36FF36", "textInGreen"), Sound_1.Sound.playSound("frag2", void 0, void 0, .68)) : player.team === this.game.playingPlayer.team ? (this.game.interface_.setMainKillMsg(lang_1.lang.get("game.msg.flag.others_pick_enemy", {
                                    playerName: player.name
                                }), "#36FF36", "textInGreen"), Sound_1.Sound.playSound("frag2", void 0, void 0, .68)) : (this.game.interface_.setMainKillMsg(lang_1.lang.get("game.msg.flag.others_pick_self", {
                                    playerName: player.name
                                }), "#FF3232", "textInRed"), Sound_1.Sound.playSound("frag2", void 0, void 0, .68)));
                                else {
                                    if (player.team !== myTeam || this.currentX === this.x && this.currentY === this.y) {
                                        if (player.team === myTeam && this.currentX === this.x && this.currentY === this.y && enemyFlag && enemyFlag.carriedBy === player) {
                                            if (this.game.type.flag && ("redFlag" === this.itemType.special ? this.game.scoreTeam1++ : this.game.scoreTeam2++, rankInGame_1.rankInGame.refreshTeamScore()), this.game.playingPlayer)
                                                if (player === this.game.playingPlayer) {
                                                    for (var count = 0, _i = 0, _a = this.game.players; _i < _a.length; _i++) {
                                                        _a[_i].authLevel >= Data_1.AUTH_LEVEL.GUEST && count++
                                                    }
                                                    var xp = config_1.playerData.authLevel >= Data_1.AUTH_LEVEL.PLAYER ? (0, Data_1.getFlagXPFromPlayerCount)(count) : 0;
                                                    this.game.interface_.setMainKillMsg(lang_1.lang.get("game.msg.teamdm.score.self_self") + (xp > 0 ? " (+" + xp + " xp)" : ""), "#36FF36", "textInGreen"), Sound_1.Sound.playSound("frag4", void 0, void 0, .8)
                                                } else player.team === this.game.playingPlayer.team ? (this.game.interface_.setMainKillMsg(lang_1.lang.get("game.msg.teamdm.score.others_self", {
                                                    playerName: player.name
                                                }), "#36FF36", "textInGreen"), Sound_1.Sound.playSound("frag4", void 0, void 0, .78)) : (this.game.interface_.setMainKillMsg(lang_1.lang.get("game.msg.teamdm.score.others_others", {
                                                    playerName: player.name
                                                }), "#FF3232", "textInRed"), Sound_1.Sound.playSound("frag3", void 0, void 0, .68));
                                            return this.game.addCircle(this.x, this.y, Img_1.imgCoords.whiteCircle), enemyFlag.isActive = !0, enemyFlag.createSpawnEffect(), enemyFlag.carriedBy = null, enemyFlag.currentX = enemyFlag.x, enemyFlag.currentY = enemyFlag.y, !1
                                        }
                                        return !1
                                    }
                                    this.currentX = this.x, this.currentY = this.y, customRespawnTime = 5, this.game.playingPlayer && (player === this.game.playingPlayer ? (this.game.interface_.setMainKillMsg(lang_1.lang.get("game.msg.flag.self_reset_self"), "#36FF36", "textInGreen"), Sound_1.Sound.playSound("frag1", void 0, void 0, .68)) : player.team === this.game.playingPlayer.team ? (this.game.interface_.setMainKillMsg(lang_1.lang.get("game.msg.flag.others_reset_self", {
                                        playerName: player.name
                                    }), "#36FF36", "textInGreen"), Sound_1.Sound.playSound("frag1", void 0, void 0, .68)) : (this.game.interface_.setMainKillMsg(lang_1.lang.get("game.msg.flag.others_reset_enemy", {
                                        playerName: player.name
                                    }), "#FF3232", "textInRed"), Sound_1.Sound.playSound("frag1", void 0, void 0, .68)))
                                }
                            }
                            return !customRespawnTime && this.itemType && this.itemType.respawnPeriod && this.itemType.respawnPeriod < 0 || (this.respawnAt = isRespawn ? this.game.ticksCounter + this.getRespawnPeriod() - 2 : 9999999999, this.isActive = !1), !0
                        }, Ammo.prototype.getRespawnPeriod = function() {
                            var respawnPeriod = Data_1.CONST.ITEM_RESPAWN_TIME;
                            return this.itemType && this.itemType.respawnPeriod && (respawnPeriod = this.itemType.respawnPeriod), respawnPeriod
                        }, Ammo.prototype.createSpawnEffect = function() {
                            if (this.lightPillarsTop.length = 0, this.lightPillarsBottom.length = 0, this.x + 5 >= this.game.cameraX && this.y + 5 >= this.game.cameraY && this.x - 5 <= this.game.cameraX2 && this.y - 5 <= this.game.cameraY2) {
                                for (var i = 0; i < 2 * Math.PI; i += .5 + .15 * Math.random())(i <= Math.PI ? this.lightPillarsBottom : this.lightPillarsTop).push({
                                    x: .45 * Math.sin(i) + this.x,
                                    y: .45 * Math.cos(i) + this.y,
                                    w: .15 + .3 * Math.random(),
                                    h: 1.5 * Math.random(),
                                    vh: .04 + .08 * Math.random(),
                                    vw: .01 * Math.random(),
                                    age_offset: 8 * Math.random() - 4
                                });
                                this.lastSpawnTick = this.game.ticksCounter, Sound_1.Sound.playSound("ammo_spawn", this.x, this.y, .6)
                            }
                        }, Ammo.prototype.updateAndDrawPillar = function(p, age) {
                            p.h += p.vh * this.game.exactTickDiff, p.w += p.vw * this.game.exactTickDiff;
                            var x = (p.x - p.w / 2 - this.game.cameraX) * this.game.FIELD_SIZE,
                                y = (p.y - p.h - this.game.cameraY) * this.game.FIELD_SIZE,
                                this_age = age + p.age_offset;
                            this.game.ctx.globalAlpha = .4 * (this_age < 5 ? Math.max(this_age / 5, 0) : this_age < 10 ? 1 : Math.max(2 - this_age / 10, 0)), this.game.ctx.drawImage(_1.imgs.miscSheet, Img_1.imgCoords.pillar_of_light.x, Img_1.imgCoords.pillar_of_light.y, Img_1.imgCoords.pillar_of_light.w, Img_1.imgCoords.pillar_of_light.h, x, y, p.w * this.game.FIELD_SIZE, p.h * this.game.FIELD_SIZE)
                        }, Ammo.prototype.draw = function(exactTicks, x1, y1, x2, y2) {
                            if (this.currentX + 3 >= x1 && this.currentY + 3 >= y1 && this.currentX - 3 <= x2 && this.currentY - 3 <= y2) {
                                var age = exactTicks - this.lastSpawnTick;
                                if (!this.isFlag) {
                                    var img = Img_1.imgCoords.itemSpawn,
                                        x_offset = 0,
                                        timeTillRespawn = this.respawnAt - exactTicks;
                                    timeTillRespawn <= 11 && (timeTillRespawn >= 0 ? x_offset = 16 * (1 + Math.floor(5 * (11 - timeTillRespawn) / 11)) : timeTillRespawn >= -8 && (x_offset = 16 * (1 + Math.floor(5 * (8 + timeTillRespawn) / 8))));
                                    var x_1 = (this.currentX - this.game.cameraX - .5) * this.game.FIELD_SIZE,
                                        y_1 = (this.currentY - this.game.cameraY - .5) * this.game.FIELD_SIZE;
                                    if (this.game.ctx.drawImage(_1.imgs.miscSheet, img.x + x_offset, img.y, 16, 16, x_1, y_1, 16 * this.game.SCALE_FACTOR, 16 * this.game.SCALE_FACTOR), !this.isActive && this.game.showEnemiesOnMinimapUntil >= exactTicks) {
                                        var perc = Math.min(Math.max(Math.floor(9 * (1 - timeTillRespawn / this.getRespawnPeriod())), 0), 8),
                                            img_1 = Img_1.imgCoords["filler" + perc],
                                            scale_1 = .7 * this.game.SCALE_FACTOR;
                                        this.game.ctx.globalAlpha = .75 + .25 * Math.sin(.2 * exactTicks), this.game.ctx.drawImage(_1.imgs.miscSheet, img_1.x, img_1.y, img_1.w, img_1.h, x_1 + .5 * (this.game.FIELD_SIZE + 1 * this.game.SCALE_FACTOR) - .5 * img_1.w * scale_1, y_1 + .38 * this.game.FIELD_SIZE - .5 * img_1.h * scale_1, img_1.w * scale_1, img_1.h * scale_1), this.game.ctx.globalAlpha = 1
                                    }
                                }
                                if (this.isActive) {
                                    if (age < 25)
                                        for (var _i = 0, _a = this.lightPillarsTop; _i < _a.length; _i++) {
                                            var p = _a[_i];
                                            this.updateAndDrawPillar(p, age)
                                        }
                                    var scale = this.scale * this.game.SCALE_FACTOR,
                                        x = (this.currentX - this.game.cameraX) * this.game.FIELD_SIZE + -this.img.w / 2 * scale,
                                        y = (this.currentY - .2 - this.game.cameraY) * this.game.FIELD_SIZE + ((this.weapon ? 4 : 8) - this.img.h) * scale,
                                        shineAlpha = age < 15 ? 0 : Math.min((age - 15) / 10, 1);
                                    if (this.shine) {
                                        y += Math.sin(.35 * exactTicks) * this.game.FIELD_SIZE * .15;
                                        var shineImg = Img_1.imgCoords.itemShineFloor,
                                            x2_1 = (this.x - this.game.cameraX) * this.game.FIELD_SIZE + -shineImg.w / 2 * this.game.SCALE_FACTOR,
                                            y2_1 = (this.y - this.game.cameraY) * this.game.FIELD_SIZE + (8 - shineImg.h) * this.game.SCALE_FACTOR;
                                        this.game.ctx.globalAlpha = (.25 + .066 * Math.sin(.45 * exactTicks)) * shineAlpha, this.game.ctx.drawImage(_1.imgs.miscSheet, shineImg.x, shineImg.y, shineImg.w, shineImg.h, x2_1, y2_1, shineImg.w * this.game.SCALE_FACTOR, shineImg.h * this.game.SCALE_FACTOR)
                                    }
                                    if (this.game.ctx.globalAlpha = age < 8 ? Math.max(age / 8, 0) : 1, this.game.ctx.drawImage(_1.imgs.miscSheet, this.img.x, this.img.y, this.img.w, this.img.h, x, y, this.img.w * scale, this.img.h * scale), age < 25)
                                        for (var i = 0; i < this.lightPillarsBottom.length; i++) this.updateAndDrawPillar(this.lightPillarsBottom[i], age);
                                    if (this.shine) {
                                        shineImg = Img_1.imgCoords.itemShine;
                                        var x2_2 = (this.x - this.game.cameraX) * this.game.FIELD_SIZE + -shineImg.w / 2 * this.game.SCALE_FACTOR,
                                            y2_2 = (this.y - this.game.cameraY) * this.game.FIELD_SIZE + (8 - shineImg.h) * this.game.SCALE_FACTOR;
                                        this.game.ctx.globalAlpha = (.6 + .25 * Math.sin(.45 * exactTicks)) * shineAlpha, this.game.ctx.drawImage(_1.imgs.miscSheet, shineImg.x, shineImg.y, shineImg.w, shineImg.h, x2_2, y2_2, shineImg.w * this.game.SCALE_FACTOR, shineImg.h * this.game.SCALE_FACTOR)
                                    }
                                    this.game.ctx.globalAlpha = 1
                                }
                            }
                        }, Ammo
                    }();
                exports.Ammo = Ammo
            },
            5058: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.Beam = void 0;
                var _1 = __webpack_require__(2174),
                    Img_1 = __webpack_require__(360),
                    Sound_1 = __webpack_require__(3754),
                    Sprite_1 = __webpack_require__(9145),
                    Beam = function() {
                        function Beam(game, shooter, target, x, y, weapon) {
                            this.id = -1, this.muzzleFlashLightHasBeenCreated = !1, this.game = game, void 0 !== x && void 0 !== y && (this.x = x, this.y = y), this.shooter = shooter, this.target = target, void 0 !== (null == weapon ? void 0 : weapon.soundName) && Sound_1.Sound.playSound(weapon.soundName, this.shooter.x, this.shooter.y, weapon.volume ? weapon.volume : 1), this.weapon = weapon, this.tickOfCreation = game.ticksCounter, this.dieAt = game.ticksCounter + (weapon.lifetime || 999999), this.muzzleFlashDisplayTime = weapon.muzzleFlashDisplayTime ? game.ticksCounter + weapon.muzzleFlashDisplayTime : game.ticksCounter + 99999, this.fadeOutAt = weapon.fadeOutAt ? game.ticksCounter + weapon.fadeOutAt : null, game.addToObjectsToDraw(this)
                        }
                        return Beam.prototype.getYDrawingOffset = function() {
                            return this.shooter.y
                        }, Beam.prototype.update = function() {
                            return this.dieAt > this.game.ticksCounter
                        }, Beam.prototype.draw = function(exactTicks, x1, y1, x2, y2, percentageOfCurrentTickPassed) {
                            var c = this.game.ctx,
                                x = this.shooter.x0 + percentageOfCurrentTickPassed * (this.shooter.x - this.shooter.x0),
                                y = this.shooter.y0 + percentageOfCurrentTickPassed * (this.shooter.y - this.shooter.y0) - this.game.SHOT_HEIGHT;
                            this.originX && (x = this.originX, y = this.originY - this.game.SHOT_HEIGHT);
                            var xT = 0,
                                yT = 0;
                            if (this.target) {
                                var vecX_1 = x - (xT = this.target.x0 + percentageOfCurrentTickPassed * (this.target.x - this.target.x0)),
                                    vecY_1 = y - (yT = this.target.y0 + percentageOfCurrentTickPassed * (this.target.y - this.target.y0) - this.game.SHOT_HEIGHT),
                                    len_1 = Math.sqrt(vecX_1 * vecX_1 + vecY_1 * vecY_1);
                                xT += vecX_1 *= .4 / len_1, yT += vecY_1 *= .4 / len_1
                            } else null !== this.x && null !== this.y && (xT = this.x, yT = this.y - this.game.SHOT_HEIGHT);
                            var vecX = xT - x,
                                vecY = yT - y,
                                len = Math.sqrt(vecX * vecX + vecY * vecY);
                            if (x += vecX *= (this.weapon.beamRenderStartOffset || 1) / len, y += vecY *= (this.weapon.beamRenderStartOffset || 1) / len, this.fadeOutAt && this.fadeOutAt <= exactTicks && (c.globalAlpha = Math.max(this.dieAt - exactTicks, 0) / (this.dieAt - this.fadeOutAt)), this.weapon.beamColors && this.weapon.beamWidths)
                                for (var i = 2; i >= 0; i--) this.weapon.beamColors[i] && (c.strokeStyle = this.weapon.beamColors[i], c.lineWidth = this.weapon.beamWidths[i] * this.game.FIELD_SIZE * (.8 + this.game.ticksCounter % 1.2 * .2), c.beginPath(), c.moveTo((x - this.game.cameraX) * this.game.FIELD_SIZE, (y - this.game.cameraY) * this.game.FIELD_SIZE), c.lineTo((xT - this.game.cameraX) * this.game.FIELD_SIZE, (yT - this.game.cameraY) * this.game.FIELD_SIZE), c.lineCap = "round", c.stroke());
                            if (c.globalAlpha = 1, this.muzzleFlashDisplayTime > exactTicks && this.weapon.muzzleFlashParticle) {
                                var img = Img_1.imgCoords[this.weapon.muzzleFlashParticle];
                                for (i = 0; i < 15; i++) c.globalAlpha = .8 - 1.7 * (exactTicks + i) % 10 * .08, c.drawImage(_1.imgs.miscSheet, img.x, img.y, img.w, img.h, (x + Math.cos(2 * Math.PI * (i / 20)) * (1.7 * (exactTicks + i) % 10) * .066 - this.game.cameraX) * this.game.FIELD_SIZE, (y + Math.sin(2 * Math.PI * (i / 20)) * (3.9654 * (exactTicks + i) % 10) * .066 - this.game.cameraY) * this.game.FIELD_SIZE, img.w * this.game.SCALE_FACTOR * (2.2 - 1.7 * (exactTicks + i) % 10 * .1), img.h * this.game.SCALE_FACTOR * (2.2 - 1.7 * (exactTicks + i) % 10 * .1))
                            }
                            if (this.weapon.muzzleFlashLight && !this.muzzleFlashLightHasBeenCreated) {
                                if (this.muzzleFlashLightHasBeenCreated = !0, this.weapon.muzzleFlashLight && this.weapon.muzzleFlashLight2)
                                    for (i = 0; i < 5; i++) {
                                        var randomAngle = Math.random() * Math.PI * 2,
                                            randomSpeed = .09 * Math.random(),
                                            randomAngle2 = Math.random() * Math.PI * 2,
                                            randomDistance = .34 * Math.random();
                                        new Sprite_1.Sprite(this.game, {
                                            x: x + Math.cos(randomAngle2) * randomDistance,
                                            y: y + Math.sin(randomAngle2) * randomDistance,
                                            img: Img_1.imgCoords[this.weapon.muzzleFlashLight],
                                            scaleFunction: function(age) {
                                                return Math.max(0, 2 - .1 * age)
                                            },
                                            alphaFunction: function(age) {
                                                return Math.max(0, .5 - .025 * age)
                                            },
                                            age: 20 * (1.7 + Math.random()),
                                            r0: Math.cos(randomAngle),
                                            r1: Math.sin(randomAngle),
                                            r2: randomSpeed,
                                            xFunction: function(age) {
                                                return age * this.r0 * this.r2
                                            },
                                            yFunction: function(age) {
                                                return age * this.r1 * this.r2
                                            }
                                        }), new Sprite_1.Sprite(this.game, {
                                            x: x + Math.cos(randomAngle2) * randomDistance,
                                            y: y + Math.sin(randomAngle2) * randomDistance,
                                            img: Img_1.imgCoords[this.weapon.muzzleFlashLight2],
                                            scaleFunction: function(age) {
                                                return Math.max(0, .7 * (2 - .1 * age))
                                            },
                                            alphaFunction: function(age) {
                                                return Math.max(0, .5 - .025 * age)
                                            },
                                            age: 20 * (1.7 + Math.random()),
                                            r0: Math.cos(randomAngle),
                                            r1: Math.sin(randomAngle),
                                            r2: randomSpeed,
                                            xFunction: function(age) {
                                                return age * this.r0 * this.r2
                                            },
                                            yFunction: function(age) {
                                                return age * this.r1 * this.r2
                                            }
                                        })
                                    }
                                if (this.weapon.hitLight1 && this.weapon.hitLight2)
                                    for (i = 0; i < 5; i++) {
                                        randomAngle = Math.random() * Math.PI * 2, randomSpeed = .09 * Math.random(), randomAngle2 = Math.random() * Math.PI * 2, randomDistance = .34 * Math.random();
                                        new Sprite_1.Sprite(this.game, {
                                            x: xT + Math.cos(randomAngle2) * randomDistance,
                                            y: yT + Math.sin(randomAngle2) * randomDistance,
                                            img: Img_1.imgCoords[this.weapon.hitLight1],
                                            scaleFunction: function(age) {
                                                return Math.max(0, 2 - .1 * age)
                                            },
                                            alphaFunction: function(age) {
                                                return Math.max(0, .5 - .025 * age)
                                            },
                                            age: 20 * (1.7 + Math.random()),
                                            r0: Math.cos(randomAngle),
                                            r1: Math.sin(randomAngle),
                                            r2: randomSpeed,
                                            xFunction: function(age) {
                                                return age * this.r0 * this.r2
                                            },
                                            yFunction: function(age) {
                                                return age * this.r1 * this.r2
                                            }
                                        }), new Sprite_1.Sprite(this.game, {
                                            x: xT + Math.cos(randomAngle2) * randomDistance,
                                            y: yT + Math.sin(randomAngle2) * randomDistance,
                                            img: Img_1.imgCoords[this.weapon.hitLight2],
                                            scaleFunction: function(age) {
                                                return Math.max(0, .7 * (2 - .1 * age))
                                            },
                                            alphaFunction: function(age) {
                                                return Math.max(0, .5 - .025 * age)
                                            },
                                            age: 20 * (1.7 + Math.random()),
                                            r0: Math.cos(randomAngle),
                                            r1: Math.sin(randomAngle),
                                            r2: randomSpeed,
                                            xFunction: function(age) {
                                                return age * this.r0 * this.r2
                                            },
                                            yFunction: function(age) {
                                                return age * this.r1 * this.r2
                                            }
                                        })
                                    }
                            }
                            c.globalAlpha = 1
                        }, Beam
                    }();
                exports.Beam = Beam
            },
            3513: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.Blood = void 0;
                var _1 = __webpack_require__(2174),
                    Img_1 = __webpack_require__(360),
                    Blood = function() {
                        function Blood(game, x, y, vecX, vecY, img, noStain, zFunc, noStain2, additionalDrawingOffset) {
                            this.scale = 1 + 1.5 * Math.random(), this.spread = .25, this.game = game, this.x = x, this.y = y, this.additionalDrawingOffset = additionalDrawingOffset || 0, this.z = 1;
                            var len = Math.sqrt(vecX * vecX + vecY * vecY);
                            vecX *= .2 / len, vecY *= .2 / len, this.vx = .2 * (1 * Math.random() - .5) - .6 * vecX, this.vy = .2 * (1 * Math.random() - .5) - .6 * vecY, this.tickOfBirth = game.ticksCounter, this.tickOfDeath = this.tickOfBirth + 67, this.hasBeenDrawn = !!noStain, this.img = img || Img_1.imgCoords.particleRed, this.zFunc = zFunc, vecX *= .2 / (len = Math.sqrt(vecX * vecX + vecY * vecY)), vecY *= .2 / len;
                            for (var totalLen = 1.5 + 2 * Math.random(), running = !0; running && !noStain2;) {
                                totalLen -= .2, x += vecX, y += vecY;
                                var path = game.getFieldPath(Math.floor(x), Math.floor(y));
                                if (path <= 5) {
                                    if (vecY < 0 && Math.floor(y) !== Math.floor(y -= vecY) && Math.floor(x) === Math.floor(x -= vecX))
                                        for (var img_1 = Img_1.imgCoords.particleRed, w = 2 + Math.floor(2 * Math.random()), x_ = 16 * (x + 12) - 1, canv = game.tilesCashes[Math.floor(y - 1)], y_ = canv.canvasses[0].height - 10 + 3 * Math.random(), _i = 0, _a = canv.canvasses; _i < _a.length; _i++) {
                                            (ctx = _a[_i].getContext("2d")).globalAlpha = .2, ctx.drawImage(_1.imgs.miscSheet, img_1.x, img_1.y, img_1.w, img_1.h, Math.round(x_), Math.round(y_), w, 1), ctx.globalAlpha = 1
                                        }
                                    running = !1
                                }
                                if (totalLen < 0) {
                                    if (10 === path)
                                        for (var img_2 = Img_1.imgCoords.particleRed, _b = 0, _c = game.groundCanvas; _b < _c.length; _b++) {
                                            var ctx;
                                            (ctx = _c[_b].getContext("2d")).globalAlpha = .2, ctx.drawImage(_1.imgs.miscSheet, img_2.x, img_2.y, img_2.w, img_2.h, 16 * (x - game.groundMinX), 16 * (y - game.groundMinY), 2, 2), ctx.globalAlpha = 1
                                        }
                                    running = !1
                                }
                            }
                            game.effects.push(this), game.addToObjectsToDraw(this)
                        }
                        return Blood.prototype.update = function() {
                            return this.tickOfDeath > this.game.ticksCounter && !this.hasBeenDrawn
                        }, Blood.prototype.getYDrawingOffset = function() {
                            return this.y + this.additionalDrawingOffset
                        }, Blood.prototype.draw = function(exactTicks, x1, y1, x2, y2) {
                            if (this.x + 3 >= x1 && this.y + 3 >= y1 && this.x - 3 <= x2 && this.y - 3 <= y2) {
                                var age = exactTicks - this.tickOfBirth - 3,
                                    z = 0,
                                    x = 0,
                                    y = 0;
                                if (age > Math.sqrt(1.2) / this.spread) {
                                    if (this.hasBeenDrawn) return;
                                    x = Math.sqrt(1.2) / this.spread * this.vx + this.x, y = Math.sqrt(1.2) / this.spread * this.vy + this.y;
                                    for (var _i = 0, _a = this.game.groundCanvas; _i < _a.length; _i++) {
                                        var ctx = _a[_i].getContext("2d");
                                        ctx.globalAlpha = .2, ctx.drawImage(_1.imgs.miscSheet, this.img.x, this.img.y, this.img.w, this.img.h, 16 * (x - this.game.groundMinX), 16 * (y - this.game.groundMinY), 2, 2), ctx.globalAlpha = 1
                                    }
                                    this.hasBeenDrawn = !0
                                } else z = this.zFunc ? this.zFunc(age) : 1.2 - Math.pow(.25 * age, 2), x = this.x + this.vx * age, y = this.y + this.vy * age, this.game.ctx.globalAlpha = .8;
                                var scale = this.game.SCALE_FACTOR * this.scale,
                                    drawX = this.game.g2rx(x) - this.img.w / 2 * scale,
                                    drawY = this.game.g2ry(y - .5 * z) - this.img.h / 2 * scale;
                                this.game.ctx.drawImage(_1.imgs.miscSheet, this.img.x, this.img.y, this.img.w, this.img.h, drawX, drawY, this.img.w * scale, this.img.h * scale), this.game.ctx.globalAlpha = 1
                            }
                        }, Blood
                    }();
                exports.Blood = Blood
            },
            4636: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.Bullet = void 0;
                var _1 = __webpack_require__(2174),
                    Img_1 = __webpack_require__(360),
                    Sound_1 = __webpack_require__(3754),
                    Bullet = function() {
                        function Bullet(game, x, y) {
                            this.z = 1, this.vx = .05 * (1 * Math.random() - .5), this.vy = .05 * (1 * Math.random() - .5), this.vx2 = .15 * (1 * Math.random() - .5), this.vy2 = .15 * (1 * Math.random() - .5), this.spread = .15, this.lastPhase = 1, this.rand = Math.floor(100 * Math.random()), this.game = game, this.x = x, this.y = y, game.effects.push(this), game.addToObjectsToDraw(this)
                        }
                        return Bullet.prototype.update = function() {
                            return this.tickOfDeath > this.game.ticksCounter
                        }, Bullet.prototype.getYDrawingOffset = function() {
                            return this.y
                        }, Bullet.prototype.draw = function(exactTicks, x1, y1, x2, y2) {
                            if (this.x + 3 >= x1 && this.y + 3 >= y1 && this.x - 3 <= x2 && this.y - 3 <= y2) {
                                var age = exactTicks - this.tickOfBirth - 7,
                                    z = 0,
                                    x = 0,
                                    y = 0,
                                    img = Img_1.imgCoords["bullet" + ((99999999 + this.rand + Math.floor(exactTicks)) % 4 + 1)];
                                age > Math.sqrt(1.2) / this.spread + 2 * Math.sqrt(.3) / this.spread ? (z = 0, (img = Img_1.imgCoords["bullet" + (this.rand % 4 + 1)]) === Img_1.imgCoords.bullet3 && (img = Img_1.imgCoords.bullet1), x = Math.sqrt(1.2) / this.spread * this.vx + this.x + this.vx2 * (2 * Math.sqrt(.3) / this.spread), y = Math.sqrt(1.2) / this.spread * this.vy + this.y + this.vy2 * (2 * Math.sqrt(.3) / this.spread), 2 === this.lastPhase && (this.lastPhase = 3, Sound_1.Sound.playSound("cartridge2", x, y, .3))) : age > Math.sqrt(1.2) / this.spread ? (img = Img_1.imgCoords["bullet" + ((99999999 + this.rand - Math.floor(exactTicks)) % 4 + 1)], z = .3 - Math.pow(this.spread * (age - Math.sqrt(1.2) / this.spread - Math.sqrt(.3) / this.spread), 2), x = Math.sqrt(1.2) / this.spread * this.vx + this.x + this.vx2 * (age - Math.sqrt(1.2) / this.spread), y = Math.sqrt(1.2) / this.spread * this.vy + this.y + this.vy2 * (age - Math.sqrt(1.2) / this.spread), 1 === this.lastPhase && (this.lastPhase = 2, Sound_1.Sound.playSound("cartridge1", x, y, .1))) : (z = 1.2 - Math.pow(this.spread * age, 2), x = this.x + this.vx * age, y = this.y + this.vy * age);
                                var scale = this.game.SCALE_FACTOR,
                                    drawX = this.game.g2rx(x) - img.w / 2 * scale,
                                    drawY = this.game.g2ry(y - z) - img.h / 2 * scale;
                                this.game.ctx.globalAlpha = age > 35 ? Math.max((55 - age) / 20, 0) : 1, this.game.ctx.drawImage(_1.imgs.miscSheet, img.x, img.y, img.w, img.h, drawX, drawY, img.w * scale, img.h * scale), this.game.ctx.globalAlpha = 1
                            }
                        }, Bullet
                    }();
                exports.Bullet = Bullet
            },
            6884: function(__unused_webpack_module, exports, __webpack_require__) {
                "use strict";
                var extendStatics, __extends = this && this.__extends || (extendStatics = function(d, b) {
                    return extendStatics = Object.setPrototypeOf || {
                        __proto__: []
                    }
                    instanceof Array && function(d, b) {
                        d.__proto__ = b
                    } || function(d, b) {
                        for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p])
                    }, extendStatics(d, b)
                }, function(d, b) {
                    if ("function" != typeof b && null !== b) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");

                    function __() {
                        this.constructor = d
                    }
                    extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __)
                });
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.Corpse = void 0;
                var _1 = __webpack_require__(2174),
                    Blood_1 = __webpack_require__(3513),
                    Humanoid_1 = __webpack_require__(5951),
                    Img_1 = __webpack_require__(360),
                    Corpse = function(_super) {
                        function Corpse(game, id, x, y, z, burned, direction, bouncePoints, scale) {
                            var _this = _super.call(this, game, id) || this;
                            return _this.spillBloodUntil = -99999, _this.bloodX = 0, _this.bloodY = 0, _this.isCorpse = !0, _this.x = x, _this.y = y, _this.z = z, _this.x0 = x, _this.y0 = y, _this.z0 = z, _this.x00 = x, _this.y00 = y, _this.z00 = z, _this.burned = burned, direction >= 1 && (direction = 1), _this.direction = direction, _this.bouncePoints = bouncePoints || [], _this.scale = scale || 1, game.addToObjectsToDraw(_this), _this
                        }
                        return __extends(Corpse, _super), Corpse.prototype.update = function() {
                            return this.updateBounce(), this.spillBloodUntil >= this.game.ticksCounter && this.updateBlood(), !0
                        }, Corpse.prototype.hpUpdate = function(hp, armor, splash, attacker) {
                            this.spillBlood(attacker)
                        }, Corpse.prototype.spillBlood = function(source) {
                            this.spillBloodUntil = this.game.ticksCounter + 5, this.bloodX = source.x - this.x, this.bloodY = source.y - this.y
                        }, Corpse.prototype.updateBlood = function() {
                            if (this.x + 3 >= this.game.cameraX && this.y + 3 >= this.game.cameraY && this.x - 3 <= this.game.cameraX2 && this.y - 3 <= this.game.cameraY2) {
                                var vecX = this.bloodX,
                                    vecY = this.bloodY,
                                    len = Math.sqrt(vecX * vecX + vecY * vecY);
                                vecX *= .015 / len, vecY *= .015 / len, new Blood_1.Blood(this.game, this.x + vecX, this.y + vecY, -vecX, -vecY, void 0, !1, (function(age) {
                                    return .8 - Math.pow(.05 * age - .5, 2)
                                }), !0, .4), new Blood_1.Blood(this.game, this.x + vecX, this.y + vecY, -vecX + Math.random() - .5, -vecY + Math.random() - .5, void 0, !0, (function(age) {
                                    return .5 - Math.pow(.05 * age - .5, 2)
                                }), !0, .4), new Blood_1.Blood(this.game, this.x + vecX, this.y + vecY, -vecX, -vecY, Img_1.imgCoords.particleWhite, !0, (function(age) {
                                    return .8 - Math.pow(.05 * age - .5, 2)
                                }), !0, .4)
                            }
                        }, Corpse.prototype.draw = function(exactTicks, x1, y1, x2, y2, percentageOfCurrentTickPassed) {
                            if (this.x + 3 >= x1 && this.y + 3 >= y1 && this.x - 3 <= x2 && this.y - 3 <= y2) {
                                var scale = 1.4 * this.game.SCALE_FACTOR * this.scale,
                                    x = (this.x0 + percentageOfCurrentTickPassed * (this.x - this.x0) - this.game.cameraX) * this.game.FIELD_SIZE,
                                    y = (this.y0 + percentageOfCurrentTickPassed * (this.y - this.y0) - this.game.cameraY) * this.game.FIELD_SIZE,
                                    h = (this.z0 + percentageOfCurrentTickPassed * (this.z - this.z0)) * this.game.FIELD_SIZE,
                                    x_ = x - 16 * scale,
                                    y_ = y - 20 * scale,
                                    blackness = this.burned ? .9 : 0;
                                this.bouncePoints.length > 0 && (this.direction = this.x > this.x0 ? 0 : 1), this.game.ctx.drawImage(_1.imgs.shadow, x_, y_, 32 * scale, 32 * scale);
                                var yFrame = this.direction;
                                this.game.ctx.drawImage(_1.imgs.zombieDeath, 224, 32 * yFrame, 32, 32, x_, y_ - h, 32 * scale, 32 * scale), blackness && (this.game.ctx.globalAlpha = blackness, this.game.ctx.drawImage(_1.imgs.zombieDeathBlack, 224, 32 * yFrame, 32, 32, x_, y_ - h, 32 * scale, 32 * scale), this.game.ctx.globalAlpha = 1)
                            }
                        }, Corpse
                    }(Humanoid_1.Humanoid);
                exports.Corpse = Corpse
            },
            9800: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.CustomBuild = void 0;
                var pl_custombuild, Abilities_1 = __webpack_require__(6489),
                    GameTypes_1 = __webpack_require__(3963),
                    config_1 = __webpack_require__(5303),
                    Network_1 = __webpack_require__(367),
                    Skin_1 = __webpack_require__(192),
                    Sound_1 = __webpack_require__(3754),
                    lang_1 = __webpack_require__(9655),
                    _maxAlertVer = 0,
                    CustomBuild = function() {
                        function CustomBuild() {}
                        return CustomBuild.show = function() {
                            if (config_1.playerData) {
                                for (var i in pl_custombuild = this._copy(config_1.playerData.abilities)) pl_custombuild[i].id = parseInt(i);
                                var o = this.get();
                                this.refresh(), this.refreshCount(), o && (o.style.display = "block")
                            } else Network_1.Network.send("joinRandomGame$abc$" + GameTypes_1.MAP_TYPE.TOURNAMENT_UNRANKED)
                        }, CustomBuild.get = function(checkOnly) {
                            var o = document.getElementById("customBuild");
                            if (null === o) {
                                if (checkOnly) return null;
                                Abilities_1.abilities.map((function(a) {
                                    return a
                                })), o = this._create()
                            }
                            return o
                        }, CustomBuild.refresh = function() {
                            for (var _i = 0, pl_custombuild_1 = pl_custombuild; _i < pl_custombuild_1.length; _i++) {
                                var ab = pl_custombuild_1[_i];
                                ab.lvl && void 0 !== ab.id && this.selectAb(ab.id, !0)
                            }
                        }, CustomBuild._drawOperate = function(box) {
                            var preview = document.createElement("div");
                            preview.className = "preview";
                            var previewTitle = document.createElement("p");
                            previewTitle.className = "title", previewTitle.innerText = "abilities summary", preview.appendChild(previewTitle);
                            var previewAb = document.createElement("div");
                            previewAb.className = "ab", preview.appendChild(previewAb);
                            var reset = document.createElement("div");
                            reset.className = "F-Button large reset", reset.innerHTML = '<span class="label">' + lang_1.lang.get("game.btn.reset") + '</span><div class="hover"></div>', reset.onclick = this.reset, box.appendChild(preview);
                            var o = document.createElement("div");
                            o.className = "enter";
                            var save = document.createElement("div");
                            save.className = "F-Button large", save.innerHTML = '<span class="label">' + lang_1.lang.get("profile.btn_desc_save.label") + '</span><div class="hover"></div>', save.onclick = this.save, o.appendChild(reset), o.appendChild(save), box.appendChild(o)
                        }, CustomBuild.save = function() {
                            var pre = CustomBuild._copy(pl_custombuild);
                            pre.map((function(a) {
                                return delete a.id, a
                            }));
                            var json = JSON.stringify(pre);
                            json !== JSON.stringify(config_1.playerData.abilities) && (config_1.playerData.abilities = JSON.parse(json), Network_1.Network.send("abUpd$" + json)), Skin_1.Skin_.refreshAbilitiesButton(null), CustomBuild.close()
                        }, CustomBuild._copy = function(a) {
                            return JSON.parse(JSON.stringify(a))
                        }, CustomBuild._create = function() {
                            var _this = this,
                                box = document.createElement("div");
                            box.id = "customBuild", box.className = "F-Window";
                            var h2 = document.createElement("div");
                            h2.className = "title", h2.innerText = "BUILD", box.appendChild(h2);
                            var inBox = document.createElement("div");
                            inBox.className = "content";
                            var oCount = document.createElement("div");
                            oCount.className = "count", inBox.appendChild(oCount);
                            var oAlert = document.createElement("div");
                            oAlert.className = "alert", inBox.appendChild(oAlert), this._drawOperate(inBox), this._drawAbAll(inBox), box.appendChild(inBox);
                            var close = document.createElement("div");
                            close.className = "F-Button close", close.onclick = function() {
                                _this.close()
                            }, box.appendChild(close);
                            var divBG = document.createElement("div");
                            return divBG.className = "bg", box.appendChild(divBG), document.body.appendChild(box), box
                        }, CustomBuild._drawAb = function(ab) {
                            var _this = this;
                            if (ab.zombieOnly) return null;
                            var btn = document.createElement("div");
                            btn.className = "checkbox", btn.onclick = function() {
                                _this.selectAb(ab.id)
                            };
                            var name = document.createElement("p");
                            name.className = "name", name.innerText = ab.name;
                            var description = document.createElement("p");
                            description.className = "description", description.innerText = ab.description;
                            var icon = Skin_1.Skin_.tplCanvasAb(ab.id, 48),
                                row = document.createElement("div");
                            row.className = "ab-main ab_" + ab.id, row.appendChild(icon), row.appendChild(btn), row.appendChild(name), row.appendChild(description);
                            var sub = this._drawAbSub(ab.id);
                            return sub && row.appendChild(sub), row
                        }, CustomBuild._drawAbAll = function(box) {
                            var abList = document.createElement("div");
                            abList.className = "ab-list";
                            for (var _i = 0, _a = [!1, !0]; _i < _a.length; _i++) {
                                var isPassive = _a[_i];
                                if (isPassive)(row = document.createElement("div")).className = "passive-text", row.innerText = "Passive skill", abList.appendChild(row);
                                for (var _b = 0, abilities_1 = Abilities_1.abilities; _b < abilities_1.length; _b++) {
                                    var row, ab = abilities_1[_b];
                                    if (ab.type === Abilities_1.AbilityType.Passive === isPassive)(row = this._drawAb(ab)) && abList.appendChild(row)
                                }
                            }
                            box.appendChild(abList)
                        }, CustomBuild._drawAbSub = function(id) {
                            var ab = Abilities_1.abilities[id];
                            if (ab.type !== Abilities_1.AbilityType.Passive && !ab.levelUpFields) return null;
                            var row = document.createElement("div");
                            if (row.className = "sub-tree", ab.type === Abilities_1.AbilityType.Passive)(p = document.createElement("p")).className = "have-" + pl_custombuild[id].lvl, this._appendModBtn(p, id, 0), this._appendMod(p, 10), row.appendChild(p);
                            else
                                for (var i = 0, j = ab.levelUpFields.length; i < j; i++) {
                                    var p = document.createElement("p"),
                                        lvl = 0;
                                    void 0 !== pl_custombuild[id] && pl_custombuild[id].attributes.length > 0 && (lvl = pl_custombuild[id].attributes[i]), p.className = "have-" + lvl, p.innerText = ab.levelUpFieldsName[i], this._appendModBtn(p, id, i), this._appendMod(p, ab.levelUpMaxLvl[i]), row.appendChild(p)
                                }
                            return row
                        }, CustomBuild._setSubTreeClass = function(id, sub, o) {
                            var ab = Abilities_1.abilities[id];
                            if (!o) {
                                var box = this.get();
                                if (!box) return;
                                ab.type === Abilities_1.AbilityType.Passive && (sub = 0), o = box.querySelector(".ab_" + id + " .sub-tree p:nth-of-type(" + (sub + 1) + ")")
                            }
                            var lvl = 0,
                                max = 10,
                                pl = pl_custombuild[id];
                            ab.type === Abilities_1.AbilityType.Passive ? lvl = pl.lvl : (lvl = pl.attributes.length ? pl.attributes[sub] : 0, max = ab.levelUpMaxLvl[sub]);
                            var className = "have-" + lvl;
                            0 === lvl ? className += " min" : lvl === max && (className += " max"), o.className = className
                        }, CustomBuild._appendMod = function(box, j) {
                            for (var div = document.createElement("div"), i = 0; i < j; i++) {
                                var o = document.createElement("i");
                                div.appendChild(o)
                            }
                            return box.appendChild(div), box
                        }, CustomBuild._appendModBtn = function(box, ab, sub) {
                            var _this = this,
                                subBtn = document.createElement("div");
                            subBtn.className = "sub", subBtn.onclick = function() {
                                _this.click(ab, sub, !1)
                            }, box.appendChild(subBtn);
                            var addBtn = document.createElement("div");
                            return addBtn.className = "add", addBtn.onclick = function() {
                                _this.click(ab, sub, !0)
                            }, box.appendChild(addBtn), box
                        }, CustomBuild.click = function(id, sub, isAdd) {
                            if (Sound_1.Sound.playSound("click"), isAdd && this.isMaxAb()) this.alert();
                            else {
                                var o = this.get(),
                                    add = isAdd ? 1 : -1,
                                    ab = Abilities_1.abilities[id],
                                    pl = pl_custombuild[id];
                                if (ab.type === Abilities_1.AbilityType.Passive)(isAdd && pl.lvl < 10 || !isAdd && pl.lvl > 0) && (pl.lvl += add, o.querySelector(".ab_" + id + " .sub-tree p").className = "have-" + pl.lvl, pl.lvl < 1 && (pl.lvl = 1, this.selectAb(id)));
                                else if (ab.levelUpFieldsName && ab.levelUpFieldsName.length) {
                                    var att = pl.attributes;
                                    !att.length && ab.levelUpFields && (att = ab.levelUpFields.map((function() {
                                        return 0
                                    })), pl.attributes = att);
                                    var lvl = att[sub];
                                    (isAdd && lvl < ab.levelUpMaxLvl[sub] || !isAdd && lvl > 0) && (lvl += add), att[sub] = lvl, o.querySelector(".ab_" + id + " .sub-tree p:nth-of-type(" + (sub + 1) + ")").className = "have-" + lvl
                                }
                                this.refreshCount()
                            }
                        }, CustomBuild.calcAb = function() {
                            var i = 0;
                            return pl_custombuild.map((function(a) {
                                i += a.lvl, a.attributes && a.attributes.length && (i += a.attributes.reduce((function(m, n) {
                                    return m + n
                                })))
                            })), i
                        }, CustomBuild.calcActiveAb = function() {
                            var i = 0;
                            return pl_custombuild.map((function(a) {
                                Abilities_1.abilities[a.id].type !== Abilities_1.AbilityType.Passive && a.lvl && i++
                            })), i
                        }, CustomBuild.refreshCount = function() {
                            var main = document.getElementById("customBuild"),
                                o = main.querySelector(".count");
                            o && (o.innerText = "Abilities points: " + this.calcAb() + " / 12", o = main.querySelector(".preview .ab"), Skin_1.Skin_.abilitiesThumbnail(o, pl_custombuild, 42))
                        }, CustomBuild.isMaxAb = function() {
                            return this.calcAb() >= 12
                        }, CustomBuild.reset = function() {
                            pl_custombuild.map((function(a) {
                                return a.lvl = 0, a.attributes = [], a
                            }));
                            var o = CustomBuild.get(!0);
                            o && (o.querySelectorAll(".ab-main").forEach((function(el) {
                                el.className = el.className.replace(/ select/g, "")
                            })), CustomBuild.refreshCount())
                        }, CustomBuild.selectAb = function(i, showOnly) {
                            var o = this.get(!0);
                            if (o) {
                                showOnly || Sound_1.Sound.playSound("click");
                                var pl = pl_custombuild[i];
                                pl || (pl_custombuild[i] = {
                                    lvl: 0,
                                    id: i
                                }, pl = pl_custombuild[i]);
                                var isSelect = pl && pl.lvl > 0,
                                    ab = Abilities_1.abilities[i];
                                if (!showOnly) {
                                    if (isSelect = !isSelect) {
                                        if (this.isMaxAb()) return void this.alert();
                                        if (ab.type !== Abilities_1.AbilityType.Passive && this.calcActiveAb() >= 2) return void this.alert("2active")
                                    }
                                    pl.attributes = [], pl.lvl = isSelect ? 1 : 0
                                }
                                var div = o.querySelector("div.ab_" + i),
                                    className = div.className;
                                isSelect ? className += " select" : className = className.replace(/ select/g, ""), div.className = className, isSelect && !showOnly && (className = "have-0", isSelect && ab.type === Abilities_1.AbilityType.Passive && (className = "have-1"), div.querySelectorAll(".sub-tree p").forEach((function(el) {
                                    el.className = className
                                }))), this.refreshCount()
                            }
                        }, CustomBuild.alert = function(t) {
                            var o = document.body.querySelector("#customBuild .alert");
                            if (o) {
                                var ver = ++_maxAlertVer;
                                o.className = "alert alertActive", o.innerText = "2active" === t ? lang_1.lang.get("abilities.warn.exceed") : "You can spend a maximum of 12 skill points", window.setTimeout((function() {
                                    ver === _maxAlertVer && (o.className = "alert", window.setTimeout((function() {
                                        ver === _maxAlertVer && (o.innerText = "")
                                    }), 3e3))
                                }), 500)
                            }
                        }, CustomBuild.close = function() {
                            var o = this.get(!0);
                            o && (o.style.display = "none")
                        }, CustomBuild
                    }();
                exports.CustomBuild = CustomBuild
            },
            5560: (__unused_webpack_module, exports) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.Dom = void 0, exports.Dom = {
                    createElement: function(type, parent, id, className, caption, onclick) {
                        var el = document.createElement(type);
                        return parent.appendChild(el), void 0 !== id && (el.id = id), void 0 !== className && (el.className = className), void 0 !== caption && (el.innerHTML = caption), void 0 !== onclick && (el.onclick = onclick), el
                    }
                }
            },
            8986: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.Fairy = void 0;
                var _1 = __webpack_require__(2174),
                    Img_1 = __webpack_require__(360),
                    Fairy = function() {
                        function Fairy(game, x, y) {
                            this.z = .2 + .6 * Math.random(), this.vx = .005 * Math.random() - .0025, this.vy = .005 * Math.random() - .0025, this.game = game, this.x = x, this.y = y, this.x0 = x, this.y0 = y, this.tickOfDeath = game.ticksCounter + 450 + Math.floor(120 * Math.random())
                        }
                        return Fairy.prototype.update = function(ticksCounter) {
                            return this.vx += 5e-4 * Math.random() - 25e-5, this.vy += 5e-4 * Math.random() - 25e-5, this.tickOfDeath > ticksCounter
                        }, Fairy.prototype.draw = function(exactTicks, x1, y1) {
                            this.game.ticksCounter >= 0 && (this.x += this.vx, this.y += this.vy);
                            var fac = 1 / (1 - this.z),
                                x = x1 + (this.x - x1) * fac,
                                y = y1 + (this.y - y1) * fac;
                            if (x + 3 >= this.game.cameraX && y + 3 >= this.game.cameraY && x - 3 <= this.game.cameraX2 && y - 3 <= this.game.cameraY2) {
                                var time2Live = Math.max(this.tickOfDeath - exactTicks, 0),
                                    globalAlpha = Math.min(time2Live / 20, 1),
                                    scale = this.game.SCALE_FACTOR * this.z * 3,
                                    img = Img_1.imgCoords.particleWhite,
                                    drawX = this.game.g2rx(x) - img.w / 2 * scale,
                                    drawY = this.game.g2ry(y - 0 * this.z) - img.h / 2 * scale;
                                this.game.ctx.globalAlpha = .2 * globalAlpha, this.game.ctx.drawImage(_1.imgs.miscSheet, img.x, img.y, img.w, img.h, drawX, drawY, img.w * scale, img.h * scale), scale = this.game.SCALE_FACTOR * this.z * 3, img = Img_1.imgCoords.light_light_yellow, drawX = this.game.g2rx(x) - img.w / 2 * scale, drawY = this.game.g2ry(y - 0 * this.z) - img.h / 2 * scale, this.game.ctx.globalAlpha = (.05 * Math.random() + .1) * globalAlpha, this.game.ctx.drawImage(_1.imgs.miscSheet, img.x, img.y, img.w, img.h, drawX, drawY, img.w * scale, img.h * scale), this.game.ctx.globalAlpha = 1
                            }
                        }, Fairy
                    }();
                exports.Fairy = Fairy
            },
            2887: (__unused_webpack_module, exports) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.Field = void 0;
                var Field = function() {
                    function Field(x, y) {
                        this.x = x, this.y = y
                    }
                    return Field.prototype.distanceTo = function(otherField) {
                        return otherField ? Math.sqrt(Math.pow(this.x - otherField.x, 2) + Math.pow(this.y - otherField.y, 2)) : 999999
                    }, Field.prototype.isSameGrid = function(otherField) {
                        return this.x === otherField.x && this.y === otherField.y
                    }, Field.prototype.vectorTo = function(otherField) {
                        return new Field(otherField.x - this.x, otherField.y - this.y)
                    }, Field.prototype.normalize = function(factor) {
                        var len = Math.sqrt(this.x * this.x + this.y * this.y);
                        return 0 === len && (len = .001), this.x *= factor / len, this.y *= factor / len, this
                    }, Field.prototype.getLen = function() {
                        return Math.sqrt(this.x * this.x + this.y * this.y)
                    }, Field.prototype.add = function(otherField) {
                        return new Field(this.x + otherField.x, this.y + otherField.y)
                    }, Field.prototype.add3 = function(x, y) {
                        return new Field(this.x + x, this.y + y)
                    }, Field.prototype.mul = function(x, y) {
                        return new Field(this.x * x, this.y * y)
                    }, Field.prototype.addNormalizedVector = function(otherField, len) {
                        var x = otherField.x - this.x,
                            y = otherField.y - this.y,
                            len2 = Math.sqrt(x * x + y * y);
                        return 0 === len2 && (len2 = .001), x *= len / len2, y *= len / len2, new Field(this.x + x, this.y + y)
                    }, Field.prototype.add2 = function(angle, len) {
                        return this.add(new Field(Math.cos(angle), Math.sin(angle)).normalize(len))
                    }, Field.prototype.getAngleTo = function(otherField) {
                        var returnValue = Math.atan((otherField.y - this.y) / (otherField.x - this.x));
                        return returnValue -= otherField.x - this.x < 0 ? Math.PI : 0
                    }, Field.prototype.equals = function(otherField) {
                        return this.x === otherField.x && this.y === otherField.y
                    }, Field.prototype.toString = function() {
                        return this.x + ":" + this.y
                    }, Field
                }();
                exports.Field = Field
            },
            6365: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.Flare = void 0;
                var _1 = __webpack_require__(2174),
                    Img_1 = __webpack_require__(360),
                    Flare = function() {
                        function Flare(game, x, y, z) {
                            this.vx = 0, this.vz = .015, this.game = game, this.x = x, this.y = y, this.z = z, this.tickOfBirth = game.ticksCounter, this.tickOfDeath = this.tickOfBirth + 40 + 40 * Math.random(), game.effects.push(this), game.addToObjectsToDraw(this)
                        }
                        return Flare.prototype.update = function() {
                            return this.vx += .004 * Math.random() - .002, this.vz += .004 * Math.random() - .002, this.tickOfDeath > this.game.ticksCounter
                        }, Flare.prototype.getYDrawingOffset = function() {
                            return this.y
                        }, Flare.prototype.draw = function(exactTicks, x1, y1, x2, y2) {
                            if (this.x + 3 >= x1 && this.y + 3 >= y1 && this.x - 3 <= x2 && this.y - 3 <= y2) {
                                this.game.ticksCounter >= 0 && (this.x += this.vx, this.z += this.vz);
                                var time2Live = Math.max(this.tickOfDeath - exactTicks, 0),
                                    globalAlpha = Math.min(time2Live / 20, 1),
                                    img = Img_1.imgCoords.particleYellow,
                                    drawX = this.game.g2rx(this.x) - img.w / 2 * this.game.SCALE_FACTOR,
                                    drawY = this.game.g2ry(this.y - .8 * this.z) - img.h / 2 * this.game.SCALE_FACTOR;
                                this.game.ctx.globalAlpha = (.2 * Math.random() + .8) * globalAlpha, this.game.ctx.drawImage(_1.imgs.miscSheet, img.x, img.y, img.w, img.h, drawX, drawY, img.w * this.game.SCALE_FACTOR, img.h * this.game.SCALE_FACTOR);
                                var scale = this.game.SCALE_FACTOR * (.2 * Math.random() + .9);
                                img = Img_1.imgCoords.light_yellow, drawX = this.game.g2rx(this.x) - img.w / 2 * scale, drawY = this.game.g2ry(this.y - .8 * this.z) - img.h / 2 * scale, this.game.ctx.globalAlpha = (.1 * Math.random() + .25) * globalAlpha, this.game.ctx.drawImage(_1.imgs.miscSheet, img.x, img.y, img.w, img.h, drawX, drawY, img.w * scale, img.h * scale), this.game.ctx.globalAlpha = 1
                            }
                        }, Flare
                    }();
                exports.Flare = Flare
            },
            9936: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.FloatingText = void 0;
                var _1 = __webpack_require__(2174),
                    functions_1 = __webpack_require__(7582),
                    FloatingText = function() {
                        function FloatingText(game, text, x, y, lifetime, speed, color, size, img) {
                            this.timeOfBirth = Date.now(), this.game = game, this.text = text, this.color = color || "red", this.size = size || .3 * game.FIELD_SIZE, this.img = img, this.x = x, this.y = y, this.lifetime = lifetime || 2e3, this.speed = speed || 2
                        }
                        return FloatingText.prototype.update = function() {
                            return this.timeOfBirth + this.lifetime >= Date.now()
                        }, FloatingText.prototype.draw = function() {
                            var now = Date.now(),
                                x = (this.x - this.game.cameraX) * this.game.FIELD_SIZE,
                                y = (this.y - this.game.cameraY - (now - this.timeOfBirth) * this.speed / 1e3) * this.game.FIELD_SIZE;
                            this.img && (x += this.img.w / 2);
                            var time2Live = Math.max(this.timeOfBirth + this.lifetime - now, .001),
                                alpha = time2Live > 500 ? 1 : time2Live / 500;
                            if (this.timeOfBirth + 200 > now && (alpha = (now - this.timeOfBirth) / 200), (0, functions_1.drawText)(this.game.ctx, this.text, this.color, this.size, x, y, 250, "center", alpha), this.img) {
                                var scale = .9 * this.game.SCALE_FACTOR;
                                this.game.ctx.globalAlpha = alpha, this.game.ctx.drawImage(_1.imgs.miscSheet, this.img.x, this.img.y, this.img.w, this.img.h, x - this.game.ctx.measureText(this.text).width / 2 - (this.img.w + 2) * scale, y - this.img.h * scale * .8, this.img.w * scale, this.img.h * scale), this.game.ctx.globalAlpha = 1
                            }
                        }, FloatingText
                    }();
                exports.FloatingText = FloatingText
            },
            9158: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.Game = void 0;
                var _1 = __webpack_require__(2174),
                    Abilities_1 = __webpack_require__(6489),
                    Data_1 = __webpack_require__(6313),
                    Emotes_1 = __webpack_require__(4933),
                    functions_1 = __webpack_require__(8394),
                    GameTypes_1 = __webpack_require__(3963),
                    MapObject_1 = __webpack_require__(5583),
                    TileTypes_1 = __webpack_require__(9285),
                    Weapons_1 = __webpack_require__(2007),
                    Ammo_1 = __webpack_require__(6505),
                    Beam_1 = __webpack_require__(5058),
                    Bullet_1 = __webpack_require__(4636),
                    config_1 = __webpack_require__(5303),
                    Corpse_1 = __webpack_require__(6884),
                    CustomBuild_1 = __webpack_require__(9800),
                    Fairy_1 = __webpack_require__(8986),
                    Field_1 = __webpack_require__(2887),
                    Flare_1 = __webpack_require__(6365),
                    FloatingText_1 = __webpack_require__(9936),
                    functions_2 = __webpack_require__(7582),
                    Grenade_1 = __webpack_require__(3184),
                    Humanoid_1 = __webpack_require__(5951),
                    Img_1 = __webpack_require__(360),
                    Input_1 = __webpack_require__(5860),
                    Interface_1 = __webpack_require__(4504),
                    map1_1 = __webpack_require__(9620),
                    Minimap_1 = __webpack_require__(5678),
                    MovableObject_1 = __webpack_require__(1371),
                    Network_1 = __webpack_require__(367),
                    Object_1 = __webpack_require__(3646),
                    Player_1 = __webpack_require__(2245),
                    Projectile_1 = __webpack_require__(1200),
                    rankInGame_1 = __webpack_require__(6480),
                    root_1 = __webpack_require__(17),
                    Skin_1 = __webpack_require__(192),
                    Slpash_1 = __webpack_require__(6921),
                    Sound_1 = __webpack_require__(3754),
                    Sprite_1 = __webpack_require__(9145),
                    Tile_1 = __webpack_require__(7609),
                    UI_1 = __webpack_require__(2664),
                    bottomBar_1 = __webpack_require__(6133),
                    homeScreen_1 = __webpack_require__(1292),
                    resourceBar_1 = __webpack_require__(4542),
                    respawn_1 = __webpack_require__(6749),
                    result_1 = __webpack_require__(542),
                    viewHelpers_1 = __webpack_require__(7174),
                    lang_1 = __webpack_require__(9655),
                    Zombie_1 = __webpack_require__(4331),
                    _visionCanvas = document.createElement("canvas"),
                    _visionCanvasCtx = _visionCanvas.getContext("2d"),
                    Game = function() {
                        function Game(map) {
                            this.FIELD_SIZE = .06 * Math.sqrt(window.innerWidth * window.innerHeight), this.FIELD_SIZE_BASE = .06 * Math.sqrt(window.innerWidth * window.innerHeight), this.SCALE_FACTOR = .06 * Math.sqrt(window.innerWidth * window.innerHeight) / 16, this.SCALE_FACTOR_BASE = .06 * Math.sqrt(window.innerWidth * window.innerHeight) / 16, this.SHOT_HEIGHT = .39, this.SCALE_CONST = .06, this.SCALE_CONST_BASE = .06, this.timestamp = Date.now(), this.timeDiff = 0, this.show_fps = !1, this.timestampArchives = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], this.fps = 0, this.newTime = 0, this.lastFramesTick = 0, this.lastFramesExactTick = 0, this.tickDiff = 0, this.exactTickDiff = 0, this.tickTimes = [0, 0, 0, 0, 0], this.lastUpdate = 0, this.replayFile = [], this.playingReplay = [], this.playingReplayVersion = 0, this.pl_active_abilities = [], this.ticksCounter = 0, this.players = [], this.corpses = [], this.zombies = [], this.movableObjects = [], this.projectiles = [], this.grenades = [], this.objects = [], this.effects = [], this.floatingTexts = [], this.teleporters = [], this.cameraX = 0, this.cameraY = 0, this.cameraX2 = 0, this.cameraY2 = 0, this.redScreen = 0, this.lastEmptyClipSound = -9999, this.targetX = 0, this.targetY = 0, this.mouseDowned = !1, this.fire2Downed = !1, this.mouseDownSent = !1, this.fire2DownSent = !1, this.pingRandomizer = Math.floor(50 * Math.random()), this.playingPlayer = null, this.playingPlayerZombieKillStreak = 0, this.playingPlayerAbilities = config_1.playerData && config_1.playerData.authLevel >= 6 ? config_1.playerData.abilities : (0, Abilities_1.getDefaultAbilityObj)(Abilities_1.abilities), this.turnBoss = !1, this.objectsToDraw = [], this.playingPlayerIsZombie = !1, this.playingPlayerID = -1, this.playingPlayerAmmo = [], this.playingPlayerClips = [], this.lastTimeMousePosSent = -999, this.noShootUntil = -999, this.lastPickUp = -999, this.lastAbilityUses = [-9999, -9999, -9999], this.targetLockedPlayer = null, this.switchWeaponSound = null, this.playingPlayerEnergy = Data_1.CONST.START_ENERGY, this.playingPlayerCountActiveHeatseeking2Missiles = 0, this.flashedFrom = -9999, this.flashBonusFactor = 1, this.showEnemiesOnMinimapUntil = -999, this.tilesCashes = [], this.groundCanvas = [], this._percentageOfCurrentTickPassed = 0, this.canvas = document.getElementById("canvas"), this.ctx = document.getElementById("canvas").getContext("2d"), this.tiles = [], this.camFlyX = 0, this.camFlyY = 0, this.fairies = [], this.lastCursorStr = "", this.torches = [], this.whiteCircles = [], this.rumbleUntil = 0, this.rumblePower = 0, this.replayMode = !1, this.replayIndex = 1, this.redFlag = null, this.blueFlag = null, this.scoreTeam1 = 0, this.scoreTeam2 = 0, this.roundTime = 0, this.specPlayer = null, this.iAmSpec = !1, this.victoryMsg = "", this.fastForward = !1, this.updList = {
                                wC: 2,
                                bZ: 7,
                                trn: 2,
                                js: 3,
                                pa: 3,
                                cZ: 1,
                                rp: 5,
                                p2u: 3,
                                ts: 2,
                                rsh: 3,
                                o2u: 2,
                                nF: 3,
                                stu: 2,
                                aiu: 3,
                                hpU: 2,
                                blk: 4,
                                blP: 5,
                                tB: 1,
                                ptz: 1,
                                pptz: 1,
                                zph: 3,
                                blO: 5,
                                ab: 2,
                                ab2: 2,
                                luP: 1,
                                rl: 1,
                                rl2: 4,
                                att: 3,
                                abc: 3
                            }, this.walkways = [], this.pathingArray = [], this.shiftArray = [], this.bushArray = [], this.groundTiles = [], this.noGridTiles = [], this.nextMaps = {}, this.canvas = document.getElementById("canvas"), this.ctx = this.canvas.getContext("2d"), this.map = map, this.type = void 0 !== map.type && GameTypes_1.MAP_TYPE_SETTINGS[map.type] ? GameTypes_1.MAP_TYPE_SETTINGS[map.type] : GameTypes_1.MAP_TYPE_SETTINGS[GameTypes_1.MAP_TYPE.TOURNAMENT_UNRANKED], this.interface_ = new Interface_1.Interface_(this, map), this.groundMinX = 0, this.groundMaxX = this.map.x, this.groundMinY = 0, this.groundMaxY = this.map.y, this.initMap(map), this.createGroundCanvas(), this.generateTilesCanvasses();
                            for (var _i = 0, _a = this.tiles; _i < _a.length; _i++) {
                                (tile = _a[_i]).type.blockVision && this.createVisionTile(tile)
                            }
                            Input_1.Input.activeAbility = null;
                            for (var _b = 0, _c = this.tiles; _b < _c.length; _b++) {
                                var tile;
                                (tile = _c[_b]).type.isTorch && this.torches.push({
                                    x: tile.x,
                                    y: tile.y,
                                    nextEmit: -9999,
                                    offsetX: tile.type.flameOffsetX || 0,
                                    offsetY: tile.type.flameOffsetY || 0
                                })
                            }
                            this.createBlockArray(), this.spawningPoints = map.spawningPoints ? map.spawningPoints : [], this.spawningPointsRed = map.spawningPointsRed ? map.spawningPointsRed : [], this.spawningPointsBlue = map.spawningPointsBlue ? map.spawningPointsBlue : [], this.waypoints = map.waypoints ? map.waypoints : [], this.specX = map.x / 2 - window.innerWidth / 2 / this.FIELD_SIZE, this.specY = map.y / 2 - window.innerHeight / 2 / this.FIELD_SIZE, this.miniMap = new Minimap_1.Minimap(this), this.map === map1_1.map1 && this.miniMap.hide(), this.SCALE_CONST = .06, this.interface_.killAllMsgs(), Data_1.CONST.ENABLE_LIGHTMAP && (_visionCanvas.width = 4 * (map.x + 8), _visionCanvas.height = 4 * (map.y + 8)), respawn_1.respawn.hide(), functions_2.replaySettings.replayOptionsIndex = 3, functions_2.replaySettings.replayOption = functions_2.replayOptions[functions_2.replaySettings.replayOptionsIndex], this.setNextMaps({})
                        }
                        return Game.prototype.switchSpec = function(inc) {
                            if (Sound_1.Sound.playSound("switch", void 0, void 0, .7), 0 === this.players.length) this.specPlayer = null;
                            else if (this.specPlayer) {
                                for (var found = !1, i = 0; i < this.players.length; i++) this.players[i] === this.specPlayer && (i += inc, this.players[i] ? this.specPlayer = this.players[i] : this.specPlayer = null, i = this.players.length, found = !0);
                                found || (this.specPlayer = null)
                            } else this.specPlayer = inc > 0 ? this.players[0] : this.players[this.players.length - 1];
                            this.specPlayer ? this.interface_.setMainKillMsg(lang_1.lang.get("game.msg.spectate.follow", {
                                playerName: this.specPlayer.unsafeName
                            }), "#BEBEBE", "textInGrey") : this.interface_.setMainKillMsg(lang_1.lang.get("game.msg.spectate.free"), "#BEBEBE", "textInGrey")
                        }, Game.prototype.createPoundSmoke = function(x, y, size, count, alpha, startAngle, finishAngle) {
                            if (!this.fastForward) {
                                var step = count ? 4 * Math.PI / count : .5;
                                startAngle = null != startAngle ? startAngle : 0, finishAngle = null != finishAngle ? finishAngle : 2 * Math.PI;
                                for (var i = startAngle; i < finishAngle; i += Math.random() * step) new Sprite_1.Sprite(this, {
                                    x,
                                    y,
                                    img: Img_1.imgCoords.dust1,
                                    scaleFunction: function() {
                                        return this.r1
                                    },
                                    alphaFunction: function(age) {
                                        return .6 * Math.max(0, 1 - age / this.ticksToLive) * this.r5
                                    },
                                    age: 20 * (1.7 + Math.random()),
                                    r1: (5 * Math.random() + 2.5) * size,
                                    r2: Math.cos(i) * size,
                                    r3: Math.sin(i) * size,
                                    r4: size,
                                    r5: null != alpha ? alpha : 1,
                                    zFunction: function(age) {
                                        return 1
                                    },
                                    xFunction: function(age) {
                                        return (-1 / (age / 4 + .3) + this.r4 + 2) * this.r2
                                    },
                                    yFunction: function(age) {
                                        return (-1 / (age / 4 + .3) + this.r4 + 2) * this.r3
                                    }
                                })
                            }
                        }, Game.prototype.createExplosionGreen = function(x, y, size) {
                            if (!this.fastForward) {
                                Sound_1.Sound.playSound("crawler_impact", x, y, .8), this.addCircle(x, y, Img_1.imgCoords.whiteCircle);
                                var dist = Math.sqrt(Math.pow(x - (this.cameraX + window.innerWidth / this.FIELD_SIZE / 2), 2) + Math.pow(y - (this.cameraY + window.innerHeight / this.FIELD_SIZE / 2), 2)),
                                    screenSpan = (window.innerWidth / this.FIELD_SIZE / 2 + window.innerHeight / this.FIELD_SIZE / 2) / 2,
                                    power = dist > screenSpan ? 1 - .75 * (dist / screenSpan - 1) : 1;
                                if (power > 0) {
                                    var now = Date.now();
                                    this.rumbleUntil = now + 500, this.rumblePower = .05 * size * power, this.rumbleStart = now
                                }
                                for (var pos = new Field_1.Field(x, y), i = 0; i < .5 * config_1.graphics[config_1.options.graphicSettings].exposionParticles; i++) {
                                    var field = pos.add2(Math.random() * Math.PI * 2, Math.random());
                                    new Sprite_1.Sprite(this, {
                                        x: field.x,
                                        y: field.y,
                                        img: Img_1.imgCoords.particleGreen,
                                        scaleFunction: function() {
                                            return this.r0 * this.r4
                                        },
                                        age: 20 * (2.2 + Math.random()),
                                        r0: 2.5 * Math.random() + 2,
                                        r1: 2 * Math.random() + 1,
                                        r2: 4 * Math.random() - 2,
                                        r3: 4 * Math.random() - 2,
                                        r4: .5 * size,
                                        zFunction: function(age) {
                                            return 1.2 * this.r4 * Math.max(.3, Math.abs(Math.sin((age + this.r1) / 2)) / Math.max(1, .2 * age))
                                        },
                                        xFunction: function(age) {
                                            return (-1 / (Math.min(age, this.ticksToLive - 35) / 40 + .12) + 5) * this.r2 * this.r4
                                        },
                                        yFunction: function(age) {
                                            return (-1 / (Math.min(age, this.ticksToLive - 35) / 40 + .12) + 5) * this.r3 * this.r4
                                        }
                                    })
                                }
                                for (i = 0; i < 2 * Math.PI; i += 1 * Math.random()) {
                                    field = new Field_1.Field(x, y).add2(Math.random() * Math.PI * 2, .25 * Math.random() * size);
                                    new Sprite_1.Sprite(this, {
                                        x: field.x,
                                        y: field.y,
                                        img: Img_1.imgCoords["fireGreen" + (Math.floor(4 * Math.random()) + 1)],
                                        scaleFunction: function(age) {
                                            return (-2 * (1 / (age / 4 + .25) + age / 4 - 4) + this.r1) * this.r4
                                        },
                                        alphaFunction: function(age) {
                                            return .5 * Math.max(0, 1 - age / this.ticksToLive)
                                        },
                                        r1: 1 + 2 * Math.random(),
                                        r2: Math.cos(i) * Math.random(),
                                        r3: Math.sin(i) * Math.random(),
                                        r4: .5 * size,
                                        zFunction: function(age) {
                                            return .07 * age * this.r4
                                        },
                                        xFunction: function(age) {
                                            return (-1 / (age / 4 + .3) + 2) * this.r2 * this.r4
                                        },
                                        yFunction: function(age) {
                                            return (-1 / (age / 4 + .3) + 2) * this.r3 * this.r4
                                        }
                                    })
                                }
                                for (i = 0; i < 2 * Math.PI; i += .5 * Math.random()) new Sprite_1.Sprite(this, {
                                    x: pos.x,
                                    y: pos.y,
                                    img: Img_1.imgCoords.poisonFog1,
                                    scaleFunction: function() {
                                        return this.r1 * this.r4
                                    },
                                    alphaFunction: function(age) {
                                        return .6 * Math.max(0, 1 - age / this.ticksToLive)
                                    },
                                    age: 20 * (1.7 + Math.random()),
                                    r1: 5 * Math.random() + 1.5,
                                    r2: Math.cos(i),
                                    r3: Math.sin(i),
                                    r4: .13 * size,
                                    zFunction: function(age) {
                                        return .5
                                    },
                                    xFunction: function(age) {
                                        return (-1 / (age / 4 + .3) + 4) * this.r2 * this.r4
                                    },
                                    yFunction: function(age) {
                                        return (-1 / (age / 4 + .3) + 4) * this.r3 * this.r4
                                    }
                                });
                                new Sprite_1.Sprite(this, {
                                    x: pos.x,
                                    y: pos.y - .5,
                                    img: Img_1.imgCoords.light_green,
                                    scaleFunction: function(age) {
                                        return 2 * Math.max(.9 - age / this.ticksToLive, 0) * this.r4
                                    },
                                    alphaFunction: function(age) {
                                        return .5 * Math.max(0, 1 - age / this.ticksToLive)
                                    },
                                    age: 20 * (1.2 + .4 * Math.random()),
                                    r4: 2 * size
                                }), new Sprite_1.Sprite(this, {
                                    x: pos.x,
                                    y: pos.y - 1,
                                    img: Img_1.imgCoords.light_green,
                                    scaleFunction: function() {
                                        return 2 * this.r4
                                    },
                                    alphaFunction: function(age) {
                                        return .5 * Math.max(0, 1 - age / this.ticksToLive)
                                    },
                                    age: 20 * (.25 + .05 * Math.random()),
                                    r4: 3.5 * size
                                })
                            }
                        }, Game.prototype.createExplosion = function(x, y, size, sootAlpha, red) {
                            if (!this.fastForward) {
                                this.addCircle(x, y, Img_1.imgCoords.whiteCircle);
                                var dist = Math.sqrt(Math.pow(x - (this.cameraX + window.innerWidth / this.FIELD_SIZE / 2), 2) + Math.pow(y - (this.cameraY + window.innerHeight / this.FIELD_SIZE / 2), 2)),
                                    screenSpan = (window.innerWidth / this.FIELD_SIZE / 2 + window.innerHeight / this.FIELD_SIZE / 2) / 2,
                                    power = dist > screenSpan ? 1 - .75 * (dist / screenSpan - 1) : 1;
                                if (power > 0) {
                                    var now = Date.now();
                                    this.rumbleUntil = now + 1e3, this.rumblePower = .1 * size * power, this.rumbleStart = now
                                }
                                var pos = new Field_1.Field(x, y);
                                if (!red)
                                    for (var i = 0; i < config_1.graphics[config_1.options.graphicSettings].exposionParticles; i++) {
                                        var field = pos.add2(Math.random() * Math.PI * 2, Math.random());
                                        new Sprite_1.Sprite(this, {
                                            x: field.x,
                                            y: field.y,
                                            img: Img_1.imgCoords.particle,
                                            scaleFunction: function() {
                                                return this.r0 * this.r4
                                            },
                                            age: 20 * (2.2 + Math.random()),
                                            r0: 2.5 * Math.random() + 2,
                                            r1: 2 * Math.random() + 1,
                                            r2: 4 * Math.random() - 2,
                                            r3: 4 * Math.random() - 2,
                                            r4: .5 * size,
                                            zFunction: function(age) {
                                                return 1.2 * this.r4 * Math.max(.3, Math.abs(Math.sin((age + this.r1) / 2)) / Math.max(1, .2 * age))
                                            },
                                            xFunction: function(age) {
                                                return (-1 / (Math.min(age, this.ticksToLive - 35) / 40 + .12) + 5) * this.r2 * this.r4
                                            },
                                            yFunction: function(age) {
                                                return (-1 / (Math.min(age, this.ticksToLive - 35) / 40 + .12) + 5) * this.r3 * this.r4
                                            }
                                        })
                                    }
                                for (i = 0; i < 2 * Math.PI; i += 1 * Math.random()) {
                                    field = new Field_1.Field(x, y).add2(Math.random() * Math.PI * 2, .25 * Math.random() * size);
                                    new Sprite_1.Sprite(this, {
                                        x: field.x,
                                        y: field.y,
                                        img: Img_1.imgCoords["fire" + (Math.floor(4 * Math.random()) + 1) + (red ? "red" : "")],
                                        scaleFunction: function(age) {
                                            return (-2 * (1 / (age / 4 + .25) + age / 4 - 4) + this.r1) * this.r4
                                        },
                                        alphaFunction: function(age) {
                                            return .5 * Math.max(0, 1 - age / this.ticksToLive)
                                        },
                                        r1: 1 + 2 * Math.random(),
                                        r2: Math.cos(i) * Math.random(),
                                        r3: Math.sin(i) * Math.random(),
                                        r4: .5 * size,
                                        zFunction: function(age) {
                                            return .07 * age * this.r4
                                        },
                                        xFunction: function(age) {
                                            return (-1 / (age / 4 + .3) + 2) * this.r2 * this.r4
                                        },
                                        yFunction: function(age) {
                                            return (-1 / (age / 4 + .3) + 2) * this.r3 * this.r4
                                        }
                                    })
                                }
                                for (i = 0; i < 2 * Math.PI; i += .5 * Math.random()) new Sprite_1.Sprite(this, {
                                    x: pos.x,
                                    y: pos.y,
                                    img: Img_1.imgCoords["dust1" + (red ? "red" : "")],
                                    scaleFunction: function() {
                                        return this.r1 * this.r4
                                    },
                                    alphaFunction: function(age) {
                                        return .6 * Math.max(0, 1 - age / this.ticksToLive)
                                    },
                                    age: 20 * (1.7 + Math.random()),
                                    r1: 5 * Math.random() + 1.5,
                                    r2: Math.cos(i),
                                    r3: Math.sin(i),
                                    r4: .5 * size,
                                    zFunction: function(age) {
                                        return .5
                                    },
                                    xFunction: function(age) {
                                        return (-1 / (age / 4 + .3) + 4) * this.r2 * this.r4
                                    },
                                    yFunction: function(age) {
                                        return (-1 / (age / 4 + .3) + 4) * this.r3 * this.r4
                                    }
                                });
                                if (new Sprite_1.Sprite(this, {
                                        x: pos.x,
                                        y: pos.y - .5,
                                        img: red ? Img_1.imgCoords.light_red : Img_1.imgCoords.light_yellow,
                                        scaleFunction: function(age) {
                                            return 2 * Math.max(.9 - age / this.ticksToLive, 0) * this.r4
                                        },
                                        alphaFunction: function(age) {
                                            return .5 * Math.max(0, 1 - age / this.ticksToLive)
                                        },
                                        age: 20 * (1.2 + .4 * Math.random()),
                                        r4: 2 * size
                                    }), new Sprite_1.Sprite(this, {
                                        x: pos.x,
                                        y: pos.y - 1,
                                        img: Img_1.imgCoords.light_white,
                                        scaleFunction: function() {
                                            return 2 * this.r4
                                        },
                                        alphaFunction: function(age) {
                                            return .5 * Math.max(0, 1 - age / this.ticksToLive)
                                        },
                                        age: 20 * (.25 + .05 * Math.random()),
                                        r4: 3.5 * size
                                    }), this.pathingArray[Math.floor(x)] && 9 !== this.pathingArray[Math.floor(x)][Math.floor(y)])
                                    for (var _i = 0, _a = this.groundCanvas; _i < _a.length; _i++) {
                                        var ctx = _a[_i].getContext("2d");
                                        ctx.globalAlpha = sootAlpha || .65, ctx.drawImage(_1.imgs.miscSheet, Img_1.imgCoords.soot.x, Img_1.imgCoords.soot.y, Img_1.imgCoords.soot.w, Img_1.imgCoords.soot.h, x * this.FIELD_SIZE / this.SCALE_FACTOR - Img_1.imgCoords.soot.w / 2 - 16 * this.groundMinX, y * this.FIELD_SIZE / this.SCALE_FACTOR - Img_1.imgCoords.soot.h / 2 - 16 * this.groundMinY, Img_1.imgCoords.soot.w, Img_1.imgCoords.soot.h), ctx.globalAlpha = 1
                                    }
                            }
                        }, Game.prototype.createBlinkEffect = function(x, y) {
                            if (!this.fastForward) {
                                this.createPoundSmoke(x, y + .5, .5, 9, .4);
                                for (var i = 0; i < 10; i++) new Sprite_1.Sprite(this, {
                                    x: x + 1.4 * Math.random() - .7,
                                    y: y + 1.4 * Math.random() - .7 - .5,
                                    img: Img_1.imgCoords.whiteLine,
                                    scaleFunction: function() {
                                        return 2.5 * Math.random()
                                    },
                                    alphaFunction: function() {
                                        return .8 - .3 * Math.random()
                                    },
                                    age: 4 + 2 * Math.random(),
                                    r0: .05 * Math.random() - .025,
                                    r1: .05 * Math.random() - .025,
                                    zFunction: function(age) {
                                        return age * this.r0
                                    },
                                    xFunction: function(age) {
                                        return age * this.r1
                                    }
                                });
                                for (i = 0; i < 7; i++) new Sprite_1.Sprite(this, {
                                    x: x + 1.4 * Math.random() - .7,
                                    y: y + 1 * Math.random() - .5 - .5,
                                    r4: 1 * Math.random() + .3,
                                    img: Img_1.imgCoords.particleWhite,
                                    alphaFunction: function() {
                                        return this.ticksLeft > 10 ? .5 : .5 * this.ticksLeft / 10
                                    },
                                    age: 40 + 20 * Math.random(),
                                    scaleFunction: function() {
                                        return this.r3
                                    },
                                    r3: 1.2 + .6 * Math.random(),
                                    zFunction: function(age) {
                                        return Math.max(-Math.pow(.07 * age, 2), -this.r4)
                                    }
                                });
                                new Sprite_1.Sprite(this, {
                                    x,
                                    y: y - .5,
                                    img: Img_1.imgCoords.light_white,
                                    alphaFunction: function(age) {
                                        return age <= 6 ? .66 * Math.random() : Math.min(.2, .025 * this.ticksLeft) * (.3 * Math.random() + .85)
                                    },
                                    age: 40 + 20 * Math.random(),
                                    r3: 5,
                                    scaleFunction: function() {
                                        return this.r3
                                    }
                                })
                            }
                        }, Game.prototype.createBlinkEffectSmall = function(x, y) {
                            if (!this.fastForward) {
                                for (var i = 0; i < 7; i++) new Sprite_1.Sprite(this, {
                                    x: x + 1.4 * Math.random() - .7,
                                    y: y + 1.4 * Math.random() - .7 - .5,
                                    img: Img_1.imgCoords.whiteLine,
                                    scaleFunction: function() {
                                        return 2.5 * Math.random()
                                    },
                                    alphaFunction: function() {
                                        return .8 - .3 * Math.random()
                                    },
                                    age: 4 + 2 * Math.random(),
                                    r0: .05 * Math.random() - .025,
                                    r1: .05 * Math.random() - .025,
                                    zFunction: function(age) {
                                        return age * this.r0
                                    },
                                    xFunction: function(age) {
                                        return age * this.r1
                                    }
                                });
                                for (i = 0; i < 4; i++) new Sprite_1.Sprite(this, {
                                    x: x + 1.4 * Math.random() - .7,
                                    y: y + 1 * Math.random() - .5 - .5,
                                    r4: 1 * Math.random() + .3,
                                    img: Img_1.imgCoords.particleWhite,
                                    alphaFunction: function() {
                                        return this.ticksLeft > 10 ? .5 : .5 * this.ticksLeft / 10
                                    },
                                    age: 40 + 20 * Math.random(),
                                    scaleFunction: function() {
                                        return this.r3
                                    },
                                    r3: 1.2 + .6 * Math.random(),
                                    zFunction: function(age) {
                                        return Math.max(-Math.pow(.07 * age, 2), -this.r4)
                                    }
                                });
                                new Sprite_1.Sprite(this, {
                                    x,
                                    y: y - .5,
                                    img: Img_1.imgCoords.light_white,
                                    alphaFunction: function(age) {
                                        return age <= 6 ? .66 * Math.random() : Math.min(.2, .025 * this.ticksLeft) * (.3 * Math.random() + .85)
                                    },
                                    age: 12 + 7 * Math.random(),
                                    r4: 3.5,
                                    scaleFunction: function() {
                                        return this.r4
                                    }
                                })
                            }
                        }, Game.prototype.createBlinkEffectVerySmall = function(x, y) {
                            if (!this.fastForward) {
                                for (var i = 0; i < 4; i++) new Sprite_1.Sprite(this, {
                                    x: x + 1.4 * Math.random() - .7,
                                    y: y + 1.4 * Math.random() - .7 - .5,
                                    img: Img_1.imgCoords.whiteLine,
                                    scaleFunction: function() {
                                        return 2.5 * Math.random()
                                    },
                                    alphaFunction: function() {
                                        return .8 - .3 * Math.random()
                                    },
                                    age: 4 + 2 * Math.random(),
                                    r0: .05 * Math.random() - .025,
                                    r1: .05 * Math.random() - .025,
                                    zFunction: function(age) {
                                        return age * this.r0
                                    },
                                    xFunction: function(age) {
                                        return age * this.r1
                                    }
                                });
                                for (i = 0; i < 2; i++) new Sprite_1.Sprite(this, {
                                    x: x + 1.4 * Math.random() - .7,
                                    y: y + 1 * Math.random() - .5 - .5,
                                    r4: 1 * Math.random() + .3,
                                    img: Img_1.imgCoords.particleWhite,
                                    alphaFunction: function() {
                                        return this.ticksLeft > 10 ? .5 : .5 * this.ticksLeft / 10
                                    },
                                    age: 30 + 10 * Math.random(),
                                    scaleFunction: function() {
                                        return this.r3
                                    },
                                    r3: 1.2 + .6 * Math.random(),
                                    zFunction: function(age) {
                                        return Math.max(-Math.pow(.07 * age, 2), -this.r4)
                                    }
                                });
                                new Sprite_1.Sprite(this, {
                                    x,
                                    y: y - .5,
                                    img: Img_1.imgCoords.light_white,
                                    alphaFunction: function(age) {
                                        return age <= 6 ? .66 * Math.random() : Math.min(.2, .025 * this.ticksLeft) * (.3 * Math.random() + .85)
                                    },
                                    age: 8 + 4 * Math.random(),
                                    r4: 2.5,
                                    scaleFunction: function() {
                                        return this.r4
                                    }
                                })
                            }
                        }, Game.prototype.isIngameCommand = function(command) {
                            return ["upd", "nP", "nZ", "pid", "pL", "proD", "hp", "hpO", "pro", "nO", "proM", "grn", "rl2", "rsp", "rsh", "next-maps", "beam1", "beam2"].indexOf(command) >= 0 || command.indexOf("chat") >= 0
                        }, Game.prototype.mouseDown = function() {
                            this.mouseDowned = !0, this.playingPlayer && this.playingPlayer.isShootable() && this._mouseDown()
                        }, Game.prototype.fire2Down = function() {
                            this.fire2Downed = !0, this.playingPlayer && this.playingPlayer.isShootable() && this._fire2Down()
                        }, Game.prototype._mouseDown = function() {
                            this.targetX = (0, functions_2.getMouseGamePlayX)(), this.targetY = (0, functions_2.getMouseGamePlayY)(), Network_1.Network.send("md$" + this.targetX + "$" + this.targetY + (this.targetLockedPlayer ? "$" + this.targetLockedPlayer.id : "")), this.mouseDownSent = !0
                        }, Game.prototype._fire2Down = function() {
                            this.targetX = (0, functions_2.getMouseGamePlayX)(), this.targetY = (0, functions_2.getMouseGamePlayY)(), Network_1.Network.send("f2d$" + this.targetX + "$" + this.targetY + (this.targetLockedPlayer ? "$" + this.targetLockedPlayer.id : "")), this.fire2DownSent = !0
                        }, Game.prototype.mouseUp = function() {
                            this.mouseDowned = !1, this.mouseDownSent && (Network_1.Network.send("mu"), this.mouseDownSent = !1)
                        }, Game.prototype.fire2Up = function() {
                            this.fire2Downed = !1, this.fire2DownSent && (Network_1.Network.send("f2u"), this.fire2DownSent = !1)
                        }, Game.prototype.mouseUpdate = function() {
                            var x = (0, functions_2.getMouseGamePlayX)(),
                                y = (0, functions_2.getMouseGamePlayY)();
                            (Math.abs(this.targetX - x) > 1e-4 || Math.abs(this.targetY - y) > 1e-4) && (this.targetX = x, this.targetY = y, Network_1.Network.send("mp$" + x + "$" + y + (this.targetLockedPlayer ? "$" + this.targetLockedPlayer.id : ""))), this.lastTimeMousePosSent = Date.now()
                        }, Game.prototype.playerSortHandler = function(p1, p2) {
                            var key = this.type.winningCondition || "souls";
                            return p2[key] - p1[key] || p2.score - p1.score || p2.id - p1.id
                        }, Game.prototype.refreshUIs = function() {
                            if (this.type.team && this.type.souls) {
                                this.scoreTeam1 = 0, this.scoreTeam2 = 0;
                                for (var i = 0; i < this.players.length; i++) 1 === this.players[i].team ? this.scoreTeam1 += this.players[i].souls : 2 === this.players[i].team && (this.scoreTeam2 += this.players[i].souls);
                                rankInGame_1.rankInGame.refreshTeamScore()
                            }
                            var myRank = this.interface_.refreshTop3();
                            myRank > 0 && (this.myRank = myRank)
                        }, Game.prototype.createTile = function(o) {
                            var type = TileTypes_1.tileTypes[o.id];
                            return type || (type = TileTypes_1.tileTypes[0]), {
                                x: o.x,
                                y: o.y,
                                type
                            }
                        }, Game.prototype.createDefaultBorder = function() {
                            for (var default_ = [2, 3, 4, 5], x = -1; x <= this.map.x; x++) this.tiles.push(this.createTile({
                                x,
                                y: -1,
                                id: default_[Math.floor(Math.random() * default_.length)]
                            }));
                            default_ = [6, 7, 8, 9];
                            for (var y = 0; y <= this.map.y; y++) this.tiles.push(this.createTile({
                                x: -1,
                                y,
                                id: default_[Math.floor(Math.random() * default_.length)]
                            }));
                            default_ = [10, 11, 12, 13];
                            for (y = 0; y <= this.map.y; y++) this.tiles.push(this.createTile({
                                x: this.map.x,
                                y,
                                id: default_[Math.floor(Math.random() * default_.length)]
                            }));
                            default_ = [14, 15, 16, 17];
                            for (x = -1; x <= this.map.x; x++) this.tiles.push(this.createTile({
                                x,
                                y: this.map.y,
                                id: default_[Math.floor(Math.random() * default_.length)]
                            }))
                        }, Game.prototype.createBlockArray = function() {
                            var _a, _b, _c, _d;
                            this.walkways.length = 0, this.pathingArray.length = 0, this.shiftArray.length = 0, this.bushArray.length = 0;
                            for (var x = 0; x < this.map.x; x++) {
                                this.pathingArray[x] = [], this.shiftArray[x] = [], this.bushArray[x] = [];
                                for (var y = 0; y < this.map.y; y++) this.pathingArray[x][y] = 10, this.shiftArray[x][y] = [0, 0], this.bushArray[x][y] = !1
                            }
                            for (var _i = 0, _e = this.tiles; _i < _e.length; _i++) {
                                if ((type = (tile = _e[_i]).type) && !type.movable) {
                                    if (type.pathing < 10 && type.w && type.h)
                                        for (x = 0; x < type.w; x++)
                                            for (y = 0; y < type.h; y++) tile.x >= 0 && tile.x <= this.map.x && tile.y >= 0 && tile.y <= this.map.y && this.pathingArray[x + tile.x] && (this.pathingArray[x + tile.x][y + tile.y] = type.pathing);
                                    (type.shiftX || type.shiftY) && (type.shiftX && this.shiftArray[tile.x] && this.shiftArray[tile.x][tile.y] && (this.shiftArray[tile.x][tile.y][0] = type.shiftX), type.shiftY && this.shiftArray[tile.x] && this.shiftArray[tile.x][tile.y] && (this.shiftArray[tile.x][tile.y][1] = type.shiftY), this.walkways.push({
                                        x: tile.x,
                                        y: tile.y,
                                        shiftX: null !== (_a = tile.type.shiftX) && void 0 !== _a ? _a : 0,
                                        shiftY: null !== (_b = tile.type.shiftY) && void 0 !== _b ? _b : 0,
                                        type
                                    }))
                                }
                                type && type.blockVision && (this.bushArray[tile.x][tile.y] = !0)
                            }
                            for (var _f = 0, _g = this.groundTiles; _f < _g.length; _f++) {
                                var tile, type;
                                (type = (tile = _g[_f]).type) && (tile.x >= 0 && tile.x <= this.map.x && tile.y >= 0 && tile.y <= this.map.y && type.pathing && type.pathing < 10 && this.pathingArray[tile.x] && (this.pathingArray[tile.x][tile.y] = type.pathing), (type.shiftX || type.shiftY) && (type.shiftX && this.shiftArray[tile.x] && this.shiftArray[tile.x][tile.y] && (this.shiftArray[tile.x][tile.y][0] = type.shiftX), type.shiftY && this.shiftArray[tile.x] && this.shiftArray[tile.x][tile.y] && (this.shiftArray[tile.x][tile.y][1] = type.shiftY), this.walkways.push({
                                    x: tile.x,
                                    y: tile.y,
                                    shiftX: null !== (_c = tile.type.shiftX) && void 0 !== _c ? _c : 0,
                                    shiftY: null !== (_d = tile.type.shiftY) && void 0 !== _d ? _d : 0,
                                    type
                                })), type.isTeleporter && this.pathingArray[tile.x] && this.pathingArray[tile.x][tile.y] && (this.pathingArray[tile.x][tile.y] = 11))
                            }
                        }, Game.prototype.addCircle = function(x, y, img) {
                            this.whiteCircles.push({
                                x,
                                y,
                                time: this.ticksCounter,
                                img
                            })
                        }, Game.prototype.getFieldPath = function(x, y) {
                            return this.pathingArray[x] && this.pathingArray[x][y] ? this.pathingArray[x][y] : 0
                        }, Game.prototype.getHeight = function(x, y) {
                            var block = this.getFieldPath(x, y),
                                blockHeight = 0;
                            return block < 5 ? blockHeight = 9999 : 5 === block || 9 === block ? blockHeight = .6 : block < 10 && (blockHeight = .2), blockHeight
                        }, Game.prototype.getHeight2 = function(x, y) {
                            var block = this.getFieldPath(x, y),
                                blockHeight = 0;
                            return block < 5 ? blockHeight = 9999 : 5 === block ? blockHeight = .6 : 9 === block ? blockHeight = 0 : block < 10 && (blockHeight = .2), blockHeight
                        }, Game.prototype.getHeight3 = function(x, y) {
                            var block = this.getFieldPath(x, y),
                                blockHeight = 0;
                            return block < 5 ? blockHeight = 9999 : 5 === block ? blockHeight = .6 : 9 === block ? blockHeight = 9999 : block < 10 && (blockHeight = .2), blockHeight
                        }, Game.prototype.raytrace = function(fromX, fromY, toX, toY) {
                            var vecX = toX - fromX,
                                vecY = toY - fromY,
                                dist = Math.sqrt(Math.pow(toX - fromX, 2) + Math.pow(toY - fromY, 2)),
                                len = Math.sqrt(vecX * vecX + vecY * vecY);
                            for (fromX += 3 * (vecX *= .25 / len), fromY += 3 * (vecY *= .25 / len), dist -= .75; dist > .75;) {
                                if (this.getFieldPath(Math.floor(fromX), Math.floor(fromY)) <= 5) return !1;
                                fromX += vecX, fromY += vecY, dist -= .25
                            }
                            return !0
                        }, Game.prototype.reload2 = function(data) {
                            this.playingPlayerAmmo[data[1]] = parseInt(data[3]), this.playingPlayerClips[data[1]] = parseInt(data[2])
                        }, Game.prototype.generateTilesCanvasses = function() {
                            for (var _a, min = -1, max = this.map.y, _i = 0, _b = this.tiles; _i < _b.length; _i++) {
                                var tile = _b[_i];
                                if (!tile.type.ground && !tile.type.movable && !tile.type.blockVision) {
                                    var y_ = tile.y + (null !== (_a = tile.type.h) && void 0 !== _a ? _a : 0) - 1;
                                    min = Math.min(min, y_), max = Math.max(max, y_)
                                }
                            }
                            for (var y = min; y <= max; y++) this.refreshBlockingTilesCanvas(y)
                        }, Game.prototype.createVisionTile = function(tile) {
                            var obj = {
                                y_: tile.y,
                                y2_: tile.y + .5,
                                x_: tile.x,
                                x2_: tile.x + .5,
                                tile,
                                img: tile.type.img,
                                getYDrawingOffset: function() {
                                    return this.y_
                                },
                                draw: function(exactTicks, x1, y1, x2, y2) {
                                    y1 < this.y_ + 2 && y2 > this.y_ - 3 && x1 < this.x_ + 2 && x2 > this.x_ - 2 && (this.game.ctx.globalAlpha = this.game.playingPlayer && this.game.bushArray[Math.floor(this.game.playingPlayer.x)] && this.game.bushArray[Math.floor(this.game.playingPlayer.x)][Math.floor(this.game.playingPlayer.y)] && Math.sqrt(Math.pow(this.x2_ - this.game.playingPlayer.x, 2) + Math.pow(this.y2_ - this.game.playingPlayer.y, 2)) <= Data_1.CONST.BUSH_VISION_RANGE ? .4 : 1, this.game.ctx.drawImage(_1.imgs.tileSheet, this.img.x, this.img.y, this.img.w, this.img.h, (this.x_ - x1) * this.game.FIELD_SIZE, (this.y_ - y1 + 1) * this.game.FIELD_SIZE - this.img.h * this.game.SCALE_FACTOR, this.img.w * this.game.SCALE_FACTOR, this.img.h * this.game.SCALE_FACTOR), this.game.ctx.globalAlpha = 1)
                                },
                                game: this
                            };
                            this.addToObjectsToDraw(obj)
                        }, Game.prototype.refreshBlockingTilesCanvas = function(y) {
                            for (var _a, _b, tiles = [], maxHeight = 1, frames = 1, _i = 0, _c = this.tiles; _i < _c.length; _i++) {
                                if (!(tile = _c[_i]).type.ground && !tile.type.movable && !tile.type.blockVision) {
                                    var tileType = tile.type;
                                    tile.y + (null !== (_a = tileType.h) && void 0 !== _a ? _a : 0) - 1 === y && (tiles.push(tile), maxHeight = Math.max(maxHeight, tileType.img.h), tileType.img2 && (frames = 2))
                                }
                            }
                            tiles.sort((function(a, b) {
                                return a.x - b.x
                            })), this.tilesCashes[y] && (0, functions_1.deleteFromArray)(this.objectsToDraw, this.tilesCashes[y]);
                            var obj = {
                                y_: y,
                                getYDrawingOffset: function() {
                                    return this.y_
                                },
                                draw: function(exactTicks, x1, y1, x2, y2) {
                                    var canv = this.canvasses[Math.floor(exactTicks / 10) % this.canvasses.length];
                                    y1 < this.y_ + 2 && y2 > this.y_ - 3 && canv.height > 1 && this.game.ctx.drawImage(canv, -(x1 + 12) * this.game.FIELD_SIZE, (this.y_ + 1 - y1 + .25) * this.game.FIELD_SIZE - canv.height * this.game.SCALE_FACTOR, canv.width * this.game.SCALE_FACTOR, canv.height * this.game.SCALE_FACTOR)
                                },
                                canvasses: [],
                                game: this
                            };
                            this.tilesCashes[y] = obj, this.addToObjectsToDraw(obj);
                            for (var k = 1; k <= frames; k++) {
                                var canvas = document.createElement("canvas"),
                                    ctx = canvas.getContext("2d");
                                canvas.width = 16 * (this.map.x + 24), canvas.height = maxHeight;
                                for (var i = 0; i < tiles.length; i++) {
                                    var tile, img = "img" + k in (tileType = (tile = tiles[i]).type) ? tileType["img" + k] : tileType.img,
                                        x_ = Math.floor(16 * (tile.x + 12) + (16 * (null !== (_b = tileType.w) && void 0 !== _b ? _b : 0) - img.w) / 2),
                                        y_ = Math.floor(maxHeight - img.h);
                                    ctx.drawImage(_1.imgs.tileSheet, img.x, img.y, img.w, img.h, x_, y_, img.w, img.h)
                                }
                                obj.canvasses.push(canvas)
                            }
                        }, Game.prototype.addToObjectsToDraw = function(o) {
                            this.objectsToDraw.push(o)
                        }, Game.prototype.createGroundCanvas = function() {
                            var _a, _b, frames = 1;
                            this.groundMinX = -16, this.groundMaxX = this.map.x + 16, this.groundMinY = -10, this.groundMaxY = this.map.y + 10;
                            for (var _i = 0, _c = this.groundTiles; _i < _c.length; _i++) {
                                (tile = _c[_i]).type.img2 && (frames = 2)
                            }
                            this.groundCanvas.length = 0;
                            for (var k = 1; k <= frames; k++) {
                                var canv = document.createElement("canvas"),
                                    ctx = canv.getContext("2d");
                                if (this.groundCanvas.push(canv), canv.width = 16 * (this.groundMaxX - this.groundMinX), canv.height = 16 * (this.groundMaxY - this.groundMinY), TileTypes_1.tileTypes[this.map.defaultTiles])
                                    for (var x = 0; x < 16 * this.map.x; x += 16)
                                        for (var y = 0; y < 16 * this.map.y; y += 16) {
                                            var tile = TileTypes_1.tileTypes[this.map.defaultTiles];
                                            ctx.drawImage(_1.imgs.tileSheet, tile.img.x, tile.img.y, tile.img.w, tile.img.h, x - 16 * this.groundMinX, y - 16 * this.groundMinY, 16, 16)
                                        }
                                if (void 0 !== this.map.defaultTilesOutter && TileTypes_1.tileTypes[this.map.defaultTilesOutter])
                                    for (x = 0; x < canv.width; x += 16)
                                        for (y = 0; y < canv.height; y += 16)
                                            if (x < -this.groundMinX || x > -this.groundMinX + this.map.x || y < -this.groundMinY || y > -this.groundMinY + this.map.y) {
                                                tile = TileTypes_1.tileTypes[this.map.defaultTilesOutter];
                                                ctx.drawImage(_1.imgs.tileSheet, tile.img.x, tile.img.y, tile.img.w, tile.img.h, x, y, 16, 16)
                                            } for (var i = 0; i < this.groundTiles.length; i++) {
                                    var img = "img" + k in (tile = this.groundTiles[i].type) ? tile["img" + k] : tile.img;
                                    x = 8 * (null !== (_a = tile.w) && void 0 !== _a ? _a : 0) - img.w / 2, y = 8 * (null !== (_b = tile.h) && void 0 !== _b ? _b : 0) - img.h / 2;
                                    ctx.drawImage(_1.imgs.tileSheet, img.x, img.y, img.w, img.h, 16 * (this.groundTiles[i].x - this.groundMinX) + x, 16 * (this.groundTiles[i].y - this.groundMinY) + y, img.w, img.h)
                                }
                            }
                        }, Game.prototype.getObjectFromID = function(id) {
                            for (var _i = 0, _a = this.objects; _i < _a.length; _i++) {
                                var o = _a[_i];
                                if (o.id === id) return o
                            }
                            return null
                        }, Game.prototype.getPlayerFromID = function(id) {
                            for (var _i = 0, _a = this.players; _i < _a.length; _i++) {
                                var p = _a[_i];
                                if (p.id === id) return p
                            }
                            return null
                        }, Game.prototype.getZombieFromID = function(id) {
                            for (var _i = 0, _a = this.zombies; _i < _a.length; _i++) {
                                var z = _a[_i];
                                if (z.id === id) return z
                            }
                            return null
                        }, Game.prototype.getHumanoidFromID = function(id) {
                            for (var _i = 0, _a = this.players; _i < _a.length; _i++) {
                                var p = _a[_i];
                                if (p.id === id) return p
                            }
                            for (var _b = 0, _c = this.zombies; _b < _c.length; _b++) {
                                var z = _c[_b];
                                if (z.id === id) return z
                            }
                            return null
                        }, Game.prototype.getAnyFromID = function(id) {
                            for (var _i = 0, _a = this.players; _i < _a.length; _i++) {
                                var p = _a[_i];
                                if (p.id === id) return p
                            }
                            for (var _b = 0, _c = this.zombies; _b < _c.length; _b++) {
                                var z = _c[_b];
                                if (z.id === id) return z
                            }
                            for (var _d = 0, _e = this.movableObjects; _d < _e.length; _d++) {
                                var m = _e[_d];
                                if (m.id === id) return m
                            }
                            for (var _f = 0, _g = this.corpses; _f < _g.length; _f++) {
                                var c = _g[_f];
                                if (c.id === id) return c
                            }
                            return null
                        }, Game.prototype.resetPlayingPlayerStats = function() {
                            if (this.playingPlayer)
                                for (var i = 0; i < 20; i++) this.playingPlayer.weaponCooldowns[i] = 0, this.playingPlayerAmmo[i] = Weapons_1.weapons[i] && Weapons_1.weapons[i].startAmmoSize ? 99999999 : 0, this.playingPlayerClips[i] = Weapons_1.weapons[i] && Weapons_1.weapons[i].startAmmoSize ? 99999999 : 0;
                            this.cureTick = 0, this.playingPlayerZombieKillStreak = 0, this.playingPlayerEnergy = Data_1.CONST.START_ENERGY, this.playingPlayerCountActiveHeatseeking2Missiles = 0, Input_1.Input.activeAbility = null, this.showEnemiesOnMinimapUntil = -999, this.lastAbilityUses = [-9999, -9999, -9999], this.noShootUntil = -999
                        }, Game.prototype.init = function(d, str) {
                            (0, viewHelpers_1.hidePopup)("account"), Skin_1.Skin_.close(), CustomBuild_1.CustomBuild.close(), homeScreen_1.homeScreen.hideWindow(), (0, viewHelpers_1.hideAd)(), bottomBar_1.bottomBar.hide(), resourceBar_1.resourceBar.hide(), UI_1.UI.refreshMenuButtons(), this.type = GameTypes_1.MAP_TYPE_SETTINGS[parseInt(d[2])], this.roundTime = parseInt(d[3]), this.ticksCounter = parseInt(d[4]), this.scoreTeam1 = parseInt(d[5]), this.scoreTeam2 = parseInt(d[6]), this.type.lives && Sound_1.Sound.playSound("ladder_start"), rankInGame_1.rankInGame.init();
                            var ammo = [];
                            if (this.map.ammo)
                                for (var k = 0; k < this.map.ammo.length; k++) {
                                    var mapAmmo = this.map.ammo[k],
                                        a = new Ammo_1.Ammo(this, mapAmmo.weapon, mapAmmo.x + .5, mapAmmo.y + .5, k);
                                    a.itemType && "redFlag" === a.itemType.special && (this.redFlag = a, this.redFlag.currentX = parseFloat(d[7]), this.redFlag.currentY = parseFloat(d[8])), a.itemType && "blueFlag" === a.itemType.special && (this.blueFlag = a, this.blueFlag.currentX = parseFloat(d[9]), this.blueFlag.currentY = parseFloat(d[10])), this.addToObjectsToDraw(a), ammo.push(a)
                                }
                            var splitMsg = str.split("%split%");
                            if (splitMsg[6])
                                for (var corpses = splitMsg[6].split("$"), i = 1; i < corpses.length; i += 3) {
                                    var x = parseFloat(corpses[i]) / Data_1.CONST.TRANSMUL,
                                        y = parseFloat(corpses[i + 1]) / Data_1.CONST.TRANSMUL;
                                    this.addCorpses(new Corpse_1.Corpse(this, parseInt(corpses[i + 2]), x, y, 0, !1, Math.random() > .5 ? 1 : 0))
                                }
                            this.players.length = 0, this.zombies.length = 0;
                            var player_inc = 28;
                            this.replayMode && 1 === this.playingReplayVersion ? player_inc = 22 : this.replayMode && 2 === this.playingReplayVersion && (player_inc = 23);
                            var p = splitMsg[1].split("$");
                            for (i = 0; i < p.length - 5; i += player_inc) {
                                x = parseFloat(p[i + 1]) / Data_1.CONST.TRANSMUL, y = parseFloat(p[i + 2]) / Data_1.CONST.TRANSMUL;
                                var x0 = parseFloat(p[i + 9]) / Data_1.CONST.TRANSMUL,
                                    y0 = parseFloat(p[i + 10]) / Data_1.CONST.TRANSMUL,
                                    isHumanZombie = "1" === p[i + 22],
                                    isFakeCorpse = "1" === p[i + 23],
                                    isBoss = "1" === p[i + 24];
                                this.players.push(new Player_1.Player(this, parseInt(p[i]), x, y, p[i + 3], parseFloat(p[i + 4]), parseFloat(p[i + 5]), parseInt(p[i + 6]), parseInt(p[i + 7]), parseInt(p[i + 8]), x0, y0, parseInt(p[i + 11]), parseInt(p[i + 12]), "1" === p[i + 13], parseFloat(p[i + 14]), parseFloat(p[i + 15]), p[i + 16], parseInt(p[i + 17]), parseFloat(p[i + 18]), parseFloat(p[i + 19]), parseFloat(p[i + 20]), parseInt(p[i + 21]), isHumanZombie, isFakeCorpse, isBoss, parseInt(p[i + 25]), parseInt(p[i + 26]), parseInt(p[i + 27])))
                            }
                            var z = splitMsg[2].split("$");
                            for (i = 0; i < z.length - 5; i += 11) {
                                x = parseFloat(z[i + 1]) / Data_1.CONST.TRANSMUL, y = parseFloat(z[i + 2]) / Data_1.CONST.TRANSMUL, x0 = parseFloat(z[i + 4]) / Data_1.CONST.TRANSMUL, y0 = parseFloat(z[i + 5]) / Data_1.CONST.TRANSMUL;
                                this.zombies.push(new Zombie_1.Zombie(this, parseInt(z[i]), x, y, parseFloat(z[3]), x0, y0, parseFloat(z[6]), parseFloat(z[7]), parseFloat(z[8]), parseFloat(z[9]), 0, z[10]))
                            }
                            var itms = splitMsg[3].split("$");
                            for (i = 0; i < itms.length - 1; i += 2)
                                for (k = 0; k < ammo.length; k++) ammo[k].id === parseInt(itms[i]) && (ammo[k].isActive = !1, ammo[k].respawnAt = this.ticksCounter + parseInt(itms[i + 1]) - 2, k = ammo.length);
                            var obs = splitMsg[4].split("$");
                            for (i = 0; i < obs.length - 5; i += 10) this.objects.push(new Object_1.Object_(this, parseInt(obs[i]), this.getPlayerFromID(parseInt(obs[i + 4])), Abilities_1.abilities[parseInt(obs[i + 3])], parseFloat(obs[i + 1]), parseFloat(obs[i + 2]), parseFloat(obs[i + 5]), parseFloat(obs[i + 6]), parseInt(obs[i + 7]), parseFloat(obs[i + 8]), parseInt(obs[i + 9])));
                            if (splitMsg[5]) {
                                var mobs = splitMsg[5].split("$");
                                for (i = 0; i < mobs.length - 5; i += 7) {
                                    x = parseFloat(mobs[i + 1]) / Data_1.CONST.TRANSMUL, y = parseFloat(mobs[i + 2]) / Data_1.CONST.TRANSMUL, x0 = parseFloat(mobs[i + 3]) / Data_1.CONST.TRANSMUL, y0 = parseFloat(mobs[i + 4]) / Data_1.CONST.TRANSMUL;
                                    var hp = parseFloat(mobs[i + 6]);
                                    this.movableObjects.push(new MovableObject_1.MovableObject(this, parseInt(mobs[i]), x, y, x0, y0, TileTypes_1.tileTypes[parseInt(mobs[i + 5])], hp))
                                }
                            }
                            this.replayMode || rankInGame_1.rankInGame.show(), -1 !== d[11] && this.redFlag && (this.redFlag.carriedBy = this.getHumanoidFromID(d[11]), this.redFlag.isActive = !1), -1 !== d[12] && this.blueFlag && (this.blueFlag.carriedBy = this.getHumanoidFromID(d[12]), this.blueFlag.isActive = !1), this.id = d[13];
                            var time = Date.now();
                            root_1.root.preStore.pid && root_1.root.preStore.pid.time + 5e3 > time && this.setPlayingPlayerID(root_1.root.preStore.pid.value);
                            for (i = 0; root_1.root.preStore.newPlayers.length; i++) root_1.root.preStore.newPlayers[i].time + 5e3 > time && this.newPlayer(root_1.root.preStore.newPlayers[i].value);
                            for (i = 0; root_1.root.preStore.newZombies.length; i++) root_1.root.preStore.newZombies[i].time + 5e3 > time && this.newZombie(root_1.root.preStore.newZombies[i].value);
                            root_1.root.preStore = {
                                newPlayers: [],
                                newZombies: [],
                                pid: {
                                    time: -999,
                                    value: -999
                                }
                            }, this.refreshUIs(), document.getElementById("rankTableTitle") && (document.getElementById("rankTableTitle").innerHTML = this.map.name), this.map !== map1_1.map1 && (this.interface_.addMsg("[" + lang_1.lang.get("game.msg.chat.tip") + "]", "#8CD882"), this.type.startMsg && this.interface_.addMsg(this.type.startMsg, "#8CD882"))
                        }, Game.prototype.getLightEmittingObjects = function() {
                            for (var objs = [], _i = 0, _a = this.torches; _i < _a.length; _i++) {
                                var t = _a[_i];
                                objs.push({
                                    x: t.x,
                                    y: t.y,
                                    v: 8,
                                    c1: "rgba(255, 255, 100, .2)",
                                    c2: "rgba(255, 255, 100, 0)"
                                })
                            }
                            for (var _b = 0, _c = this.projectiles; _b < _c.length; _b++) {
                                var p = _c[_b];
                                p instanceof Projectile_1.Projectile && 0 === p.dieAt && objs.push({
                                    x: p.x0 + this._percentageOfCurrentTickPassed * (p.x - p.x0),
                                    y: p.y0 + this._percentageOfCurrentTickPassed * (p.y - p.y0),
                                    v: 6,
                                    c1: "rgba(160, 200, 255, .25)",
                                    c2: "rgba(160, 200, 255, 0)"
                                })
                            }
                            return objs
                        }, Game.prototype.updateVisionCanvas = function(paths) {
                            _visionCanvas.width = _visionCanvas.width, _visionCanvasCtx.fillStyle = "rgba(0, 0, 0, .2)", _visionCanvasCtx.fillRect(0, 0, _visionCanvas.width, _visionCanvas.height), _visionCanvasCtx.globalCompositeOperation = "lighten", _visionCanvasCtx.beginPath();
                            for (var _i = 0, paths_1 = paths; _i < paths_1.length; _i++) {
                                var path = paths_1[_i],
                                    fields = path.fields;
                                _visionCanvasCtx.moveTo(4 * (fields[0].x + 4), 4 * (fields[0].y + 4));
                                for (var i = 1; i < fields.length; i++) fields[i].m && fields[i - 1].m ? _visionCanvasCtx.arc(4 * (path.unit.x + 4), 4 * (path.unit.y + 4), 4 * path.unit.v, fields[i - 1].a, fields[i].a) : _visionCanvasCtx.lineTo(4 * (fields[i].x + 4), 4 * (fields[i].y + 4));
                                _visionCanvasCtx.closePath();
                                var rad = _visionCanvasCtx.createRadialGradient(4 * (path.unit.x + 4), 4 * (path.unit.y + 4), 4, 4 * (path.unit.x + 4), 4 * (path.unit.y + 4), 4 * path.unit.v);
                                rad.addColorStop(0, path.unit.c1), rad.addColorStop(1, path.unit.c2), _visionCanvasCtx.fillStyle = rad, _visionCanvasCtx.fill()
                            }
                            _visionCanvasCtx.globalCompositeOperation = "source-over"
                        }, Game.prototype.emote = function(playerId, emoteIndex) {
                            var p = this.getHumanoidFromID(playerId),
                                e = Emotes_1.emotes[emoteIndex];
                            null !== p && void 0 !== e && p.emote(e)
                        }, Game.prototype.playingPlayerIsNotStunned = function() {
                            return this.playingPlayer && 0 === this.playingPlayer.bouncePoints.length
                        }, Game.prototype.getGrenadeOrProjectileById = function(id) {
                            for (var _i = 0, _a = this.projectiles; _i < _a.length; _i++) {
                                var p = _a[_i];
                                if (p.id === id) return p
                            }
                            for (var _b = 0, _c = this.grenades; _b < _c.length; _b++) {
                                var g = _c[_b];
                                if (g.id === id) return g
                            }
                            return null
                        }, Game.prototype.getNextFreeField = function(x, y, max, x0, y0) {
                            x = Math.floor(x), y = Math.floor(y);
                            for (var _i = 0, nbs_1 = Data_1.nbs; _i < nbs_1.length; _i++) {
                                var nb = nbs_1[_i],
                                    x_ = x + nb.x,
                                    y_ = y + nb.y;
                                if (10 === this.getFieldPath(x_, y_) && (!max || Math.sqrt(Math.pow(x_ + .5 - x0, 2) + Math.pow(y_ + .5 - y0, 2)) <= max)) return {
                                    x: x_ + .5,
                                    y: y_ + .5
                                }
                            }
                            return null
                        }, Game.prototype.receiveUpdate = function(data) {
                            var mode = "normal",
                                step = 5,
                                ticksCounter = this.ticksCounter < 0 ? this.roundTime : this.ticksCounter,
                                now = Date.now();
                            root_1.root.leavingGame && (document.getElementById("floatTipContent").innerHTML = lang_1.lang.get("msg.leave_game", {
                                seconds: Math.max(Math.ceil(5 - .05 * (this.ticksCounter - root_1.root.startLeavingGameTicksCounter)), 0)
                            }));
                            for (var i = 2, j = data.length; i < j; i += step) {
                                var row = data[i];
                                !Number.isInteger(row) && row in this.updList && (i++, mode = row, step = this.updList[row]), mode in GameUpdateMode && GameUpdateMode[mode](this, parseInt(data[i]), data, i)
                            }
                            if (this.ticksCounter >= 0) {
                                this.drawFilter("projectiles", !0), this.drawFilter("grenades", !0), this.drawFilter("effects", !0), this.drawFilter("floatingTexts");
                                var playerChanged_1 = !1,
                                    _this_1 = this;
                                this.drawFilter("players", (function(row) {
                                    (0, functions_1.deleteFromArray)(_this_1.objectsToDraw, row), playerChanged_1 = !0
                                })), this.drawFilter("corpses", !0), playerChanged_1 && this.refreshUIs(), this.drawFilter("zombies", !0), this.drawFilter("movableObjects", !0), this.drawFilter("objects", (function(row) {
                                    row.die()
                                }));
                                for (var _i = 0, _a = this.objectsToDraw; _i < _a.length; _i++) {
                                    var o = _a[_i];
                                    o instanceof Ammo_1.Ammo && !o.isActive && o.respawnAt <= this.ticksCounter && !o.carriedBy && (o.isActive = !0, o.createSpawnEffect())
                                }
                                if (this.ticksCounter % 20 == 17) {
                                    var th = this.type.humans_souls_per_sec,
                                        tz = this.type.zombies_souls_per_sec;
                                    if (th || tz)
                                        for (var _b = 0, _c = this.players; _b < _c.length; _b++) {
                                            var p = _c[_b];
                                            p.dieAt || p.setSouls(p.souls + (p.isHumanZombie ? th : tz))
                                        }
                                }
                            }
                            this.fastForward || this.sortObjectsToDraw(), this.ticksCounter >= 0 && (this.fastForward || (this.torchesEmitFire(), this.teleporterPillars(), this.updateFairies(ticksCounter)), this.playingPlayer && (this.playingPlayerEnergy = Math.min(this.playingPlayerEnergy + this.playingPlayer.energyRegeneration + Data_1.CONST.ENERGY_REG_RATE, 100), this.playingPlayer.isInvisible && (this.playingPlayerEnergy = Math.max(this.playingPlayerEnergy + this.playingPlayer.invisEnergyRate, 0)), this.mouseDowned && !this.mouseDownSent && this.playingPlayer.isShootable() && this._mouseDown(), this.fire2Downed && !this.fire2DownSent && this.playingPlayer.isShootable() && this._fire2Down())), this.ticksCounter = void 0 !== data[1] ? parseInt(data[1]) : this.ticksCounter + 1, this.roundTime > 0 && this.ticksCounter === this.roundTime && this.roundEnd(), -1 === this.ticksCounter || (this.lastUpdate = now), this.ticksCounter % 50 === this.pingRandomizer && (Network_1.Network.send("ping"), Network_1.Network.lastTimePingSent = now), !this.type.lives || 40 !== this.ticksCounter && 60 !== this.ticksCounter && 80 !== this.ticksCounter || Sound_1.Sound.playSound("tick"), this.type.lives && 100 === this.ticksCounter && Sound_1.Sound.playSound("ladder_gong")
                        }, Game.prototype.sortObjectsToDraw = function() {
                            this.objectsToDraw.sort((function(a, b) {
                                var ya = a.getYDrawingOffset(),
                                    yb = b.getYDrawingOffset();
                                return ya != ya && (ya = -10), yb != yb && (yb = -10), ya === yb ? 0 : ya > yb ? 1 : -1
                            }))
                        }, Game.prototype.initMap = function(map) {
                            this.tiles.length = 0;
                            for (var _i = 0, _a = map.tiles; _i < _a.length; _i++) {
                                var row = _a[_i],
                                    tile = this.createTile(row);
                                this.tiles.push(tile), tile.type.isTeleporter && this.teleporters.push({
                                    x: tile.x + .5,
                                    y: tile.y + .5
                                })
                            }
                            this.groundTiles.length = 0;
                            for (var _b = 0, _c = map.groundTiles; _b < _c.length; _b++) {
                                row = _c[_b], tile = this.createTile(row);
                                this.groundTiles.push(tile), tile.type.isTeleporter && this.teleporters.push({
                                    x: tile.x + .5,
                                    y: tile.y + .5
                                })
                            }
                            if (map.noBorder || this.createDefaultBorder(), this.noGridTiles.length = 0, map.noGridTiles)
                                for (var _d = 0, _e = map.noGridTiles; _d < _e.length; _d++) {
                                    row = _e[_d], tile = this.createTile(row);
                                    new Tile_1.Tile(tile.x, tile.y, tile.type, this)
                                }
                        }, Game.prototype.torchesEmitFire = function() {
                            var _this_1 = this;
                            if (!(config_1.options.graphicSettings < 1))
                                for (var _i = 0, _a = this.torches; _i < _a.length; _i++) {
                                    var t = _a[_i];
                                    1 === this.ticksCounter && new Sprite_1.Sprite(this, {
                                        x: t.x + .5 + t.offsetX,
                                        y: t.y + .3 + t.offsetY,
                                        img: Img_1.imgCoords.fire4,
                                        scaleFunction: function() {
                                            return 1 + .1 * Math.sin(.4 * _this_1.ticksCounter)
                                        },
                                        age: 99999999,
                                        xFunction: function() {
                                            return .02 * Math.sin(.5 * _this_1.ticksCounter)
                                        },
                                        yFunction: function() {
                                            return .0223 * Math.sin(.7324 * _this_1.ticksCounter)
                                        },
                                        zFunction: function() {
                                            return 1.1
                                        }
                                    }), t.x + 5 >= this.cameraX && t.y + 5 >= this.cameraY && t.x - 5 <= this.cameraX2 && t.y - 5 <= this.cameraY2 && (Math.random() < .02 && new Flare_1.Flare(this, t.x + .5 + t.offsetX, t.y + t.offsetY, 1.2), t.nextEmit <= this.ticksCounter && (t.nextEmit = this.ticksCounter + config_1.graphics[config_1.options.graphicSettings].torchEmitTime + Math.floor(2 * Math.random()), new Sprite_1.Sprite(this, {
                                        x: t.x + .5 + .2 * Math.random() - .1 + t.offsetX,
                                        y: t.y + .3 + .2 * Math.random() + t.offsetY,
                                        img: Img_1.imgCoords["fire" + (Math.floor(2 * Math.random()) + 2)],
                                        scaleFunction: function(age) {
                                            return -1 * (1 / ((.9 * age - 125) / 500 + .31) + age / 4) + 16.9
                                        },
                                        age: 10 * Math.random() + 35,
                                        zFunction: function(age) {
                                            return 1.1 + .02 * age
                                        }
                                    }), new Sprite_1.Sprite(this, {
                                        x: t.x + .5 + .2 * Math.random() - .1 + t.offsetX,
                                        y: t.y + .2 * Math.random() + t.offsetY,
                                        img: Img_1.imgCoords.light_yellow,
                                        scaleFunction: function(age) {
                                            return 4.3 * (-1 * (1 / ((.9 * age - 125) / 500 + .31) + age / 4) + 16.9)
                                        },
                                        alphaFunction: function(age) {
                                            return .012 * Math.max(3.7 * (-1 * (1 / ((.9 * age - 125) / 500 + .31) + age / 4) + 16.9), 0)
                                        },
                                        age: 10 * Math.random() + 35,
                                        zFunction: function(age) {
                                            return .8 + .02 * age
                                        }
                                    })))
                                }
                        }, Game.prototype.updateFairies = function(ticksCounter) {
                            if (!(config_1.options.graphicSettings < 1)) {
                                for (var i = this.fairies.length - 1; i >= 0; i--) this.fairies[i].update(ticksCounter) || this.fairies.splice(i, 1);
                                for (var countFairies = this.map.x * this.map.y / 9; this.fairies.length < countFairies;) this.fairies.push(new Fairy_1.Fairy(this, Math.random() * this.map.x, Math.random() * this.map.y))
                            }
                        }, Game.prototype.teleporterPillars = function() {
                            if (this.ticksCounter % 3 == 1)
                                for (var _i = 0, _a = this.teleporters; _i < _a.length; _i++) {
                                    if ((t = _a[_i]).x + 3 >= this.cameraX && t.y + 3 >= this.cameraY && t.x - 3 <= this.cameraX2 && t.y - 3 <= this.cameraY2) {
                                        var randomAngle = Math.random() * Math.PI * 2,
                                            rand = .7 * Math.random();
                                        new Sprite_1.Sprite(this, {
                                            x: t.x + Math.cos(randomAngle) * rand,
                                            y: t.y - .3 + Math.sin(randomAngle) * rand,
                                            img: Img_1.imgCoords.particleWhite,
                                            scaleFunction: function(age) {
                                                return this.r3
                                            },
                                            r3: 2 * Math.random() + 2,
                                            r4: .04 + .05 * Math.random(),
                                            zFunction: function(age) {
                                                return age * this.r4
                                            },
                                            alphaFunction: function(age) {
                                                return Math.min(.1 * age, .7, .05 * this.ticksLeft)
                                            },
                                            age: 26
                                        })
                                    }
                                }
                            if (this.ticksCounter % 8 == 1)
                                for (var _b = 0, _c = this.teleporters; _b < _c.length; _b++) {
                                    if ((t = _c[_b]).x + 3 >= this.cameraX && t.y + 3 >= this.cameraY && t.x - 3 <= this.cameraX2 && t.y - 3 <= this.cameraY2) {
                                        randomAngle = Math.random() * Math.PI * 2, rand = .7 * Math.random();
                                        new Sprite_1.Sprite(this, {
                                            x: t.x + Math.cos(randomAngle) * rand * .3,
                                            y: t.y - .3 + Math.sin(randomAngle) * rand * .3,
                                            img: Img_1.imgCoords.particlePurple,
                                            scaleFunction: function(age) {
                                                return this.r3
                                            },
                                            r3: 2 * Math.random() + 2,
                                            r4: .04 + .05 * Math.random(),
                                            zFunction: function(age) {
                                                return age * this.r4 * .5
                                            },
                                            xFunction: function(age) {
                                                return Math.cos(.2 * (age + this.r1)) * this.r2
                                            },
                                            yFunction: function(age) {
                                                return Math.sin(.2 * (age + this.r1)) * this.r2
                                            },
                                            alphaFunction: function(age) {
                                                return Math.min(.1 * age, .4, .05 * this.ticksLeft)
                                            },
                                            r2: .3 * Math.random() + .3,
                                            r1: 10 * Math.random(),
                                            age: 41
                                        })
                                    }
                                }
                            if (this.ticksCounter % 5 == 1)
                                for (var _d = 0, _e = this.teleporters; _d < _e.length; _d++) {
                                    var t;
                                    if ((t = _e[_d]).x + 3 >= this.cameraX && t.y + 3 >= this.cameraY && t.x - 3 <= this.cameraX2 && t.y - 3 <= this.cameraY2) {
                                        randomAngle = Math.random() * Math.PI * 2, rand = .7 * Math.random();
                                        new Sprite_1.Sprite(this, {
                                            x: t.x + Math.cos(randomAngle) * rand,
                                            y: t.y - 1.1 + Math.sin(randomAngle) * rand,
                                            img: Img_1.imgCoords.pillar_of_light,
                                            scaleFunction: function(age) {
                                                return this.r4 + .04 * age
                                            },
                                            alphaFunction: function(age) {
                                                return Math.min(.05 * age, .5, .05 * this.ticksLeft)
                                            },
                                            r4: .2 * Math.random() + 2,
                                            zFunction: function(age) {
                                                return age * this.z_
                                            },
                                            age: 26
                                        })
                                    }
                                }
                        }, Game.prototype.roundStart = function() {
                            Sound_1.Sound.playSound("start"), this.interface_ = new Interface_1.Interface_(this, this.map), this.type.team && (this.scoreTeam1 = 0, this.scoreTeam2 = 0, rankInGame_1.rankInGame.refreshTeamScore());
                            for (var i = 0; i < this.projectiles.length; i++)(0, functions_1.deleteFromArray)(this.objectsToDraw, this.projectiles[i]), this.projectiles.splice(i, 1), i--;
                            for (i = 0; i < this.grenades.length; i++)(0, functions_1.deleteFromArray)(this.objectsToDraw, this.grenades[i]), this.grenades.splice(i, 1), i--;
                            for (i = 0; i < this.effects.length; i++)(0, functions_1.deleteFromArray)(this.objectsToDraw, this.effects[i]), this.effects.splice(i, 1), i--;
                            this.floatingTexts.length = 0;
                            for (var _i = 0, _a = this.objects; _i < _a.length; _i++) {
                                (o = _a[_i]).die()
                            }
                            this.objects.length = 0;
                            for (i = 0; i < this.players.length; i++) this.players[i].removeAt ? ((0, functions_1.deleteFromArray)(this.objectsToDraw, this.players[i]), this.players.splice(i, 1), i--) : (this.players[i].isHumanZombie && this.players[i].turnHuman(), this.players[i].init(), this.players[i].weapon = Weapons_1.weapons[0], this.players[i].hp = this.players[i].maxHP, this.players[i].armor = 0, this.players[i].setKills(0), this.players[i].setDeaths(0), this.players[i].setSouls(0), this.players[i].setElo(0), this.players[i].createSpawnEffect(this.playingPlayer === this.players[i]));
                            for (var _b = 0, _c = this.objectsToDraw; _b < _c.length; _b++) {
                                (o = _c[_b]).isAmmo && (o.isActive = !0)
                            }
                            this.refreshUIs();
                            for (var _d = 0, _e = this.zombies; _d < _e.length; _d++) {
                                var z = _e[_d];
                                (0, functions_1.deleteFromArray)(this.objectsToDraw, z)
                            }
                            for (var _f = 0, _g = this.corpses; _f < _g.length; _f++) {
                                var c = _g[_f];
                                (0, functions_1.deleteFromArray)(this.objectsToDraw, c)
                            }
                            for (var _h = 0, _j = this.movableObjects; _h < _j.length; _h++) {
                                var m = _j[_h];
                                (0, functions_1.deleteFromArray)(this.objectsToDraw, m)
                            }
                            this.zombies.length = 0, this.movableObjects.length = 0, this.corpses.length = 0;
                            for (var id_counter_mobs = 9e4, _k = 0, _l = this.map.tiles; _k < _l.length; _k++) {
                                var tile = _l[_k],
                                    type = TileTypes_1.tileTypes[tile.id];
                                type && type.movable && this.movableObjects.push(new MovableObject_1.MovableObject(this, id_counter_mobs++, tile.x + .5, tile.y + .5, tile.x + .5, tile.y + .5, type))
                            }
                            this.redFlag && (this.redFlag.currentX = this.redFlag.x, this.redFlag.currentY = this.redFlag.y, this.redFlag.carriedBy && (this.redFlag.carriedBy = null, this.addToObjectsToDraw(this.redFlag))), this.blueFlag && (this.blueFlag.currentX = this.blueFlag.x, this.blueFlag.currentY = this.blueFlag.y, this.blueFlag.carriedBy && (this.blueFlag.carriedBy = null, this.addToObjectsToDraw(this.blueFlag))), this.resetPlayingPlayerStats();
                            for (var _m = 0, _o = this.torches; _m < _o.length; _m++) {
                                _o[_m].nextEmit = 1
                            }
                            for (var _p = 0, _q = this.objectsToDraw; _p < _q.length; _p++) {
                                var o;
                                (o = _q[_p]).lastSpawnTick && (o.lastSpawnTick = -99999)
                            }
                            this.setNextMaps({}), rankInGame_1.rankInGame.hide(), result_1.result.hide(), (0, viewHelpers_1.hideAd)(), UI_1.UI.hideDeathScreen()
                        }, Game.prototype.roundEnd = function() {
                            var playerWithTopScore = null,
                                topScore = 0;
                            if (this.type.winningCondition && !this.type.team)
                                for (var _i = 0, _a = this.players; _i < _a.length; _i++) {
                                    var p = _a[_i];
                                    if (p[this.type.winningCondition] > topScore) topScore = p[this.type.winningCondition], playerWithTopScore = p;
                                    else if (this.type.coopZombieMode) {
                                        for (var countAliveHumans = 0, humanPlayerName = "", _b = 0, _c = this.players; _b < _c.length; _b++) {
                                            var p_1 = _c[_b];
                                            p_1.isHumanZombie || p_1.dieAt || (countAliveHumans++, humanPlayerName = p_1.name)
                                        }
                                        if (1 === countAliveHumans) this.victoryMsg = humanPlayerName + " wins";
                                        else if (0 === countAliveHumans) this.victoryMsg = lang_1.lang.get("game.msg.win", {
                                            winnerName: lang_1.lang.get("game.stats.zombies.name")
                                        });
                                        else if (countAliveHumans > 0) {
                                            for (var souls = -999, pl = null, _d = 0, _e = this.players; _d < _e.length; _d++) {
                                                var p_2 = _e[_d];
                                                !p_2.isHumanZombie && !p_2.dieAt && p_2.souls > souls && (souls = (pl = p_2).souls)
                                            }
                                            this.victoryMsg = pl.name + " wins"
                                        } else this.victoryMsg = lang_1.lang.get("game.msg.win", {
                                            winnerName: lang_1.lang.get("game.stats.zombies.name")
                                        });
                                        !this.playingPlayer || 1 === this.playingPlayer.team && countAliveHumans > 0 || 2 === this.playingPlayer.team && 0 === countAliveHumans ? Sound_1.Sound.playSound("win") : Sound_1.Sound.playSound("lose")
                                    } else this.type.team && this.scoreTeam1 > this.scoreTeam2 ? this.victoryMsg = lang_1.lang.get("game.msg.win", {
                                        winnerName: lang_1.lang.get("game.stats.team1.name")
                                    }) : this.type.team && this.scoreTeam2 > this.scoreTeam1 ? this.victoryMsg = lang_1.lang.get("game.msg.win", {
                                        winnerName: lang_1.lang.get("game.stats.team2.name")
                                    }) : this.type.team ? this.victoryMsg = lang_1.lang.get("game.msg.draw") : this.victoryMsg = playerWithTopScore ? lang_1.lang.get("game.msg.win_with_reason", {
                                        winnerName: playerWithTopScore.name,
                                        reason: topScore + " " + lang_1.lang.get(this.type.winningConditionLabel)
                                    }) : "", this.type.team && this.playingPlayer && 1 === this.playingPlayer.team && this.scoreTeam1 > this.scoreTeam2 || playerWithTopScore === this.playingPlayer ? Sound_1.Sound.playSound("win") : this.type.team && this.playingPlayer && 1 === this.playingPlayer.team && this.scoreTeam2 > this.scoreTeam1 ? Sound_1.Sound.playSound("lose") : Sound_1.Sound.playSound("end")
                                }
                            rankInGame_1.rankInGame.show(this.playingPlayerID > 0)
                        }, Game.prototype.setNextMaps = function(nextMaps) {
                            this.nextMaps = nextMaps, rankInGame_1.rankInGame_mapList.setMaps(Object.values(nextMaps))
                        }, Game.prototype.voteNextMap = function(mapId, voterId) {
                            var map = this.nextMaps[mapId];
                            map && (map.votes++, voterId === config_1.playerData.server_client_id && (map.voted = !0), rankInGame_1.rankInGame_mapList.setVoted(map))
                        }, Game.prototype.getFlagText = function() {
                            if (!this.redFlag || !this.blueFlag) return null;
                            for (var i = 1; i <= 2; i++)
                                if (this.playingPlayer && this.playingPlayer.team === i) {
                                    var ownFlag = 1 === i ? this.redFlag : this.blueFlag,
                                        enemyFlag = 2 === i ? this.redFlag : this.blueFlag;
                                    return ownFlag && ownFlag.carriedBy ? "game.msg.flag_enemy_has" : !ownFlag || ownFlag.currentX === ownFlag.x && ownFlag.currentY === ownFlag.y ? enemyFlag && enemyFlag.carriedBy === this.playingPlayer ? "game.msg.flag_you_have" : enemyFlag && enemyFlag.carriedBy && enemyFlag.carriedBy !== this.playingPlayer ? "game.msg.flag_ally_has" : "game.msg.flag_default" : "game.msg.flag_not_home"
                                } return null
                        }, Game.prototype.getZombieCoopText = function() {
                            if (this.type.convertTime && this.ticksCounter < this.type.convertTime) return lang_1.lang.get("game.msg.zombie_prep", {
                                sec: Math.floor((this.type.convertTime - this.ticksCounter) / 20)
                            });
                            if (this.playingPlayer && this.playingPlayer.isHumanZombie) {
                                var num = 2 - this.playingPlayerZombieKillStreak;
                                return this.cureTick ? lang_1.lang.get("game.msg.zombie_cure") : num > 0 ? lang_1.lang.get("game.msg.zombie_zombie", {
                                    num
                                }) : ""
                            }
                            var human = 0,
                                zombie = 0;
                            for (var i in this.players) {
                                this.players && (this.players[i].isHumanZombie ? zombie++ : this.players[i].id && human++)
                            }
                            return lang_1.lang.get("game.msg.zombie_human", {
                                human,
                                zombie
                            })
                        }, Game.prototype.getClosestAlly = function(x, y, range) {
                            if (!this.playingPlayer) return null;
                            for (var bestPlayer = null, bestDist = range, _i = 0, players_1 = this.players.concat(this.zombies); _i < players_1.length; _i++) {
                                var p = players_1[_i];
                                if (p !== this.playingPlayer && !p.dieAt && 0 !== p.team && p.team === this.playingPlayer.team) {
                                    var dist = Math.sqrt(Math.pow(p.x - x, 2) + Math.pow(p.y - y, 2));
                                    dist < bestDist && (bestPlayer = p, bestDist = dist)
                                }
                            }
                            return bestPlayer
                        }, Game.prototype.refreshLockedPlayer = function(x, y) {
                            if (this.playingPlayer) {
                                for (var bestPlayer = null, bestDist = 2, _i = 0, players_2 = this.players.concat(this.zombies); _i < players_2.length; _i++) {
                                    var p = players_2[_i];
                                    if (!(p === this.playingPlayer || p.dieAt || p.isInvisible || 0 !== p.team && p.team === this.playingPlayer.team)) {
                                        var dist = Math.sqrt(Math.pow(p.x - x, 2) + Math.pow(p.y - y, 2));
                                        dist < bestDist && (bestPlayer = p, bestDist = dist)
                                    }
                                }
                                bestPlayer && (this.targetLockedPlayer = bestPlayer)
                            }
                        }, Game.prototype.newBeam1 = function(data) {
                            var shooter = this.getHumanoidFromID(parseInt(data[1]));
                            this.projectiles.push(new Beam_1.Beam(this, shooter, null, parseFloat(data[2]), parseFloat(data[3]), Weapons_1.weapons[parseInt(data[4])])), this.playerShoots(shooter, parseInt(data[4]), parseInt(data[5]))
                        }, Game.prototype.newBeam2 = function(data) {
                            var shooter = this.getHumanoidFromID(parseInt(data[1])),
                                victim = this.getHumanoidFromID(parseInt(data[2])),
                                wpn = Weapons_1.weapons[parseInt(data[4])];
                            if (shooter && victim) {
                                var victimOldHP = victim.hp,
                                    shooterOldHP = shooter.hp;
                                victim.hp = parseFloat(data[3]), shooter.hp = parseFloat(data[5]), victim.hpGlideAmount = victim.hp - victimOldHP, victim.hpGlideStart = this.ticksCounter, victim.hpGlideEnd = this.ticksCounter + wpn.lifetime, shooter.hpGlideAmount = shooter.hp - shooterOldHP, shooter.hpGlideStart = this.ticksCounter, shooter.hpGlideEnd = this.ticksCounter + wpn.lifetime, shooter.hp > shooterOldHP && shooter.x + 3 >= this.cameraX && shooter.y + 3 >= this.cameraY && shooter.x - 3 <= this.cameraX2 && shooter.y - 3 <= this.cameraY2 && !this.fastForward && new Sprite_1.Sprite(this, {
                                    x: shooter.x + .5 * Math.random() - .25,
                                    y: shooter.y + .5 + .5 * Math.random(),
                                    img: Img_1.imgCoords.heal,
                                    scaleFunction: function(age) {
                                        return -1 * (1 / ((.9 * age - 125) / 500 + .31) + age / 4) + 16.9
                                    },
                                    age: 10 * Math.random() + 35,
                                    r4: .1 * Math.random() - .05,
                                    xFunction: function(age) {
                                        return Math.pow(age, .7) * this.r4
                                    },
                                    zFunction: function(age) {
                                        return 1.4 + .02 * age
                                    }
                                }), victim.hp > victimOldHP && victim.x + 3 >= this.cameraX && victim.y + 3 >= this.cameraY && victim.x - 3 <= this.cameraX2 && victim.y - 3 <= this.cameraY2 && !this.fastForward && new Sprite_1.Sprite(this, {
                                    x: victim.x + .5 * Math.random() - .25,
                                    y: victim.y + .5 + .5 * Math.random(),
                                    img: Img_1.imgCoords.heal,
                                    scaleFunction: function(age) {
                                        return -1 * (1 / ((.9 * age - 125) / 500 + .31) + age / 4) + 16.9
                                    },
                                    age: 10 * Math.random() + 35,
                                    r4: .1 * Math.random() - .05,
                                    xFunction: function(age) {
                                        return Math.pow(age, .7) * this.r4
                                    },
                                    zFunction: function(age) {
                                        return 1.4 + .02 * age
                                    }
                                }), this.projectiles.push(new Beam_1.Beam(this, shooter, victim, null, null, wpn)), this.playerShoots(shooter, parseInt(data[4]))
                            }
                        }, Game.prototype.playerShoots = function(p, weaponID, remainingBullets) {
                            var wpn = Weapons_1.weapons[weaponID];
                            wpn.dummyFor && (weaponID = (wpn = Weapons_1.weapons[wpn.dummyFor]).id), p instanceof Zombie_1.Zombie || (p.lastTickFire = this.ticksCounter, p.noInvisUntil = this.ticksCounter + 40, p.invincibleUntil = -99999), p === this.playingPlayer && (this.playingPlayerClips[weaponID]--, this.playingPlayer.weaponCooldowns[weaponID] = this.playingPlayerClips[weaponID] > 0 ? wpn.cooldown : 0, void 0 !== remainingBullets && (this.playingPlayerClips[weaponID] = remainingBullets))
                        }, Game.prototype.newProjectileMulti = function(data) {
                            for (var weapon = Weapons_1.weapons[parseInt(data[3])], remainingBullets = parseInt(data[4]), i = 5; data[i]; i += 5) this.projectiles.push(new Projectile_1.Projectile(this, parseFloat(data[i + 1]), parseFloat(data[i + 2]), parseFloat(data[i + 3]), parseFloat(data[i + 4]), parseFloat(data[1]), parseInt(data[i]), weapon, !1, parseInt(data[4]), !0));
                            remainingBullets >= 0 && this.playerShoots(this.getHumanoidFromID(parseInt(data[2])), parseInt(data[3]), remainingBullets);
                            var x = parseFloat(data[6]),
                                y = parseFloat(data[7]),
                                vecX = parseFloat(data[8]),
                                vecY = parseFloat(data[9]);
                            if (x + 4 >= this.cameraX && y + 4 >= this.cameraY && x - 4 <= this.cameraX2 && y - 4 <= this.cameraY2 && !this.fastForward) {
                                weapon.soundName && Sound_1.Sound.playSound(weapon.soundName, x, y, weapon.volume ? weapon.volume : 1), weapon.spawnBullets && config_1.graphics[config_1.options.graphicSettings].spawnBullets && new Bullet_1.Bullet(this, x, y);
                                for (i = 1; i < 5; i++) new Sprite_1.Sprite(this, {
                                    x: x + .3 * Math.random() - .15,
                                    y: y - this.SHOT_HEIGHT + .3 * Math.random() - .15,
                                    img: Img_1.imgCoords.dust1,
                                    scaleFunction: function(age) {
                                        return this.r4 - .01 * age
                                    },
                                    r4: Math.random() + 1.1,
                                    alphaFunction: function(age) {
                                        return .35 * Math.max(0, 1 - age / this.ticksToLive)
                                    },
                                    age: 20 * (2.7 + Math.random()),
                                    r3: 2.25 * vecX,
                                    r2: 2.25 * vecY,
                                    r1: i / 5,
                                    xFunction: function(age) {
                                        return 2 * (-1 / Math.pow(age / 5 + 1, 3) + 1) * this.r1 * this.r3
                                    },
                                    yFunction: function(age) {
                                        return 2 * (-1 / Math.pow(age / 5 + 1, 3) + 1) * this.r1 * this.r2
                                    }
                                });
                                for (i = 1; i < 3; i++) new Sprite_1.Sprite(this, {
                                    x: x + vecX + .3 * Math.random() - .15,
                                    y: y + vecY - this.SHOT_HEIGHT + .3 * Math.random() - .15,
                                    img: Img_1.imgCoords.dust1,
                                    scaleFunction: function(age) {
                                        return this.r4 - .01 * age
                                    },
                                    r4: Math.random() + 1.1,
                                    alphaFunction: function(age) {
                                        return .35 * Math.max(0, 1 - age / this.ticksToLive)
                                    },
                                    age: 20 * (2.7 + Math.random()),
                                    r3: 2.25 * -vecY,
                                    r2: 2.25 * vecX,
                                    r1: i / 5,
                                    xFunction: function(age) {
                                        return 2 * (-1 / Math.pow(age / 5 + 1, 3) + 1) * this.r1 * this.r3
                                    },
                                    yFunction: function(age) {
                                        return 2 * (-1 / Math.pow(age / 5 + 1, 3) + 1) * this.r1 * this.r2
                                    }
                                });
                                for (i = 1; i < 3; i++) new Sprite_1.Sprite(this, {
                                    x: x + vecX + .3 * Math.random() - .15,
                                    y: y + vecY - this.SHOT_HEIGHT + .3 * Math.random() - .15,
                                    img: Img_1.imgCoords.dust1,
                                    scaleFunction: function(age) {
                                        return this.r4 - .01 * age
                                    },
                                    r4: Math.random() + 1.1,
                                    alphaFunction: function(age) {
                                        return .35 * Math.max(0, 1 - age / this.ticksToLive)
                                    },
                                    age: 20 * (2.7 + Math.random()),
                                    r3: 2.25 * vecY,
                                    r2: 2.25 * -vecX,
                                    r1: i / 5,
                                    xFunction: function(age) {
                                        return 2 * (-1 / Math.pow(age / 5 + 1, 3) + 1) * this.r1 * this.r3
                                    },
                                    yFunction: function(age) {
                                        return 2 * (-1 / Math.pow(age / 5 + 1, 3) + 1) * this.r1 * this.r2
                                    }
                                })
                            }
                        }, Game.prototype.newObject = function(data) {
                            var _a, p = this.getPlayerFromID(parseInt(data[5])),
                                ab = Abilities_1.abilities[parseInt(data[4])];
                            if (this.objects.push(new Object_1.Object_(this, parseInt(data[1]), p, ab, parseFloat(data[2]), parseFloat(data[3]), parseFloat(data[8]), parseFloat(data[8]), parseFloat(data[7]), parseFloat(data[9]), null, parseFloat(data[10]), parseFloat(data[11]))), p === this.playingPlayer && (this.playingPlayerEnergy -= null !== (_a = ab.energy) && void 0 !== _a ? _a : 0, this.lastAbilityUses[this.pl_active_abilities[0] === ab ? 0 : 1] = this.ticksCounter), ab.type === Abilities_1.AbilityType.Throw && (p.lastThrow = this.ticksCounter), ab.type !== Abilities_1.AbilityType.Throw && p.x + 2 >= this.cameraX && p.y + 2 >= this.cameraY && p.x - 2 <= this.cameraX2 && p.y - 2 <= this.cameraY2 && !this.fastForward)
                                for (var k = 0; k < 9; k++) {
                                    var randomAngle = Math.random() * Math.PI * 2,
                                        rand = .7 * Math.random();
                                    new Sprite_1.Sprite(this, {
                                        x: p.x + Math.cos(randomAngle) * rand,
                                        y: p.y - this.SHOT_HEIGHT + Math.sin(randomAngle) * rand,
                                        img: Img_1.imgCoords.particleWhite,
                                        scaleFunction: function(age) {
                                            return this.r4
                                        },
                                        r4: 2 * Math.random() + 2,
                                        r3: .09 * Math.random(),
                                        zFunction: function(age) {
                                            return age * this.r3
                                        },
                                        age: 15 + 10 * Math.random()
                                    })
                                }
                        }, Game.prototype.newProjectile = function(data) {
                            var _this_1 = this,
                                weapon = Weapons_1.weapons[parseInt(data[8])];
                            if (weapon === Weapons_1.weapons[2]) {
                                var x = parseFloat(data[1]),
                                    y = parseFloat(data[2]);
                                if (x + 10 >= this.cameraX && y + 10 >= this.cameraY && x - 10 <= this.cameraX2 && y - 10 <= this.cameraY2 && !this.fastForward) {
                                    var vecX = parseFloat(data[3]),
                                        vecY = parseFloat(data[4]),
                                        len = Math.sqrt(vecX * vecX + vecY * vecY);
                                    vecX *= Weapons_1.weapons[2].projectileSpeed / len, vecY *= Weapons_1.weapons[2].projectileSpeed / len, new Sprite_1.Sprite(this, {
                                        x,
                                        y,
                                        img: Img_1.imgCoords["fire" + (Math.floor(3 * Math.random()) + 2)],
                                        scaleFunction: function(age) {
                                            return 1.2 + .15 * age
                                        },
                                        r1: vecX,
                                        r2: vecY,
                                        age: Weapons_1.weapons[2].lifetime,
                                        zFunction: function(age) {
                                            return _this_1.SHOT_HEIGHT + .04 * age
                                        },
                                        xFunction: function(age) {
                                            return age * this.r1
                                        },
                                        yFunction: function(age) {
                                            return age * this.r2
                                        },
                                        dieOnCollision: !0
                                    }), config_1.graphics[config_1.options.graphicSettings].additionalFTFire && new Sprite_1.Sprite(this, {
                                        x,
                                        y,
                                        img: Img_1.imgCoords["fire" + (Math.floor(3 * Math.random()) + 2)],
                                        scaleFunction: function(age) {
                                            return 1.2 + .15 * age
                                        },
                                        r1: vecX * (.2 * Math.random() + .9),
                                        r2: vecY * (.2 * Math.random() + .9),
                                        age: Weapons_1.weapons[2].lifetime,
                                        zFunction: function(age) {
                                            return _this_1.SHOT_HEIGHT
                                        },
                                        xFunction: function(age) {
                                            return age * this.r1
                                        },
                                        yFunction: function(age) {
                                            return age * this.r2
                                        },
                                        dieOnCollision: !0
                                    }), new Sprite_1.Sprite(this, {
                                        x,
                                        y: y + this.SHOT_HEIGHT,
                                        img: Img_1.imgCoords.light_yellow,
                                        scaleFunction: function(age) {
                                            return 4
                                        },
                                        r1: vecX * (.2 * Math.random() + .9),
                                        r2: vecY * (.2 * Math.random() + .9),
                                        age: Weapons_1.weapons[2].lifetime,
                                        alphaFunction: function(age) {
                                            return .1 * Math.max(0, 1 - age / this.ticksToLive)
                                        },
                                        zFunction: function(age) {
                                            return _this_1.SHOT_HEIGHT + .05 * age
                                        },
                                        xFunction: function(age) {
                                            return age * this.r1
                                        },
                                        yFunction: function(age) {
                                            return age * this.r2
                                        },
                                        dieOnCollision: !0
                                    }), config_1.graphics[config_1.options.graphicSettings].additionalFTFire && new Sprite_1.Sprite(this, {
                                        x,
                                        y,
                                        img: Img_1.imgCoords.dust1,
                                        scaleFunction: function(age) {
                                            return 1 + .2 * age
                                        },
                                        r1: vecX * (.2 * Math.random() + .9),
                                        r2: vecY * (.2 * Math.random() + .9),
                                        age: Weapons_1.weapons[2].lifetime,
                                        alphaFunction: function(age) {
                                            return .3 * Math.max(0, 1 - age / this.ticksToLive)
                                        },
                                        zFunction: function(age) {
                                            return _this_1.SHOT_HEIGHT + .05 * age
                                        },
                                        xFunction: function(age) {
                                            return age * this.r1
                                        },
                                        yFunction: function(age) {
                                            return age * this.r2
                                        },
                                        dieOnCollision: !0
                                    })
                                }
                            } else this.projectiles.push(new Projectile_1.Projectile(this, parseFloat(data[1]), parseFloat(data[2]), parseFloat(data[3]), parseFloat(data[4]), parseFloat(data[5]), parseInt(data[6]), weapon, "1" === data[9], parseInt(data[10]), !1, parseInt(data[7]), parseFloat(data[12]))), parseInt(data[7]) === this.playingPlayerID && weapon.isHeatSeeking2 && this.playingPlayerCountActiveHeatseeking2Missiles++;
                            if ("-1" !== data[11])
                                for (var i = 0; i < this.objects.length; i++) this.objects[i].id === parseInt(data[11]) && (this.objects[i].shoot(0, 0, parseFloat(data[3]), parseFloat(data[4])), i = this.objects.length);
                            else this.playerShoots(this.getHumanoidFromID(parseInt(data[7])), parseInt(data[8]), parseInt(data[10]))
                        }, Game.prototype.newGrenade = function(data) {
                            var p = this.getHumanoidFromID(parseFloat(data[8]));
                            if (this.grenades.push(new Grenade_1.Grenade(this, parseFloat(data[1]), parseFloat(data[2]), parseFloat(data[3]), parseFloat(data[4]), parseFloat(data[5]), parseFloat(data[6]), parseInt(data[7]), Weapons_1.weapons[parseFloat(data[9])])), "-1" !== data[10])
                                for (var i = 0; i < this.objects.length; i++) this.objects[i].id === parseInt(data[10]) && (this.objects[i].shoot(parseFloat(data[1]), parseFloat(data[2]), parseFloat(data[3]), parseFloat(data[4])), i = this.objects.length);
                            else p && this.playerShoots(p, parseInt(data[9]))
                        }, Game.prototype.newPlayer = function(data) {
                            var x = parseFloat(data[2]) / Data_1.CONST.TRANSMUL,
                                y = parseFloat(data[3]) / Data_1.CONST.TRANSMUL,
                                isHumanZombie = "1" === data[15],
                                p = new Player_1.Player(this, parseInt(data[1]), x, y, data[4], parseFloat(data[5]), parseFloat(data[6]), 0, 0, null, x, y, parseInt(data[7]), parseInt(data[8]), !1, parseFloat(data[9]), parseFloat(data[10]), data[11], parseInt(data[12]), 0, parseFloat(data[13]), parseFloat(data[14]), 0, isHumanZombie, !1, !1, parseInt(data[16]), parseFloat(data[17]), parseInt(data[18]));
                            this.interface_.addMsg(lang_1.lang.get("game.msg.player_join", {
                                playerName: p.name
                            }), "#ACACAC"), this.players.push(p), this.playingPlayer || this.checkPlayingPlayer(), this.ticksCounter >= 2 && (p.invincibleUntil = this.ticksCounter + Data_1.CONST.SPAWN_INVINCIBILITY), p.createSpawnEffect(), this.refreshUIs()
                        }, Game.prototype.newZombie = function(data) {
                            var x = parseFloat(data[2]) / Data_1.CONST.TRANSMUL,
                                y = parseFloat(data[3]) / Data_1.CONST.TRANSMUL,
                                z = new Zombie_1.Zombie(this, parseInt(data[1]), x, y, parseFloat(data[4]), x, y, parseFloat(data[5]), parseFloat(data[6]), parseFloat(data[7]), parseFloat(data[8]), parseInt(data[9]), data[10]);
                            this.zombies.push(z), z.createSpawnEffect()
                        }, Game.prototype.setPlayingPlayerID = function(id) {
                            this.playingPlayerID = id, this.checkPlayingPlayer(), rankInGame_1.rankInGame.refreshPlaying()
                        }, Game.prototype.checkPlayingPlayer = function() {
                            if (!this.iAmSpec)
                                for (var _i = 0, _a = this.players; _i < _a.length; _i++) {
                                    var p = _a[_i];
                                    if (p.id === this.playingPlayerID) {
                                        this.playingPlayer = p, this.resetPlayingPlayerStats();
                                        var tr = document.getElementById("tr_" + this.playingPlayerID);
                                        tr ? tr.className = "playingPlayerTR" : this.playingPlayer.isHumanZombie ? this.playingPlayerAbilities = (0, Abilities_1.getDefaultZombieAbilityObj)(config_1.playerData && config_1.playerData.authLevel >= 6 ? config_1.playerData.abilities : (0, Abilities_1.getDefaultAbilityObj)(Abilities_1.abilities), Abilities_1.abilities) : this.playingPlayerAbilities = config_1.playerData && config_1.playerData.authLevel >= 6 ? config_1.playerData.abilities : (0, Abilities_1.getDefaultAbilityObj)(Abilities_1.abilities), rankInGame_1.rankInGame.hide(), rankInGame_1.rankInGame.setPlayingPlayer(p), this.setActiveAbilities();
                                        break
                                    }
                                }
                        }, Game.prototype.setActiveAbilities = function() {
                            this.pl_active_abilities.length = 0;
                            for (var k = 0, _i = 0, abilities_1 = Abilities_1.abilities; _i < abilities_1.length; _i++) {
                                var ab = abilities_1[_i];
                                if (ab.type !== Abilities_1.AbilityType.Passive && this.playingPlayerAbilities[ab.id] && this.playingPlayerAbilities[ab.id].lvl > 0 && (this.pl_active_abilities[k] = ab, ++k > 1)) return
                            }
                        }, Game.prototype.corpseBounce = function(x, y, radius) {
                            for (var _i = 0, players_3 = this.players.concat(this.zombies); _i < players_3.length; _i++) {
                                var p = players_3[_i];
                                if (p.dieAt && !p.noCorpseBounce && p.z < .8 && Math.sqrt(Math.pow(p.x - x, 2) + Math.pow(p.y - y, 2)) <= radius) {
                                    var vecX = p.x - x,
                                        vecY = p.y - y,
                                        vecH = Math.max(.2 * (Math.min(Math.max(radius - Math.sqrt(vecX * vecX + vecY * vecY), 1), 1.8) + .2), .001),
                                        speed = 2.5 * vecH,
                                        len = Math.sqrt(vecX * vecX + vecY * vecY);
                                    vecX *= speed / len, vecY *= speed / len, p.bouncePoints = (0, functions_1.createBounce2)(p.x, p.y, vecX, vecY, vecH, this)
                                }
                            }
                        }, Game.prototype.playerRespawns = function(data) {
                            this.getPlayerFromID(parseInt(data[1])).respawn(parseFloat(data[2]), parseFloat(data[3]), "1" === data[4]), this.refreshUIs()
                        }, Game.prototype.playerLeaves = function(data) {
                            for (var _i = 0, _a = this.players; _i < _a.length; _i++) {
                                var p = _a[_i];
                                if (p.id === parseInt(data[1])) {
                                    this.interface_.addMsg(lang_1.lang.get("game.msg.player_leave", {
                                        playerName: p.name
                                    }), "#ACACAC"), p.die(), rankInGame_1.rankInGame.removePlayer(p), p.removeAt = this.ticksCounter + 60;
                                    break
                                }
                            }
                        }, Game.prototype.projectileDies = function(data) {
                            for (var _i = 0, _a = this.projectiles; _i < _a.length; _i++) {
                                var p = _a[_i];
                                if (p.id === parseInt(data[1])) return p.createDeathEffect(parseFloat(data[2]), parseFloat(data[3]), "1" === data[4]), !p.dieAt && p.playerID === this.playingPlayerID && p.weapon.isHeatSeeking2 && this.playingPlayerCountActiveHeatseeking2Missiles--, void(p.dieAt = this.ticksCounter + 10)
                            }
                        }, Game.prototype.hpUpdateObject = function(data) {
                            for (var attacker = this.getAnyFromID(parseInt(data[5])), i = 0; i < this.objects.length; i++) {
                                var o = this.objects[i];
                                if (o.id === parseInt(data[1]) && (o.hp = parseFloat(data[2]), o.hitUntil = this.ticksCounter + 2, attacker && attacker instanceof Zombie_1.Zombie && attacker.performHit(o), attacker && (attacker instanceof Zombie_1.Zombie || attacker instanceof Player_1.Player && attacker.isHumanZombie) && Sound_1.Sound.playSound("mech_impact", o.x, o.y, .7), o.hp <= 0 && (o.die(), this.objects.splice(i, 1)), "1" === data[3]))
                                    for (var _i = 0, _a = this.projectiles; _i < _a.length; _i++) {
                                        var p = _a[_i];
                                        p.id === parseInt(data[4]) && p.createHitEffect(o)
                                    }
                            }
                        }, Game.prototype.hpUpdate = function(data) {
                            var victim = this.getAnyFromID(parseInt(data[1])),
                                attacker = this.getHumanoidFromID(parseInt(data[7]));
                            if (null !== victim && (victim instanceof MovableObject_1.MovableObject || null === attacker || !(attacker instanceof Zombie_1.Zombie || attacker instanceof Player_1.Player && attacker.isHumanZombie) || attacker.performHit(victim), victim.hpUpdate(parseFloat(data[2]), parseFloat(data[3]), "1" === data[19]), victim instanceof Humanoid_1.Humanoid && victim.invincibleUntil < this.ticksCounter && (victim.hitUntil = this.ticksCounter + 2, victim.lastHit = this.ticksCounter), data.length > 9 && this.playerDies(victim, attacker, parseInt(data[5]), parseInt(data[9]), parseInt(data[6]), parseInt(data[10]), parseInt(data[11]), parseInt(data[12]), parseInt(data[13]), parseInt(data[14]), parseInt(data[15]), parseInt(data[16]), parseInt(data[17]), "true" === data[18], parseFloat(data[19]), parseFloat(data[20]), parseFloat(data[21]), parseInt(data[22]), parseFloat(data[23]), parseFloat(data[24]), parseFloat(data[25]), parseFloat(data[26]), parseFloat(data[27])), parseFloat(data[8]) > 0 && attacker && attacker instanceof Player_1.Player && attacker.performLifesteal(parseFloat(data[8]))), "true" === data[4])
                                for (var _i = 0, _a = this.projectiles; _i < _a.length; _i++) {
                                    var p = _a[_i];
                                    if (p.id === parseInt(data[5])) return void p.createHitEffect(victim)
                                }
                        }, Game.prototype.playerDies = function(victim, killer, projectileID, newKillCount, murderWeaponId, newDeathCount, multiKillCount, killStreak, victimKillStreak, soulsKiller, soulsVictim, killerElo, victimElo, splash, objX, objY, objAOE, objID, startX, startY, vecX, vecY, vecH) {
                            splash && (new Slpash_1.Splash(this, victim.x, victim.y, Img_1.imgCoords.splash, 2), victim instanceof Player_1.Player && (victim.noDraw = !0));
                            var projectile = this.getGrenadeOrProjectileById(projectileID),
                                obj = null;
                            if (objID && objID >= 0)
                                for (var i = 0; i < this.objects.length; i++) this.objects[i].id === objID && (obj = this.objects[i], i = this.objects.length);
                            if (projectile instanceof Beam_1.Beam || victim.die(null != projectile ? projectile : void 0, murderWeaponId, objX, objY, objAOE, killer, null != obj ? obj : void 0, startX, startY, vecX, vecY, vecH), killer) {
                                if (victim instanceof Zombie_1.Zombie) {
                                    if (killer instanceof Zombie_1.Zombie) return;
                                    return killer instanceof Player_1.Player && (killer.setSouls(soulsKiller, victim.x, victim.y), killer === this.playingPlayer && victim.masterId !== config_1.playerData.db_id && (this.interface_.setMainKillMsg(lang_1.lang.get("game.msg.killed_zombie"), "#36FF36", "textInGreen"), killer.playFragSound(1, .8))), void this.refreshUIs()
                                }
                                var eloDiffKiller = 0,
                                    eloDiffVictim = 0;
                                this.type.ingameElo && (killer instanceof Player_1.Player && (eloDiffKiller = killer.setElo(killerElo, victim.x, victim.y)), victim instanceof Player_1.Player && (eloDiffVictim = victim.setElo(victimElo, victim.x, victim.y)));
                                var soulsVictimBefore = victim instanceof Player_1.Player ? victim.souls : 0;
                                killer instanceof Player_1.Player && killer.setKills(newKillCount), victim instanceof Player_1.Player && victim.setDeaths(newDeathCount), killer instanceof Player_1.Player && killer.setSouls(soulsKiller, victim.x, victim.y), victim instanceof Player_1.Player && victim.setSouls(soulsVictim);
                                var soulsLost = soulsVictimBefore - (victim instanceof Player_1.Player ? victim.souls : 0);
                                if (this.refreshUIs(), victim === killer) victim === this.playingPlayer && (this.interface_.setMainKillMsg(lang_1.lang.get("game.msg.killed_self") + (eloDiffKiller ? " (" + eloDiffKiller + " " + lang_1.lang.get("config.resource.score.name") + ")" : ""), "#FF3232", "textInRed"), soulsLost > 0 && this.playingPlayer && this.floatingTexts.push(new FloatingText_1.FloatingText(this, "-" + soulsLost, this.playingPlayer.x, this.playingPlayer.y - 1, 1700, 1, "#FF3232", 6 * this.SCALE_FACTOR, Img_1.imgCoords.souls)));
                                else if (victim === this.playingPlayer ? (soulsLost > 0 && this.playingPlayer && this.floatingTexts.push(new FloatingText_1.FloatingText(this, "-" + soulsLost, this.playingPlayer.x, this.playingPlayer.y - 1, 1700, 1, "#FF3232", 6 * this.SCALE_FACTOR, Img_1.imgCoords.souls)), killer instanceof Zombie_1.Zombie ? this.interface_.setMainKillMsg(lang_1.lang.get("game.msg.killed_by_zombie"), "#FF3232", "textInRed") : killer instanceof Player_1.Player && this.interface_.setMainKillMsg(lang_1.lang.get("game.msg.killed_by_player", {
                                        playerName: killer.name
                                    }) + (eloDiffVictim ? " (" + eloDiffVictim + " " + lang_1.lang.get("config.resource.score.name") + ")" : ""), "#FF3232", "textInRed")) : killer === this.playingPlayer && killer instanceof Player_1.Player && victim instanceof Player_1.Player && (0 !== killer.team && killer.team === victim.team ? (this.interface_.setMainKillMsg(lang_1.lang.get("game.msg.killed_teammate", {
                                        playerName: victim.name
                                    }), "#FF3232", "textInRed"), Sound_1.Sound.playSound("teamkill")) : (this.interface_.setMainKillMsg(lang_1.lang.get("game.msg.killed_player", {
                                        playerName: victim.name
                                    }) + (eloDiffKiller ? " (+" + eloDiffKiller + " " + lang_1.lang.get("config.resource.score.name") + ")" : ""), "#36FF36", "textInGreen"), killer.playFragSound(multiKillCount))), Data_1.killStreaks[killStreak]) {
                                    killer === this.playingPlayer ? (Sound_1.Sound.playSound(Data_1.killStreaks[killStreak].sound, void 0, void 0, .9), this.interface_.setMainKillMsg(lang_1.lang.get(Data_1.killStreaks[killStreak].msg_start_self) + (config_1.playerData.authLevel >= Data_1.AUTH_LEVEL.PLAYER ? " (+ " + Data_1.killStreaks[killStreak].xp + " " + lang_1.lang.get("config.resource.exp.name") + ")" : ""), "#95A6F0", "textInBlue", !0)) : killer instanceof Player_1.Player && (Sound_1.Sound.playSound("frag1", void 0, void 0, .5), this.interface_.setMainKillMsg(lang_1.lang.get(Data_1.killStreaks[killStreak].msg_start_others, {
                                        playerName: killer.name
                                    }), "#95A6F0", "textInBlue", !0));
                                    var victimStreak = function(kills) {
                                        var k = 999;
                                        for (; kills > 0;) {
                                            if (Data_1.killStreaks[kills]) return Data_1.killStreaks[kills];
                                            if (kills--, --k < 0) return null
                                        }
                                        return null
                                    }(victimKillStreak);
                                    victimStreak && victim instanceof Player_1.Player && killer instanceof Player_1.Player && (killer === this.playingPlayer ? this.interface_.setMainKillMsg(lang_1.lang.get(Data_1.killStreaks[killStreak].msg_ended_self, {
                                        victimName: victim.name
                                    }) + (config_1.playerData.authLevel >= Data_1.AUTH_LEVEL.PLAYER ? " (+ " + victimStreak.xp + " " + lang_1.lang.get("config.resource.exp.name") + ")" : ""), "#95A6F0", "textInBlue", !0) : this.interface_.setMainKillMsg(lang_1.lang.get(Data_1.killStreaks[killStreak].msg_ended_others, {
                                        victimName: victim.name,
                                        killerName: killer.name
                                    }), "#95A6F0", "textInBlue", !0))
                                }
                                killer instanceof Player_1.Player && victim && victim instanceof Player_1.Player && this.interface_.addKillMsg(killer, victim, projectile, murderWeaponId, null != obj ? obj : void 0, splash)
                            }
                        }, Game.prototype.ladderResult = function(arr) {
                            var msg = "",
                                livesP1 = this.type.lives - parseInt(arr[2]),
                                livesP2 = this.type.lives - parseInt(arr[4]),
                                p1 = this.getPlayerFromID(parseInt(arr[1])),
                                p2 = this.getPlayerFromID(parseInt(arr[3])),
                                points = "";
                            this.playingPlayer && (parseInt(arr[5]) === this.playingPlayer.id ? (msg = "You win!", Sound_1.Sound.playSound("ladder_loss"), points = "+ " + Math.round(10 * parseFloat(arr[6])) / 10 + " points") : parseInt(arr[5]) > 0 ? (msg = "You lose!", Sound_1.Sound.playSound("ladder_win"), points = "- " + Math.round(10 * parseFloat(arr[6])) / 10 + " points") : (msg = "Draw!", Sound_1.Sound.playSound("ladder_loss"))), this.interface_.ladderEndAt = Date.now(), this.interface_.ladderEndMsg = msg, this.interface_.ladderMsgArr = [p1.name, p2.name, livesP1.toString(), livesP2.toString(), points]
                        }, Game.prototype.switchWeapon = function(nr) {
                            !this.playingPlayer || !this.playingPlayerIsNotStunned() || this.ticksCounter < 0 || this.playingPlayer.isHumanZombie || (-1 === nr && (nr += 10), Weapons_1.weapons[nr] && Weapons_1.weapons[nr] !== this.playingPlayer.weapon && !Weapons_1.weapons[nr].noWeapon && (this.switchWeaponSound && this.switchWeaponSound.pause && (this.switchWeaponSound.pause(), this.switchWeaponSound.currentTime = 0, this.switchWeaponSound = null), Network_1.Network.send("sW$" + nr)))
                        }, Game.prototype.getPathForPos = function(x, y) {
                            var biggestBlock = 10,
                                xFloor = Math.floor(x),
                                yFloor = Math.floor(y),
                                x_ = x - xFloor,
                                y_ = y - yFloor;
                            return x_ < Data_1.CONST.PLAYER_RADIUS && (biggestBlock = Math.min(biggestBlock, this.getFieldPath(xFloor - 1, yFloor))), x_ > 1 - Data_1.CONST.PLAYER_RADIUS && (biggestBlock = Math.min(biggestBlock, this.getFieldPath(xFloor + 1, yFloor))), y_ < Data_1.CONST.PLAYER_RADIUS && (biggestBlock = Math.min(biggestBlock, this.getFieldPath(xFloor, yFloor - 1))), y_ > 1 - Data_1.CONST.PLAYER_RADIUS && (biggestBlock = Math.min(biggestBlock, this.getFieldPath(xFloor, yFloor + 1))), Math.sqrt(Math.pow(x_, 2) + Math.pow(y_, 2)) < Data_1.CONST.PLAYER_RADIUS && (biggestBlock = Math.min(biggestBlock, this.getFieldPath(xFloor - 1, yFloor - 1))), Math.sqrt(Math.pow(1 - x_, 2) + Math.pow(y_, 2)) < Data_1.CONST.PLAYER_RADIUS && (biggestBlock = Math.min(biggestBlock, this.getFieldPath(xFloor + 1, yFloor - 1))), Math.sqrt(Math.pow(1 - x_, 2) + Math.pow(1 - y_, 2)) < Data_1.CONST.PLAYER_RADIUS && (biggestBlock = Math.min(biggestBlock, this.getFieldPath(xFloor + 1, yFloor + 1))), Math.sqrt(Math.pow(x_, 2) + Math.pow(1 - y_, 2)) < Data_1.CONST.PLAYER_RADIUS && (biggestBlock = Math.min(biggestBlock, this.getFieldPath(xFloor - 1, yFloor + 1))), biggestBlock
                        }, Game.prototype.getPotentialPlaceTarget = function(a) {
                            var x = Math.floor((0, functions_2.getMouseGamePlayX)()) + .5,
                                y = Math.floor((0, functions_2.getMouseGamePlayY)()) + .5;
                            return Math.sqrt(Math.pow(this.playingPlayer.x - x, 2) + Math.pow(this.playingPlayer.y - y, 2)) <= a.range && 10 === this.getFieldPath(Math.floor(x), Math.floor(y)) ? {
                                x,
                                y
                            } : this.getNextFreeField(x, y, a.range, this.playingPlayer.x, this.playingPlayer.y)
                        }, Game.prototype.getAbilityFieldValue = function(ability, field) {
                            var val = field in ability ? ability[field] : 0,
                                pl_ab = this.playingPlayerAbilities[ability.id];
                            if (pl_ab && pl_ab.attributes)
                                for (var i = 0; i < pl_ab.attributes.length; i++) pl_ab.attributes[i] && ability.levelUpFields[i] && ability.levelUpFields[i] === field && (val += ability.levelUpValues[i] * pl_ab.attributes[i]);
                            return val
                        }, Game.prototype.addCorpses = function(a) {
                            this.corpses.length > 200 && this.corpses.splice(0, 20), this.corpses.push(a)
                        }, Game.prototype.drawFilter = function(name, cb) {
                            var _this_1 = this,
                                list = this[name],
                                ticksCounter = this.ticksCounter;
                            this[name] = list.filter((function(row) {
                                return !!row.update(ticksCounter) || (cb && (!0 === cb ? (0, functions_1.deleteFromArray)(_this_1.objectsToDraw, row) : cb(row)), !1)
                            }))
                        }, Game.prototype.draw = function() {
                            var now = Date.now(),
                                c = this.ctx;
                            if (this.playingPlayer && !this.playingPlayer.dieAt && this.playingPlayer.weapon && this.playingPlayer.weapon.requiredStandTime && this.playingPlayer.standTime >= this.playingPlayer.weapon.requiredStandTime && this.lastTimeMousePosSent + 65 < now && this.mouseUpdate(), this.playingPlayer && !this.playingPlayer.dieAt && Input_1.Input.leftMouse && this.playingPlayer.weapon && this.lastTimeMousePosSent + 65 < now) {
                                var wpn = this.playingPlayer.weapon,
                                    msTillNextShoot = 50 * (Math.max(this.playingPlayer.weaponCooldowns[wpn.id], 0) + Math.max(this.playingPlayer.switchWeaponUntil - this.ticksCounter, 0));
                                msTillNextShoot - Network_1.Network.lastPing - 150 < 0 && this.mouseUpdate(), msTillNextShoot <= 0 && this.lastEmptyClipSound + 500 < now && !this.playingPlayerClips[wpn.id] && !this.playingPlayerAmmo[wpn.id] && this.playingPlayer.weaponCooldowns[wpn.id] <= 0 && (this.playingPlayer.weaponCooldowns2[wpn.id] <= 0 || this.playingPlayer.weaponCooldowns2[wpn.id] >= (wpn.cooldown2 || 0)) && (this.interface_.setMainKillMsg(lang_1.lang.get("game.msg.no_ammo"), "grey", "textInGrey"), Sound_1.Sound.playSound("empty_clip", this.playingPlayer.x, this.playingPlayer.y, .75), this.lastEmptyClipSound = now)
                            } else this.playingPlayerCountActiveHeatseeking2Missiles > 0 && this.lastTimeMousePosSent + 65 < now && this.mouseUpdate();
                            this._percentageOfCurrentTickPassed = Math.min((now - this.lastUpdate) / functions_2.replaySettings.replayOption.tickTime, 1);
                            var exactTicks = this.ticksCounter < 0 ? this.roundTime : this.ticksCounter + this._percentageOfCurrentTickPassed;
                            if (this.ticksCounter < 0 && (this._percentageOfCurrentTickPassed = 0), this.playingPlayer && (this.SCALE_CONST = .06), this.FIELD_SIZE = Math.sqrt(window.innerWidth * window.innerHeight) * this.SCALE_CONST, this.SCALE_FACTOR = this.FIELD_SIZE / 16, !this.fastForward) {
                                var x = 0,
                                    y = 0,
                                    p = null;
                                if (this.playingPlayer) {
                                    var playerWeight = 1;
                                    if (this.playingPlayer.standTime && this.playingPlayer.weapon && this.playingPlayer.weapon.requiredStandTime) {
                                        var extraWeight = Math.min((this.playingPlayer.standTime + this._percentageOfCurrentTickPassed) / this.playingPlayer.weapon.requiredStandTime, 1);
                                        playerWeight += 1.5 * -(Math.pow(1.26 * extraWeight, 3) - 2 * Math.pow(1.26 * extraWeight - .04, 2))
                                    }
                                    x = ((this.playingPlayer.x0 + this._percentageOfCurrentTickPassed * (this.playingPlayer.x - this.playingPlayer.x0) - this.cameraX) * this.FIELD_SIZE * 2 + Input_1.Input.x * playerWeight) / (2 + playerWeight) / this.FIELD_SIZE + this.cameraX, y = ((this.playingPlayer.y0 + this._percentageOfCurrentTickPassed * (this.playingPlayer.y - this.playingPlayer.y0) - this.cameraY) * this.FIELD_SIZE * 2 + Input_1.Input.y * playerWeight) / (2 + playerWeight) / this.FIELD_SIZE + this.cameraY
                                } else this.players.length > 0 && (p = this.iAmSpec ? this.specPlayer : this.players[Math.floor(this.ticksCounter / 80) % this.players.length]) && (x = ((p.x0 + this._percentageOfCurrentTickPassed * (p.x - p.x0) - this.cameraX) * this.FIELD_SIZE * 2 + Input_1.Input.x) / 3 / this.FIELD_SIZE + this.cameraX, y = ((p.y0 + this._percentageOfCurrentTickPassed * (p.y - p.y0) - this.cameraY) * this.FIELD_SIZE * 2 + Input_1.Input.y) / 3 / this.FIELD_SIZE + this.cameraY);
                                this.players.length > 0 && (this.cameraX = -window.innerWidth / 2 / this.FIELD_SIZE + x, this.cameraY = -window.innerHeight / 2 / this.FIELD_SIZE + y), this.iAmSpec && !p && (Input_1.Input.keys[Input_1.commandKeys[Input_1.COMMAND.UP]] && (this.specY -= .019 * this.timeDiff), Input_1.Input.keys[Input_1.commandKeys[Input_1.COMMAND.DOWN]] && (this.specY += .019 * this.timeDiff), Input_1.Input.keys[Input_1.commandKeys[Input_1.COMMAND.LEFT]] && (this.specX -= .019 * this.timeDiff), Input_1.Input.keys[Input_1.commandKeys[Input_1.COMMAND.RIGHT]] && (this.specX += .019 * this.timeDiff), this.cameraX = this.specX, this.cameraY = this.specY)
                            }
                            if (this.rumbleUntil > now) {
                                var power = this.rumblePower * (1 - (now - this.rumbleStart) / (this.rumbleUntil - this.rumbleStart));
                                this.cameraX += Math.random() * power * 2 - power, this.cameraY += Math.random() * power * 2 - power
                            }
                            if (this.cameraX2 = this.cameraX + window.innerWidth / this.FIELD_SIZE, this.cameraY2 = this.cameraY + window.innerHeight / this.FIELD_SIZE, c.fillStyle = "#30302C", c.fillRect(0, 0, window.innerWidth, window.innerHeight), !this.fastForward) {
                                var canv = this.groundCanvas[Math.floor(exactTicks / 10) % this.groundCanvas.length],
                                    drawW = Math.min(window.innerWidth, canv.width * this.SCALE_FACTOR),
                                    drawH = Math.min(window.innerHeight, canv.height * this.SCALE_FACTOR);
                                c.drawImage(canv, 16 * (this.cameraX - this.groundMinX), 16 * (this.cameraY - this.groundMinY), drawW / this.SCALE_FACTOR, drawH / this.SCALE_FACTOR, 0, 0, drawW, drawH);
                                for (var _i = 0, _a = this.walkways; _i < _a.length; _i++) {
                                    var w = _a[_i];
                                    if (w.x + 1 >= this.cameraX && w.y + 1 >= this.cameraY && w.x - 1 <= this.cameraX2 && w.y - 1 <= this.cameraY2) {
                                        var t = w.type,
                                            sX = w.shiftX ? t.img.x + 8 * Math.sign(w.shiftX) - 16 * w.shiftX * exactTicks % 16 : t.img.x,
                                            sY = w.shiftY ? t.img.y + 8 * Math.sign(w.shiftY) - 16 * w.shiftY * exactTicks % 16 : t.img.y;
                                        x = (w.x - this.cameraX) * this.FIELD_SIZE, y = (w.y - this.cameraY) * this.FIELD_SIZE;
                                        c.drawImage(_1.imgs.tileSheet, sX, sY, t.img.w, t.img.h, x, y, t.w * this.FIELD_SIZE, t.h * this.FIELD_SIZE)
                                    }
                                }
                                Data_1.CONST.ENABLE_LIGHTMAP && c.drawImage(_visionCanvas, 4 * this.cameraX + 16, 4 * this.cameraY + 16, drawW / this.SCALE_FACTOR * .25, drawH / this.SCALE_FACTOR * .25, 0, 0, drawW, drawH);
                                for (var i = 0; i < this.whiteCircles.length; i++) {
                                    var wc = this.whiteCircles[i];
                                    if (wc.time + 30 > this.ticksCounter) {
                                        var age = exactTicks - wc.time,
                                            img = wc.img,
                                            scale = 6 * age,
                                            drawX = this.g2rx(wc.x) - img.w / 2 * scale,
                                            drawY = this.g2ry(wc.y) - img.h / 2 * scale;
                                        c.globalAlpha = Math.max(.4 - age / 20, 0), c.drawImage(_1.imgs.miscSheet, img.x, img.y, img.w, img.h, drawX, drawY, img.w * scale, img.h * scale), c.globalAlpha = 1
                                    } else this.whiteCircles.splice(i, 1), i--
                                }
                                var fieldsCount = Img_1.imgCoords.fog.w / 16;
                                this.drawFog(exactTicks, fieldsCount);
                                for (var _b = 0, objs_1 = this.objectsToDraw.slice(); _b < objs_1.length; _b++) {
                                    var o = objs_1[_b];
                                    o.draw(exactTicks, this.cameraX, this.cameraY, this.cameraX2, this.cameraY2, this._percentageOfCurrentTickPassed), o instanceof Player_1.Player && o !== this.playingPlayer && o.weapon && o.weapon.hasLine && o.standTime >= o.weapon.requiredStandTime && !o.dieAt && o.drawSniperLine(exactTicks)
                                }
                                if (this.playingPlayer && (this.playingPlayer.weapon && this.playingPlayer.weapon.isHeatSeeking || Input_1.Input.activeAbility && Input_1.Input.activeAbility.locks)) {
                                    if (this.refreshLockedPlayer((0, functions_2.getMouseGamePlayX)(), (0, functions_2.getMouseGamePlayY)()), this.targetLockedPlayer) {
                                        scale = this.SCALE_FACTOR * (1.7 - Math.floor(.4 * this.ticksCounter) % 4 * .1);
                                        var x_ = ((p = this.targetLockedPlayer).x0 + this._percentageOfCurrentTickPassed * (p.x - p.x0) - this.cameraX) * this.FIELD_SIZE - Img_1.imgCoords.aimLock.w / 2 * scale,
                                            y_ = (p.y0 + this._percentageOfCurrentTickPassed * (p.y - p.y0) - this.cameraY) * this.FIELD_SIZE - .75 * Img_1.imgCoords.aimLock.h * scale;
                                        c.drawImage(_1.imgs.miscSheet, Img_1.imgCoords.aimLock.x, Img_1.imgCoords.aimLock.y, Img_1.imgCoords.aimLock.w, Img_1.imgCoords.aimLock.h, x_, y_, scale * Img_1.imgCoords.aimLock.w, scale * Img_1.imgCoords.aimLock.h)
                                    }
                                } else this.targetLockedPlayer = null;
                                if (this.playingPlayer && this.playingPlayer.weapon && this.playingPlayer.weapon.autoAimRange)
                                    if (p = this.getClosestAlly((0, functions_2.getMouseGamePlayX)(), (0, functions_2.getMouseGamePlayY)(), this.playingPlayer.weapon.autoAimRange)) {
                                        scale = this.SCALE_FACTOR * (1.7 - Math.floor(.4 * this.ticksCounter) % 4 * .1), x_ = (p.x0 + this._percentageOfCurrentTickPassed * (p.x - p.x0) - this.cameraX) * this.FIELD_SIZE - Img_1.imgCoords.aimLockGreen.w / 2 * scale, y_ = (p.y0 + this._percentageOfCurrentTickPassed * (p.y - p.y0) - this.cameraY) * this.FIELD_SIZE - .75 * Img_1.imgCoords.aimLockGreen.h * scale;
                                        c.drawImage(_1.imgs.miscSheet, Img_1.imgCoords.aimLockGreen.x, Img_1.imgCoords.aimLockGreen.y, Img_1.imgCoords.aimLockGreen.w, Img_1.imgCoords.aimLockGreen.h, x_, y_, scale * Img_1.imgCoords.aimLockGreen.w, scale * Img_1.imgCoords.aimLockGreen.h)
                                    } for (var _c = 0, _d = this.floatingTexts; _c < _d.length; _c++) {
                                    _d[_c].draw()
                                }
                                var x1 = this.cameraX + (this.cameraX2 - this.cameraX) / 2;
                                if (config_1.options.graphicSettings > 1) {
                                    c.globalAlpha = .05;
                                    for (x = 0 - fieldsCount - exactTicks / 73.27 % fieldsCount; x < this.map.x + fieldsCount; x += fieldsCount)
                                        for (y = 0 - fieldsCount - exactTicks / 77.41 % fieldsCount; y < this.map.y + fieldsCount; y += fieldsCount) {
                                            x_ = (x1 + 1.5 * (x - x1) - this.cameraX) * this.FIELD_SIZE, y_ = (this.cameraY2 + 1.5 * (y - this.cameraY2) - this.cameraY) * this.FIELD_SIZE;
                                            x_ <= window.innerWidth && y_ <= window.innerHeight && x_ + Img_1.imgCoords.fog.w * this.SCALE_FACTOR * 1.5 >= 0 && y_ + Img_1.imgCoords.fog.h * this.SCALE_FACTOR * 1.5 >= 0 && c.drawImage(_1.imgs.tileSheet, Img_1.imgCoords.fog.x, Img_1.imgCoords.fog.y, Img_1.imgCoords.fog.w, Img_1.imgCoords.fog.h, x_, y_, 1.5 * this.SCALE_FACTOR * Img_1.imgCoords.fog.w, 1.5 * this.SCALE_FACTOR * Img_1.imgCoords.fog.h)
                                        }
                                    c.globalAlpha = 1
                                }
                                if (this.playingPlayer && this.playingPlayer.weapon && this.playingPlayer.weapon.range && this.playingPlayer.switchWeaponUntil <= this.ticksCounter) {
                                    x = (this.playingPlayer.x0 + this._percentageOfCurrentTickPassed * (this.playingPlayer.x - this.playingPlayer.x0) - this.cameraX) * this.FIELD_SIZE, y = (this.playingPlayer.y0 + this._percentageOfCurrentTickPassed * (this.playingPlayer.y - this.playingPlayer.y0) - this.cameraY) * this.FIELD_SIZE;
                                    c.globalAlpha = .2, (0, functions_2.drawCircle)(c, x, y, this.FIELD_SIZE * (this.playingPlayer.weapon.range + Data_1.CONST.PLAYER_RADIUS), "white"), c.globalAlpha = 1
                                }
                                if (this.playingPlayer && Input_1.Input.activeAbility && Input_1.Input.activeAbility.range) {
                                    x = (this.playingPlayer.x0 + this._percentageOfCurrentTickPassed * (this.playingPlayer.x - this.playingPlayer.x0) - this.cameraX) * this.FIELD_SIZE, y = (this.playingPlayer.y0 + this._percentageOfCurrentTickPassed * (this.playingPlayer.y - this.playingPlayer.y0) - this.cameraY) * this.FIELD_SIZE;
                                    c.globalAlpha = .2, (0, functions_2.drawCircle)(c, x, y, this.FIELD_SIZE * this.getAbilityFieldValue(Input_1.Input.activeAbility, "range"), "white"), c.globalAlpha = 1
                                }
                                if (this.playingPlayer && Input_1.Input.activeAbility && Input_1.Input.activeAbility.type === Abilities_1.AbilityType.Place && Input_1.Input.activeAbility.object) {
                                    var target = this.getPotentialPlaceTarget(Input_1.Input.activeAbility);
                                    if (target) {
                                        var obj = MapObject_1.objects[Input_1.Input.activeAbility.object],
                                            ani = MapObject_1.animationData[obj.animation];
                                        scale = this.SCALE_FACTOR * (obj.imgScale ? obj.imgScale : 1), img = Img_1.imgCoords[obj.img[0]], x = (target.x - this.cameraX) * this.FIELD_SIZE + -img.w / 2 * scale, y = (target.y + (obj.yOffset ? obj.yOffset : 0) / 16 - .2 - this.cameraY) * this.FIELD_SIZE + (8 - img.h) * scale;
                                        if (c.drawImage(_1.imgs.miscSheet, img.x, img.y, img.w, img.h, x, y, img.w * scale, img.h * scale), ani && ani.imgTurret01) {
                                            img = ani.imgTurret01;
                                            var x2 = (target.x - this.cameraX) * this.FIELD_SIZE + -img.w / 2 * scale,
                                                y2 = (target.y - .2 - this.cameraY) * this.FIELD_SIZE + (8 - img.h) * scale;
                                            c.drawImage(_1.imgs.miscSheet, img.x, img.y, img.w, img.h, x2, y2, img.w * scale, img.h * scale)
                                        }
                                    }
                                }
                                if (config_1.options.graphicSettings > 1)
                                    for (var x1_1 = this.cameraX + (this.cameraX2 - this.cameraX) / 2, _e = 0, _f = this.fairies; _e < _f.length; _e++) {
                                        _f[_e].draw(exactTicks, x1_1, this.cameraY2)
                                    }
                                config_1.options.graphicSettings > 1 && (c.globalAlpha = .6, c.drawImage(_1.imgs.miscSheet, Img_1.imgCoords.filter.x, Img_1.imgCoords.filter.y, Img_1.imgCoords.filter.w, Img_1.imgCoords.filter.h, 0, 0, window.innerWidth, window.innerHeight), c.globalAlpha = 1), this.miniMap && this.ticksCounter % 2 == 1 && this.ticksCounter !== this.previousFramesTick && this.miniMap.draw(this._percentageOfCurrentTickPassed), this.redScreen > 0 && (c.fillStyle = "rgba(255, 0, 0, " + this.redScreen / 650 + ")", c.fillRect(0, 0, window.innerWidth, window.innerHeight), this.redScreen -= this.timeDiff), this.lastPickUp + 250 >= now && (c.fillStyle = "rgba(255, 255, 255, " + (125 - Math.abs(125 - (now - this.lastPickUp))) / 450 + ")", c.fillRect(0, 0, window.innerWidth, window.innerHeight))
                            }
                            var str = "";
                            if (this.interface_.hoverWeapon >= 0 || this.interface_.hoverAbility >= 0 || this.interface_.hoverChoice || this.interface_.buttonIsHovered || this.interface_.skipButtonHover || this.interface_.unskipButtonHover) str = 'url("imgs/cursor.cur"), auto';
                            else if (this.playingPlayer && Input_1.Input.activeAbility && (Input_1.Input.activeAbility.type === Abilities_1.AbilityType.Blink && this.playingPlayer.carriesFlag() || Input_1.Input.activeAbility.energy > this.playingPlayerEnergy || this.lastAbilityUses[this.pl_active_abilities[0] === Input_1.Input.activeAbility ? 0 : 1] + Input_1.Input.activeAbility.cooldown > this.ticksCounter)) str = 'url("imgs/cx.cur"), auto';
                            else if (this.playingPlayer && Input_1.Input.activeAbility && Input_1.Input.activeAbility.type === Abilities_1.AbilityType.Blink) str = 'url("imgs/cb.cur"), auto';
                            else if (this.playingPlayerCountActiveHeatseeking2Missiles > 0 && !this.replayMode) str = 'url("imgs/crosshair' + (this.ticksCounter % 10 < 5 ? "2" : "") + '.png") 26 26, auto';
                            else if (this.playingPlayer && this.playingPlayer.weapon && this.playingPlayer.weapon.aoeCursor && !this.playingPlayer.dieAt)(0, functions_2.drawCircle)(this.ctx, Input_1.Input.x, Input_1.Input.y, this.playingPlayer.weapon.aoe * this.FIELD_SIZE, void 0, "rgba(255, 150, 150, 0.2)", .9), (0, functions_2.drawCircle)(this.ctx, Input_1.Input.x, Input_1.Input.y, .066 * this.FIELD_SIZE, void 0, "rgba(255, 255, 255, 0.15)", .9), str = "none";
                            else if (this.playingPlayer && this.playingPlayer.weapon && !this.playingPlayer.weapon.aoeCursor && !this.playingPlayer.dieAt) {
                                var cur = 0;
                                Input_1.Input.leftMouse && (cur = 6), str = 'url("imgs/c' + cur + '.cur"), auto'
                            } else str = 'url("imgs/cursor.cur"), auto';
                            this.lastCursorStr !== str && (this.lastCursorStr = str, this.canvas.style.cursor = str), this.map !== map1_1.map1 && this.interface_.draw(exactTicks), this.previousFramesTick = this.ticksCounter
                        }, Game.prototype.drawFog = function(exactTicks, fieldsCount) {
                            if (!(config_1.options.graphicSettings < 1)) {
                                this.ctx.globalAlpha = .06;
                                for (var x = exactTicks / 67 % fieldsCount - fieldsCount; x < this.map.x; x += fieldsCount)
                                    for (var y = exactTicks / 63.23 % fieldsCount - fieldsCount; y < this.map.y; y += fieldsCount) {
                                        var x_cut_1 = 0;
                                        x < 0 && (x_cut_1 = -x);
                                        var y_cut_1 = 0;
                                        y < 0 && (y_cut_1 = -y);
                                        var x_cut_2 = 0;
                                        x + fieldsCount > this.map.x && (x_cut_2 = x + fieldsCount - this.map.x);
                                        var y_cut_2 = 0;
                                        y + fieldsCount > this.map.y && (y_cut_2 = y + fieldsCount - this.map.y);
                                        var x_target = (x + x_cut_1 - this.cameraX) * this.FIELD_SIZE,
                                            y_target = (y + y_cut_1 - this.cameraY) * this.FIELD_SIZE,
                                            x_source = Img_1.imgCoords.fog.x + 16 * x_cut_1,
                                            y_source = Img_1.imgCoords.fog.y + 16 * y_cut_1,
                                            w_source = Img_1.imgCoords.fog.w - 16 * (x_cut_1 + x_cut_2),
                                            h_source = Img_1.imgCoords.fog.h - 16 * (y_cut_1 + y_cut_2),
                                            w_target = w_source * this.SCALE_FACTOR,
                                            h_target = h_source * this.SCALE_FACTOR;
                                        x_target <= window.innerWidth && y_target <= window.innerHeight && x_target + w_target >= 0 && y_target + h_target >= 0 && this.ctx.drawImage(_1.imgs.tileSheet, x_source, y_source, w_source, h_source, x_target, y_target, w_target, h_target)
                                    }
                                this.ctx.globalAlpha = 1
                            }
                        }, Game.prototype.g2rx = function(x) {
                            return (x - this.cameraX) * this.FIELD_SIZE
                        }, Game.prototype.g2ry = function(y) {
                            return (y - this.cameraY) * this.FIELD_SIZE
                        }, Game
                    }();
                exports.Game = Game;
                var GameUpdateMode = {
                    normal: function(t, d, data, i) {
                        var p = t.getAnyFromID(d);
                        null !== p && (p.x00 = p.x0, p.y00 = p.y0, p.x0 = parseFloat(data[i + 3]) / Data_1.CONST.TRANSMUL, p.y0 = parseFloat(data[i + 4]) / Data_1.CONST.TRANSMUL, p.x = parseFloat(data[i + 1]) / Data_1.CONST.TRANSMUL, p.y = parseFloat(data[i + 2]) / Data_1.CONST.TRANSMUL, p.lastPosUpdate = t.ticksCounter)
                    },
                    wC: function(t, d, data, i) {
                        var p = t.getPlayerFromID(d);
                        null !== p && (p === t.playingPlayer && p.resetCooldowns(), p.isReloading = !1, p.lastWeapon = p.weapon, p.weapon = Weapons_1.weapons[parseInt(data[i + 1])], p.switchWeaponUntil = t.ticksCounter + Data_1.CONST.WPN_SWITCH_TICKS, p.resetCooldowns(), p === t.playingPlayer && (t.switchWeaponSound = Sound_1.Sound.playSound("switch_weapon", void 0, void 0, .7), t.playingPlayer.resetCooldowns()))
                    },
                    trn: function(t, d, data, i) {
                        var p = t.getPlayerFromID(d);
                        p && p !== t.playingPlayer && (p.direction2 = parseInt(data[i + 1]))
                    },
                    js: function(t, d, data, i) {
                        var p = t.getPlayerFromID(d);
                        p && (p.z = parseFloat(data[i + 1]), p.vz = parseFloat(data[i + 2]))
                    },
                    pa: function(t, d, data, i) {
                        for (var _i = 0, _a = t.objectsToDraw; _i < _a.length; _i++) {
                            var o = _a[_i];
                            if ("pickUp" in o && o.id === d) return void o.pickUp(parseInt(data[i + 1]), "1" === data[i + 2])
                        }
                    },
                    rp: function(t, d, data, i) {
                        for (var k = 0, j = t.projectiles.length; k < j; k++) {
                            var p = t.projectiles[k];
                            if (p.id === d) {
                                p.reflectionUpdate(parseFloat(data[i + 1]), parseFloat(data[i + 2]), parseFloat(data[i + 3]), parseFloat(data[i + 4]));
                                break
                            }
                        }
                    },
                    rsh: function(t, d, data, i) {
                        var p = t.getPlayerFromID(d);
                        if (p) {
                            for (var proj = null, i2 = 0; i2 < t.projectiles.length; i2++) t.projectiles[i2].id === parseInt(data[i + 1]) && (proj = t.projectiles[i2]);
                            p.refShieldHit(proj, parseInt(data[i + 2]))
                        }
                    },
                    p2u: function(t, d, data, i) {
                        for (var k = 0, j = t.projectiles.length; k < j; k++) {
                            var p = t.projectiles[k];
                            if (p.id === d) {
                                p.x0 = p.x, p.y0 = p.y, p.x = parseFloat(data[i + 1]), p.y = parseFloat(data[i + 2]), p.vecX = p.x - p.x0, p.vecY = p.y - p.y0, p.skipNextUpdate = !0, p.createDrawLens();
                                break
                            }
                        }
                    },
                    ts: function(t, d, data, i) {
                        for (var k = 0; k < t.players.length; k++)
                            if (t.players[k].id === parseInt(data[i])) {
                                var p = t.players[k];
                                p.team = parseInt(data[i + 1]);
                                var str = "";
                                str = p === t.playingPlayer ? "You have been switched to the other team because of auto team balance" : "Player " + p.name + " has been switched to team " + data[i + 1] + " because of auto team balance", t.interface_.setMainKillMsg(str, "#36FF36", "textInGreen"), Sound_1.Sound.playSound("switch", void 0, void 0, .8)
                            }
                    },
                    o2u: function(t, d, data, i) {
                        for (var k = 0; k < t.objects.length; k++) t.objects[k].id === parseInt(data[i]) && (t.objects[k].direction = parseFloat(data[i + 1]), k = t.objects.length)
                    },
                    zph: function(t, d, data, i) {
                        var attacker = t.getZombieFromID(d),
                            id = parseInt(data[i + 1]),
                            victim = "1" === data[i + 2] ? t.getObjectFromID(id) : t.getPlayerFromID(id);
                        attacker && victim && attacker.performPreHit(victim)
                    },
                    stu: function(t, d, data, i) {
                        for (var k = 0, j = t.players.length; k < j; k++) {
                            var p = t.players[k];
                            if (p.id === d) {
                                var time = 0 | parseFloat(data[i + 1]);
                                p.standTime = time, 1 === time && t.playingPlayer === p && Sound_1.Sound.playSound("zoom", p.x, p.y, 1);
                                break
                            }
                        }
                    },
                    aiu: function(t, d, data, i) {
                        var p = t.getPlayerFromID(parseInt(data[i]));
                        p && t.playingPlayer !== p && (p.aimX = parseFloat(data[i + 1]), p.aimY = parseFloat(data[i + 2]))
                    },
                    hpU: function(t, d, data, i) {
                        var p = t.getAnyFromID(d);
                        if (p) {
                            var oldHP = p.hp,
                                diff = parseFloat(data[i + 1]);
                            p.hp = Math.min(p.hp + diff, p.maxHP), !(p.hp <= oldHP) && p instanceof Humanoid_1.Humanoid && (p.hpGlideAmount = p.hp - oldHP, p.hpGlideStart = t.ticksCounter, p.hpGlideEnd = t.ticksCounter + p.hpGlideAmount / diff * 4, p.x + 3 >= t.cameraX && p.y + 3 >= t.cameraY && p.x - 3 <= t.cameraX2 && p.y - 3 <= t.cameraY2 && !t.fastForward && new Sprite_1.Sprite(t, {
                                x: p.x + .5 * Math.random() - .25,
                                y: p.y + .5 + .5 * Math.random(),
                                img: Img_1.imgCoords.heal,
                                scaleFunction: function(age) {
                                    return -1 * (1 / ((.9 * age - 125) / 500 + .31) + age / 4) + 16.9
                                },
                                age: 10 * Math.random() + 35,
                                r1: .1 * Math.random() - .05,
                                xFunction: function(age) {
                                    return Math.pow(age, .7) * this.r1
                                },
                                zFunction: function(age) {
                                    return 1.4 + .02 * age
                                }
                            }))
                        }
                    },
                    tB: function(t, d, data, i) {
                        var p = t.getPlayerFromID(d);
                        if (p) {
                            if (p.turnBoss(), !p.isHumanZombie) {
                                if (t.turnBoss) return;
                                t.turnBoss = !0
                            }
                            var text = "";
                            if (p.isHumanZombie) text = t.playingPlayer === p ? lang_1.lang.get("game.msg.turn_boss.zombie_boss") : lang_1.lang.get("game.msg.turn_boss.zombie", {
                                boss: p.unsafeName
                            });
                            else {
                                for (var human = 0, _i = 0, _a = t.players; _i < _a.length; _i++) {
                                    var cp = _a[_i];
                                    cp.isHumanZombie || cp.hp <= 0 || human++
                                }
                                text = lang_1.lang.get("game.msg.turn_boss.human", {
                                    human
                                })
                            }
                            t.interface_.setMainKillMsg(text, "#FF3232", "textInRed")
                        }
                    },
                    nF: function(t, d, data, i) {
                        if (!t.fastForward) {
                            for (var j = 0; j < 2 * Math.PI; j += .3 + .3 * Math.random()) new Sprite_1.Sprite(t, {
                                x: parseInt(data[i]) + Math.cos(j) * (parseFloat(data[i + 3]) - .9 + .4 * Math.random()),
                                y: parseInt(data[i + 1]) - 0 + Math.sin(j) * (parseFloat(data[i + 3]) - .9 + .4 * Math.random()),
                                img: Img_1.imgCoords.poisonFog1,
                                r4: .01 * (Math.random() - .5),
                                r5: parseFloat(data[i + 3]) / 2.9,
                                scaleFunction: function(age) {
                                    return (1.6 + this.r4 * age) * this.r5
                                },
                                alphaFunction: function(age) {
                                    return Math.min(this.ticksLeft > 30 ? .3 : Math.max(.3 * this.ticksLeft / 30, 0), .02 * age)
                                },
                                age: parseInt(data[i + 2]) + 20,
                                r1: .01 * (Math.random() - .5),
                                r2: .01 * (Math.random() - .5),
                                r3: .01 * (Math.random() - .5),
                                zFunction: function(age) {
                                    return 1 + this.r1 * age
                                },
                                xFunction: function(age) {
                                    return 1 + this.r2 * age
                                },
                                yFunction: function(age) {
                                    return 1 + this.r3 * age
                                }
                            });
                            for (j = 0; j < 2 * Math.PI; j += .3 + .3 * Math.random()) new Sprite_1.Sprite(t, {
                                x: parseInt(data[i]) + Math.cos(j) * (parseFloat(data[i + 3]) - .8) * Math.random(),
                                y: parseInt(data[i + 1]) - 0 + Math.sin(j) * (parseFloat(data[i + 3]) - .8) * Math.random(),
                                img: Img_1.imgCoords.poisonFog2,
                                r4: .01 * (Math.random() - .5),
                                r5: parseFloat(data[i + 3]) / 3,
                                scaleFunction: function(age) {
                                    return (1.6 + this.r4 * age) * this.r5
                                },
                                alphaFunction: function(age) {
                                    return Math.min(this.ticksLeft > 30 ? .3 : Math.max(.3 * this.ticksLeft / 30, 0), .02 * age)
                                },
                                age: parseInt(data[i + 2]) + 20,
                                r1: .01 * (Math.random() - .5),
                                r2: .01 * (Math.random() - .5),
                                r3: .01 * (Math.random() - .5),
                                zFunction: function(age) {
                                    return 1 + this.r1 * age
                                },
                                xFunction: function(age) {
                                    return 1 + this.r2 * age
                                },
                                yFunction: function(age) {
                                    return 1 + this.r3 * age
                                }
                            })
                        }
                    },
                    ab: function(t, d, data, i) {
                        var p = t.getPlayerFromID(d),
                            ab = Abilities_1.abilities[parseInt(data[i + 1])];
                        p && ab && (ab.type === Abilities_1.AbilityType.Invis ? (p.isInvisible = !0, p.x + 3 >= t.cameraX && p.y + 3 >= t.cameraY && p.x - 3 <= t.cameraX2 && p.y - 3 <= t.cameraY2 && (t.createPoundSmoke(p.x, p.y + .5, .5, 9, .4), Sound_1.Sound.playSound("invis", p.x, p.y))) : ab.type === Abilities_1.AbilityType.Playdead ? (p.turnCorpseTill = t.ticksCounter + ab.duration, p.isFakeCorpse = !0) : ab.type === Abilities_1.AbilityType.Scan ? (p === t.playingPlayer && (t.lastAbilityUses[t.pl_active_abilities[0] === ab ? 0 : 1] = t.ticksCounter, t.showEnemiesOnMinimapUntil = t.ticksCounter + t.getAbilityFieldValue(ab, "duration"), t.interface_.setMainKillMsg(lang_1.lang.get("game.skills.scan.tip"), "rgba(0, 255, 6, 0.7)", "textInGreen", !0)), p.x + 5 >= t.cameraX && p.y + 5 >= t.cameraY && p.x - 5 <= t.cameraX2 && p.y - 5 <= t.cameraY2 && (t.addCircle(p.x, p.y, Img_1.imgCoords.greenCircle), Sound_1.Sound.playSound("scan", p.x, p.y, p === t.playingPlayer ? 1 : .66))) : ab.type === Abilities_1.AbilityType.Shield && (ab.reflects ? p.lastShieldActivated2 = t.ticksCounter : p.lastShieldActivated = t.ticksCounter, p.x + 5 >= t.cameraX && p.y + 5 >= t.cameraY && p.x - 5 <= t.cameraX2 && p.y - 5 <= t.cameraY2 && Sound_1.Sound.playSound("shield", p.x, p.y, p === t.playingPlayer ? 1 : .66)), p === t.playingPlayer && ab.energy && (t.playingPlayerEnergy -= ab.energy))
                    },
                    ab2: function(t, d, data, i) {
                        var p = t.getPlayerFromID(d);
                        p && p.disableAbility(Abilities_1.abilities[parseInt(data[i + 1])])
                    },
                    blk: function(t, d, data, i) {
                        var p = t.getPlayerFromID(d);
                        p && (p.blink(parseFloat(data[i + 1]), parseFloat(data[i + 2])), p === t.playingPlayer && "1" === data[i + 3] && (t.playingPlayerEnergy -= Abilities_1.abilities[3].energy, t.lastAbilityUses[t.pl_active_abilities[0] === Abilities_1.abilities[3] ? 0 : 1] = t.ticksCounter, t.noShootUntil = t.ticksCounter + Data_1.CONST.NO_SHOOT_AFTER_BLINK_TICKS))
                    },
                    blP: function(t, d, data, i) {
                        for (var k = 0, j = t.projectiles.length; k < j; k++) {
                            var p = t.projectiles[k];
                            if (p.id === d) {
                                p.blink(parseFloat(data[i + 1]), parseFloat(data[i + 2]), parseFloat(data[i + 3]), parseFloat(data[i + 4]));
                                break
                            }
                        }
                        for (k = 0, j = t.grenades.length; k < j; k++) {
                            var g = t.grenades[k];
                            if (g.id === d) {
                                g.blink(parseFloat(data[i + 1]), parseFloat(data[i + 2]), parseFloat(data[i + 3]), parseFloat(data[i + 4]));
                                break
                            }
                        }
                    },
                    ptz: function(t, d, data, i) {
                        var p = t.getPlayerFromID(d);
                        p && p.turnZombie()
                    },
                    cZ: function(t, d, data, i) {
                        var p = t.getPlayerFromID(d);
                        p && (p.getCured(), p.lastZombieToHumanTransformation = t.ticksCounter, p === t.playingPlayer && (t.playingPlayerIsZombie = !1))
                    },
                    pptz: function(t, d, data, i) {
                        console.log(data);
                        var p = t.getPlayerFromID(d);
                        p && (p.startBlinkingGreen = t.ticksCounter)
                    },
                    luP: function(t, d, data, i) {
                        var p = t.getPlayerFromID(d);
                        p && p.createLvlUpEffect()
                    },
                    blO: function(t, d, data, i) {
                        for (var k = 0, j = t.objects.length; k < j; k++) {
                            var o = t.objects[k];
                            if (o.id === d) {
                                o.blink(parseFloat(data[i + 1]), parseFloat(data[i + 2]), parseFloat(data[i + 3]), parseFloat(data[i + 4]));
                                break
                            }
                        }
                    },
                    rl: function(t, d, data, i) {
                        var p = t.getPlayerFromID(d);
                        p && p.weapon && (p.isReloading = !0, p.weaponCooldowns2[p.weapon.id] = p.weapon.cooldown2, p.weapon.reload2Sound && p === t.playingPlayer && (p.reloadSound2 = Sound_1.Sound.playSound(p.weapon.reload2Sound, p.x, p.y, .55)))
                    },
                    att: function(t, d, data, i) {
                        var p = t.getPlayerFromID(d);
                        p && p.updateField(data[i + 1], parseFloat(data[i + 2]))
                    },
                    abc: function(t, d, data, i) {
                        t.getPlayerFromID(d) === t.playingPlayer && (t.playingPlayerAbilities[parseInt(data[i + 1])].lvl = parseInt(data[i + 2]), t.setActiveAbilities())
                    }
                }
            },
            3184: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.Grenade = void 0;
                var _1 = __webpack_require__(2174),
                    functions_1 = __webpack_require__(7582),
                    Img_1 = __webpack_require__(360),
                    Slpash_1 = __webpack_require__(6921),
                    Sound_1 = __webpack_require__(3754),
                    Sprite_1 = __webpack_require__(9145),
                    Grenade = function() {
                        function Grenade(game, startX, startY, targetX, targetY, speed, aoe, id, weapon) {
                            if (this.lastBlock = 10, this.dieAt = 0, this.game = game, this.x = startX, this.y = startY, this.x0 = this.x, this.y0 = this.y, this.vecX = targetX - this.x, this.vecY = targetY - this.y, this.dist = Math.sqrt(this.vecX * this.vecX + this.vecY * this.vecY), this.originalDist = this.dist, Sound_1.Sound.playSound("grenade_launch", this.x, this.y), this.tickOfStart = game.ticksCounter, this.aoe = aoe, this.id = id, this.weapon = weapon, this.duration = Math.floor(this.dist / this.weapon.projectileSpeed), this.vecX *= this.weapon.projectileSpeed / this.dist, this.vecY *= this.weapon.projectileSpeed / this.dist, this.parabelScheitel = .08 * Math.pow(this.dist / 2, 2), game.addToObjectsToDraw(this), !game.fastForward) {
                                for (var i_1 = 0; i_1 < 4; i_1++) new Sprite_1.Sprite(game, {
                                    x: this.x + .3 * Math.random() - .15,
                                    y: this.y - game.SHOT_HEIGHT + .3 * Math.random() - .15,
                                    img: Img_1.imgCoords.dust1,
                                    scaleFunction: function(age) {
                                        return this.r0 - .01 * age
                                    },
                                    r0: Math.random() + 1.1,
                                    alphaFunction: function(age) {
                                        return .35 * Math.max(0, 1 - age / this.ticksToLive)
                                    },
                                    age: 20 * (2.7 + Math.random()),
                                    r1: 2.25 * this.vecX,
                                    r2: 2.25 * this.vecY,
                                    r3: i_1 / 5,
                                    zFunction: function(age) {
                                        return 1.5 * (-1 / Math.pow(age / 5 + 1, 3) + 1) * this.r3
                                    },
                                    xFunction: function(age) {
                                        return 2 * (-1 / Math.pow(age / 5 + 1, 3) + 1) * this.r3 * this.r1
                                    },
                                    yFunction: function(age) {
                                        return 2 * (-1 / Math.pow(age / 5 + 1, 3) + 1) * this.r3 * this.r2
                                    }
                                });
                                for (var i = 1; i < 3; i++) new Sprite_1.Sprite(game, {
                                    x: this.x + .3 * Math.random() - .15,
                                    y: this.y - game.SHOT_HEIGHT + .3 * Math.random() - .15,
                                    img: Img_1.imgCoords.dust1,
                                    scaleFunction: function(age) {
                                        return this.r0 - .01 * age
                                    },
                                    r0: Math.random() + 1.1,
                                    alphaFunction: function(age) {
                                        return .35 * Math.max(0, 1 - age / this.ticksToLive)
                                    },
                                    age: 20 * (2.7 + Math.random()),
                                    r1: 2.25 * -this.vecY,
                                    r2: 2.25 * this.vecX,
                                    r3: i / 5,
                                    xFunction: function(age) {
                                        return 2 * (-1 / Math.pow(age / 5 + 1, 3) + 1) * this.r3 * this.r1
                                    },
                                    yFunction: function(age) {
                                        return 2 * (-1 / Math.pow(age / 5 + 1, 3) + 1) * this.r3 * this.r2
                                    }
                                });
                                for (i = 1; i < 3; i++) new Sprite_1.Sprite(game, {
                                    x: this.x + .3 * Math.random() - .15,
                                    y: this.y - game.SHOT_HEIGHT + .3 * Math.random() - .15,
                                    img: Img_1.imgCoords.dust1,
                                    scaleFunction: function(age) {
                                        return this.r0 - .01 * age
                                    },
                                    r0: Math.random() + 1.1,
                                    alphaFunction: function(age) {
                                        return .35 * Math.max(0, 1 - age / this.ticksToLive)
                                    },
                                    age: 20 * (2.7 + Math.random()),
                                    r1: 2.25 * this.vecY,
                                    r2: 2.25 * -this.vecX,
                                    r3: i / 5,
                                    xFunction: function(age) {
                                        return 2 * (-1 / Math.pow(age / 5 + 1, 3) + 1) * this.r3 * this.r1
                                    },
                                    yFunction: function(age) {
                                        return 2 * (-1 / Math.pow(age / 5 + 1, 3) + 1) * this.r3 * this.r2
                                    }
                                });
                                new Sprite_1.Sprite(game, {
                                    x: this.x,
                                    y: this.y - game.SHOT_HEIGHT,
                                    img: Img_1.imgCoords.light_yellow,
                                    scaleFunction: function(age) {
                                        return 5
                                    },
                                    age: 7
                                })
                            }
                        }
                        return Grenade.prototype.update = function() {
                            if (this.dieAt && this.dieAt + 10 <= this.game.ticksCounter) return !1;
                            if (this.dieAt) return !0;
                            this.x0 = this.x, this.y0 = this.y, this.x += this.vecX, this.y += this.vecY, this.dist -= this.weapon.projectileSpeed;
                            var block = this.game.getFieldPath(Math.floor(this.x), Math.floor(this.y)),
                                maxAllowedBlock = this.dist < 1.2 ? 9 : 5;
                            return block < maxAllowedBlock && (Sound_1.Sound.playSound("grenade_bounce", this.x, this.y, 1), this.x -= 2 * this.vecX, (block = this.game.getFieldPath(Math.floor(this.x), Math.floor(this.y))) < maxAllowedBlock && (this.x += 2 * this.vecX, this.y -= 2 * this.vecY, (block = this.game.getFieldPath(Math.floor(this.x), Math.floor(this.y))) < maxAllowedBlock && (this.x -= 2 * this.vecX))), 5 === this.lastBlock && 5 === block && this.dist < 1.2 ? (this.explode(), !1) : (this.lastBlock = block, this.vecX = this.x - this.x0, this.vecY = this.y - this.y0, !(this.dist <= 0) || (9 !== this.game.getFieldPath(Math.floor(this.x), Math.floor(this.y)) ? this.explode() : this.x + 3 >= this.game.cameraX && this.y + 3 >= this.game.cameraY && this.x - 3 <= this.game.cameraX2 && this.y - 3 <= this.game.cameraY2 && new Slpash_1.Splash(this.game, this.x, this.y, Img_1.imgCoords.splash), !1))
                        }, Grenade.prototype.blink = function(x, y, oldX, oldY) {
                            Sound_1.Sound.playSound("blink", this.x, this.y, .65), this.game.createBlinkEffectSmall(oldX - .2 + .4 * Math.random(), oldY - .2 + .4 * Math.random()), this.x = x, this.y = y, this.x0 = this.x, this.y0 = this.y, Sound_1.Sound.playSound("blink", this.x, this.y, .65), this.game.createBlinkEffectSmall(this.x - .25 + .5 * Math.random(), this.y - .25 + .5 * Math.random())
                        }, Grenade.prototype.explode = function() {
                            var _a;
                            this.x + 10 >= this.game.cameraX && this.y + 10 >= this.game.cameraY && this.x - 10 <= this.game.cameraX2 && this.y - 10 <= this.game.cameraY2 && (this.game.createExplosion(this.x, this.y, this.aoe, null !== (_a = this.weapon.sootAlpha) && void 0 !== _a ? _a : .2), this.weapon.impactSound && Sound_1.Sound.playSound(this.weapon.impactSound, this.x, this.y, this.weapon.impactSoundVolume), this.game.corpseBounce(this.x, this.y, this.aoe)), this.dieAt = this.game.ticksCounter
                        }, Grenade.prototype.getYDrawingOffset = function() {
                            return this.y
                        }, Grenade.prototype.draw = function(exactTicks, x1, y1, x2, y2, percentageOfCurrentTickPassed) {
                            if (this.x + 3 >= x1 && this.y + 3 >= y1 && this.x - 3 <= x2 && this.y - 3 <= y2 && !this.dieAt) {
                                var perc = (exactTicks - this.tickOfStart) / this.duration,
                                    x = this.x0 + percentageOfCurrentTickPassed * (this.x - this.x0),
                                    y = this.y0 + percentageOfCurrentTickPassed * (this.y - this.y0),
                                    direction = (0, functions_1.getDirectionFromAgle)(this.x0, this.y0, this.x, this.y),
                                    passedDist = perc * this.originalDist,
                                    h = -.08 * Math.pow(passedDist - this.originalDist / 2, 2) + this.parabelScheitel + (1 - passedDist / this.originalDist) * this.game.SHOT_HEIGHT * 1.5;
                                this.game.ctx.globalAlpha = .3, this.game.ctx.drawImage(_1.imgs.shadow, (x - this.game.cameraX) * this.game.FIELD_SIZE - 16 * this.game.SCALE_FACTOR / 2, (y - this.game.cameraY) * this.game.FIELD_SIZE - 16 * this.game.SCALE_FACTOR / 2, 32 * this.game.SCALE_FACTOR / 2, 32 * this.game.SCALE_FACTOR / 2), this.game.ctx.globalAlpha = 1;
                                var xSource = 10 * Math.min(Math.floor(3 * perc), 2),
                                    img = Img_1.imgCoords[this.weapon.projectileImg],
                                    scale = this.weapon.projectileScale ? this.weapon.projectileScale * this.game.SCALE_FACTOR : this.game.SCALE_FACTOR;
                                this.game.ctx.drawImage(_1.imgs.miscSheet, img.x + xSource, img.y + 10 * direction, 10, 10, (x - this.game.cameraX) * this.game.FIELD_SIZE - 5 * scale, (y - .9 * h - this.game.cameraY) * this.game.FIELD_SIZE - 5 * scale, 10 * scale, 10 * scale)
                            }
                        }, Grenade
                    }();
                exports.Grenade = Grenade
            },
            5951: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.Humanoid = void 0;
                var _1 = __webpack_require__(2174),
                    Data_1 = __webpack_require__(6313),
                    Blood_1 = __webpack_require__(3513),
                    Corpse_1 = __webpack_require__(6884),
                    Img_1 = __webpack_require__(360),
                    Sound_1 = __webpack_require__(3754),
                    Sprite_1 = __webpack_require__(9145),
                    Humanoid = function() {
                        function Humanoid(game, id) {
                            this.z = 0, this.armor = 0, this.lastActualHit = -99999, this.z0 = 0, this.isInvisible = !1, this.laserHitUntil = -9999, this.lastHit = -9999, this.hitUntil = -9999, this.finallyRemoveAt = 0, this.flameDeath = !1, this.flameDeathAndNowBouncing = !1, this.bouncePoints = [], this.path = [], this.invincibleUntil = -99999, this.lockDirection = 0, this.lockDirection2 = 0, this.lightPillarsTop = [], this.lightPillarsBottom = [], this.lastSpawnTick = -99999, this.lastPosUpdate = -9999, this.stepOffset = Math.floor(5 * Math.random()), this.smokeTimeOffset = Math.floor(10 * Math.random()), this.bleeds = !0, this.isObject = !1, this.hpGlideStart = -999, this.hpGlideEnd = -999, this.hpGlideAmount = 0, this.noCorpseBounce = !1, this.lastEmoteStart = -999999, this.lastEmote = null, this.game = game, this.id = id
                        }
                        return Humanoid.prototype.performHit = function(victim) {
                            this.victim = victim, this.targetX = victim.x, this.targetY = victim.y, this.x + 3 >= this.game.cameraX && this.y + 3 >= this.game.cameraY && this.x - 3 <= this.game.cameraX2 && this.y - 3 <= this.game.cameraY2 && (Sound_1.Sound.playSound("zombie_bite", victim.x, victim.y), this.lastActualHit = this.game.ticksCounter)
                        }, Humanoid.prototype.getYDrawingOffset = function() {
                            return this.y
                        }, Humanoid.prototype.blink = function(x, y) {
                            this.x = x, this.y = y, this.x0 = x, this.y0 = y;
                            var vecX = x - this.x00,
                                vecY = y - this.y00,
                                dist = Math.sqrt(Math.pow(vecX, 2) + Math.pow(vecY, 2));
                            if (x = this.x00, y = this.y00, vecX *= 1 / dist, vecY *= 1 / dist, !this.game.fastForward) {
                                for (var i = 0; i < dist; i += .75) x += vecX, y += vecY, new Sprite_1.Sprite(this.game, {
                                    x: x + .6 * Math.random() - .3,
                                    y: y + .6 * Math.random() - .3 - .5,
                                    img: Img_1.imgCoords.dust1,
                                    scaleFunction: function(age) {
                                        return this.r1 - .01 * age
                                    },
                                    r1: Math.random() + 1.25,
                                    alphaFunction: function(age) {
                                        return .25 * Math.max(0, 1 - age / this.ticksToLive)
                                    },
                                    age: 20 * (1.7 + Math.random())
                                }), new Sprite_1.Sprite(this.game, {
                                    x: x + .6 * Math.random() - .3,
                                    y: y + .6 * Math.random() - .3 - .5,
                                    img: Img_1.imgCoords.particleWhite,
                                    scaleFunction: function(age) {
                                        return this.r1 - .01 * age
                                    },
                                    r1: Math.random() + 1.55,
                                    alphaFunction: function(age) {
                                        return .8 * Math.max(0, 1 - age / this.ticksToLive)
                                    },
                                    age: 4 * Math.random() + 10
                                });
                                Sound_1.Sound.playSound("blink", this.x00, this.y00), this.game.createBlinkEffect(this.x00, this.y00), this.game.createBlinkEffect(this.x, this.y)
                            }
                            this.laserHitUntil = this.game.ticksCounter + 3
                        }, Humanoid.prototype.getVanishingAlpha = function() {
                            return this.game.type.coopZombieMode ? 1 : this.dieAt ? Math.min(Math.max((this.finallyRemoveAt - this.game.ticksCounter) / 40, 0), 1) : 1
                        }, Humanoid.prototype.emote = function(emote) {
                            this.lastEmoteStart = this.game.ticksCounter, this.lastEmote = emote
                        }, Humanoid.prototype.hpUpdate = function(hp, armor, splash, attacker) {}, Humanoid.prototype.die = function(projectile, murderWeaponId, objX, objY, objAOE, killer, obj, startX, startY, vecX, vecY, vecH) {}, Humanoid.prototype.createCorpse = function() {
                            this.game.addCorpses(new Corpse_1.Corpse(this.game, this.id + 5e4, this.x, this.y, this.z, this.flameDeath, this.direction, this.bouncePoints, this.imgScale ? this.imgScale : 1))
                        }, Humanoid.prototype.updateBounce = function() {
                            if (this.bouncePoints.length > 0) {
                                if (this.x0 = this.x, this.y0 = this.y, this.z0 = this.z, this.x = this.bouncePoints[0].x, this.y = this.bouncePoints[0].y, this.z = this.bouncePoints[0].h || 0, this.bouncePoints[0].hitsGround) {
                                    var vecH = this.bouncePoints[0].vecH || 0;
                                    if (this.x + 5 >= this.game.cameraX && this.y + 5 >= this.game.cameraY && this.x - 5 <= this.game.cameraX2 && this.y - 5 <= this.game.cameraY2) {
                                        var vanishingAlpha = this.getVanishingAlpha();
                                        this.game.createPoundSmoke(this.x, this.y + 1, Math.min(2.5 * vecH, 1), Math.floor(40 * vecH), .5 * vanishingAlpha), Sound_1.Sound.playSound("kick", this.x, this.y, Math.min(3 * vecH, 1) * vanishingAlpha)
                                    }
                                }
                                if (this.bouncePoints[0].wallSmash && this.bouncePoints[1]) {
                                    var p = this.bouncePoints[0],
                                        len = Math.sqrt(Math.pow(this.bouncePoints[1].x - p.x, 2) + Math.pow(this.bouncePoints[1].y - p.y, 2)),
                                        startAngle = 0,
                                        finishAngle = 0,
                                        x = this.x,
                                        y = this.y;
                                    if ("right" === p.wallSmash ? (startAngle = .5 * Math.PI, finishAngle = 1.5 * Math.PI, x += Data_1.CONST.PLAYER_RADIUS) : "left" === p.wallSmash ? (startAngle = -.5 * Math.PI, finishAngle = .5 * Math.PI, x -= Data_1.CONST.PLAYER_RADIUS) : "top" === p.wallSmash ? (startAngle = 1 * Math.PI, finishAngle = 2 * Math.PI, y -= Data_1.CONST.PLAYER_RADIUS) : "bottom" === p.wallSmash && (startAngle = 0 * Math.PI, finishAngle = 1 * Math.PI, y += Data_1.CONST.PLAYER_RADIUS), this.x + 5 >= this.game.cameraX && this.y + 5 >= this.game.cameraY && this.x - 5 <= this.game.cameraX2 && this.y - 5 <= this.game.cameraY2) {
                                        vanishingAlpha = this.getVanishingAlpha ? this.getVanishingAlpha() : 1;
                                        this.game.createPoundSmoke(x, y + 1 - (p.h || 0), Math.min(1.5 * len, 1), Math.floor(40 * len), .5 * vanishingAlpha, startAngle, finishAngle), Sound_1.Sound.playSound("kick", this.x, this.y, Math.min(2 * len, 1) * vanishingAlpha)
                                    }
                                }
                                this.bouncePoints.splice(0, 1), this.dieAt && 0 === this.bouncePoints.length && (this.x = this.x0, this.y = this.y0, this.z = 0, this.z0 = 0)
                            }
                        }, Humanoid.prototype.updateField = function(field, value) {
                            if ("maxHP" === field) {
                                var rate = this.hp / this.maxHP;
                                return this.maxHP = value, void(this.hp = rate * this.maxHP)
                            }
                            this[field] = value
                        }, Humanoid.prototype.updateAndDrawPillar = function(p, age) {
                            p.h += p.vh * this.game.exactTickDiff, p.w += p.vw * this.game.exactTickDiff;
                            var x = (p.x - p.w / 2 - this.game.cameraX) * this.game.FIELD_SIZE,
                                y = (p.y - p.h - this.game.cameraY) * this.game.FIELD_SIZE,
                                this_age = age + p.age_offset;
                            this.game.ctx.globalAlpha = .4 * (this_age < 5 ? Math.max(this_age / 5, 0) : this_age < 10 ? 1 : Math.max(2 - this_age / 10, 0)), this.game.ctx.drawImage(_1.imgs.miscSheet, p.img.x, p.img.y, p.img.w, p.img.h, x, y, p.w * this.game.FIELD_SIZE, p.h * this.game.FIELD_SIZE), this.game.ctx.globalAlpha = 1
                        }, Humanoid.prototype.createSpawnEffect = function(ignorePosition) {
                            if (this.lightPillarsTop.length = 0, this.lightPillarsBottom.length = 0, (this.x + 5 >= this.game.cameraX && this.y + 5 >= this.game.cameraY && this.x - 5 <= this.game.cameraX2 && this.y - 5 <= this.game.cameraY2 || ignorePosition) && !this.game.fastForward) {
                                for (var i = 0; i < 2 * Math.PI; i += .3 + .15 * Math.random())(i <= Math.PI ? this.lightPillarsBottom : this.lightPillarsTop).push({
                                    x: .45 * Math.sin(i) + this.x,
                                    y: .45 * Math.cos(i) + this.y,
                                    w: .15 + .3 * Math.random(),
                                    h: 1.5 * Math.random(),
                                    vh: .05 + .1 * Math.random(),
                                    vw: .01 * Math.random(),
                                    age_offset: 8 * Math.random() - 4,
                                    img: Img_1.imgCoords.pillar_of_light
                                });
                                for (var k = 0; k < 9; k++) {
                                    var randomAngle = Math.random() * Math.PI * 2,
                                        rand = .7 * Math.random();
                                    new Sprite_1.Sprite(this.game, {
                                        x: this.x + Math.cos(randomAngle) * rand,
                                        y: this.y - this.game.SHOT_HEIGHT + Math.sin(randomAngle) * rand,
                                        img: Img_1.imgCoords.particleWhite,
                                        scaleFunction: function(age) {
                                            return this.r3
                                        },
                                        r3: 2 * Math.random() + 2,
                                        r2: .09 * Math.random(),
                                        zFunction: function(age) {
                                            return age * this.r2
                                        },
                                        age: 26
                                    })
                                }
                                for (k = 0; k < 6; k++) {
                                    randomAngle = Math.random() * Math.PI * 2, rand = .7 * Math.random();
                                    new Sprite_1.Sprite(this.game, {
                                        x: this.x + Math.cos(randomAngle) * rand,
                                        y: this.y - this.game.SHOT_HEIGHT + Math.sin(randomAngle) * rand,
                                        img: Img_1.imgCoords.particlePurple,
                                        scaleFunction: function(age) {
                                            return this.r1
                                        },
                                        r1: 2 * Math.random() + 2,
                                        r2: .09 * Math.random(),
                                        zFunction: function(age) {
                                            return age * this.r2
                                        },
                                        age: 26
                                    })
                                }
                                new Sprite_1.Sprite(this.game, {
                                    x: this.x,
                                    y: this.y,
                                    img: Img_1.imgCoords.light_white,
                                    scaleFunction: function(age) {
                                        return 5 * Math.max(0, 1 - age / this.ticksToLive * .6)
                                    },
                                    alphaFunction: function(age) {
                                        return .04 * Math.max(3.7 * (-1 * (1 / ((.9 * age - 125) / 500 + .31) + age / 4) + 16.9), 0)
                                    },
                                    age: 44
                                }), this.lastSpawnTick = this.game.ticksCounter, Sound_1.Sound.playSound("player_respawn", void 0, void 0, .95)
                            }
                        }, Humanoid.prototype.spillBloodFromMeleeAttack = function() {
                            if (this.lastTickFire + 12 > this.game.ticksCounter && this.x + 3 >= this.game.cameraX && this.y + 3 >= this.game.cameraY && this.x - 3 <= this.game.cameraX2 && this.y - 3 <= this.game.cameraY2) {
                                var attackAge = this.game.ticksCounter - this.lastActualHit;
                                if (attackAge >= 0 && attackAge <= 3 && this.victim && !this.victim.isObject) {
                                    var vecX = this.x - this.targetX,
                                        vecY = this.y - this.targetY,
                                        len = Math.sqrt(vecX * vecX + vecY * vecY);
                                    vecX *= .5 / len, vecY *= .5 / len, new Blood_1.Blood(this.game, this.targetX + vecX, this.targetY + vecY, -vecX, -vecY), new Blood_1.Blood(this.game, this.targetX + vecX, this.targetY + vecY, -vecX + Math.random() - .5, -vecY + Math.random() - .5, void 0, !0), new Blood_1.Blood(this.game, this.targetX + vecX, this.targetY + vecY, -vecX, -vecY, Img_1.imgCoords.particleWhite, !0)
                                }
                            }
                        }, Humanoid.prototype.draw = function(exactTicks, x1, y1, x2, y2, percentageOfCurrentTickPassed) {}, Humanoid
                    }();
                exports.Humanoid = Humanoid
            },
            360: (__unused_webpack_module, exports) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.imgCoords = void 0, exports.imgCoords = {
                    fire1: {
                        x: 0,
                        y: 4,
                        w: 3,
                        h: 3
                    },
                    fire2: {
                        x: 4,
                        y: 3,
                        w: 4,
                        h: 4
                    },
                    fire3: {
                        x: 9,
                        y: 2,
                        w: 5,
                        h: 5
                    },
                    fire4: {
                        x: 15,
                        y: 1,
                        w: 7,
                        h: 7
                    },
                    fire5: {
                        x: 23,
                        y: 0,
                        w: 9,
                        h: 9
                    },
                    fire1red: {
                        x: 444,
                        y: 95,
                        w: 3,
                        h: 3
                    },
                    fire2red: {
                        x: 448,
                        y: 94,
                        w: 4,
                        h: 4
                    },
                    fire3red: {
                        x: 453,
                        y: 93,
                        w: 5,
                        h: 5
                    },
                    fire4red: {
                        x: 459,
                        y: 921,
                        w: 7,
                        h: 7
                    },
                    fire5red: {
                        x: 467,
                        y: 91,
                        w: 9,
                        h: 9
                    },
                    fireGreen1: {
                        x: 302,
                        y: 428,
                        w: 3,
                        h: 3
                    },
                    fireGreen2: {
                        x: 306,
                        y: 427,
                        w: 4,
                        h: 4
                    },
                    fireGreen3: {
                        x: 311,
                        y: 426,
                        w: 5,
                        h: 5
                    },
                    fireGreen4: {
                        x: 317,
                        y: 425,
                        w: 7,
                        h: 7
                    },
                    fireGreen5: {
                        x: 325,
                        y: 424,
                        w: 9,
                        h: 9
                    },
                    particle: {
                        x: 0,
                        y: 0,
                        w: 1,
                        h: 1
                    },
                    particlePurple: {
                        x: 1,
                        y: 0,
                        w: 1,
                        h: 1
                    },
                    particle2: {
                        x: 2,
                        y: 0,
                        w: 1,
                        h: 1
                    },
                    particleRed: {
                        x: 3,
                        y: 0,
                        w: 1,
                        h: 1
                    },
                    particleWhite: {
                        x: 4,
                        y: 0,
                        w: 1,
                        h: 1
                    },
                    particleYellow: {
                        x: 5,
                        y: 0,
                        w: 1,
                        h: 1
                    },
                    particleBlue: {
                        x: 6,
                        y: 0,
                        w: 1,
                        h: 1
                    },
                    particleGreen: {
                        x: 7,
                        y: 0,
                        w: 1,
                        h: 1
                    },
                    particleOrange: {
                        x: 8,
                        y: 0,
                        w: 1,
                        h: 1
                    },
                    soot: {
                        x: 31,
                        y: 173,
                        w: 59,
                        h: 59
                    },
                    whiteCircle: {
                        x: 266,
                        y: 22,
                        w: 34,
                        h: 30
                    },
                    greenCircle: {
                        x: 1,
                        y: 272,
                        w: 53,
                        h: 45
                    },
                    laserHit: {
                        x: 264,
                        y: 0,
                        w: 10,
                        h: 10
                    },
                    pillar_of_light: {
                        x: 299,
                        y: 56,
                        w: 1,
                        h: 16
                    },
                    pillar_of_light_blue: {
                        x: 300,
                        y: 56,
                        w: 1,
                        h: 16
                    },
                    pillar_of_light_yellow: {
                        x: 301,
                        y: 56,
                        w: 1,
                        h: 16
                    },
                    heal: {
                        x: 11,
                        y: 34,
                        w: 3,
                        h: 3
                    },
                    healRed: {
                        x: 24,
                        y: 52,
                        w: 3,
                        h: 3
                    },
                    dust1: {
                        x: 32,
                        y: 0,
                        w: 7,
                        h: 7
                    },
                    dust2: {
                        x: 32,
                        y: 7,
                        w: 7,
                        h: 7
                    },
                    dust1red: {
                        x: 477,
                        y: 86,
                        w: 7,
                        h: 7
                    },
                    dust2red: {
                        x: 477,
                        y: 93,
                        w: 7,
                        h: 7
                    },
                    light_yellow: {
                        x: 108,
                        y: 0,
                        w: 20,
                        h: 20
                    },
                    light_purple: {
                        x: 130,
                        y: 0,
                        w: 19,
                        h: 19
                    },
                    light_white: {
                        x: 149,
                        y: 0,
                        w: 19,
                        h: 19
                    },
                    light_red: {
                        x: 167,
                        y: 0,
                        w: 19,
                        h: 19
                    },
                    light_blue: {
                        x: 186,
                        y: 0,
                        w: 19,
                        h: 19
                    },
                    light_green: {
                        x: 205,
                        y: 0,
                        w: 19,
                        h: 19
                    },
                    light_light_yellow: {
                        x: 110,
                        y: 52,
                        w: 18,
                        h: 18
                    },
                    weapon_laser: {
                        x: 339,
                        y: 0,
                        w: 29,
                        h: 18
                    },
                    weapon_gl: {
                        x: 312,
                        y: 18,
                        w: 26,
                        h: 15
                    },
                    weapon_flame: {
                        x: 306,
                        y: 36,
                        w: 30,
                        h: 18
                    },
                    weapon_mg: {
                        x: 310,
                        y: 0,
                        w: 28,
                        h: 14
                    },
                    weapon_rl: {
                        x: 309,
                        y: 57,
                        w: 26,
                        h: 17
                    },
                    weapon_homing: {
                        x: 342,
                        y: 55,
                        w: 26,
                        h: 17
                    },
                    weapon_homing_2: {
                        x: 324,
                        y: 77,
                        w: 26,
                        h: 17
                    },
                    weapon_laser_r: {
                        x: 340,
                        y: 20,
                        w: 29,
                        h: 18
                    },
                    weapon_sniper: {
                        x: 324,
                        y: 98,
                        w: 36,
                        h: 13
                    },
                    weapon_shotgun: {
                        x: 344,
                        y: 40,
                        w: 29,
                        h: 12
                    },
                    weapon_rapid_rl: {
                        x: 375,
                        y: 40,
                        w: 27,
                        h: 15
                    },
                    weapon_rapid_gl: {
                        x: 370,
                        y: 58,
                        w: 30,
                        h: 20
                    },
                    weapon_asmd: {
                        x: 397,
                        y: 139,
                        w: 40,
                        h: 14
                    },
                    weapon_heal: {
                        x: 400,
                        y: 121,
                        w: 32,
                        h: 15
                    },
                    waypoint: {
                        x: 19,
                        y: 27,
                        w: 19,
                        h: 14
                    },
                    spawningPoint: {
                        x: 60,
                        y: 20,
                        w: 18,
                        h: 21
                    },
                    spawningPointRed: {
                        x: 81,
                        y: 20,
                        w: 18,
                        h: 21
                    },
                    spawningPointBlue: {
                        x: 39,
                        y: 20,
                        w: 18,
                        h: 21
                    },
                    redFlag: {
                        x: 178,
                        y: 29,
                        w: 13,
                        h: 23
                    },
                    blueFlag: {
                        x: 192,
                        y: 29,
                        w: 13,
                        h: 23
                    },
                    wpn_ui: {
                        x: 85,
                        y: 117,
                        w: 215,
                        h: 25
                    },
                    button: {
                        x: 280,
                        y: 0,
                        w: 20,
                        h: 19
                    },
                    buttonBlue: {
                        x: 135,
                        y: 29,
                        w: 20,
                        h: 19
                    },
                    buttonWhite: {
                        x: 156,
                        y: 29,
                        w: 20,
                        h: 19
                    },
                    minimap_ui: {
                        x: 236,
                        y: 381,
                        w: 64,
                        h: 64
                    },
                    bullet1: {
                        x: 274,
                        y: 0,
                        w: 2,
                        h: 1
                    },
                    bullet2: {
                        x: 274,
                        y: 1,
                        w: 2,
                        h: 2
                    },
                    bullet3: {
                        x: 275,
                        y: 3,
                        w: 1,
                        h: 2
                    },
                    bullet4: {
                        x: 274,
                        y: 5,
                        w: 2,
                        h: 2
                    },
                    ammoMG: {
                        x: 249,
                        y: 0,
                        w: 14,
                        h: 11
                    },
                    ammoFlame: {
                        x: 237,
                        y: 0,
                        w: 11,
                        h: 12
                    },
                    ammoGL: {
                        x: 248,
                        y: 13,
                        w: 15,
                        h: 17
                    },
                    ammoNapalm: {
                        x: 265,
                        y: 76,
                        w: 15,
                        h: 17
                    },
                    ammoRL: {
                        x: 248,
                        y: 33,
                        w: 15,
                        h: 17
                    },
                    ammoHoming: {
                        x: 265,
                        y: 96,
                        w: 15,
                        h: 17
                    },
                    ammoLaser: {
                        x: 247,
                        y: 56,
                        w: 17,
                        h: 14
                    },
                    ammoShotgun: {
                        x: 242,
                        y: 86,
                        w: 17,
                        h: 19
                    },
                    ammoSniper: {
                        x: 283,
                        y: 98,
                        w: 14,
                        h: 12
                    },
                    ammoLaserSmall: {
                        x: 0,
                        y: 322,
                        w: 9,
                        h: 11
                    },
                    ammoGrenadeSmall: {
                        x: 0,
                        y: 334,
                        w: 9,
                        h: 9
                    },
                    ammoFlameSmall: {
                        x: 0,
                        y: 344,
                        w: 9,
                        h: 11
                    },
                    ammoMGSmall: {
                        x: 0,
                        y: 356,
                        w: 7,
                        h: 7
                    },
                    ammoRocketSmall: {
                        x: 0,
                        y: 365,
                        w: 9,
                        h: 9
                    },
                    ammoRocket2Small: {
                        x: 0,
                        y: 387,
                        w: 9,
                        h: 9
                    },
                    ammoRocket3Small: {
                        x: 0,
                        y: 397,
                        w: 9,
                        h: 9
                    },
                    ammoLaser2Small: {
                        x: 0,
                        y: 375,
                        w: 9,
                        h: 11
                    },
                    ammoShotgunSmall: {
                        x: 0,
                        y: 419,
                        w: 11,
                        h: 11
                    },
                    ammoSniperSmall: {
                        x: 0,
                        y: 407,
                        w: 7,
                        h: 10
                    },
                    ammoHealSmall: {
                        x: 0,
                        y: 431,
                        w: 9,
                        h: 11
                    },
                    ammoASMDSmall: {
                        x: 0,
                        y: 443,
                        w: 9,
                        h: 11
                    },
                    muzzleFlashMG: {
                        x: 151,
                        y: 679,
                        w: 416,
                        h: 156
                    },
                    muzzleFlashLaserBlue: {
                        x: 151,
                        y: 856,
                        w: 416,
                        h: 156
                    },
                    muzzleFlashLaserGreen: {
                        x: 151,
                        y: 1064,
                        w: 416,
                        h: 156
                    },
                    muzzleFlashMGTurret: {
                        x: 158,
                        y: 1314,
                        w: 44,
                        h: 44
                    },
                    medikit: {
                        x: 390,
                        y: 95,
                        w: 20,
                        h: 17
                    },
                    armor: {
                        x: 364,
                        y: 93,
                        w: 24,
                        h: 18
                    },
                    itemShine: {
                        x: 377,
                        y: 0,
                        w: 16,
                        h: 36
                    },
                    itemShineFloor: {
                        x: 393,
                        y: 0,
                        w: 16,
                        h: 36
                    },
                    fog: {
                        x: 144,
                        y: 344,
                        w: 256,
                        h: 256
                    },
                    filter: {
                        x: 100,
                        y: 144,
                        w: 200,
                        h: 200
                    },
                    armorBar: {
                        x: 27,
                        y: 57,
                        w: 26,
                        h: 4
                    },
                    armorBarRed: {
                        x: 109,
                        y: 718,
                        w: 26,
                        h: 4
                    },
                    armorBarBlue: {
                        x: 109,
                        y: 713,
                        w: 26,
                        h: 4
                    },
                    hpBar1: {
                        x: 27,
                        y: 62,
                        w: 26,
                        h: 4
                    },
                    hpBar2: {
                        x: 27,
                        y: 67,
                        w: 26,
                        h: 4
                    },
                    hpBar3: {
                        x: 27,
                        y: 72,
                        w: 26,
                        h: 4
                    },
                    hpBar4: {
                        x: 18,
                        y: 390,
                        w: 108,
                        h: 100
                    },
                    barBlue: {
                        x: 54,
                        y: 62,
                        w: 26,
                        h: 4
                    },
                    barGrey: {
                        x: 54,
                        y: 67,
                        w: 26,
                        h: 4
                    },
                    barPurp: {
                        x: 54,
                        y: 72,
                        w: 26,
                        h: 4
                    },
                    barBlue2: {
                        x: 73,
                        y: 305,
                        w: 26,
                        h: 4
                    },
                    barYellow: {
                        x: 73,
                        y: 310,
                        w: 26,
                        h: 4
                    },
                    aimLock: {
                        x: 27,
                        y: 77,
                        w: 17,
                        h: 21
                    },
                    aimLockGreen: {
                        x: 11,
                        y: 322,
                        w: 17,
                        h: 21
                    },
                    ok: {
                        x: 45,
                        y: 77,
                        w: 10,
                        h: 10
                    },
                    blackLine: {
                        x: 25,
                        y: 57,
                        w: 1,
                        h: 5
                    },
                    whiteLine: {
                        x: 24,
                        y: 57,
                        w: 1,
                        h: 5
                    },
                    healWard: {
                        x: 196,
                        y: 60,
                        w: 20,
                        h: 31
                    },
                    healWard2: {
                        x: 300,
                        y: 79,
                        w: 20,
                        h: 31
                    },
                    block: {
                        x: 177,
                        y: 62,
                        w: 18,
                        h: 29
                    },
                    block2: {
                        x: 17,
                        y: 99,
                        w: 18,
                        h: 29
                    },
                    block3: {
                        x: 17,
                        y: 130,
                        w: 18,
                        h: 29
                    },
                    blink: {
                        x: 60,
                        y: 118,
                        w: 23,
                        h: 22
                    },
                    scan: {
                        x: 53,
                        y: 143,
                        w: 24,
                        h: 24
                    },
                    autoTurretBase: {
                        x: 223,
                        y: 37,
                        w: 13,
                        h: 12
                    },
                    autoTurretIcon: {
                        x: 224,
                        y: 54,
                        w: 19,
                        h: 16
                    },
                    autoTurretGun00: {
                        x: 47,
                        y: 92,
                        w: 24,
                        h: 24
                    },
                    autoTurretGun01: {
                        x: 71,
                        y: 92,
                        w: 24,
                        h: 24
                    },
                    autoTurretGun02: {
                        x: 95,
                        y: 92,
                        w: 24,
                        h: 24
                    },
                    autoTurretGun03: {
                        x: 119,
                        y: 92,
                        w: 24,
                        h: 24
                    },
                    autoTurretGun04: {
                        x: 143,
                        y: 92,
                        w: 24,
                        h: 24
                    },
                    autoTurretGun05: {
                        x: 167,
                        y: 92,
                        w: 24,
                        h: 24
                    },
                    autoTurretGun06: {
                        x: 191,
                        y: 92,
                        w: 24,
                        h: 24
                    },
                    autoTurretGun07: {
                        x: 215,
                        y: 92,
                        w: 24,
                        h: 24
                    },
                    autoTurretGun10: {
                        x: 47,
                        y: 346,
                        w: 24,
                        h: 24
                    },
                    autoTurretGun11: {
                        x: 71,
                        y: 346,
                        w: 24,
                        h: 24
                    },
                    autoTurretGun12: {
                        x: 95,
                        y: 346,
                        w: 24,
                        h: 24
                    },
                    autoTurretGun13: {
                        x: 119,
                        y: 346,
                        w: 24,
                        h: 24
                    },
                    autoTurretGun14: {
                        x: 143,
                        y: 346,
                        w: 24,
                        h: 24
                    },
                    autoTurretGun15: {
                        x: 167,
                        y: 346,
                        w: 24,
                        h: 24
                    },
                    autoTurretGun16: {
                        x: 191,
                        y: 346,
                        w: 24,
                        h: 24
                    },
                    autoTurretGun17: {
                        x: 215,
                        y: 346,
                        w: 24,
                        h: 24
                    },
                    missileTurretIcon: {
                        x: 32,
                        y: 500,
                        w: 15,
                        h: 16
                    },
                    missileTurretGun0: {
                        x: 47,
                        y: 500,
                        w: 24,
                        h: 24
                    },
                    missileTurretGun1: {
                        x: 71,
                        y: 500,
                        w: 24,
                        h: 24
                    },
                    missileTurretGun2: {
                        x: 95,
                        y: 500,
                        w: 24,
                        h: 24
                    },
                    missileTurretGun3: {
                        x: 119,
                        y: 500,
                        w: 24,
                        h: 24
                    },
                    missileTurretGun4: {
                        x: 143,
                        y: 500,
                        w: 24,
                        h: 24
                    },
                    missileTurretGun5: {
                        x: 167,
                        y: 500,
                        w: 24,
                        h: 24
                    },
                    missileTurretGun6: {
                        x: 191,
                        y: 500,
                        w: 24,
                        h: 24
                    },
                    missileTurretGun7: {
                        x: 215,
                        y: 500,
                        w: 24,
                        h: 24
                    },
                    grenadeTurretIcon: {
                        x: 33,
                        y: 525,
                        w: 13,
                        h: 17
                    },
                    grenadeTurretGun0: {
                        x: 47,
                        y: 525,
                        w: 24,
                        h: 24
                    },
                    grenadeTurretGun1: {
                        x: 71,
                        y: 525,
                        w: 24,
                        h: 24
                    },
                    grenadeTurretGun2: {
                        x: 95,
                        y: 525,
                        w: 24,
                        h: 24
                    },
                    grenadeTurretGun3: {
                        x: 119,
                        y: 525,
                        w: 24,
                        h: 24
                    },
                    grenadeTurretGun4: {
                        x: 143,
                        y: 525,
                        w: 24,
                        h: 24
                    },
                    grenadeTurretGun5: {
                        x: 167,
                        y: 525,
                        w: 24,
                        h: 24
                    },
                    grenadeTurretGun6: {
                        x: 191,
                        y: 525,
                        w: 24,
                        h: 24
                    },
                    grenadeTurretGun7: {
                        x: 215,
                        y: 525,
                        w: 24,
                        h: 24
                    },
                    laserTurretIcon: {
                        x: 351,
                        y: 501,
                        w: 18,
                        h: 16
                    },
                    laserTurretGun0: {
                        x: 347,
                        y: 525,
                        w: 24,
                        h: 24
                    },
                    laserTurretGun1: {
                        x: 371,
                        y: 525,
                        w: 24,
                        h: 24
                    },
                    laserTurretGun2: {
                        x: 395,
                        y: 525,
                        w: 24,
                        h: 24
                    },
                    laserTurretGun3: {
                        x: 419,
                        y: 525,
                        w: 24,
                        h: 24
                    },
                    laserTurretGun4: {
                        x: 443,
                        y: 525,
                        w: 24,
                        h: 24
                    },
                    laserTurretGun5: {
                        x: 467,
                        y: 525,
                        w: 24,
                        h: 24
                    },
                    laserTurretGun6: {
                        x: 491,
                        y: 525,
                        w: 24,
                        h: 24
                    },
                    laserTurretGun7: {
                        x: 515,
                        y: 525,
                        w: 24,
                        h: 24
                    },
                    mine1: {
                        x: 146,
                        y: 75,
                        w: 13,
                        h: 11
                    },
                    mine2: {
                        x: 160,
                        y: 75,
                        w: 13,
                        h: 11
                    },
                    invis: {
                        x: 82,
                        y: 144,
                        w: 17,
                        h: 28
                    },
                    strength: {
                        x: 0,
                        y: 167,
                        w: 21,
                        h: 21
                    },
                    agility: {
                        x: 0,
                        y: 188,
                        w: 19,
                        h: 22
                    },
                    intelligence: {
                        x: 0,
                        y: 211,
                        w: 21,
                        h: 23
                    },
                    regeneration: {
                        x: 4,
                        y: 11,
                        w: 19,
                        h: 19
                    },
                    lifesteal: {
                        x: 69,
                        y: 275,
                        w: 28,
                        h: 26
                    },
                    grenade1: {
                        x: 62,
                        y: 78,
                        w: 7,
                        h: 10
                    },
                    grenade2: {
                        x: 71,
                        y: 79,
                        w: 9,
                        h: 9
                    },
                    grenade3: {
                        x: 81,
                        y: 81,
                        w: 10,
                        h: 7
                    },
                    grenade4: {
                        x: 92,
                        y: 81,
                        w: 9,
                        h: 9
                    },
                    grenade5: {
                        x: 103,
                        y: 81,
                        w: 7,
                        h: 10
                    },
                    grenade6: {
                        x: 111,
                        y: 81,
                        w: 9,
                        h: 9
                    },
                    grenade7: {
                        x: 132,
                        y: 81,
                        w: 11,
                        h: 7
                    },
                    grenade8: {
                        x: 133,
                        y: 79,
                        w: 9,
                        h: 9
                    },
                    grenadeYellow1: {
                        x: 7,
                        y: 241,
                        w: 7,
                        h: 10
                    },
                    grenadeYellow2: {
                        x: 16,
                        y: 242,
                        w: 9,
                        h: 9
                    },
                    grenadeYellow3: {
                        x: 26,
                        y: 244,
                        w: 10,
                        h: 7
                    },
                    grenadeYellow4: {
                        x: 37,
                        y: 244,
                        w: 9,
                        h: 9
                    },
                    grenadeYellow5: {
                        x: 48,
                        y: 244,
                        w: 7,
                        h: 10
                    },
                    grenadeYellow6: {
                        x: 58,
                        y: 244,
                        w: 9,
                        h: 9
                    },
                    grenadeYellow7: {
                        x: 66,
                        y: 244,
                        w: 11,
                        h: 7
                    },
                    grenadeYellow8: {
                        x: 78,
                        y: 242,
                        w: 9,
                        h: 9
                    },
                    grenadeBlue1: {
                        x: 7,
                        y: 256,
                        w: 7,
                        h: 10
                    },
                    grenadeBlue2: {
                        x: 16,
                        y: 257,
                        w: 9,
                        h: 9
                    },
                    grenadeBlue3: {
                        x: 26,
                        y: 259,
                        w: 10,
                        h: 7
                    },
                    grenadeBlue4: {
                        x: 37,
                        y: 259,
                        w: 9,
                        h: 9
                    },
                    grenadeBlue5: {
                        x: 48,
                        y: 259,
                        w: 7,
                        h: 10
                    },
                    grenadeBlue6: {
                        x: 58,
                        y: 259,
                        w: 9,
                        h: 9
                    },
                    grenadeBlue7: {
                        x: 66,
                        y: 259,
                        w: 11,
                        h: 7
                    },
                    grenadeBlue8: {
                        x: 78,
                        y: 257,
                        w: 9,
                        h: 9
                    },
                    bubble1: {
                        x: 281,
                        y: 447,
                        w: 19,
                        h: 19
                    },
                    bubble2: {
                        x: 262,
                        y: 447,
                        w: 19,
                        h: 19
                    },
                    bubble3: {
                        x: 243,
                        y: 447,
                        w: 19,
                        h: 19
                    },
                    bubble4: {
                        x: 224,
                        y: 447,
                        w: 19,
                        h: 19
                    },
                    bubbleRed: {
                        x: 205,
                        y: 447,
                        w: 19,
                        h: 19
                    },
                    bubbleGreen: {
                        x: 184,
                        y: 471,
                        w: 19,
                        h: 19
                    },
                    shield: {
                        x: 205,
                        y: 467,
                        w: 19,
                        h: 19
                    },
                    shield2: {
                        x: 224,
                        y: 467,
                        w: 19,
                        h: 19
                    },
                    shield3: {
                        x: 243,
                        y: 467,
                        w: 19,
                        h: 19
                    },
                    shieldIcon: {
                        x: 178,
                        y: 445,
                        w: 26,
                        h: 26
                    },
                    refShield: {
                        x: 26,
                        y: 1292,
                        w: 19,
                        h: 19
                    },
                    refShield2: {
                        x: 45,
                        y: 1292,
                        w: 19,
                        h: 19
                    },
                    refShield3: {
                        x: 64,
                        y: 1292,
                        w: 19,
                        h: 19
                    },
                    refShieldIcon: {
                        x: 0,
                        y: 1270,
                        w: 26,
                        h: 26
                    },
                    arrowLeft: {
                        x: 185,
                        y: 395,
                        w: 16,
                        h: 16
                    },
                    arrowRight: {
                        x: 219,
                        y: 395,
                        w: 16,
                        h: 16
                    },
                    arrowBottom: {
                        x: 202,
                        y: 395,
                        w: 16,
                        h: 16
                    },
                    arrowTop: {
                        x: 202,
                        y: 378,
                        w: 16,
                        h: 16
                    },
                    arrowLeftActive: {
                        x: 185,
                        y: 429,
                        w: 16,
                        h: 16
                    },
                    arrowRightActive: {
                        x: 219,
                        y: 429,
                        w: 16,
                        h: 16
                    },
                    arrowBottomActive: {
                        x: 202,
                        y: 429,
                        w: 16,
                        h: 16
                    },
                    arrowTopActive: {
                        x: 202,
                        y: 412,
                        w: 16,
                        h: 16
                    },
                    upgTop: {
                        x: 0,
                        y: 550,
                        w: 100,
                        h: 46
                    },
                    upgLine: {
                        x: 0,
                        y: 597,
                        w: 87,
                        h: 23
                    },
                    soulsBar: {
                        x: 102,
                        y: 550,
                        w: 12,
                        h: 12
                    },
                    souls: {
                        x: 102,
                        y: 563,
                        w: 10,
                        h: 12
                    },
                    star: {
                        x: 431,
                        y: 0,
                        w: 13,
                        h: 11
                    },
                    crystals: {
                        x: 102,
                        y: 576,
                        w: 9,
                        h: 9
                    },
                    plusButton: {
                        x: 102,
                        y: 587,
                        w: 22,
                        h: 17
                    },
                    crownYellow: {
                        x: 102,
                        y: 606,
                        w: 13,
                        h: 10
                    },
                    crownGreen: {
                        x: 102,
                        y: 617,
                        w: 13,
                        h: 10
                    },
                    crownWhite: {
                        x: 116,
                        y: 617,
                        w: 13,
                        h: 10
                    },
                    crownRed: {
                        x: 130,
                        y: 617,
                        w: 13,
                        h: 10
                    },
                    crosshairGreen: {
                        x: 239,
                        y: 636,
                        w: 9,
                        h: 9
                    },
                    crosshairWhite: {
                        x: 248,
                        y: 636,
                        w: 9,
                        h: 9
                    },
                    crosshairRed: {
                        x: 257,
                        y: 636,
                        w: 9,
                        h: 9
                    },
                    abilityFrame: {
                        x: 129,
                        y: 550,
                        w: 34,
                        h: 42
                    },
                    abilityFrameGreen: {
                        x: 302,
                        y: 550,
                        w: 34,
                        h: 42
                    },
                    weaponFrame: {
                        x: 164,
                        y: 550,
                        w: 68,
                        h: 42
                    },
                    weaponFrameGreen: {
                        x: 233,
                        y: 550,
                        w: 68,
                        h: 42
                    },
                    weaponFrame2: {
                        x: 164,
                        y: 593,
                        w: 68,
                        h: 39
                    },
                    weaponFrame2Green: {
                        x: 233,
                        y: 593,
                        w: 68,
                        h: 39
                    },
                    weaponFrameCurrent: {
                        x: 161,
                        y: 633,
                        w: 74,
                        h: 45
                    },
                    hpFrame: {
                        x: 0,
                        y: 621,
                        w: 55,
                        h: 15
                    },
                    hpFrame2: {
                        x: 0,
                        y: 637,
                        w: 55,
                        h: 10
                    },
                    energyBar: {
                        x: 56,
                        y: 621,
                        w: 2,
                        h: 2
                    },
                    laserBlue: {
                        x: 319,
                        y: 114,
                        w: 17,
                        h: 288
                    },
                    laserGreen: {
                        x: 337,
                        y: 114,
                        w: 17,
                        h: 288
                    },
                    laserRed: {
                        x: 681,
                        y: 523,
                        w: 17,
                        h: 288
                    },
                    projectile: {
                        x: 301,
                        y: 114,
                        w: 17,
                        h: 288
                    },
                    rocket: {
                        x: 356,
                        y: 115,
                        w: 10,
                        h: 80
                    },
                    homingRocket: {
                        x: 368,
                        y: 115,
                        w: 10,
                        h: 80
                    },
                    homingRocket2: {
                        x: 380,
                        y: 115,
                        w: 10,
                        h: 80
                    },
                    grenade: {
                        x: 356,
                        y: 197,
                        w: 30,
                        h: 80
                    },
                    shieldHit1: {
                        x: 269,
                        y: 475,
                        w: 26,
                        h: 18
                    },
                    shieldHit2: {
                        x: 295,
                        y: 475,
                        w: 26,
                        h: 18
                    },
                    shieldHit3: {
                        x: 321,
                        y: 475,
                        w: 26,
                        h: 18
                    },
                    shieldHit4: {
                        x: 347,
                        y: 475,
                        w: 26,
                        h: 18
                    },
                    shieldHit5: {
                        x: 373,
                        y: 475,
                        w: 26,
                        h: 18
                    },
                    shieldHit6: {
                        x: 399,
                        y: 475,
                        w: 26,
                        h: 18
                    },
                    newUpgFrame: {
                        x: 0,
                        y: 648,
                        w: 147,
                        h: 28
                    },
                    newStatsFrame: {
                        x: 0,
                        y: 677,
                        w: 147,
                        h: 35
                    },
                    newUpgFrameYellow: {
                        x: 0,
                        y: 742,
                        w: 147,
                        h: 28
                    },
                    newUps1: {
                        x: 0,
                        y: 771,
                        w: 146,
                        h: 30
                    },
                    newUps2: {
                        x: 0,
                        y: 802,
                        w: 146,
                        h: 30
                    },
                    newUps3: {
                        x: 0,
                        y: 833,
                        w: 146,
                        h: 30
                    },
                    cureButton: {
                        x: 0,
                        y: 1508,
                        w: 110,
                        h: 32
                    },
                    newUpsFrame1: {
                        x: 0,
                        y: 864,
                        w: 150,
                        h: 70
                    },
                    newUpsFrame2: {
                        x: 0,
                        y: 935,
                        w: 150,
                        h: 70
                    },
                    newUpsFrame3: {
                        x: 0,
                        y: 1006,
                        w: 150,
                        h: 70
                    },
                    newUpsFrame4: {
                        x: 0,
                        y: 1077,
                        w: 150,
                        h: 70
                    },
                    upgSkip: {
                        x: 57,
                        y: 632,
                        w: 87,
                        h: 16
                    },
                    upgUnskip: {
                        x: 0,
                        y: 713,
                        w: 87,
                        h: 16
                    },
                    passiveStateBoxLeft: {
                        x: 0,
                        y: 1147,
                        w: 5,
                        h: 16
                    },
                    passiveStateBoxMid: {
                        x: 5,
                        y: 1147,
                        w: 1,
                        h: 16
                    },
                    passiveStateBoxRight: {
                        x: 31,
                        y: 1147,
                        w: 5,
                        h: 16
                    },
                    abilityHover: {
                        x: 39,
                        y: 1147,
                        w: 97,
                        h: 61
                    },
                    weaponBottom: {
                        x: 0,
                        y: 1210,
                        w: 68,
                        h: 18
                    },
                    rangedZombieImpact: {
                        x: 528,
                        y: 48,
                        w: 96,
                        h: 24,
                        frameW: 24
                    },
                    splash: {
                        x: 246,
                        y: 527,
                        w: 95,
                        h: 19,
                        frameW: 19
                    },
                    splashSingle: {
                        x: 268,
                        y: 530,
                        w: 14,
                        h: 11
                    },
                    itemSpawn: {
                        x: 249,
                        y: 500,
                        w: 96,
                        h: 16
                    },
                    flame1: {
                        x: 0,
                        y: 1396,
                        w: 144,
                        h: 32,
                        frameW: 24
                    },
                    flame2: {
                        x: 0,
                        y: 1438,
                        w: 456,
                        h: 40,
                        frameW: 24
                    },
                    poisonFog1: {
                        x: 490,
                        y: 361,
                        w: 59,
                        h: 58
                    },
                    poisonFog2: {
                        x: 550,
                        y: 360,
                        w: 59,
                        h: 58
                    },
                    filler0: {
                        x: 537,
                        y: 0,
                        w: 12,
                        h: 12
                    },
                    filler1: {
                        x: 549,
                        y: 0,
                        w: 12,
                        h: 12
                    },
                    filler2: {
                        x: 561,
                        y: 0,
                        w: 12,
                        h: 12
                    },
                    filler3: {
                        x: 573,
                        y: 0,
                        w: 12,
                        h: 12
                    },
                    filler4: {
                        x: 585,
                        y: 0,
                        w: 12,
                        h: 12
                    },
                    filler5: {
                        x: 597,
                        y: 0,
                        w: 12,
                        h: 12
                    },
                    filler6: {
                        x: 609,
                        y: 0,
                        w: 12,
                        h: 12
                    },
                    filler7: {
                        x: 621,
                        y: 0,
                        w: 12,
                        h: 12
                    },
                    filler8: {
                        x: 633,
                        y: 0,
                        w: 12,
                        h: 12
                    },
                    zombie_weapon: {
                        x: 405,
                        y: 41,
                        w: 24,
                        h: 23
                    },
                    blank: {
                        x: 0,
                        y: 1,
                        w: 1,
                        h: 1
                    },
                    replayBar: {
                        x: 417,
                        y: 22,
                        w: 87,
                        h: 17
                    },
                    replayPos: {
                        x: 505,
                        y: 22,
                        w: 4,
                        h: 17
                    },
                    startGif: {
                        x: 510,
                        y: 22,
                        w: 48,
                        h: 17
                    },
                    stopGif: {
                        x: 559,
                        y: 22,
                        w: 48,
                        h: 17
                    },
                    whiteGif: {
                        x: 608,
                        y: 22,
                        w: 48,
                        h: 17
                    },
                    main_logo: {
                        x: 433,
                        y: 45,
                        w: 82,
                        h: 30
                    },
                    replayPlusMinus: {
                        x: 657,
                        y: 22,
                        w: 9,
                        h: 17
                    },
                    replayWhite: {
                        x: 667,
                        y: 22,
                        w: 9,
                        h: 8
                    },
                    playDead: {
                        x: 159,
                        y: 480,
                        w: 21,
                        h: 11
                    },
                    eatFromCorpse: {
                        x: 159,
                        y: 462,
                        w: 16,
                        h: 15
                    },
                    summonZombie: {
                        x: 153,
                        y: 442,
                        w: 22,
                        h: 15
                    },
                    summonZombie2: {
                        x: 155,
                        y: 420,
                        w: 22,
                        h: 17
                    },
                    summonZombie3: {
                        x: 156,
                        y: 401,
                        w: 22,
                        h: 15
                    },
                    zombieSpawn1: {
                        x: 342,
                        y: 559,
                        w: 256,
                        h: 32
                    },
                    zombieSpawn2: {
                        x: 342,
                        y: 599,
                        w: 256,
                        h: 32
                    },
                    zombieSpawn3: {
                        x: 438,
                        y: 480,
                        w: 256,
                        h: 32
                    },
                    zombieSpawn4: {
                        x: 438,
                        y: 444,
                        w: 256,
                        h: 32
                    },
                    zombieSenseCircle: {
                        x: 358,
                        y: 360,
                        w: 26,
                        h: 19
                    },
                    zombieSenseIcon: {
                        x: 162,
                        y: 384,
                        w: 19,
                        h: 15
                    },
                    speech: {
                        x: 0,
                        y: 1230,
                        w: 87,
                        h: 35
                    },
                    nextPlayers: {
                        x: 0,
                        y: 1488,
                        w: 56,
                        h: 7
                    },
                    crawler: {
                        x: 268,
                        y: 634,
                        w: 18,
                        h: 19
                    },
                    emotesBubble: {
                        x: 623,
                        y: 1370,
                        w: 19,
                        h: 20
                    },
                    fireballBig: {
                        x: 395,
                        y: 339,
                        w: 18,
                        h: 14
                    },
                    fireballMedium: {
                        x: 416,
                        y: 339,
                        w: 9,
                        h: 11
                    },
                    fireballSmall: {
                        x: 427,
                        y: 342,
                        w: 5,
                        h: 5
                    }
                }
            },
            5860: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.Input = exports.getKeyName = exports.keyNames = exports.refreshKeyCodes = exports.keyCodes = exports.commandKeys = exports.commandNames = exports.COMMAND = exports.KEY = void 0;
                var KEY, COMMAND, Abilities_1 = __webpack_require__(6489),
                    Emotes_1 = __webpack_require__(4933),
                    functions_1 = __webpack_require__(8394),
                    Protocol_1 = __webpack_require__(9832),
                    Weapons_1 = __webpack_require__(2007),
                    config_1 = __webpack_require__(5303),
                    functions_2 = __webpack_require__(7582),
                    map1_1 = __webpack_require__(9620),
                    Network_1 = __webpack_require__(367),
                    rankInGame_1 = __webpack_require__(6480),
                    root_1 = __webpack_require__(17),
                    Sound_1 = __webpack_require__(3754),
                    UI_1 = __webpack_require__(2664),
                    lang_1 = __webpack_require__(9655),
                    canvas = document.getElementById("canvas");
                ! function(KEY) {
                    KEY[KEY.UP = 38] = "UP", KEY[KEY.DOWN = 40] = "DOWN", KEY[KEY.LEFT = 37] = "LEFT", KEY[KEY.RIGHT = 39] = "RIGHT", KEY[KEY.A = 65] = "A", KEY[KEY.B = 66] = "B", KEY[KEY.C = 67] = "C", KEY[KEY.D = 68] = "D", KEY[KEY.E = 69] = "E", KEY[KEY.F = 70] = "F", KEY[KEY.G = 71] = "G", KEY[KEY.H = 72] = "H", KEY[KEY.I = 73] = "I", KEY[KEY.J = 74] = "J", KEY[KEY.K = 75] = "K", KEY[KEY.L = 76] = "L", KEY[KEY.M = 77] = "M", KEY[KEY.N = 78] = "N", KEY[KEY.O = 79] = "O", KEY[KEY.P = 80] = "P", KEY[KEY.Q = 81] = "Q", KEY[KEY.R = 82] = "R", KEY[KEY.S = 83] = "S", KEY[KEY.T = 84] = "T", KEY[KEY.U = 85] = "U", KEY[KEY.V = 86] = "V", KEY[KEY.W = 87] = "W", KEY[KEY.X = 88] = "X", KEY[KEY.Y = 89] = "Y", KEY[KEY.Z = 90] = "Z", KEY[KEY.SHIFT = 16] = "SHIFT", KEY[KEY.CTRL = 17] = "CTRL", KEY[KEY.ALT = 18] = "ALT", KEY[KEY.NUM1 = 49] = "NUM1", KEY[KEY.NUM2 = 50] = "NUM2", KEY[KEY.NUM3 = 51] = "NUM3", KEY[KEY.NUM4 = 52] = "NUM4", KEY[KEY.NUM5 = 53] = "NUM5", KEY[KEY.NUM6 = 54] = "NUM6", KEY[KEY.NUM7 = 55] = "NUM7", KEY[KEY.NUM8 = 56] = "NUM8", KEY[KEY.NUM9 = 57] = "NUM9", KEY[KEY.NUM0 = 48] = "NUM0", KEY[KEY.CIRCUMFLEX = window.chrome ? 220 : 160] = "CIRCUMFLEX", KEY[KEY.ENTER = 13] = "ENTER", KEY[KEY.BACKSPACE = 8] = "BACKSPACE", KEY[KEY.DELETE = 46] = "DELETE", KEY[KEY.PAUSE = 19] = "PAUSE", KEY[KEY.F1 = 112] = "F1", KEY[KEY.F2 = 113] = "F2", KEY[KEY.F3 = 114] = "F3", KEY[KEY.F4 = 115] = "F4", KEY[KEY.F5 = 116] = "F5", KEY[KEY.F6 = 117] = "F6", KEY[KEY.F7 = 118] = "F7", KEY[KEY.F8 = 119] = "F8", KEY[KEY.F9 = 120] = "F9", KEY[KEY.F10 = 121] = "F10", KEY[KEY.ESC = 27] = "ESC", KEY[KEY.TAB = 9] = "TAB", KEY[KEY.PLUS = 107] = "PLUS", KEY[KEY.MINUS = 109] = "MINUS", KEY[KEY.SPACE = 32] = "SPACE", KEY[KEY.CAPSLOCK = 20] = "CAPSLOCK", KEY[KEY.AE = 192] = "AE", KEY[KEY.RIGHTMOUSE = 1002] = "RIGHTMOUSE"
                }(KEY = exports.KEY || (exports.KEY = {})),
                function(COMMAND) {
                    COMMAND[COMMAND.UP = 1] = "UP", COMMAND[COMMAND.DOWN = 2] = "DOWN", COMMAND[COMMAND.LEFT = 3] = "LEFT", COMMAND[COMMAND.RIGHT = 4] = "RIGHT", COMMAND[COMMAND.RELOAD = 5] = "RELOAD", COMMAND[COMMAND.STAND = 6] = "STAND", COMMAND[COMMAND.ABILITY1 = 7] = "ABILITY1", COMMAND[COMMAND.ABILITY2 = 8] = "ABILITY2", COMMAND[COMMAND.WPN1 = 9] = "WPN1", COMMAND[COMMAND.WPN2 = 10] = "WPN2", COMMAND[COMMAND.WPN3 = 11] = "WPN3", COMMAND[COMMAND.WPN4 = 12] = "WPN4", COMMAND[COMMAND.WPN5 = 13] = "WPN5", COMMAND[COMMAND.WPN6 = 14] = "WPN6", COMMAND[COMMAND.WPN7 = 15] = "WPN7", COMMAND[COMMAND.WPN8 = 16] = "WPN8", COMMAND[COMMAND.WPN9 = 17] = "WPN9", COMMAND[COMMAND.WPN10 = 18] = "WPN10", COMMAND[COMMAND.WPN11 = 19] = "WPN11", COMMAND[COMMAND.WPN12 = 20] = "WPN12", COMMAND[COMMAND.WPN16 = 21] = "WPN16", COMMAND[COMMAND.JUMP = 100] = "JUMP", COMMAND[COMMAND.PICK_UPGRADE = 101] = "PICK_UPGRADE", COMMAND[COMMAND.FIRE_2 = 102] = "FIRE_2"
                }(COMMAND = exports.COMMAND || (exports.COMMAND = {})), exports.commandNames = [], exports.commandNames[COMMAND.UP] = "Move Up", exports.commandNames[COMMAND.DOWN] = "Move down", exports.commandNames[COMMAND.LEFT] = "Move left", exports.commandNames[COMMAND.RIGHT] = "Move right", exports.commandNames[COMMAND.RELOAD] = "Reload", exports.commandNames[COMMAND.STAND] = "Stand / aim with sniper", exports.commandNames[COMMAND.ABILITY1] = "Use ability 1", exports.commandNames[COMMAND.ABILITY2] = "Use ability 2", exports.commandNames[COMMAND.JUMP] = "Jump", exports.commandNames[COMMAND.PICK_UPGRADE] = "Pick upgrade", exports.commandNames[COMMAND.FIRE_2] = "2nd fire mode", exports.commandKeys = [], exports.commandKeys[COMMAND.UP] = KEY.W, exports.commandKeys[COMMAND.DOWN] = KEY.S, exports.commandKeys[COMMAND.LEFT] = KEY.A, exports.commandKeys[COMMAND.RIGHT] = KEY.D, exports.commandKeys[COMMAND.RELOAD] = KEY.R, exports.commandKeys[COMMAND.STAND] = KEY.F, exports.commandKeys[COMMAND.FIRE_2] = KEY.Y, exports.commandKeys[COMMAND.ABILITY1] = KEY.Q, exports.commandKeys[COMMAND.ABILITY2] = KEY.E, exports.commandKeys[COMMAND.JUMP] = KEY.RIGHTMOUSE, exports.commandKeys[COMMAND.PICK_UPGRADE] = KEY.SPACE, exports.commandKeys[COMMAND.WPN1] = KEY.NUM1, exports.commandKeys[COMMAND.WPN2] = KEY.NUM2, exports.commandKeys[COMMAND.WPN3] = KEY.NUM3, exports.commandKeys[COMMAND.WPN4] = KEY.NUM4, exports.commandKeys[COMMAND.WPN5] = KEY.NUM5, exports.commandKeys[COMMAND.WPN6] = KEY.NUM6, exports.commandKeys[COMMAND.WPN7] = KEY.NUM7, exports.commandKeys[COMMAND.WPN8] = KEY.NUM8, exports.commandKeys[COMMAND.WPN9] = KEY.NUM9, exports.commandKeys[COMMAND.WPN10] = KEY.NUM0, exports.commandKeys[COMMAND.WPN11] = KEY.N, exports.commandKeys[COMMAND.WPN12] = KEY.M, exports.commandKeys[COMMAND.WPN16] = KEY.H;
                var lsHotkeyStr = localStorage.getItem("hotkeys");
                if (null !== lsHotkeyStr && lsHotkeyStr.length > 0)
                    for (var hotkeys = lsHotkeyStr.split("_"), i = 0; i < hotkeys.length; i++) {
                        var hotkeysplit = hotkeys[i].split(":");
                        hotkeysplit[0] && hotkeysplit[1] && (exports.commandKeys[parseInt(hotkeysplit[0])] = parseInt(hotkeysplit[1]))
                    }

                function refreshKeyCodes() {
                    exports.keyCodes.length = 0, exports.keyCodes[KEY.UP] = 1, exports.keyCodes[KEY.DOWN] = 2, exports.keyCodes[KEY.LEFT] = 3, exports.keyCodes[KEY.RIGHT] = 4;
                    for (var i = 1; i < exports.commandKeys.length; i++) exports.keyCodes[exports.commandKeys[i]] = i
                }
                exports.keyCodes = [], exports.refreshKeyCodes = refreshKeyCodes, refreshKeyCodes(), exports.keyNames = [], exports.keyNames[9] = "TAB", exports.keyNames[16] = "SHIFT", exports.keyNames[17] = "CTRL", exports.keyNames[18] = "ALT", exports.keyNames[19] = "PAUSE", exports.keyNames[20] = "CAPSLOCK", exports.keyNames[32] = "SPACE", exports.keyNames[37] = "LEFT", exports.keyNames[38] = "UP", exports.keyNames[39] = "RIGHT", exports.keyNames[40] = "DOWN", exports.keyNames[46] = "DEL", exports.keyNames[48] = "0", exports.keyNames[49] = "1", exports.keyNames[50] = "2", exports.keyNames[51] = "3", exports.keyNames[52] = "4", exports.keyNames[53] = "5", exports.keyNames[54] = "6", exports.keyNames[55] = "7", exports.keyNames[56] = "8", exports.keyNames[57] = "9", exports.keyNames[8] = "BACKSPACE", exports.keyNames[13] = "ENTER", exports.keyNames[27] = "ESC", exports.keyNames[65] = "A", exports.keyNames[66] = "B", exports.keyNames[67] = "C", exports.keyNames[68] = "D", exports.keyNames[69] = "E", exports.keyNames[70] = "F", exports.keyNames[71] = "G", exports.keyNames[72] = "H", exports.keyNames[73] = "I", exports.keyNames[74] = "J", exports.keyNames[75] = "K", exports.keyNames[76] = "L", exports.keyNames[77] = "M", exports.keyNames[78] = "N", exports.keyNames[79] = "O", exports.keyNames[80] = "P", exports.keyNames[81] = "Q", exports.keyNames[82] = "R", exports.keyNames[83] = "S", exports.keyNames[84] = "T", exports.keyNames[85] = "U", exports.keyNames[86] = "V", exports.keyNames[87] = "W", exports.keyNames[88] = "X", exports.keyNames[89] = "Y", exports.keyNames[90] = "Z", exports.keyNames[112] = "F1", exports.keyNames[113] = "F2", exports.keyNames[114] = "F3", exports.keyNames[115] = "F4", exports.keyNames[116] = "F5", exports.keyNames[117] = "F6", exports.keyNames[118] = "F7", exports.keyNames[119] = "F8", exports.keyNames[120] = "F9", exports.keyNames[121] = "F10", exports.keyNames[192] = "`", exports.keyNames[window.chrome ? 220 : 160] = "^", exports.keyNames[1002] = "Right Mouse";
                exports.getKeyName = function(key) {
                    return lang_1.lang.get("keys." + key) || exports.keyNames[key] || ""
                }, exports.Input = {
                    x: 0,
                    y: 0,
                    leftMouse: !1,
                    activeAbility: null,
                    keys: [],
                    getKeyCode: function(e) {
                        return e.which || e.keyCode
                    },
                    MouseWheelHandler: function(e) {
                        if ("inline" !== document.getElementById("chatInputDiv").style.display) {
                            if (e = (e = window.event || e).wheelDelta || -e.detail, root_1.root.game && root_1.root.game.iAmSpec) return exports.Input.zoom(e > 0 ? 1.1 : 1 / 1.1, .035), root_1.root.game.specX = root_1.root.game.cameraX, void(root_1.root.game.specY = root_1.root.game.cameraY);
                            if (root_1.root.game && root_1.root.game.playingPlayer && root_1.root.game.playingPlayer.weapon && !root_1.root.game.playingPlayer.dieAt) {
                                for (var step = Math.sign(-e), nr = ((root_1.root.game.playingPlayer.weapon.id + Weapons_1.weapons.length) % Weapons_1.weapons.length + Weapons_1.weapons.length + step) % Weapons_1.weapons.length; Weapons_1.weapons[nr].noWeapon || root_1.root.game.playingPlayerClips[nr] + root_1.root.game.playingPlayerAmmo[nr] <= 0 && 0 !== nr;) nr = (nr + step) % Weapons_1.weapons.length;
                                root_1.root.game.switchWeapon(nr)
                            }
                        }
                    },
                    zoom: function(direction, minZoom) {
                        if (null !== root_1.root.game) {
                            var x = root_1.root.game.cameraX + window.innerWidth / 2 / root_1.root.game.FIELD_SIZE,
                                y = root_1.root.game.cameraY + window.innerHeight / 2 / root_1.root.game.FIELD_SIZE;
                            root_1.root.game.SCALE_CONST *= direction, root_1.root.game.SCALE_CONST = Math.min(Math.max(root_1.root.game.SCALE_CONST, minZoom || .009), .3), (0, functions_2.resize)(), root_1.root.game.cameraX = x - window.innerWidth / 2 / root_1.root.game.FIELD_SIZE, root_1.root.game.cameraY = y - window.innerHeight / 2 / root_1.root.game.FIELD_SIZE
                        }
                    },
                    handleInput: function(key, e) {
                        var now = Date.now(),
                            keyCode = exports.keyCodes[key],
                            oldState = exports.Input.keys[key];
                        if (exports.Input.keys[key] = !0, "inline" !== document.getElementById("chatInputDiv").style.display || key === KEY.ENTER) {
                            if (key === KEY.F7) return exports.Input.x = window.innerWidth / 2, void(exports.Input.y = window.innerHeight / 2);
                            if (key !== KEY.ESC) {
                                if (key === KEY.F8) return Sound_1.Sound.playSound("click"), void(0, functions_2.toggleFullscreen)(document.documentElement);
                                if (key === KEY.F10) return Sound_1.Sound.playSound("click"), void UI_1.UI.toggleOptionsMenu();
                                if ((key === KEY.PLUS || key === KEY.Y) && root_1.root.game && root_1.root.game.replayMode) return Sound_1.Sound.playSound("click"), void(0, functions_2.changeReplaySpeed)(1);
                                if ((key === KEY.MINUS || key === KEY.X) && root_1.root.game && root_1.root.game.replayMode) return Sound_1.Sound.playSound("click"), void(0, functions_2.changeReplaySpeed)(-1);
                                if (document.getElementById("hotkeyScreen") && "none" !== document.getElementById("hotkeyScreen").style.display) {
                                    var active_hotkey_buttons = document.getElementsByClassName("hotkey_button_active");
                                    if (active_hotkey_buttons.length > 0) {
                                        var active_hotkey_button = active_hotkey_buttons[0];
                                        active_hotkey_button.style.color = "", active_hotkey_button.className = "hotkey_button", active_hotkey_button.innerHTML = (0, exports.getKeyName)(key), exports.commandKeys[parseInt(active_hotkey_button.getAttribute("data-key"))] = key, Sound_1.Sound.playSound("click"), refreshKeyCodes();
                                        var hotkeyStr = "";
                                        for (var attribute in exports.commandNames) exports.commandNames.hasOwnProperty(attribute) && (hotkeyStr += attribute + ":" + exports.commandKeys[attribute] + "_");
                                        return localStorage.setItem("hotkeys", hotkeyStr), !1
                                    }
                                } else if (root_1.root.game && root_1.root.game.map !== map1_1.map1)
                                    if (key === exports.commandKeys[COMMAND.JUMP]) Network_1.Network.send("m2"), null !== exports.Input.activeAbility && (Sound_1.Sound.playSound("switch"), exports.Input.activeAbility = null);
                                    else if (key === exports.commandKeys[COMMAND.FIRE_2] && root_1.root.game.playingPlayer && root_1.root.game.playingPlayer.weapon.mode2Weapon) root_1.root.game.fire2Down();
                                else {
                                    if (key === KEY.T || key === KEY.TAB) return rankInGame_1.rankInGame.show(), e.preventDefault(), !1;
                                    if (key === exports.commandKeys[COMMAND.PICK_UPGRADE] && root_1.root.game.interface_.upgradeChoicesAvailable && (root_1.root.game.interface_.upgNotificationStart > 0 || root_1.root.game.interface_.currentUpgChoicesEnd < now)) root_1.root.game.interface_.shopUpgrades();
                                    else if (key === exports.commandKeys[COMMAND.PICK_UPGRADE] && root_1.root.game.interface_.upgNotificationStart < 0 && root_1.root.game.interface_.currentUpgChoices.length > 0 && root_1.root.game.interface_.currentUpgChoicesEnd > now) root_1.root.game.interface_.hideUpgrades();
                                    else if (key === KEY.ENTER) {
                                        var el = document.getElementById("chatInputDiv"),
                                            el2 = document.getElementById("chatInput"),
                                            el3 = document.getElementById("chatlog"),
                                            el4 = document.getElementById("chatloginner");
                                        if ("inline" !== el.style.display) el.style.display = "inline", el3.style.display = "inline", el4.scrollTop = el4.scrollHeight, el2.focus();
                                        else {
                                            var msg = el2.value;
                                            msg && msg.length > 0 && sendChatMsg(msg), el2.value = "", el.style.display = "none", el3.style.display = "none"
                                        }
                                    } else if (exports.commandKeys[COMMAND.ABILITY1] === key) root_1.root.game.interface_.initAbility(root_1.root.game.pl_active_abilities[0], 0);
                                    else if (exports.commandKeys[COMMAND.ABILITY2] === key) root_1.root.game.interface_.initAbility(root_1.root.game.pl_active_abilities[1], 1);
                                    else if (exports.commandKeys[COMMAND.UP] === key || exports.commandKeys[COMMAND.DOWN] === key || exports.commandKeys[COMMAND.LEFT] === key || exports.commandKeys[COMMAND.RIGHT] === key || exports.commandKeys[COMMAND.RELOAD] === key || exports.commandKeys[COMMAND.STAND] === key && root_1.root.game.playingPlayer && root_1.root.game.playingPlayer.weapon && root_1.root.game.playingPlayer.weapon.requiredStandTime) oldState !== exports.Input.keys[key] && (exports.commandKeys[COMMAND.STAND] === key ? Network_1.Network.send(Protocol_1.NetworkCmd.KEY_DOWN + "$" + COMMAND.STAND) : Network_1.Network.send(Protocol_1.NetworkCmd.KEY_DOWN + "$" + keyCode));
                                    else if (root_1.root.game.playingPlayer && !root_1.root.game.playingPlayer.isHumanZombie)
                                        for (var i = 0; i < Weapons_1.weapons.length; i++)
                                            if (!Weapons_1.weapons[i].noWeapon && key === exports.commandKeys[COMMAND["WPN" + (i + 1)]]) {
                                                root_1.root.game.playingPlayerClips[i], root_1.root.game.playingPlayerAmmo[i];
                                                root_1.root.game.playingPlayerClips[i] + root_1.root.game.playingPlayerAmmo[i] > 0 || root_1.root.game.playingPlayer.weapon === Weapons_1.weapons[i] ? root_1.root.game.switchWeapon(i) : (root_1.root.game.interface_.setMainKillMsg("you don't have this weapon", "grey", "textInGrey"), Sound_1.Sound.playSound("empty_clip", root_1.root.game.playingPlayer.x, root_1.root.game.playingPlayer.y, .75)), i = Weapons_1.weapons.length
                                            }
                                }
                            }
                        }
                    }
                };
                var sendChatMsg = function(msg) {
                    for (var i = 0; i < Emotes_1.emotes.length; i++)
                        if (msg === Emotes_1.emotes[i].code && (0, functions_1.arrayContains)(config_1.playerData.emotes, i)) return void Network_1.Network.send("e$" + i);
                    Network_1.Network.send("chat" + msg)
                };
                document.addEventListener("contextmenu", (function(e) {
                    e.preventDefault()
                })), document.documentElement.onkeyup = function(e) {
                    var key = exports.Input.getKeyCode(e),
                        keyCode = exports.keyCodes[key];
                    return exports.Input.keys[key] = !1, key === KEY.T || key === KEY.TAB ? rankInGame_1.rankInGame.hide() : key === exports.commandKeys[COMMAND.FIRE_2] && null !== root_1.root.game ? root_1.root.game.fire2Up() : keyCode && (exports.commandKeys[COMMAND.STAND] === key ? Network_1.Network.send(Protocol_1.NetworkCmd.KEY_UP + "$" + COMMAND.STAND) : Network_1.Network.send(Protocol_1.NetworkCmd.KEY_UP + "$" + keyCode)), !1
                }, document.documentElement.onkeydown = function(e) {
                    return exports.Input.handleInput(exports.Input.getKeyCode(e), e)
                }, window.ondragover = function(e) {
                    e.preventDefault()
                }, document.addEventListener("mousewheel", exports.Input.MouseWheelHandler, !1), document.addEventListener("DOMMouseScroll", exports.Input.MouseWheelHandler, !1), document.documentElement.onmousedown = function(e) {
                    if (window.focus(), e.currentTarget !== canvas) {
                        var key = exports.Input.getKeyCode(e);
                        if (1 !== key || !exports.Input.leftMouse) {
                            if (1 === key) exports.Input.leftMouse = !0;
                            else if (3 === key) return e.preventDefault(), exports.Input.handleInput(KEY.RIGHTMOUSE, e);
                            if (root_1.root.game && root_1.root.game.map !== map1_1.map1) {
                                var t = e.target;
                                if (!t || !("yes" === t.getAttribute("data-noclick") || t.parentNode instanceof HTMLElement && ("yes" === t.parentNode.getAttribute("data-noclick") || t.parentNode.parentNode instanceof HTMLElement && "yes" === t.parentNode.parentNode.getAttribute("data-noclick")))) return !!(!root_1.root.game || root_1.root.game.map === map1_1.map1 || e.target && ("gameLink" === e.target.id || e.target.className.indexOf("clickableDuringGame") >= 0)) && void 0
                            }
                        }
                    }
                }, document.documentElement.onmouseup = function(e) {
                    var key = exports.Input.getKeyCode(e);
                    1 === key && (exports.Input.leftMouse = !1), root_1.root.game && root_1.root.game.playingPlayer && 1 === key && root_1.root.game.mouseUp()
                }, document.documentElement.onclick = function(e) {
                    var b = exports.Input.getKeyCode(e);
                    return 2 !== b && 3 !== b || (e.preventDefault(), e.stopPropagation(), !1)
                }, canvas.onclick = function(e) {
                    return e.preventDefault(), e.stopPropagation(), !1
                }, canvas.addEventListener("mousedown", (function(e) {
                    if (null !== root_1.root.game) {
                        var x = (0, functions_2.getMouseGamePlayX)(),
                            y = (0, functions_2.getMouseGamePlayY)(),
                            key = exports.Input.getKeyCode(e);
                        if (1 === key) {
                            if (root_1.root.game.interface_.click()) return;
                            if (root_1.root.game.iAmSpec) return void root_1.root.game.switchSpec(1);
                            if (root_1.root.game.playingPlayer && null !== exports.Input.activeAbility) {
                                var target = null;
                                void 0 !== exports.Input.activeAbility.energy && exports.Input.activeAbility.energy > root_1.root.game.playingPlayerEnergy ? (root_1.root.game.interface_.addMsg(lang_1.lang.get("game.msg.no_energy"), "red"), Sound_1.Sound.playSound("negative", void 0, void 0, .8)) : root_1.root.game.lastAbilityUses[root_1.root.game.pl_active_abilities[0] === exports.Input.activeAbility ? 0 : 1] + exports.Input.activeAbility.cooldown > root_1.root.game.ticksCounter ? (root_1.root.game.interface_.addMsg(lang_1.lang.get("game.msg.no_cooldown"), "red"), Sound_1.Sound.playSound("negative", void 0, void 0, .8)) : exports.Input.activeAbility.type === Abilities_1.AbilityType.Blink && root_1.root.game.playingPlayer.carriesFlag() ? (root_1.root.game.interface_.addMsg(lang_1.lang.get("game.skills.teleport.disabled_in_ctf"), "red"), Sound_1.Sound.playSound("negative", void 0, void 0, .8)) : (target = exports.Input.activeAbility.type === Abilities_1.AbilityType.Place ? root_1.root.game.getPotentialPlaceTarget(exports.Input.activeAbility) : {
                                    x,
                                    y
                                }, Network_1.Network.send("ab$" + exports.Input.activeAbility.id + "$" + target.x + "$" + target.y)), exports.Input.activeAbility = null
                            } else root_1.root.game.playingPlayer && root_1.root.game.playingPlayer.weapon && (root_1.root.game.playingPlayer.weapon.requiredStandTime && root_1.root.game.playingPlayer.standTime <= 0 ? root_1.root.game.playingPlayerClips[root_1.root.game.playingPlayer.weapon.id] && (root_1.root.game.interface_.setMainKillMsg(lang_1.lang.get("game.msg.stand_required", {
                                keyName: (0, exports.getKeyName)(exports.commandKeys[COMMAND.STAND])
                            }), "grey", "textInGrey"), Sound_1.Sound.playSound("negative", void 0, void 0, .8)) : root_1.root.game.mouseDown())
                        } else if (3 === key && root_1.root.game.iAmSpec) return void root_1.root.game.switchSpec(-1)
                    }
                })), document.documentElement.onmousemove = function(e) {
                    var x = e.pageX,
                        y = e.pageY;
                    null === x && null !== e.clientX && (x = e.clientX + (document.documentElement.scrollLeft || document.body.scrollLeft || 0) - (document.documentElement.clientLeft || document.body.clientLeft || 0), y = e.clientY + (document.documentElement.scrollTop || document.body.scrollTop || 0) - (document.documentElement.clientTop || document.body.clientTop || 0)), exports.Input.x = x, exports.Input.y = y
                }
            },
            4504: function(__unused_webpack_module, exports, __webpack_require__) {
                "use strict";
                var __importDefault = this && this.__importDefault || function(mod) {
                    return mod && mod.__esModule ? mod : {
                        default: mod
                    }
                };
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.Interface_ = void 0;
                var _1 = __webpack_require__(2174),
                    Abilities_1 = __webpack_require__(6489),
                    Data_1 = __webpack_require__(6313),
                    Weapons_1 = __webpack_require__(2007),
                    config_1 = __webpack_require__(5303),
                    FileSaver_1 = __importDefault(__webpack_require__(9217)),
                    gif_1 = __importDefault(__webpack_require__(1301)),
                    functions_1 = __webpack_require__(7582),
                    Img_1 = __webpack_require__(360),
                    Input_1 = __webpack_require__(5860),
                    Network_1 = __webpack_require__(367),
                    rankInGame_1 = __webpack_require__(6480),
                    root_1 = __webpack_require__(17),
                    Sound_1 = __webpack_require__(3754),
                    lang_1 = __webpack_require__(9655),
                    _canvasGIF = document.createElement("canvas"),
                    _canvas = document.getElementById("canvas"),
                    _ctx = _canvas.getContext("2d"),
                    _fpsHistory = [],
                    _timeOfLastFrame = 0,
                    Interface_ = function() {
                        function Interface_(game, map) {
                            if (this.messages = [], this.hoverWeapon = -1, this.hoverAbility = -1, this.buttons = [], this.top3 = [], this.chatlog = [], this.ladderEndAt = -1, this.ladderEndMsg = "You lose!", this.ladderMsgArr = ["Player1", "Player2", "3", "0"], this.currentUpgChoices = [], this.oldUpgChoices = [], this.showOldUpgChoicesUntil = -9999, this.currentUpgChoicesStart = -9999, this.currentUpgChoicesEnd = -9999, this.selectedChoiceUntil = -9999, this.upgNotificationStart = -9999, this.upgNotificationHovered = !1, this.cureButtonHovered = !1, this.abilityPoints = 0, this.soulLvl = 1, this.soulsGot = 0, this.soulsNeeded = 0, this.hoverChoice = null, this.buttonIsHovered = !1, this.lastChoiceIndex = -1, this.skipButtonHover = !1, this.unskipButtonHover = !1, this.upgradeChoicesAvailable = !1, this.tutorialMessagesActive = [], this.lastTutorialMessagesStateChange = [], this.replayLength = 0, this.replayLengthStr = "", this.replayTimer = 0, this.provisionalReplayPos = -1, this.fastForwardTo = -1, this.replayPlusHover = !1, this.replayMinusHover = !1, this.recordGIF = !1, this.gifButtonIsHovered = !1, this.gifProcessing = !1, this.game = game, document.getElementById("chatloginner").innerHTML = "", map && map.tutorialMessages)
                                for (var i = 0; i < map.tutorialMessages.length; i++) this.tutorialMessagesActive.push(!1), this.lastTutorialMessagesStateChange.push(-99999)
                        }
                        return Interface_.prototype.analyzeReplay = function(r) {
                            for (var counter = 0, _i = 0, r_1 = r; _i < r_1.length; _i++) {
                                "upd" === r_1[_i].split("$")[0] && counter++
                            }
                            this.replayLength = counter, this.replayLengthStr = (0, functions_1.ticks2TimeStr)(this.replayLength)
                        }, Interface_.prototype.setMainKillMsg = function(msg, color, cssAnimName, two, img) {
                            if (!this.game.fastForward) {
                                for (var el = document.getElementById("mainKillMsg" + (two ? "2" : "")), str = "", i = 0; i < msg.length; i++) str += "<span class='noSelect' oncontextmenu='return false;'>" + msg.substr(i, 1) + "</span>";
                                if (el.innerHTML = str, el.style.color = color, img) {
                                    el.innerHTML = "<span> &nbsp;</span>" + el.innerHTML;
                                    var scale = .7 * this.game.SCALE_FACTOR,
                                        canvas = document.createElement("canvas"),
                                        ctx = canvas.getContext("2d");
                                    canvas.className = "noSelect", canvas.width = Math.floor(scale * img.w), canvas.height = Math.floor(scale * img.h), ctx.mozImageSmoothingEnabled = !1, ctx.msImageSmoothingEnabled = !1, ctx.imageSmoothingEnabled = !1, ctx.drawImage(_1.imgs.miscSheet, img.x, img.y, img.w, img.h, 0, 0, canvas.width, canvas.height), el.insertBefore(canvas, el.firstChild)
                                }
                                var els = el.childNodes;
                                for (i = 0; i < els.length; i++) els[i].style.animationName = cssAnimName, els[i].style.animationDelay = .015 * i + "s", els[i].style.animationDuration = "5s"
                            }
                        }, Interface_.prototype.getFormattedPlayerName = function(player) {
                            if (!player) return null;
                            var clan_tag = "";
                            player.clan_tag && player.clan_tag.length > 0 && (clan_tag = "[<span style='color: " + player.nameColorCode + ";'>" + player.clan_tag + "</span>] ");
                            var player_name = clan_tag + "<span style='color: " + player.nameColorCode + ";'>" + player.name + "</span>";
                            return "<span style='background: " + player.getTeamColor() + ";'>" + player_name + "</span>"
                        }, Interface_.prototype.addKillMsg = function(p1, p2, projectile, murderWeaponID, obj, splash) {
                            if (!this.game.fastForward) {
                                var el = document.getElementById("killsDisplayDiv"),
                                    now = Date.now(),
                                    div = document.createElement("div"),
                                    p1_name = this.getFormattedPlayerName(p1),
                                    p2_name = this.getFormattedPlayerName(p2),
                                    canvas = document.createElement("canvas"),
                                    ctx = canvas.getContext("2d"),
                                    img = projectile && projectile.weapon ? Img_1.imgCoords[projectile.weapon.img] : Img_1.imgCoords.grenade1,
                                    wpn = void 0 !== murderWeaponID ? Weapons_1.weapons[murderWeaponID] : null;
                                wpn && (img = Img_1.imgCoords[wpn.img]), obj && (img = Img_1.imgCoords[obj.ability.icon]), splash && (img = Img_1.imgCoords.splashSingle);
                                var scale = projectile && projectile.weapon || wpn ? .3 * this.game.SCALE_FACTOR_BASE : .6 * this.game.SCALE_FACTOR_BASE;
                                canvas.width = Math.floor(scale * img.w), canvas.height = Math.floor(scale * img.h), ctx.mozImageSmoothingEnabled = !1, ctx.msImageSmoothingEnabled = !1, ctx.imageSmoothingEnabled = !1, ctx.drawImage(_1.imgs.miscSheet, img.x, img.y, img.w, img.h, 0, 0, canvas.width, canvas.height), div.innerHTML = p1 === p2 ? lang_1.lang.get("game.msg.killed_self_broadcast", {
                                    playerName: p1_name
                                }) : p1_name + " <img src='" + canvas.toDataURL() + "' /> " + p2_name, div.className = "chatMsg noSelect killMsg", div.setAttribute("data-time", now.toString()), el.appendChild(div)
                            }
                        }, Interface_.prototype.chatMsg = function(msg, color) {
                            if (!this.game.fastForward) {
                                var el = document.getElementById("chatDisplayDiv"),
                                    el2 = document.getElementById("chatloginner"),
                                    now = Date.now(),
                                    playerID = parseInt(msg.split("$")[0]),
                                    formattedPlayerName = null;
                                if (-1 === playerID) formattedPlayerName = "<span style='text-decoration: underline; color: red;'>Server</span>";
                                else {
                                    var pl = this.game.getPlayerFromID(playerID);
                                    if (pl && pl.name && (0, functions_1.playerIsBeeingIgnored)(pl.name)) return;
                                    formattedPlayerName = this.getFormattedPlayerName(pl)
                                }
                                if (formattedPlayerName) {
                                    msg = formattedPlayerName + ": " + (0, functions_1.escapeHtml)(msg.split("$").slice(1).join("$"));
                                    var div = document.createElement("div"),
                                        div2 = document.createElement("div");
                                    div.innerHTML = msg, div2.innerHTML = msg, div.className = "chatMsg noSelect", div2.className = "noSelect", div.setAttribute("data-time", now.toString()), el.appendChild(div), el2.appendChild(div2), Sound_1.Sound.playSound("chat", void 0, void 0, .5)
                                }
                            }
                        }, Interface_.prototype.addMsg = function(msg, color) {
                            if (!this.game.fastForward) {
                                var el = document.getElementById("chatDisplayDiv"),
                                    now = Date.now(),
                                    div = document.createElement("div");
                                div.innerHTML = "<span style='color: " + color + ";'>" + msg + "</span>", div.className = "chatMsg noSelect", div.setAttribute("data-time", now.toString()), el.appendChild(div)
                            }
                        }, Interface_.prototype.click = function() {
                            var now = Date.now();
                            return this.hoverWeapon >= 0 && !config_1.options.weaponsUnclickable ? (this.game.switchWeapon(this.hoverWeapon), !0) : this.cureButtonHovered ? (this.game.cureTick = 0, Network_1.Network.send("cure"), !0) : this.hoverAbility >= 0 && !config_1.options.weaponsUnclickable ? (this.initAbility(this.game.pl_active_abilities[this.hoverAbility], this.hoverAbility), !0) : this.hoverChoice && this.game.playingPlayer ? (this.showOldUpgChoicesUntil < now && (this.currentUpgChoicesEnd = now + 200, Network_1.Network.send("upg$" + this.hoverChoice.index + "$" + this.hoverChoice.sub), this.lastChoiceIndex = this.hoverChoice.i, this.selectedChoiceUntil = now + 500, this.upgradeChoicesAvailable = !1, this.abilityPoints -= this.hoverChoice.cost, Sound_1.Sound.playSound("beebeep"), this.game.playingPlayer.createAtributeEffect()), !0) : this.upgNotificationStart > 0 && this.upgNotificationHovered ? (this.shopUpgrades(), !0) : this.skipButtonHover ? (this.hideUpgrades(), !0) : this.unskipButtonHover ? (this.shopUpgrades(), !0) : this.provisionalReplayPos >= 0 ? (Sound_1.Sound.playSound("click"), this.replayJumpTo(), !0) : this.gifButtonIsHovered ? (Sound_1.Sound.playSound("click"), this.recordGIF ? this.endGIF() : this.startGIF(), !0) : this.replayPlusHover ? (Sound_1.Sound.playSound("click"), (0, functions_1.changeReplaySpeed)(1), !0) : !!this.replayMinusHover && (Sound_1.Sound.playSound("click"), (0, functions_1.changeReplaySpeed)(-1), !0)
                        }, Interface_.prototype.shopUpgrades = function() {
                            this.currentUpgChoicesStart = Date.now(), this.currentUpgChoicesEnd = this.currentUpgChoicesStart + 9999999, this.upgNotificationStart = -9999, Sound_1.Sound.playSound("beebeep")
                        }, Interface_.prototype.hideUpgrades = function() {
                            this.currentUpgChoicesEnd = Date.now() + 200, Sound_1.Sound.playSound("beebeep"), this.hoverChoice = null
                        }, Interface_.prototype.initAbility = function(ab, i) {
                            if (Input_1.Input.activeAbility === ab) Input_1.Input.activeAbility = null, Sound_1.Sound.playSound("switch");
                            else {
                                var error = !1;
                                (ab.energy || 0) > this.game.playingPlayerEnergy ? (error = !0, this.addMsg(lang_1.lang.get("game.msg.no_energy"), "red"), Sound_1.Sound.playSound("negative", .8)) : this.game.lastAbilityUses[i] + ab.cooldown > this.game.ticksCounter ? (error = !0, this.addMsg(lang_1.lang.get("game.msg.no_cooldown"), "red"), Sound_1.Sound.playSound("negative", .8)) : ab.type === Abilities_1.AbilityType.Blink && this.game.playingPlayer && this.game.playingPlayer.carriesFlag() && (error = !0, this.addMsg(lang_1.lang.get("game.skills.teleport.disabled_in_ctf"), "red"), Sound_1.Sound.playSound("negative", .8)), ab.isInstant ? error || (Network_1.Network.send("ab$" + ab.id), Input_1.Input.activeAbility = null) : (error || Sound_1.Sound.playSound("switch"), Input_1.Input.activeAbility = ab)
                            }
                        }, Interface_.prototype.killAllMsgs = function() {
                            for (var el = document.getElementById("chatDisplayDiv"); el.childNodes.length > 0;) el.removeChild(el.childNodes[0]);
                            for (el = document.getElementById("killsDisplayDiv"); el.childNodes.length > 0;) el.removeChild(el.childNodes[0])
                        }, Interface_.prototype.refreshTop3 = function() {
                            var sort = this.game.type.winningCondition;
                            if (!sort) return 0;
                            var playersByScore = this.game.players.sort(this.game.playerSortHandler.bind(this.game));
                            this.top3.length = 0, this.playingPlayerStats = null;
                            for (var playingPlayerIsInTop3 = !1, myRank = 0, i = 0; i < Math.min(3, playersByScore.length); i++) this.top3[i] = {
                                rank: i + 1,
                                id: playersByScore[i].id,
                                team: playersByScore[i].team,
                                name: playersByScore[i].name,
                                clan: playersByScore[i].clan_tag,
                                souls: playersByScore[i][sort]
                            }, this.game.playingPlayer === playersByScore[i] && (playingPlayerIsInTop3 = !0, myRank = i + 1);
                            if (this.game.playingPlayer && !playingPlayerIsInTop3)
                                for (i = 0; i < playersByScore.length; i++)
                                    if (playersByScore[i] === this.game.playingPlayer) {
                                        myRank = i + 1, this.top3.push({
                                            rank: myRank,
                                            id: this.game.playingPlayer.id,
                                            team: this.game.playingPlayer.team,
                                            clan: this.game.playingPlayer.clan_tag,
                                            name: this.game.playingPlayer.name,
                                            souls: this.game.playingPlayer[sort]
                                        });
                                        break
                                    } return myRank
                        }, Interface_.prototype.presentUpgChoice = function(splitMsg) {
                            var now = Date.now();
                            this.currentUpgChoicesEnd + 500 > now ? (this.oldUpgChoices = this.currentUpgChoices, this.showOldUpgChoicesUntil = now + 500, this.currentUpgChoicesStart = now - 1e3, this.currentUpgChoicesEnd = now + 9999999, this.upgNotificationStart = -9999) : this.upgNotificationStart = now, this.currentUpgChoices.length = 0, this.abilityPoints = parseInt(splitMsg[1]), this.refreshSouls(parseInt(splitMsg[2])), this.game.playingPlayer && (this.game.playingPlayer.souls = parseInt(splitMsg[2]), this.game.playingPlayer.soulLvl = (0, Data_1.getLvlFromSouls)(parseInt(splitMsg[2])));
                            for (var k = 0, i = 3; i < splitMsg.length; i += 3) {
                                var upg = Abilities_1.abilities[parseInt(splitMsg[i])],
                                    maxLvl = "-1" !== splitMsg[i + 1] ? 5 : 10;
                                "-1" === splitMsg[i + 1] && upg.maxLvl ? maxLvl = upg.maxLvl : "-1" !== splitMsg[i + 1] && upg.levelUpMaxUpgLvl && upg.levelUpMaxUpgLvl[parseInt(splitMsg[i + 1])] && (maxLvl = upg.levelUpMaxUpgLvl[parseInt(splitMsg[i + 1])]), this.currentUpgChoices.push({
                                    img: Img_1.imgCoords[upg.icon],
                                    text: upg.name + ("-1" !== splitMsg[i + 1] ? " - " + upg.levelUpFieldsName[parseInt(splitMsg[i + 1])] : ""),
                                    cost: "-1" !== splitMsg[i + 1] ? upg.levelUpCost[parseInt(splitMsg[i + 1])] : upg.cost,
                                    index: parseInt(splitMsg[i]),
                                    sub: parseInt(splitMsg[i + 1]),
                                    lvl: parseInt(splitMsg[i + 2]),
                                    maxLvl,
                                    i: k
                                }), k++
                            }
                            0 === this.currentUpgChoices.length && (this.upgNotificationStart = -9999), this.upgradeChoicesAvailable = this.currentUpgChoices.length > 0
                        }, Interface_.prototype.refreshSouls = function(souls) {
                            this.soulLvl = (0, Data_1.getLvlFromSouls)(souls);
                            var lowBorder = (0, Data_1.getCrystalsRequiredForLvl)(this.soulLvl),
                                highBorder = (0, Data_1.getCrystalsRequiredForLvl)(this.soulLvl + 1);
                            this.soulsGot = souls - lowBorder, this.soulsNeeded = highBorder - lowBorder
                        }, Interface_.prototype.draw = function(exactTicks) {
                            var now = Date.now(),
                                fpsPingY = 98;
                            if (config_1.options.showFPS) {
                                for (_fpsHistory.push(1e3 / (now - _timeOfLastFrame)), _timeOfLastFrame = now; _fpsHistory.length > 10;) _fpsHistory.splice(0, 1);
                                var fps = Math.round(_fpsHistory.reduce((function(a, b) {
                                    return a + b
                                })) / _fpsHistory.length);
                                (0, functions_1.drawText)(_ctx, "FPS: " + fps, "white", 18, 10, fpsPingY), fpsPingY += 28
                            }
                            config_1.options.showPing && (0, functions_1.drawText)(_ctx, "Ping: " + Network_1.Network.lastPing, "white", 18, 10, fpsPingY);
                            for (var el = document.getElementById("chatDisplayDiv"), els = el.childNodes, i = 0; i < els.length; i++)(els[i].getAttribute("data-time") < now - 1e4 || i < els.length - 10) && el.removeChild(els[i]);
                            els = (el = document.getElementById("killsDisplayDiv")).childNodes;
                            for (i = 0; i < els.length; i++)(els[i].getAttribute("data-time") < now - 1e4 || i < els.length - 10) && el.removeChild(els[i]);
                            var scale = .8 * this.game.SCALE_FACTOR_BASE,
                                scaleA = .5 * scale,
                                scaleM = .4 * scale,
                                buttonAlpha = config_1.options.weaponsUnclickable ? .7 : 1,
                                wpns = this.game.playingPlayerIsZombie ? [Weapons_1.weapons[12]] : Weapons_1.weapons;
                            if (this.game.playingPlayer && (this.game.playingPlayer.weapon || this.game.playingPlayerIsZombie) && !this.game.playingPlayer.dieAt) {
                                var button_img = Img_1.imgCoords.weaponFrame2,
                                    x1 = window.innerWidth - (button_img.w + 1) * scaleM,
                                    y1 = window.innerHeight - (button_img.h + 1) * scaleM;
                                this.hoverWeapon = -1;
                                var img2 = Img_1.imgCoords.weaponFrameCurrent;
                                for (i = 0; i < wpns.length; i++) {
                                    var wpn = wpns[wpns.length - i - 1],
                                        totalAmmo = this.game.playingPlayerClips[wpn.id] + this.game.playingPlayerAmmo[wpn.id];
                                    if ((totalAmmo > 0 || this.game.playingPlayer.weapon === wpn) && !wpn.noWeapon || wpn === Weapons_1.weapons[12] && this.game.playingPlayerIsZombie) {
                                        button_img = totalAmmo > 0 || wpn === Weapons_1.weapons[12] ? Img_1.imgCoords.weaponFrame2Green : Img_1.imgCoords.weaponFrame2;
                                        var sheet = totalAmmo > 0 || wpn === Weapons_1.weapons[12] ? _1.imgs.miscSheet : _1.imgs.miscSheetGrey;
                                        _ctx.globalAlpha = buttonAlpha, _ctx.drawImage(sheet, button_img.x, button_img.y, button_img.w, button_img.h, x1, y1, button_img.w * scaleM, button_img.h * scaleM), this.game.playingPlayer.weapon !== wpn && wpn !== Weapons_1.weapons[12] || _ctx.drawImage(_1.imgs.miscSheet, img2.x, img2.y, img2.w, img2.h, x1 - 3 * scaleM, y1 - 3 * scaleM, img2.w * scaleM, img2.h * scaleM);
                                        var wpn_img = Img_1.imgCoords[wpn.img];
                                        _ctx.drawImage(sheet, wpn_img.x, wpn_img.y, wpn_img.w, wpn_img.h, x1 + button_img.w * scaleM * .4 - .5 * wpn_img.w * scaleM * 1.3, y1 + (button_img.h - 3) * scaleM - wpn_img.h * scaleM * 1.3, wpn_img.w * scaleM * 1.3, wpn_img.h * scaleM * 1.3);
                                        var ammo_img = Img_1.imgCoords[wpn.ammoImgSmall];
                                        _ctx.drawImage(sheet, ammo_img.x, ammo_img.y, ammo_img.w, ammo_img.h, x1 + button_img.w * scaleM * .25 - ammo_img.w * scaleM * 1.2, y1 + button_img.h * scaleM * .2 - .5 * ammo_img.h * scaleM * 1.2, ammo_img.w * scaleM * 1.2, ammo_img.h * scaleM * 1.2);
                                        var ammo = wpn.startAmmoSize ? "INF" : this.game.playingPlayerClips[wpn.id] + " (" + this.game.playingPlayerAmmo[wpn.id] + ")";
                                        if ((0, functions_1.drawText)(_ctx, ammo, totalAmmo > 0 ? "#4FAC43" : "rgba(255, 255, 255, " + .7 * buttonAlpha + ")", 7.5 * scaleM, x1 + button_img.w * scaleM * .35, y1 + .55 * button_img.h), wpn.id <= 9) {
                                            var key = Input_1.commandKeys[Input_1.COMMAND["WPN" + (wpn.id + 1)]],
                                                color = Input_1.Input.keys[key] ? "rgba(100, 170, 110, " + .8 * buttonAlpha + ")" : "rgba(255, 255, 255, " + .8 * buttonAlpha + ")";
                                            (0, functions_1.drawText)(_ctx, "[" + Input_1.keyNames[key] + "]", color, 6 * scaleM, x1 + button_img.w * scaleM * .8, y1 + button_img.h * scaleM * .8, 10 * scaleM, "right")
                                        }
                                        _ctx.globalAlpha = 1, !config_1.options.weaponsUnclickable && Input_1.Input.x >= x1 && Input_1.Input.y >= y1 && Input_1.Input.y <= y1 + button_img.h * scaleM && (this.hoverWeapon = wpn.id, _ctx.fillStyle = "rgba(0, 0, 0, 0.8)", _ctx.fillRect(window.innerWidth - 100 * scale, window.innerHeight - 80 * scale, 60 * scale, 50 * scale), (0, functions_1.drawText)(_ctx, wpn.name, "white", 4 * scale, window.innerWidth - 95 * scale, window.innerHeight - 74 * scale, 200 * scale, "left", 1, void 0, void 0, 50 * scale), (0, functions_1.drawText)(_ctx, wpn.description, "#D4D4D4", 3 * scale, window.innerWidth - 95 * scale, window.innerHeight - 64 * scale, 50 * scale, "left", 1, void 0, 3.5 * scale), _ctx.globalAlpha = .5, _ctx.drawImage(_1.imgs.miscSheet, img2.x, img2.y, img2.w, img2.h, x1 - 3 * scaleM, y1 - 3 * scaleM, img2.w * scaleM, img2.h * scaleM), _ctx.globalAlpha = 1), y1 -= (button_img.h + 2) * scaleM
                                    }
                                }
                            }
                            if (functions_1.replaySettings.lastReplaySpeedChange + 2e3 > now) {
                                var alpha_ = Math.min((functions_1.replaySettings.lastReplaySpeedChange + 2e3 - now) / 750, 1);
                                (0, functions_1.drawText)(_ctx, "Speed x" + functions_1.replaySettings.replayOption.display, "#FFD155", .35 * this.game.FIELD_SIZE_BASE, window.innerWidth - 7 * this.game.SCALE_FACTOR_BASE, window.innerHeight - 10 * this.game.SCALE_FACTOR_BASE, 500, "right", alpha_)
                            }
                            if (this.game.playingPlayer && Input_1.Input.activeAbility && Input_1.Input.activeAbility.activeMsg && (0, functions_1.drawText)(_ctx, Input_1.Input.activeAbility.activeMsg, "#C0EDBA", .4 * this.game.FIELD_SIZE_BASE, .5 * window.innerWidth, .1 * window.innerHeight, window.innerWidth - 20, "center", .8, "rgba(255, 255, 255, 0.3)", .45 * this.game.FIELD_SIZE_BASE), this.hoverAbility = -1, this.game.playingPlayer && !this.game.playingPlayer.dieAt)
                                for (i = 0; i < this.game.pl_active_abilities.length; i++)
                                    if (this.game.pl_active_abilities[i]) {
                                        _ctx.globalAlpha = buttonAlpha;
                                        var a = this.game.pl_active_abilities[i];
                                        button_img = this.game.playingPlayerEnergy >= a.energy ? Img_1.imgCoords.abilityFrameGreen : Img_1.imgCoords.abilityFrame, x1 = window.innerWidth - scaleA * (button_img.w + 1) * (this.game.pl_active_abilities.length - i) - (Img_1.imgCoords.weaponFrame.w + 6) * scaleM, y1 = window.innerHeight - (button_img.h + 1) * scaleA, sheet = a.energy <= this.game.playingPlayerEnergy && this.game.lastAbilityUses[i] + a.cooldown <= this.game.ticksCounter ? _1.imgs.miscSheet : _1.imgs.miscSheetGrey;
                                        _ctx.drawImage(sheet, button_img.x, button_img.y, button_img.w, button_img.h, x1, y1, button_img.w * scaleA, button_img.h * scaleA);
                                        var img = Img_1.imgCoords[a.icon],
                                            imgScale = (button_img.w - 6) * scaleA / Math.max(img.w, img.h),
                                            x_1 = x1 + (button_img.w * scaleA - img.w * imgScale) / 2,
                                            y_1 = y1 + .2 * (button_img.h * scaleA - img.h * imgScale);
                                        _ctx.drawImage(sheet, img.x, img.y, img.w, img.h, x_1, y_1, img.w * imgScale, img.h * imgScale);
                                        key = Input_1.commandKeys[Input_1.COMMAND["ABILITY" + (i + 1)]], color = Input_1.Input.keys[key] ? "rgba(100, 170, 110, " + .8 * buttonAlpha + ")" : "rgba(255, 255, 255, " + .7 * buttonAlpha + ")";
                                        (0, functions_1.drawText)(_ctx, (0, Input_1.getKeyName)(key), color, 3.5 * scale, x1 + button_img.w * scaleA * .5, y1 + 38 * scaleA, button_img.w, "center"), !config_1.options.weaponsUnclickable && Input_1.Input.x > x1 && Input_1.Input.x < x1 + button_img.w * scaleA && Input_1.Input.y > window.innerHeight - (button_img.h + 1) * scaleA && (this.hoverAbility = i, _ctx.globalAlpha = .3, _ctx.drawImage(_1.imgs.miscSheetWhite, button_img.x, button_img.y, button_img.w, button_img.h, x1, y1, button_img.w * scaleA, button_img.h * scaleA), _ctx.globalAlpha = 1, _ctx.fillStyle = "rgba(0, 0, 0, 0.8)", _ctx.fillRect(window.innerWidth - 100 * scale, window.innerHeight - 65 * scale, 65 * scale, 35 * scale), (0, functions_1.drawText)(_ctx, a.name, "white", 4 * scale, window.innerWidth - 96 * scale, window.innerHeight - 58 * scale), (0, functions_1.drawText)(_ctx, lang_1.lang.get("game.skills.misc.energy_cost", {
                                            energy: a.energy
                                        }), "#DD52CE", 3 * scale, window.innerWidth - 96 * scale, window.innerHeight - 52 * scale, 90 * scale, "left"), (0, functions_1.drawText)(_ctx, a.description, "#D4D4D4", 3 * scale, window.innerWidth - 96 * scale, window.innerHeight - 45 * scale, 55 * scale, "left", 1, void 0, 3.5 * scale));
                                        var cd = this.game.lastAbilityUses[this.game.pl_active_abilities[0] === a ? 0 : 1] + a.cooldown - this.game.ticksCounter;
                                        cd > 0 && (0, functions_1.drawText)(_ctx, Math.floor(cd / 20).toString(), "red", 9 * scale, x1 + button_img.w * scaleA * .5, y1 + 25 * scaleA, button_img.w, "center", 1, "rgba(0, 0, 0, 0.65)", button_img.h)
                                    } this.game.playingPlayer && this.game.playingPlayer.invincibleUntil > this.game.ticksCounter && this.game.ticksCounter > 0 && (0, functions_1.drawText)(_ctx, lang_1.lang.get("game.msg.invincible", {
                                seconds: Math.ceil((this.game.playingPlayer.invincibleUntil - this.game.ticksCounter) / 20)
                            }), "#dbe0be", .2 * this.game.FIELD_SIZE_BASE, .5 * window.innerWidth, .85 * window.innerHeight, window.innerWidth - 20, "center", .8, "rgba(255, 255, 255, 0.2)", .3 * this.game.FIELD_SIZE_BASE);
                            var yText = 7.5 * scale;
                            if (this.game.type.team && this.game.type.souls) {
                                var scaleTS = .9 * scale,
                                    soulsImg = Img_1.imgCoords.souls;
                                _ctx.drawImage(_1.imgs.miscSheet, soulsImg.x, soulsImg.y, soulsImg.w, soulsImg.h, .5 * window.innerWidth - .5 * soulsImg.w * scaleTS, 1 * scaleTS, soulsImg.w * scaleTS, soulsImg.h * scaleTS), (0, functions_1.drawText)(_ctx, this.game.scoreTeam1.toString(), "#A13232", 6 * scale, .5 * window.innerWidth - (.5 * soulsImg.w + 3) * scaleTS, yText + 2 * scale, 70 * scale, "right", 1, "rgba(0, 0, 0, 0.3)", 7 * scale), (0, functions_1.drawText)(_ctx, this.game.scoreTeam2.toString(), "#1B698E", 6 * scale, .5 * window.innerWidth + (.5 * soulsImg.w + 3) * scaleTS, yText + 2 * scale, 70 * scale, "left", 1, "rgba(0, 0, 0, 0.3)", 7 * scale), yText += 11 * scale
                            }
                            if (this.game.roundTime > 0 && ("tutorial1" !== this.game.map.special || this.game.ticksCounter >= this.game.roundTime - 1200)) {
                                var str = "",
                                    ongoing = void 0;
                                this.game.ticksCounter < 0 ? (str = Math.floor(-this.game.ticksCounter / 20).toString(), ongoing = !1) : (str = (0, functions_1.ticks2TimeStr)(this.game.roundTime - this.game.ticksCounter), ongoing = !0), rankInGame_1.rankInGame.refreshTime(ongoing, str), (0, functions_1.drawText)(_ctx, str, "rgba(255, 255, 255, 0.7)", 5.5 * scale, window.innerWidth / 2, yText, .9 * window.innerWidth, "center"), yText += 6 * scale
                            }
                            if (this.game.type.coopZombieMode) {
                                for (var _i = 0, _a = this.game.players; _i < _a.length; _i++) {
                                    var p = _a[_i];
                                    p && p.isHumanZombie
                                }(0, functions_1.drawText)(_ctx, "Alive: 1 / " + this.game.players.length, "white", 4.5 * scale, 10, 130, 2 * window.innerWidth, "left")
                            }
                            this.game.playingPlayer && !this.game.playingPlayer.dieAt && this.game.showEnemiesOnMinimapUntil >= this.game.ticksCounter ? this.scanMsg(lang_1.lang.get("game.skills.scan.countdown", {
                                seconds: Math.floor((this.game.showEnemiesOnMinimapUntil - this.game.ticksCounter) / 20)
                            }), "rgba(0, 255, 6, 0.7)", yText + 2 * scale) : this.game.type.flag ? this.scanMsg(lang_1.lang.get(this.game.getFlagText()), "rgba(255, 246, 173, " + (.55 + .15 * Math.sin(.4 * exactTicks)) + ")", yText + 2 * scale) : this.game.type.coopZombieMode && this.scanMsg(this.game.getZombieCoopText(), "rgba(255, 246, 173, " + (.55 + .15 * Math.sin(.4 * exactTicks)) + ")", yText + 2 * scale), this.game.ticksCounter < 0 && (0, functions_1.drawText)(_ctx, this.game.victoryMsg, "rgba(255, 255, 255, 0.7)", 7 * scale, window.innerWidth / 2, 17 * this.game.SCALE_FACTOR_BASE, .9 * window.innerWidth, "center"), this.game.ticksCounter < 0 ? rankInGame_1.rankInGame.setVictoryMessage(this.game.victoryMsg) : rankInGame_1.rankInGame.setVictoryMessage(""), scale *= .7;
                            var y = 0,
                                x = 0;
                            this.hoverChoice = null, this.upgNotificationHovered = !1, this.skipButtonHover = !1, this.unskipButtonHover = !1;
                            var upgChoices = this.showOldUpgChoicesUntil >= now ? this.oldUpgChoices : this.currentUpgChoices;
                            if (this.game.playingPlayer && this.game.type.souls && this.game.ticksCounter > 0) {
                                img = Img_1.imgCoords.newStatsFrame, img2 = Img_1.imgCoords.soulsBar;
                                var img3 = Img_1.imgCoords.hpBar1,
                                    img4 = Img_1.imgCoords.energyBar;
                                if (y = window.innerHeight - (img.h + 1) * scale, x = 1 * scale, _ctx.drawImage(_1.imgs.miscSheet, img.x, img.y, img.w, img.h, x, y, img.w * scale, img.h * scale), (0, functions_1.drawText)(_ctx, this.soulLvl.toString(), "#e1f063", 8 * scale, x + 16 * scale, y + 14 * scale, 24 * scale, "right", 1, void 0, void 0, 10 * scale), (0, functions_1.drawText)(_ctx, this.game.playingPlayer.unsafeName, "#b9cc8d", 8 * scale, x + 20 * scale, y + 14 * scale, 100 * scale, "left", 1, void 0, void 0, 42 * scale), (0, functions_1.drawText)(_ctx, this.game.playingPlayer.souls.toString(), "#b4b7b8", 7 * scale, x + 18 * scale, y + 29 * scale, 100 * scale, "left", 1, void 0, void 0, 16 * scale), (0, functions_1.drawText)(_ctx, this.abilityPoints.toString(), "#5cc3ef", 7 * scale, x + 46 * scale, y + 29 * scale, 100 * scale, "left", 1, void 0, void 0, 16 * scale), _ctx.drawImage(_1.imgs.miscSheet, img2.x, img2.y, img2.w, img2.h, x + 69 * scale, y + 5 * scale, 73 * scale * (this.soulsGot / this.soulsNeeded), 10 * scale), (0, functions_1.drawText)(_ctx, this.soulsGot + " / " + this.soulsNeeded, "#d0e661", 8 * scale, x + 106 * scale, y + 14 * scale, 84 * scale, "center"), _ctx.drawImage(_1.imgs.miscSheet, img3.x, img3.y, img3.w, img3.h, x + 69 * scale, y + 20 * scale, 73 * scale * (this.game.playingPlayer.hp / this.game.playingPlayer.maxHP), 5 * scale), (0, functions_1.drawText)(_ctx, Math.ceil(this.game.playingPlayer.hp) + " / " + Math.ceil(this.game.playingPlayer.maxHP), "white", 6 * scale, x + 106 * scale, y + 25 * scale, 84 * scale, "center", 1, void 0, void 0, void 0, "black"), _ctx.drawImage(_1.imgs.miscSheet, img4.x, img4.y, img4.w, img4.h, x + 69 * scale, y + 28 * scale, 73 * scale * (this.game.playingPlayerEnergy / 100), 2 * scale), img = Img_1.imgCoords.newUpgFrame, img2 = Img_1.imgCoords.newUpgFrameWhite, img3 = Img_1.imgCoords.newUpgFrameYellow, y -= (img.h + 1) * scale, this.game.playingPlayer.dieAt) return;
                                if (this.upgNotificationStart > 0) {
                                    var nr = this.game.ticksCounter / 3 % 3 + 1;
                                    img = Img_1.imgCoords["newUps" + Math.floor(nr)];
                                    var age = now - this.upgNotificationStart,
                                        h = Math.min(img.h, age / 400 * img.h);
                                    _ctx.globalAlpha = 1 - nr % 1, _ctx.drawImage(_1.imgs.miscSheet, img.x, img.y, img.w, h, x, y, img.w * scale, h * scale), img = Img_1.imgCoords["newUps" + (Math.floor(nr) % 3 + 1)], _ctx.globalAlpha = nr % 1, _ctx.drawImage(_1.imgs.miscSheet, img.x, img.y, img.w, h, x, y, img.w * scale, h * scale), _ctx.globalAlpha = 1, (0, functions_1.drawText)(_ctx, lang_1.lang.get("game.msg.choose_upgrade"), "#4BA6FA", 8 * scale, x + 5 * scale, y + 10 * scale, 200 * scale, "left", 1, void 0, void 0, 100 * scale), (0, functions_1.drawText)(_ctx, lang_1.lang.get("game.msg.upgrade_shortcut", {
                                        key: Input_1.keyNames[Input_1.commandKeys[Input_1.COMMAND.PICK_UPGRADE]]
                                    }), "#4BA6FA", 6 * scale, x + 6 * scale, y + 21 * scale, 200 * scale, "left", 1, void 0, void 0, 100 * scale), Input_1.Input.x <= img.w * scale && Input_1.Input.y >= y && (this.upgNotificationHovered = !0, nr = this.game.ticksCounter / 5 % 4 + 1, img = Img_1.imgCoords["newUpsFrame" + Math.floor(nr)], _ctx.globalAlpha = 1 - nr % 1, _ctx.drawImage(_1.imgs.miscSheet, img.x, img.y, img.w, img.h, x - 1 * scale, y - 2 * scale, img.w * scale, img.h * scale), img = Img_1.imgCoords["newUpsFrame" + (Math.floor(nr) % 4 + 1)], _ctx.globalAlpha = nr % 1, _ctx.drawImage(_1.imgs.miscSheet, img.x, img.y, img.w, img.h, x - 1 * scale, y - 2 * scale, img.w * scale, img.h * scale), _ctx.globalAlpha = 1)
                                } else if (upgChoices.length > 0) {
                                    this.currentUpgChoicesStart + 350 > now && (x -= scale * img.w * (this.currentUpgChoicesStart + 350 - now) / 350), this.currentUpgChoicesEnd < now && (x -= scale * img.w * (now - this.currentUpgChoicesEnd) / 350);
                                    for (i = 0; upgChoices && i < upgChoices.length; i++) {
                                        var choice = upgChoices[i],
                                            img5 = choice.img,
                                            abImgScale = 16 * scale / Math.max(img5.w, img5.h);
                                        _ctx.drawImage(_1.imgs.miscSheet, img.x, img.y, img.w, img.h, x, y, img.w * scale, img.h * scale), _ctx.drawImage(_1.imgs.miscSheet, img5.x, img5.y, img5.w, img5.h, x + img.h * scale / 2 - img5.w * abImgScale / 2 - 1 * scale, y + img.h * scale / 2 - img5.h * abImgScale / 2, img5.w * abImgScale, img5.h * abImgScale), (0, functions_1.drawText)(_ctx, choice.cost.toString(), "#5cc3ef", 7.5 * scale, x + 108 * scale, y + 18 * scale), (0, functions_1.drawText)(_ctx, choice.text, "#FFFDC0", 6.5 * scale, x + 24 * scale, y + 22 * scale, 150 * scale, "left", 1, void 0, void 0, 70 * scale);
                                        for (var k = 0; k < choice.maxLvl; k++) _ctx.fillStyle = k < choice.lvl ? "#65E054" : "rgba(0, 0, 0, 0.8)", _ctx.fillRect(x + 24 * scale + 11 * k * scale, y + 4 * scale, 10 * scale, 2 * scale);
                                        this.lastChoiceIndex === i && this.selectedChoiceUntil > now ? this.game.ticksCounter % 2 == 1 && (_ctx.globalAlpha = .75, _ctx.drawImage(_1.imgs.miscSheet, img3.x, img3.y, img3.w, img3.h, x, y, img3.w * scale, img3.h * scale), _ctx.globalAlpha = 1) : Input_1.Input.x <= x + img.w * scale && Input_1.Input.y >= y && Input_1.Input.y <= y + img.h * scale && (this.hoverChoice = choice, _ctx.globalAlpha = .4, _ctx.drawImage(_1.imgs.miscSheetWhite, img.x, img.y, img.w, img.h, x, y, img.w * scale, img.h * scale), _ctx.globalAlpha = 1), y -= (img.h + 1) * scale
                                    }
                                    img2 = Img_1.imgCoords.upgSkip, x += 5 * scale, y += (img.h + 1) * scale - img2.h * scale, _ctx.drawImage(_1.imgs.miscSheet, img2.x, img2.y, img2.w, img2.h, x, y, img2.w * scale, img2.h * scale), (0, functions_1.drawText)(_ctx, lang_1.lang.get("game.msg.hideskip_shortcut", {
                                        key: Input_1.keyNames[Input_1.commandKeys[Input_1.COMMAND.PICK_UPGRADE]]
                                    }), "#304420", 6.5 * scale, x + 17 * scale, y + 12 * scale, 100 * scale, "left", 1, void 0, void 0, 62 * scale, "#688551"), (Input_1.Input.x <= x + img2.w * scale && Input_1.Input.y >= y && Input_1.Input.y <= y + img2.h * scale || Input_1.Input.keys[Input_1.commandKeys[Input_1.COMMAND.PICK_UPGRADE]]) && (_ctx.globalAlpha = .3, _ctx.drawImage(_1.imgs.miscSheetWhite, img2.x, img2.y, img2.w, img2.h, x, y, img2.w * scale, img2.h * scale), _ctx.globalAlpha = 1, this.skipButtonHover = !0), this.currentUpgChoicesEnd + 200 < now && this.upgradeChoicesAvailable && (img2 = Img_1.imgCoords.upgUnskip, x = 5 * scale, y = window.innerHeight - (Img_1.imgCoords.newStatsFrame.h + 1) * scale - img2.h * scale, _ctx.drawImage(_1.imgs.miscSheet, img2.x, img2.y, img2.w, img2.h, x, y, img2.w * scale, img2.h * scale), (0, functions_1.drawText)(_ctx, lang_1.lang.get("game.msg.show_upgrades_shortcut", {
                                        key: Input_1.keyNames[Input_1.commandKeys[Input_1.COMMAND.PICK_UPGRADE]]
                                    }), "#304420", 6.5 * scale, x + 17 * scale, y + 12 * scale, 200 * scale, "left", 1, void 0, void 0, 64 * scale, "#688551"), (Input_1.Input.x <= x + img2.w * scale && Input_1.Input.y >= y && Input_1.Input.y <= y + img2.h * scale || Input_1.Input.keys[Input_1.commandKeys[Input_1.COMMAND.PICK_UPGRADE]]) && (_ctx.globalAlpha = .3, _ctx.drawImage(_1.imgs.miscSheetWhite, img2.x, img2.y, img2.w, img2.h, x, y, img2.w * scale, img2.h * scale), _ctx.globalAlpha = 1, this.unskipButtonHover = !0))
                                }
                            }
                            if (this.game.tickDiff > 0 && this.recordGIF) {
                                _canvasGIF.width = _canvasGIF.width, _canvasGIF.getContext("2d").drawImage(_canvas, 0, 0, _canvas.width, _canvas.height, 0, 0, _canvasGIF.width, _canvasGIF.height);
                                img = Img_1.imgCoords.main_logo;
                                _canvasGIF.getContext("2d").drawImage(_1.imgs.miscSheet, img.x, img.y, img.w, img.h, 2, _canvasGIF.height - 2 - img.h, img.w, img.h), this.gif.addFrame(_canvasGIF.getContext("2d"), {
                                    delay: 50,
                                    copy: !0
                                })
                            }
                            if (this.cureButtonHovered = !1, this.game.cureTick && (!this.game.playingPlayer.isHumanZombie || this.game.cureTick < this.game.ticksCounter) && (this.game.cureTick = 0), this.game.cureTick) {
                                img = Img_1.imgCoords.cureButton;
                                _ctx.drawImage(_1.imgs.miscSheet, img.x, img.y, img.w, img.h, 208, 6.24, 2.08 * img.w, 2.08 * img.h);
                                var text = lang_1.lang.get("game.buttons.cure");
                                text += " ( " + Math.floor((this.game.cureTick - this.game.ticksCounter) / 20) + " )", (0, functions_1.drawText)(_ctx, text, "white", 8 * scale, 2.08 * (100 + .5 * img.w), 49.92, 200 * scale, "center"), Input_1.Input.x >= 208 && Input_1.Input.x <= 2.08 * (img.w + 100) && Input_1.Input.y <= 2.08 * img.h && (this.cureButtonHovered = !0, _ctx.globalAlpha = .5, _ctx.drawImage(_1.imgs.miscSheetWhite, img.x, img.y, img.w, img.h, 208, 6.24, 2.08 * img.w, 2.08 * img.h), _ctx.globalAlpha = 1)
                            }
                            if (this.replayPlusHover = !1, this.replayMinusHover = !1, this.game.replayMode && this.replayLength) {
                                scale = .8 * this.game.SCALE_FACTOR_BASE;
                                img = Img_1.imgCoords.replayBar, img2 = Img_1.imgCoords.replayPos;
                                var percDone = this.replayTimer / this.replayLength;
                                str = " " + (0, functions_1.ticks2TimeStr)(this.replayTimer) + " / " + this.replayLengthStr;
                                this.game.fastForward && this.fastForwardTo > 0 ? str += " (" + (0, functions_1.ticks2TimeStr)(this.fastForwardTo) + ")" : (this.provisionalReplayPos = -1, this.provisionalReplayPerc = -1, Input_1.Input.x <= 90 * scale && Input_1.Input.y >= window.innerHeight - (img.h + 2) * scale && (this.provisionalReplayPerc = Math.min(Math.max((Input_1.Input.x / scale - 5) / 78, 0), 1), this.provisionalReplayPos = Math.floor(this.provisionalReplayPerc * this.replayLength), str += " (" + (0, functions_1.ticks2TimeStr)(this.provisionalReplayPos) + ")")), (0, functions_1.drawText)(_ctx, str, "white", 6 * scale, 4 * scale, window.innerHeight - (img.h + 6) * scale, 200 * scale, "left", 1, "rgba(0, 0, 0, 0.5)", 10 * scale), _ctx.drawImage(_1.imgs.miscSheet, img.x, img.y, img.w, img.h, 2 * scale, window.innerHeight - (img.h + 2) * scale, img.w * scale, img.h * scale), _ctx.drawImage(_1.imgs.miscSheet, img2.x, img2.y, img2.w, img2.h, scale * (5 + 78 * percDone), window.innerHeight - (img2.h + 2) * scale, img2.w * scale, img2.h * scale), this.game.fastForward && this.fastForwardTo > 0 ? (_ctx.globalAlpha = .5, _ctx.drawImage(_1.imgs.miscSheet, img2.x, img2.y, img2.w, img2.h, scale * (5 + this.fastForwardTo / this.replayLength * 78), window.innerHeight - (img2.h + 2) * scale, img2.w * scale, img2.h * scale), _ctx.globalAlpha = 1) : this.provisionalReplayPerc >= 0 && (_ctx.globalAlpha = .5, _ctx.drawImage(_1.imgs.miscSheet, img2.x, img2.y, img2.w, img2.h, scale * (5 + 78 * this.provisionalReplayPerc), window.innerHeight - (img2.h + 2) * scale, img2.w * scale, img2.h * scale), _ctx.globalAlpha = 1), img = Img_1.imgCoords.replayPlusMinus, _ctx.drawImage(_1.imgs.miscSheet, img.x, img.y, img.w, img.h, 90 * scale, window.innerHeight - (img.h + 2) * scale, img.w * scale, img.h * scale), Input_1.Input.x >= 90 * scale && Input_1.Input.x <= (90 + img.w) * scale && Input_1.Input.y >= window.innerHeight - (img.h + 2) * scale && Input_1.Input.y <= window.innerHeight - (img.h + 2 - 9) * scale && (this.replayPlusHover = !0, img2 = Img_1.imgCoords.replayWhite, _ctx.globalAlpha = .2, _ctx.drawImage(_1.imgs.miscSheet, img2.x, img2.y, img2.w, img2.h, 90 * scale, window.innerHeight - (img.h + 2) * scale, img2.w * scale, img2.h * scale), _ctx.globalAlpha = 1), Input_1.Input.x >= 90 * scale && Input_1.Input.x <= (90 + img.w) * scale && Input_1.Input.y >= window.innerHeight - (img.h + 2 - 9) * scale && (this.replayMinusHover = !0, img2 = Img_1.imgCoords.replayWhite, _ctx.globalAlpha = .2, _ctx.drawImage(_1.imgs.miscSheet, img2.x, img2.y, img2.w, img2.h, 90 * scale, window.innerHeight - (img.h + 2 - 9) * scale, img2.w * scale, img2.h * scale), _ctx.globalAlpha = 1), this.gifButtonIsHovered = !1, this.game.fastForward || (this.gifProcessing ? (0, functions_1.drawText)(_ctx, " gif is being processed ...", "white", 6 * scale, 4 * scale, window.innerHeight - 38 * scale, 200 * scale, "left", 1, "rgba(0, 0, 0, 0.5)", 10 * scale) : (img = this.recordGIF ? Img_1.imgCoords.stopGif : Img_1.imgCoords.startGif, _ctx.drawImage(_1.imgs.miscSheet, img.x, img.y, img.w, img.h, 2 * scale, window.innerHeight - (34 + img.h) * scale, img.w * scale, img.h * scale), Input_1.Input.x <= (img.w + 2) * scale && Input_1.Input.y >= window.innerHeight - (img.h + 34) * scale && Input_1.Input.y <= window.innerHeight - 34 * scale && (this.gifButtonIsHovered = !0, img = Img_1.imgCoords.whiteGif, _ctx.globalAlpha = .2, _ctx.drawImage(_1.imgs.miscSheet, img.x, img.y, img.w, img.h, 2 * scale, window.innerHeight - (34 + img.h) * scale, img.w * scale, img.h * scale), _ctx.globalAlpha = 1), this.recordGIF && (0, functions_1.drawText)(_ctx, " recording ...", "white", 6 * scale, (4 + img.w) * scale, window.innerHeight - 38 * scale, 200 * scale, "left", 1, "rgba(0, 0, 0, 0.5)", 10 * scale)))
                            }
                            if (this.ladderEndAt > 0) {
                                age = (Date.now() - this.ladderEndAt) / 1e3;
                                var age2 = Math.min(20.8 * age, 500),
                                    grad = _ctx.createLinearGradient(0, .2 * window.innerHeight, 0, .8 * window.innerHeight);
                                grad.addColorStop(0, "rgba(0, 0, 0, 0)"), grad.addColorStop(.4, "rgba(0, 0, 0, 0.5)"), grad.addColorStop(.6, "rgba(0, 0, 0, 0.5)"), grad.addColorStop(1, "rgba(0, 0, 0, 0)"), _ctx.fillStyle = grad, _ctx.fillRect(0, .5 * window.innerHeight - 15 * this.game.SCALE_FACTOR_BASE * age2, window.innerWidth, 30 * this.game.SCALE_FACTOR_BASE * age2);
                                color = "rgba(100, 255, 100, " + Math.min(1, 2 * age) + ")";
                                "You lose!" === this.ladderEndMsg && (color = "rgba(255, 100, 100, " + Math.min(1, 2 * age) + ")"), "Draw!" === this.ladderEndMsg && (color = "rgba(255, 255, 100, " + Math.min(1, 2 * age) + ")");
                                var colorPoints = "rgba(100, 255, 100, " + .6 * Math.min(1, 2 * age) + ")";
                                "You lose!" === this.ladderEndMsg && (colorPoints = "rgba(255, 100, 100, " + .6 * Math.min(1, 2 * age) + ")"), "Draw!" === this.ladderEndMsg && (colorPoints = "rgba(255, 255, 100, " + .6 * Math.min(1, 2 * age) + ")"), (0, functions_1.drawText)(_ctx, this.ladderEndMsg, color, 11 * this.game.SCALE_FACTOR_BASE, .5 * window.innerWidth, .5 * window.innerHeight - 3 * this.game.SCALE_FACTOR_BASE, window.innerWidth, "center"), (0, functions_1.drawText)(_ctx, this.ladderMsgArr[0], "rgba(255, 255, 255, " + Math.min(1, 2 * age) + ")", 7 * this.game.SCALE_FACTOR_BASE, .5 * window.innerWidth - 14 * this.game.SCALE_FACTOR_BASE, .5 * window.innerHeight + 9.6 * this.game.SCALE_FACTOR_BASE, window.innerWidth, "right"), (0, functions_1.drawText)(_ctx, this.ladderMsgArr[2], "rgba(255, 255, 100, " + Math.min(1, 2 * age) + ")", 8 * this.game.SCALE_FACTOR_BASE, .5 * window.innerWidth - 1.9 * this.game.SCALE_FACTOR_BASE, .5 * window.innerHeight + 10 * this.game.SCALE_FACTOR_BASE, window.innerWidth, "right"), (0, functions_1.drawText)(_ctx, ":", "rgba(255, 255, 255, " + Math.min(1, 2 * age) + ")", 7 * this.game.SCALE_FACTOR_BASE, .5 * window.innerWidth, .5 * window.innerHeight + 9.6 * this.game.SCALE_FACTOR_BASE, window.innerWidth, "center"), (0, functions_1.drawText)(_ctx, this.ladderMsgArr[1], "rgba(255, 255, 255, " + Math.min(1, 2 * age) + ")", 7 * this.game.SCALE_FACTOR_BASE, .5 * window.innerWidth + 14 * this.game.SCALE_FACTOR_BASE, .5 * window.innerHeight + 9.6 * this.game.SCALE_FACTOR_BASE, window.innerWidth), (0, functions_1.drawText)(_ctx, this.ladderMsgArr[3], "rgba(255, 255, 100, " + Math.min(1, 2 * age) + ")", 8 * this.game.SCALE_FACTOR_BASE, .5 * window.innerWidth + 2.9 * this.game.SCALE_FACTOR_BASE, .5 * window.innerHeight + 10 * this.game.SCALE_FACTOR_BASE, window.innerWidth), this.ladderMsgArr[4] && (0, functions_1.drawText)(_ctx, this.ladderMsgArr[4], colorPoints, 3.5 * this.game.SCALE_FACTOR_BASE, .5 * window.innerWidth, .5 * window.innerHeight + 18 * this.game.SCALE_FACTOR_BASE, window.innerWidth, "center");
                                var scale_1 = this.game.SCALE_FACTOR_BASE,
                                    lightScale = .4 * this.game.SCALE_FACTOR_BASE;
                                _ctx.fillStyle = "white";
                                img = "You lose!" === this.ladderEndMsg ? Img_1.imgCoords.light_red : Img_1.imgCoords.light_green;
                                for (var x_2 = .5 * window.innerWidth; x_2 > 0; x_2 -= 7 * scale_1) {
                                    _ctx.globalAlpha = Math.max(1 - 5 * Math.abs(1 - (age - .4) - x_2 / (.5 * window.innerWidth)), 0);
                                    var yScale = Math.pow(Math.max(1 - 5 * Math.abs(1 - (age - .4) - x_2 / (.5 * window.innerWidth)), 0), 2) * scale_1 * 2;
                                    _ctx.drawImage(_1.imgs.miscSheet, img.x, img.y, img.w, img.h, x_2 - .5 * img.w * lightScale, .5 * window.innerHeight - .5 * img.w * lightScale, img.w * lightScale, img.h * lightScale), _ctx.drawImage(_1.imgs.miscSheet, img.x, img.y, img.w, img.h, window.innerWidth - x_2 - .5 * img.w * lightScale, .5 * window.innerHeight - .5 * img.w * lightScale, img.w * lightScale, img.h * lightScale), _ctx.fillRect(x_2 - scale_1, .5 * window.innerHeight - yScale, 2 * scale_1, 2 * yScale), _ctx.fillRect(window.innerWidth - x_2 - scale_1, .5 * window.innerHeight - yScale, 2 * scale_1, 2 * yScale)
                                }
                                _ctx.globalAlpha = 1
                            }
                            if (this.game.type.lives && this.game.ticksCounter < 139 && this.ladderEndAt <= 0) {
                                var alpha = 0;
                                if (str = ["5", "4", "3", "2", "1", "Go!"][Math.floor(this.game.ticksCounter / 20)]) {
                                    _ctx.fillStyle = "rgba(0, 0, 0, 0.5)", _ctx.fillRect(0, .5 * window.innerHeight - 20 * this.game.SCALE_FACTOR_BASE, window.innerWidth, 40 * this.game.SCALE_FACTOR_BASE + this.game.SCALE_FACTOR_BASE), alpha = 1;
                                    color = "rgba(100, 255, 100, " + (1 - .3 * (age = this.game.ticksCounter / 20 % 1)) + ")";
                                    (0, functions_1.drawText)(_ctx, str, color, this.game.SCALE_FACTOR_BASE * (11 + 4 * age), .5 * window.innerWidth, .5 * window.innerHeight - 2 * this.game.SCALE_FACTOR_BASE, window.innerWidth, "center")
                                } else {
                                    age = 1 - this.game.ticksCounter % 20 / 20;
                                    alpha = Math.max(.5 * age, 0), _ctx.fillStyle = "rgba(0, 0, 0, " + Math.max(.5 * age, 0) + ")", _ctx.fillRect(0, .5 * window.innerHeight - 20 * this.game.SCALE_FACTOR_BASE, window.innerWidth, 40 * this.game.SCALE_FACTOR_BASE + this.game.SCALE_FACTOR_BASE)
                                }
                                this.game.players.length >= 2 && ((0, functions_1.drawText)(_ctx, this.game.players[0].name, "rgba(255, 255, 255, " + alpha + ")", 7 * this.game.SCALE_FACTOR_BASE, .5 * window.innerWidth - 8 * this.game.SCALE_FACTOR_BASE, .5 * window.innerHeight + 9.6 * this.game.SCALE_FACTOR_BASE, window.innerWidth, "right"), (0, functions_1.drawText)(_ctx, "vs", "rgba(255, 255, 100, " + alpha + ")", 7 * this.game.SCALE_FACTOR_BASE, .5 * window.innerWidth, .5 * window.innerHeight + 9.6 * this.game.SCALE_FACTOR_BASE, window.innerWidth, "center"), (0, functions_1.drawText)(_ctx, this.game.players[1].name, "rgba(255, 255, 255, " + alpha + ")", 7 * this.game.SCALE_FACTOR_BASE, .5 * window.innerWidth + 8 * this.game.SCALE_FACTOR_BASE, .5 * window.innerHeight + 9.6 * this.game.SCALE_FACTOR_BASE, window.innerWidth), (0, functions_1.drawText)(_ctx, "First player who dies 5 times, loses.", "rgba(180, 180, 180, " + alpha + ")", 3 * this.game.SCALE_FACTOR_BASE, .5 * window.innerWidth, .5 * window.innerHeight + 17 * this.game.SCALE_FACTOR_BASE, window.innerWidth, "center"))
                            }
                        }, Interface_.prototype.startGIF = function() {
                            var relation = 700 / window.innerWidth;
                            _canvasGIF.width = window.innerWidth * relation, _canvasGIF.height = window.innerHeight * relation, _canvasGIF.getContext("2d").mozImageSmoothingEnabled = !1, _canvasGIF.getContext("2d").msImageSmoothingEnabled = !1, _canvasGIF.getContext("2d").imageSmoothingEnabled = !1, this.gif = new gif_1.default({
                                workers: 3,
                                quality: 10,
                                width: _canvasGIF.width,
                                height: _canvasGIF.height,
                                debug: !0
                            }), this.recordGIF = !0
                        }, Interface_.prototype.endGIF = function() {
                            this.recordGIF = !1, this.gifProcessing = !0;
                            var interface_ = this.game.interface_;
                            this.gif.on("finished", (function(blob) {
                                var d = new Date;
                                (0, FileSaver_1.default)(blob, "slay-one-gif-" + d.getFullYear() + "-" + (d.getMonth() + 1) + "-" + d.getDate() + ".gif"), interface_.gif = null, interface_.gifProcessing = !1
                            })), this.gif.render()
                        }, Interface_.prototype.replayJumpTo = function() {
                            this.provisionalReplayPos !== this.replayTimer && (this.provisionalReplayPos < this.replayTimer && (0, functions_1.startReplay)(), root_1.root.game.interface_.fastForwardTo = this.provisionalReplayPos, root_1.root.game.fastForward = !0, functions_1.replaySettings.oldReplayOptionsIndex = functions_1.replaySettings.replayOptionsIndex, functions_1.replaySettings.replayOptionsIndex = functions_1.replayOptions.length - 1, functions_1.replaySettings.replayOption = functions_1.replayOptions[functions_1.replaySettings.replayOptionsIndex])
                        }, Interface_.prototype.scanMsg = function(text, color, y) {
                            (0, functions_1.drawText)(_ctx, text, color, .3 * this.game.FIELD_SIZE_BASE, .5 * window.innerWidth, y, window.innerWidth - 20, "center")
                        }, Interface_
                    }();
                exports.Interface_ = Interface_
            },
            5678: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.Minimap = void 0;
                var _1 = __webpack_require__(2174),
                    TileTypes_1 = __webpack_require__(9285),
                    config_1 = __webpack_require__(5303),
                    functions_1 = __webpack_require__(7582),
                    Img_1 = __webpack_require__(360),
                    root_1 = __webpack_require__(17),
                    Zombie_1 = __webpack_require__(4331),
                    _canvas = document.getElementById("canvasMinimap"),
                    _ctx = _canvas.getContext("2d"),
                    Minimap = function() {
                        function Minimap(game) {
                            this._baseCanvas = document.createElement("canvas"), config_1.options.hideMinimap || (document.getElementById("minimap").style.display = ""), this._game = game;
                            var _baseCtx = this._baseCanvas.getContext("2d");
                            this._baseCanvas.width = game.map.x, this._baseCanvas.height = game.map.y, TileTypes_1.tileTypes[game.map.defaultTiles].avgColor && (_baseCtx.fillStyle = TileTypes_1.tileTypes[game.map.defaultTiles].avgColor, _baseCtx.fillRect(0, 0, this._baseCanvas.width, this._baseCanvas.height));
                            for (var _i = 0, _a = game.groundTiles; _i < _a.length; _i++) {
                                (type = (tile = _a[_i]).type).avgColor && (_baseCtx.fillStyle = type.avgColor, _baseCtx.fillRect(tile.x, tile.y, type.w ? type.w : 1, type.h ? type.h : 1))
                            }
                            _baseCtx.fillStyle = "black", _baseCtx.globalAlpha = .5, _baseCtx.fillRect(0, 0, this._baseCanvas.width, this._baseCanvas.height), _baseCtx.globalAlpha = 1;
                            for (var _b = 0, _c = game.tiles; _b < _c.length; _b++) {
                                var tile, type;
                                if (!(tile = _c[_b]).type.ground)(type = tile.type).avgColor && (_baseCtx.fillStyle = type.avgColor, _baseCtx.fillRect(tile.x, tile.y, type.w ? type.w : 1, type.h ? type.h : 1))
                            }
                            document.getElementById("miniMap_list").style.display = this._game.type.showTop3 && this._game.type.winningCondition ? "" : "none"
                        }
                        return Minimap.prototype.hide = function() {
                            document.getElementById("minimap").style.display = "none"
                        }, Minimap.prototype.draw = function(percentageOfCurrentTickPassed) {
                            var game = this._game,
                                w = config_1.options.minimapSizeFactor * (game.map.x > game.map.y ? 150 : game.map.x / game.map.y * 150),
                                h = config_1.options.minimapSizeFactor * (game.map.y > game.map.x ? 150 : game.map.y / game.map.x * 150);
                            _canvas.width = w, _canvas.height = h, _ctx.mozImageSmoothingEnabled = !1, _ctx.msImageSmoothingEnabled = !1, _ctx.imageSmoothingEnabled = !1;
                            var scale = w / game.map.x,
                                scaleTop3 = .8 * game.SCALE_FACTOR_BASE;
                            _ctx.globalAlpha = .8, _ctx.drawImage(this._baseCanvas, 0, 0, w, h), this.drawMiniMapScreenBorder(w / game.map.x), _ctx.globalAlpha = 1 - .7 * (Math.cos(this._game.ticksCounter / 100) / Math.PI + .5);
                            for (var _i = 0, _a = game.players; _i < _a.length; _i++) {
                                var p = _a[_i],
                                    rank = -1;
                                if (game.type.zombies)
                                    for (var _b = 0, _c = game.interface_.top3; _b < _c.length; _b++) {
                                        var top3 = _c[_b];
                                        top3.name === p.name && (rank = top3.rank)
                                    }
                                if (!p.dieAt && (!game.playingPlayer || p === game.playingPlayer || rank > 0 || p.team === game.playingPlayer.team && 0 !== p.team || game.showEnemiesOnMinimapUntil >= game.ticksCounter || game.playingPlayer.isHumanZombie && p.isBoss)) {
                                    var img = void 0,
                                        x_1 = p.x0 + percentageOfCurrentTickPassed * (p.x - p.x0),
                                        y_1 = p.y0 + percentageOfCurrentTickPassed * (p.y - p.y0),
                                        x2_ = w * x_1 / game.map.x,
                                        y2_ = h * y_1 / game.map.y,
                                        crownImg = Img_1.imgCoords.crownYellow,
                                        crosshairImg = Img_1.imgCoords.crosshairRed;
                                    if (p !== game.playingPlayer && game.showEnemiesOnMinimapUntil > game.ticksCounter + 1e3) return;
                                    p instanceof Zombie_1.Zombie ? (_ctx.fillStyle = "#FFFA7D", img = Img_1.imgCoords.light_yellow) : p === game.playingPlayer ? (_ctx.fillStyle = "#00FF06", img = Img_1.imgCoords.light_green, crownImg = Img_1.imgCoords.crownGreen, crosshairImg = Img_1.imgCoords.crosshairGreen) : game.playingPlayer && p.team === game.playingPlayer.team && 0 !== p.team || !game.playingPlayer && !p.isHumanZombie ? (_ctx.fillStyle = "#FFFFFF", img = Img_1.imgCoords.light_white, crownImg = Img_1.imgCoords.crownWhite, crosshairImg = Img_1.imgCoords.crosshairWhite) : (_ctx.fillStyle = "#FF0000", img = Img_1.imgCoords.light_red, crownImg = Img_1.imgCoords.crownRed, crosshairImg = Img_1.imgCoords.crosshairRed), p.weapon && p.weapon.isSniper && game.showEnemiesOnMinimapUntil >= game.ticksCounter ? _ctx.drawImage(_1.imgs.miscSheet, crosshairImg.x, crosshairImg.y, crosshairImg.w, crosshairImg.h, x2_ - 3 * scale, y2_ - 3 * scale, 6 * scale, 6 * scale) : 1 === rank ? _ctx.drawImage(_1.imgs.miscSheet, crownImg.x, crownImg.y, crownImg.w, crownImg.h, x2_ - 2.5 * scale, y2_ - 2.5 * scale, 5 * scale, 5 * scale) : rank > 0 ? (0, functions_1.drawText)(_ctx, rank.toString(), _ctx.fillStyle, 2.5 * scaleTop3, x2_, y2_ + 2 * scaleTop3, 20 * scaleTop3, "center", _ctx.globalAlpha) : (_ctx.drawImage(_1.imgs.miscSheet, img.x, img.y, img.w, img.h, x2_ - 4 * scale, y2_ - 4 * scale, 8 * scale, 8 * scale), _ctx.fillRect(x2_ - scale, y2_ - scale, 2 * scale, 2 * scale))
                                }
                            }
                            if (_ctx.globalAlpha = 1, game.type.flag)
                                for (var j = 0; j < 2; j++) {
                                    img = 0 === j ? Img_1.imgCoords.redFlag : Img_1.imgCoords.blueFlag;
                                    var flag = 0 === j ? game.redFlag : game.blueFlag;
                                    if (flag) {
                                        var x_ = flag.currentX,
                                            y_ = flag.currentY;
                                        if (flag.carriedBy) {
                                            var p_1 = flag.carriedBy;
                                            x_ = p_1.x0 + percentageOfCurrentTickPassed * (p_1.x - p_1.x0), y_ = p_1.y0 + percentageOfCurrentTickPassed * (p_1.y - p_1.y0)
                                        }
                                        x2_ = w * x_ / game.map.x, y2_ = h * y_ / game.map.y;
                                        _ctx.drawImage(_1.imgs.miscSheet, img.x, img.y, img.w, img.h, x2_ - 3 * scale, y2_ - 5 * scale, 6 * scale, 8 * scale)
                                    }
                                }
                        }, Minimap.prototype.drawMiniMapScreenBorder = function(rate) {
                            var X = this._game.cameraX,
                                Y = this._game.cameraY,
                                W = this._game.cameraX2 - this._game.cameraX,
                                H = this._game.cameraY2 - this._game.cameraY;
                            X = .5 + (X * rate | 0), Y = .5 + (Y * rate | 0), W = W * rate | 0, H = 2 + (H * rate | 0), _ctx.strokeStyle = "#FFF", _ctx.strokeRect(X, Y, W, H)
                        }, Minimap.prototype.refreshTop3 = function() {
                            var sortField = root_1.root.game.type.winningCondition;
                            if (void 0 !== sortField)
                                for (var players = root_1.root.game.players.slice().sort((function(a, b) {
                                        return b[sortField] - a[sortField]
                                    })), i = 0; i < 3; i++) {
                                    var p = players[i],
                                        el = _top3[i],
                                        targetVisibility = void 0 !== p;
                                    if (el.visible !== targetVisibility && (el.visible = targetVisibility, el.el.style.display = targetVisibility ? "" : "none"), targetVisibility) {
                                        var targetName = void 0 !== p ? p.name : "";
                                        el.name !== targetName && (el.name = targetName, el.nameEl.innerText = targetName);
                                        var targetScore = void 0 !== p ? p.elo : 0;
                                        el.score !== targetScore && (el.score = targetScore, el.scoreEl.innerText = targetScore.toString());
                                        var targetIsMe = void 0 !== p && p === root_1.root.game.playingPlayer;
                                        el.me !== targetIsMe && (el.me = targetIsMe, targetIsMe ? el.el.classList.add("me") : el.el.classList.remove("me"))
                                    }
                                }
                        }, Minimap
                    }();
                exports.Minimap = Minimap;
                var rank1 = document.getElementById("rank1"),
                    rank2 = document.getElementById("rank2"),
                    rank3 = document.getElementById("rank3"),
                    _top3 = [{
                        el: rank1,
                        nameEl: rank1.querySelector(".name"),
                        scoreEl: rank1.querySelector(".score"),
                        name: "",
                        score: 0,
                        visible: !0,
                        me: !1
                    }, {
                        el: rank2,
                        nameEl: rank2.querySelector(".name"),
                        scoreEl: rank2.querySelector(".score"),
                        name: "",
                        score: 0,
                        visible: !0,
                        me: !1
                    }, {
                        el: rank3,
                        nameEl: rank3.querySelector(".name"),
                        scoreEl: rank3.querySelector(".score"),
                        name: "",
                        score: 0,
                        visible: !0,
                        me: !1
                    }]
            },
            1371: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.MovableObject = void 0;
                var _1 = __webpack_require__(2174),
                    Data_1 = __webpack_require__(6313),
                    Img_1 = __webpack_require__(360),
                    Player_1 = __webpack_require__(2245),
                    Slpash_1 = __webpack_require__(6921),
                    Sound_1 = __webpack_require__(3754),
                    Sprite_1 = __webpack_require__(9145),
                    Zombie_1 = __webpack_require__(4331),
                    MovableObject = function() {
                        function MovableObject(game, id, x, y, x0, y0, type, hp) {
                            this.team = 0, this.armor = 0, this.z = 0, this.z0 = 0, this.vz = 0, this.dieAt = 0, this.finallyRemoveAt = 999999, this.noDraw = !1, this.isMovableObject = !0, this.lastHit = -99999, this.lastPosUpdate = -99999, this.smokeTimeOffset = Math.floor(10 * Math.random()), this.game = game, this.id = id, this.x = x, this.y = y, this.x0 = x0 || x, this.y0 = y0 || y, this.x00 = x0, this.y00 = y0, this.maxHP = type.hp ? type.hp : 999999, this.hp = hp || this.maxHP, this.type = type, game.addToObjectsToDraw(this)
                        }
                        return MovableObject.prototype.blink = function(x_, y_) {
                            this.x = x_, this.y = y_, this.x0 = this.x, this.y0 = this.y;
                            var vecX = this.x - this.x00,
                                vecY = this.y - this.y00,
                                dist = Math.sqrt(Math.pow(vecX, 2) + Math.pow(vecY, 2)),
                                x = this.x00,
                                y = this.y00;
                            if (vecX *= 1 / dist, vecY *= 1 / dist, !this.game.fastForward) {
                                for (var i = 0; i < dist; i += .75) x += vecX, y += vecY, new Sprite_1.Sprite(this.game, {
                                    x: x + .6 * Math.random() - .3,
                                    y: y + .6 * Math.random() - .3 - .5,
                                    img: Img_1.imgCoords.dust1,
                                    scaleFunction: function(age) {
                                        return this.r1 - .01 * age
                                    },
                                    r1: Math.random() + 1.25,
                                    alphaFunction: function(age) {
                                        return .25 * Math.max(0, 1 - age / this.ticksToLive)
                                    },
                                    age: 20 * (1.7 + Math.random())
                                }), new Sprite_1.Sprite(this.game, {
                                    x: x + .6 * Math.random() - .3,
                                    y: y + .6 * Math.random() - .3 - .5,
                                    img: Img_1.imgCoords.particleWhite,
                                    scaleFunction: function(age) {
                                        return this.r1 - .01 * age
                                    },
                                    r1: Math.random() + 1.55,
                                    alphaFunction: function(age) {
                                        return .8 * Math.max(0, 1 - age / this.ticksToLive)
                                    },
                                    age: 4 * Math.random() + 10
                                });
                                Sound_1.Sound.playSound("blink", this.x00, this.y00), this.game.createBlinkEffect(this.x00, this.y00), this.game.createBlinkEffect(this.x, this.y)
                            }
                        }, MovableObject.prototype.update = function() {
                            if (this.z0 = this.z, this.z > 0 && (this.z = Math.max(this.z + this.vz, 0), this.vz -= Data_1.CONST.GRAVITY), this.lastPosUpdate < this.game.ticksCounter) {
                                Math.sqrt(Math.pow(this.x - this.x0, 2) + Math.pow(this.y - this.y0, 2)) < .005 && (this.x0 = this.x, this.y0 = this.y);
                                var x0 = this.x,
                                    y0 = this.y;
                                this.x += this.x - this.x0, this.y += this.y - this.y0, this.x0 = x0, this.y0 = y0
                            }
                            if (this.dieAt && this.dieAt + 1 === this.game.ticksCounter && this.x + 3 >= this.game.cameraX && this.y + 3 >= this.game.cameraY && this.x - 3 <= this.game.cameraX2 && this.y - 3 <= this.game.cameraY2) {
                                this.game.createPoundSmoke(this.x, this.y + .6, .45, 9), Sound_1.Sound.playSound("woodcrack", this.x, this.y, .8);
                                for (var i = 0; i < 5; i++) new Sprite_1.Sprite(this.game, {
                                    x: this.x + 1.2 * Math.random() - .6,
                                    y: this.y + 1.2 * Math.random() - .6,
                                    img: Img_1.imgCoords.dust1,
                                    scaleFunction: function(age) {
                                        return this.r1 - .01 * age
                                    },
                                    r1: Math.random() + 1.5,
                                    alphaFunction: function(age) {
                                        return .17 * Math.max(0, 1 - age / this.ticksToLive)
                                    },
                                    age: 20 * (1.7 + Math.random()),
                                    r2: 40 * Math.random() + 32,
                                    zFunction: function(age) {
                                        return age / this.r2
                                    }
                                })
                            }
                            return this.finallyRemoveAt > this.game.ticksCounter
                        }, MovableObject.prototype.getYDrawingOffset = function() {
                            return this.y
                        }, MovableObject.prototype.hpUpdate = function(hp, armor, splash, attacker) {
                            this.hp = hp, this.lastHit = this.game.ticksCounter, attacker && (attacker instanceof Zombie_1.Zombie || attacker instanceof Player_1.Player && attacker.isHumanZombie) && Sound_1.Sound.playSound("mech_impact", this.x, this.y, .7), this.hp <= 0 && (this.finallyRemoveAt = this.game.ticksCounter + 30, -55 === this.hp && (new Slpash_1.Splash(this.game, this.x, this.y, Img_1.imgCoords.splash, 2.5), this.finallyRemoveAt = this.game.ticksCounter), this.dieAt = this.game.ticksCounter)
                        }, MovableObject.prototype.die = function() {}, MovableObject.prototype.draw = function(exactTicks, x1, y1, x2, y2, percentageOfCurrentTickPassed) {
                            if (this.x + 3 >= x1 && this.y + 3 >= y1 && this.x - 3 <= x2 && this.y - 3 <= y2 && !this.noDraw) {
                                var scale = 1 * this.game.SCALE_FACTOR,
                                    scale_shadow = 1.6 * this.game.SCALE_FACTOR,
                                    x = (this.x0 + percentageOfCurrentTickPassed * (this.x - this.x0) - this.game.cameraX) * this.game.FIELD_SIZE,
                                    y = (this.y0 + percentageOfCurrentTickPassed * (this.y - this.y0) - this.game.cameraY) * this.game.FIELD_SIZE,
                                    h = (this.z0 + percentageOfCurrentTickPassed * (this.z - this.z0)) * this.game.FIELD_SIZE,
                                    img = this.type.img;
                                if (this.hp < .33 * this.maxHP ? img = this.type.img3 : this.hp < .66 * this.maxHP && (img = this.type.img2), this.dieAt && this.dieAt <= exactTicks) {
                                    var deathFrame = Math.max(Math.floor(.3 * (exactTicks - 4 - this.dieAt)), 0);
                                    if (!(img = this.type["deathImg" + (deathFrame + 1)])) return
                                }
                                img || (img = this.type.img);
                                var x_ = x - img.w / 2 * scale,
                                    y_ = y - (img.h - 12) * scale,
                                    shiftX = 0,
                                    shiftY = 0;
                                if (this.z <= 0) {
                                    var shift = this.game.shiftArray[Math.floor(this.x)] ? this.game.shiftArray[Math.floor(this.x)][Math.floor(this.y)] : null;
                                    shift && shift[0] && (shiftX = shift[0]), shift && shift[1] && (shiftY = shift[1])
                                }(Math.abs(this.x0 + shiftX - this.x) > .01 || Math.abs(this.y0 + shiftY - this.y) > .01) && !this.game.fastForward && this.game.tickDiff > 0 && this.game.ticksCounter >= 0 && (this.game.ticksCounter + this.smokeTimeOffset) % 6 == 1 && new Sprite_1.Sprite(this.game, {
                                    x: this.x + .6 * Math.random() - .3,
                                    y: this.y + .6 * Math.random() - .3,
                                    img: Img_1.imgCoords.dust1,
                                    scaleFunction: function(age) {
                                        return this.r1 - .01 * age
                                    },
                                    r1: Math.random() + .75,
                                    alphaFunction: function(age) {
                                        return .23 * Math.max(0, 1 - age / this.ticksToLive)
                                    },
                                    age: 20 * (1.7 + Math.random()),
                                    r2: 40 * Math.random() + 32,
                                    zFunction: function(age) {
                                        return age / this.r2
                                    }
                                }), this.game.ctx.drawImage(_1.imgs.shadow, x - 16 * scale_shadow, y - 20 * scale_shadow, 32 * scale_shadow, 32 * scale_shadow), this.game.ctx.drawImage(_1.imgs.tileSheet, img.x, img.y, img.w, img.h, x_, y_ - h, img.w * scale, img.h * scale), this.game.ticksCounter > 0 && this.lastHit + 1 >= this.game.ticksCounter && (this.game.ctx.globalAlpha = .7 + this.game.ticksCounter % 2 % 10, this.game.ctx.drawImage(_1.imgs.tileSheetWhite, img.x, img.y, img.w, img.h, x_, y_ - h, img.w * scale, img.h * scale), this.game.ctx.globalAlpha = 1)
                            }
                        }, MovableObject
                    }();
                exports.MovableObject = MovableObject
            },
            3280: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.NameColor = void 0;
                var Data_1 = __webpack_require__(6313),
                    config_1 = __webpack_require__(5303),
                    Network_1 = __webpack_require__(367),
                    Sound_1 = __webpack_require__(3754),
                    NameColor = function() {
                        function NameColor() {}
                        return NameColor.show = function() {
                            var o = this.get();
                            this.refresh(), o.style.display = "block"
                        }, NameColor.get = function() {
                            return document.getElementById("nameColor") || this._create()
                        }, NameColor.getColor = function(colorNumber) {
                            var color = Data_1.NAME_COLOR[null != colorNumber ? colorNumber : config_1.playerData.name_color_select];
                            return color ? color.code : config_1.playerData.name_color[0] ? Data_1.NAME_COLOR[config_1.playerData.name_color[0]].code : "#fff"
                        }, NameColor.refreshPanel = function() {
                            var color = this.getColor(),
                                profile = document.body.querySelector(".playerProfileView > .playerMeta .playerNick");
                            profile && (profile.style.color = color), document.body.querySelector(".homeWelcomeMsgWrapper > .msgBody .nick").style.color = color
                        }, NameColor.refresh = function() {
                            var _this = this;
                            this.get();
                            var content = document.getElementById("nameColorContent");
                            content.innerHTML = "";
                            var _loop_1 = function(id) {
                                var idInt = parseInt(id),
                                    a = Data_1.NAME_COLOR[idInt];
                                if (idInt < 200 || a.showOnlyWhenHave && !config_1.playerData.name_color.includes(idInt)) return "continue";
                                var row = document.createElement("div");
                                row.innerText = a.name, void 0 !== a.description && (row.title = a.description), row.style.color = a.code;
                                var select = config_1.playerData.name_color_select;
                                select || (select = config_1.playerData.name_color[0]), idInt === select ? (row.className = "selected", row.onclick = function() {
                                    _this.hide()
                                }) : config_1.playerData.name_color.includes(idInt) ? (row.className = "can-select", row.onclick = function() {
                                    config_1.playerData.name_color_select = idInt, Network_1.Network.send("chooseNameColor$" + id), _this.refreshPanel(), _this.hide(), Sound_1.Sound.playSound("click")
                                }) : row.className = "invalid", content.appendChild(row)
                            };
                            for (var id in Data_1.NAME_COLOR) _loop_1(id)
                        }, NameColor._create = function() {
                            var _this = this,
                                box = document.createElement("div");
                            box.id = "nameColor", box.className = "F-Window light";
                            var close = document.createElement("div");
                            close.className = "F-Button close", close.onclick = function() {
                                _this.hide()
                            }, box.appendChild(close);
                            var content = document.createElement("div");
                            content.className = "content", content.id = "nameColorContent", box.appendChild(content);
                            var divBG = document.createElement("div");
                            return divBG.className = "bg", box.appendChild(divBG), document.body.appendChild(box), box
                        }, NameColor.hide = function() {
                            var o = document.getElementById("nameColor");
                            o && (o.style.display = "none")
                        }, NameColor
                    }();
                exports.NameColor = NameColor
            },
            367: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.handleNetworkMsg = exports.Network = exports.networkInit = void 0;
                var _1 = __webpack_require__(2174),
                    servers_1 = __webpack_require__(1749),
                    Data_1 = __webpack_require__(6313),
                    config_1 = __webpack_require__(5303),
                    functions_1 = __webpack_require__(7582),
                    Game_1 = __webpack_require__(9158),
                    map1_1 = __webpack_require__(9620),
                    Sound_1 = __webpack_require__(3754),
                    UI_1 = __webpack_require__(2664),
                    homeScreen_1 = __webpack_require__(1292),
                    roomCreateScreen_1 = __webpack_require__(562),
                    roomsListScreen_1 = __webpack_require__(7524),
                    viewHelpers_1 = __webpack_require__(7174),
                    lang_1 = __webpack_require__(9655),
                    root_1 = __webpack_require__(17),
                    resourceBar_1 = __webpack_require__(4542),
                    bottomBar_1 = __webpack_require__(6133),
                    clanMain_1 = __webpack_require__(429),
                    floatTip_1 = __webpack_require__(9177),
                    result_1 = __webpack_require__(542),
                    openChest_1 = __webpack_require__(6584),
                    DomHelper_1 = __webpack_require__(5560),
                    TreasureChests_1 = __webpack_require__(5927),
                    _socket = null,
                    _connected = !1,
                    _forcedGameID = -1,
                    _forcedServerIndex = window.localStorage.getItem("chooseServerOnStart");
                window.localStorage.setItem("chooseServerOnStart", "-1");
                for (var _forcedServerIndexInt = null !== _forcedServerIndex ? parseInt(_forcedServerIndex) : -1, arr = window.location.search.substr(1).split("&"), _i = 0, arr_1 = arr; _i < arr_1.length; _i++) {
                    var el = arr_1[_i],
                        vals = el.split("=");
                    "game" === vals[0] && (_forcedGameID = parseInt(vals[1]))
                }

                function networkInit() {
                    for (var i = 0; i < servers_1.SERVERS.length; i++)
                        if (-1 === _forcedServerIndexInt || _forcedServerIndexInt === i) try {
                            var connection = new WebSocket(servers_1.SERVERS[i].adress);
                            connection.serverIndex_ = i, connection.onopen = function(e) {
                                _connected ? e.target.close() : exports.Network.onopen(e.target, this.serverIndex_)
                            }, connection.onerror = function(e) {
                                console.log(e)
                            }
                        } catch (e) {
                            console.log("You browser seems to not support Websockets. Websockets, however, are required to run this game.")
                        }
                }

                function handleNetworkMsg(msg, send, game) {


                // (0, floatTip_1.floatTip)("success", "Registration complete.", 2e3), (0, viewHelpers_1.hidePopup)("account");


                    var arr = msg.split("$");
                    if ("i_d" !== arr[0]) {
                        if (null !== root_1.root.game)
                            if ("upd" === arr[0]) root_1.root.game.receiveUpdate(arr), root_1.root.game.replayFile.push(msg);
                            else if ("pro" === arr[0]) root_1.root.game.newProjectile(arr), root_1.root.game.replayFile.push(msg);
                        else if ("hp" === arr[0]) root_1.root.game.hpUpdate(arr), root_1.root.game.replayFile.push(msg);
                        else if ("proD" === arr[0]) root_1.root.game.projectileDies(arr), root_1.root.game.replayFile.push(msg);
                        else if ("nP" === arr[0]) root_1.root.game.newPlayer(arr), root_1.root.game.replayFile.push(msg);
                        else if ("proM" === arr[0]) root_1.root.game.newProjectileMulti(arr), root_1.root.game.replayFile.push(msg);
                        else if ("hpO" === arr[0]) root_1.root.game.hpUpdateObject(arr), root_1.root.game.replayFile.push(msg);
                        else if ("nO" === arr[0]) root_1.root.game.newObject(arr), root_1.root.game.replayFile.push(msg);
                        else if ("beam1" === arr[0]) root_1.root.game.newBeam1(arr), root_1.root.game.replayFile.push(msg);
                        else if ("beam2" === arr[0]) root_1.root.game.newBeam2(arr), root_1.root.game.replayFile.push(msg);
                        else if ("pL" === arr[0]) root_1.root.game.playerLeaves(arr), root_1.root.game.replayFile.push(msg);
                        else if ("grn" === arr[0]) root_1.root.game.newGrenade(arr), root_1.root.game.replayFile.push(msg);
                        else if ("rl2" === arr[0]) root_1.root.game.reload2(arr), root_1.root.game.replayFile.push(msg);
                        else if ("rsp" === arr[0]) root_1.root.game.playerRespawns(arr), root_1.root.game.replayFile.push(msg);
                        else if ("ping" === arr[0]) exports.Network.lastPing = Date.now() - exports.Network.lastTimePingSent;
                        else if ("upg" === arr[0]) root_1.root.game.interface_.presentUpgChoice(arr);
                        else if ("nZ" === arr[0]) root_1.root.game.map === map1_1.map1 ? root_1.root.preStore.newZombies.push({
                            value: arr,
                            time: Date.now()
                        }) : root_1.root.game.newZombie(arr), root_1.root.game.replayFile.push(msg);
                        else if ("dbg" === arr[0]) try {
                                eval(msg.substring(4))
                            } catch (e) {} else if ("pid" === arr[0]) root_1.root.game.map === map1_1.map1 ? root_1.root.preStore.pid = {
                                value: arr[1],
                                time: Date.now()
                            } : root_1.root.game.setPlayingPlayerID(parseInt(arr[1]));
                            else if ("tGf" === arr[0])
                            for (var i = 1; i < arr.length; i += 2) {
                                var p = root_1.root.game.getPlayerFromID(parseInt(arr[i]));
                                p && (p.iac = arr[i + 1])
                            } else if ("stats" === arr[0]) {
                                var st = {
                                    xpGained: parseInt(arr[1]),
                                    eloGained: parseInt(arr[2]),
                                    goldGained: parseInt(arr[3]),
                                    kills: parseInt(arr[4]),
                                    deaths: parseInt(arr[5]),
                                    xp: parseInt(arr[6]),
                                    elo: parseInt(arr[7]),
                                    gold: parseInt(arr[8]),
                                    souls: parseInt(arr[9]),
                                    show: parseInt(arr[10]),
                                    exit: void 0 === arr[11] || parseInt(arr[11]),
                                    chestId: parseInt(arr[12])
                                };
                                st.xp && UI_1.UI.setXP(st.xp), st.goldGained && (config_1.playerData.gold = st.gold, resourceBar_1.resourceBar.refresh()), st.exit && preExitGame(), st.show ? result_1.result.show(st) : st.exit && ((0, functions_1.exitGame)(), result_1.result.hide())
                            } else if ("logged" === arr[0]) {
                            (0, viewHelpers_1.hidePopup)("account"), (0, config_1.setPlayerData)(arr), (0, floatTip_1.floatTip)("success", lang_1.lang.get("msg.welcome", {
                                playerName: config_1.playerData.name
                            }), 2e3), homeScreen_1.homeScreen.render(), UI_1.UI.refreshMenuButtons(), resourceBar_1.resourceBar.show();
                            var el = document.getElementById("popupWndContainer");
                            null !== el && (el.style.display = "none"), -1 !== _forcedGameID && (exports.Network.send("join-game$" + _forcedGameID), _forcedGameID = -1)
                        } else if ("maplist4Cr" === arr[0]) {
                            for (var result_2 = [], i_1 = 1; i_1 < arr.length; i_1 += 7) result_2.push({
                                mapId: parseInt(arr[i_1]),
                                mapName: arr[i_1 + 1],
                                mapW: parseInt(arr[i_1 + 2]),
                                mapH: parseInt(arr[i_1 + 3]),
                                mode: null,
                                maxPlayers: parseInt(arr[i_1 + 4]),
                                thumbnail: arr[i_1 + 5],
                                mapDesc: arr[i_1 + 6]
                            });
                            roomCreateScreen_1.roomCreateScreen.setNewMaps(result_2)
                        } else if ("gL" === arr[0]) {
                            for (var result_3 = [], i = 1; i < arr.length; i += 9) result_3.push({
                                roomId: parseInt(arr[i]),
                                mapName: arr[i + 1],
                                numPlayers: parseInt(arr[i + 2]),
                                numPlayersMax: parseInt(arr[i + 3]),
                                mode: parseInt(arr[i + 4]),
                                mapW: parseInt(arr[i + 5]),
                                mapH: parseInt(arr[i + 6]),
                                tag: arr[i + 7],
                                mapThumbnail: arr[i + 8]
                            });
                            roomsListScreen_1.roomsListScreen.listInit_(result_3)
                        } else if ("init" === arr[0])(0, functions_1.hideLadderButton)(), root_1.root.game = new Game_1.Game(JSON.parse(arr[1])), (0, functions_1.resize)(), root_1.root.game.init(arr, msg), root_1.root.game.replayFile = [], root_1.root.game.replayFile.push(msg);
                        else if ("next-maps" === arr[0]) {
                            for (var mapVotes = {}, i_2 = 1; i_2 < arr.length; i_2 += 5) {
                                var id = parseInt(arr[i_2]);
                                mapVotes[id] = {
                                    id,
                                    w: parseInt(arr[i_2 + 2]),
                                    h: parseInt(arr[i_2 + 3]),
                                    name: arr[i_2 + 1],
                                    votes: parseInt(arr[i_2 + 4])
                                }
                            }
                            root_1.root.game.setNextMaps(mapVotes)
                        } else if ("map-vote" === arr[0]) root_1.root.game.voteNextMap(parseInt(arr[1]), parseInt(arr[2]));
                        else if ("cure" === arr[0]) root_1.root.game.cureTick = parseInt(arr[1]);
                        else if ("playerList" === arr[0]) { UI_1.UI.showPlayerList(arr); root_1.root.game.cureTick = parseInt(arr[1]); }
                        else if ("plInfo" === arr[0]) UI_1.UI.showPlayerInfoWithData(arr);
                        else if ("lvlUp" === arr[0]) { ("regSuc" === arr[0])(0, floatTip_1.floatTip)("success", "Registration complete.", 2e3), (0, viewHelpers_1.hidePopup)("account"); UI_1.UI.lvlUp(arr); }
                        else if ("awardChest" === arr[0]) config_1.playerData.chests = (0, functions_1.parseChests)(arr[1]), resourceBar_1.resourceBar.refresh();
                        else if ("ban" === arr[0])(0, floatTip_1.floatTip)("error", "You are banned until " + new Date(parseInt(arr[1]) + 60).toLocaleString() + ". " + (arr[3] && arr[3].length > 0 ? "Reason: " + arr[3] : ""), -1), arr[2] && arr[2].length > 0 && localStorage.setItem("hotkeyValue", arr[2]);
                        else if ("svrMsg" === arr[0])(0, floatTip_1.floatTip)(arr[1], arr[3], parseInt(arr[2]));
                        else if ("legacyLoginNameUsed" === arr[0]) document.getElementById("legacyServerMsg").innerText = "Login name already used, pick a new one.", document.getElementById("inputLegacyNewNameDiv").style.display = "", document.getElementById("legacySubmit").classList.remove("disabled");
                        else if ("legacyUserDataNotFoundError" === arr[0]) document.getElementById("legacyServerMsg").innerText = "legacyUserDataNotFoundError.", document.getElementById("legacySubmit").classList.remove("disabled");
                        else if ("legacyAccNotFound" === arr[0]) document.getElementById("legacyServerMsg").innerText = "Name or password incorrect.", document.getElementById("legacySubmit").classList.remove("disabled");
                        else if ("legacyAccAlreadyClaimed" === arr[0]) document.getElementById("legacyServerMsg").innerText = "This account has already been claimed.", document.getElementById("legacySubmit").classList.remove("disabled");
                        else if ("tooFastTry" === arr[0]) document.getElementById("legacyServerMsg").innerText = "Too many tries. Wait a couple of sec.", document.getElementById("legacySubmit").classList.remove("disabled");
                        else if ("legacySuc" === arr[0]) document.getElementById("legacyServerMsg").innerText = "Account successfully claimed. You can now login.", document.getElementById("legacySubmit").classList.remove("disabled");
                        else if ("regSuc" === arr[0])(0, floatTip_1.floatTip)("success", "Registration complete.", 2e3), (0, viewHelpers_1.hidePopup)("account");
                        else if ("openTreasureChestDone" === arr[0]) {
                            config_1.playerData.chests = (0, functions_1.parseChests)(arr[1]);
                            var gold = parseInt(arr[2]),
                                chestId = parseInt(arr[3]);
                            config_1.playerData.gold += gold, resourceBar_1.resourceBar.refresh(), openChest_1.openChest.show0(chestId, gold);
                            for (var i_3 = 4; i_3 < arr.length; i_3++) openChest_1.openChest.show0(chestId, void 0, TreasureChests_1.additionalChestLoot[parseInt(arr[i_3])])
                        } else if ("memberList" === arr[0] || "memberList2" === arr[0]) UI_1.UI.memberList(arr);
                        else if ("clanInfo" === arr[0]) {
                            var clan = getClanObj(arr);
                            root_1.root.currentClan = clan, clanMain_1.clanMain.show1(clan), document.querySelector(".setting").style.display = config_1.playerData.clanRole >= Data_1.AUTH_LEVEL.ADMIN && config_1.playerData.clanTag === clan.tag ? "" : "none"
                        } else if ("clanInfo2" === arr[0]) {
                            var clan = getClanObj(arr);
                            root_1.root.currentClan = clan, config_1.playerData.clanTag = clan.tag, config_1.playerData.clanRole = clan.clan_role, clanMain_1.clanMain.close(), clanMain_1.clanMain.show1(), clanMain_1.clanMain.show(), homeScreen_1.homeScreen.render()
                        } else if ("clanList" === arr[0]) {
                            for (var data = [], i = 3; i < arr.length; i += 4) data.push({
                                tag: arr[i],
                                name: arr[i + 1],
                                countMembers: parseInt(arr[i + 2]),
                                elo: parseInt(arr[i + 3])
                            });
                            UI_1.UI.showClanList(data, parseInt(arr[1]), parseInt(arr[2]))
                        } else if ("lR" === arr[0]) root_1.root.game.ladderResult(arr);
                        else if ("ladderlist" === arr[0]) {
                            var box = DomHelper_1.Dom.createElement("div", document.body, "ladderList", "F-Window light"),
                                nameColorContent = DomHelper_1.Dom.createElement("div", box, "nameColorContent", "content");
                            DomHelper_1.Dom.createElement("div", box, void 0, "F-Button close", void 0, (function() {
                                Sound_1.Sound.playSound("click"), this.parentNode.parentNode.removeChild(this.parentNode)
                            })), DomHelper_1.Dom.createElement("div", box, void 0, "bg"), DomHelper_1.Dom.createElement("div", nameColorContent, void 0, "title", "Recent Ranked matches");
                            var table = DomHelper_1.Dom.createElement("table", nameColorContent),
                                tr = DomHelper_1.Dom.createElement("tr", table);
                            DomHelper_1.Dom.createElement("td", tr, void 0, void 0, "Player 1"), DomHelper_1.Dom.createElement("td", tr, void 0, void 0, "Player 2"), DomHelper_1.Dom.createElement("td", tr, void 0, void 0, "Date"), DomHelper_1.Dom.createElement("td", tr), DomHelper_1.Dom.createElement("td", tr);
                            for (var i_4 = 2; i_4 < arr.length; i_4 += 8) {
                                var d = new Date(parseInt(arr[i_4 + 5])),
                                    tr1 = DomHelper_1.Dom.createElement("tr", table),
                                    td1 = DomHelper_1.Dom.createElement("td", tr1, void 0, void 0),
                                    a1 = DomHelper_1.Dom.createElement("a", td1, void 0, "pseudoLink yellow withClickSound", arr[i_4 + 3], clickPlayerNameInLadderList);
                                a1.setAttribute("data-playerId", arr[i_4 + 1]);
                                var td2 = DomHelper_1.Dom.createElement("td", tr1, void 0, void 0),
                                    a2 = DomHelper_1.Dom.createElement("a", td2, void 0, "pseudoLink yellow withClickSound", arr[i_4 + 4], clickPlayerNameInLadderList);
                                a2.setAttribute("data-playerId", arr[i_4 + 2]), DomHelper_1.Dom.createElement("td", tr1, void 0, void 0, d.getDate() + "/" + (d.getMonth() + 1) + "/" + d.getFullYear());
                                var winLoss = DomHelper_1.Dom.createElement("td", tr1),
                                    watch = DomHelper_1.Dom.createElement("td", tr1);
                                if ("1" === arr[i_4 + 6] && arr[1] === arr[i_4 + 1] || "2" === arr[i_4 + 6] && arr[1] === arr[i_4 + 2] ? (winLoss.style.color = "#5fac1c", winLoss.innerText = "win") : "2" === arr[i_4 + 6] && arr[1] === arr[i_4 + 1] || "1" === arr[i_4 + 6] && arr[1] === arr[i_4 + 2] ? (winLoss.style.color = "#a82323", winLoss.innerText = "loss") : (winLoss.style.color = "#d1d52b", winLoss.innerText = "draw"), "1" === arr[i_4 + 7]) {
                                    DomHelper_1.Dom.createElement("span", watch, void 0, void 0, "(");
                                    var a = DomHelper_1.Dom.createElement("a", watch, void 0, "pseudoLink yellow withClickSound", "watch", functions_1.watchLaddergame);
                                    a.setAttribute("data-laddergameId", arr[i_4]), DomHelper_1.Dom.createElement("span", watch, void 0, void 0, ")")
                                }
                            }
                        } else "ladderlist2" === arr[0] ? UI_1.UI.showLatestReplays(arr) : "rep" === arr[0] ? (0, functions_1.startReplay0)(JSON.parse(msg.substring(4))) : "e" === arr[0] ? (root_1.root.game.map !== map1_1.map1 && root_1.root.game.emote(parseInt(arr[1]), parseInt(arr[2])), root_1.root.game.replayFile.push(msg)) : "chat" === msg.substr(0, 4) ? (root_1.root.game.map !== map1_1.map1 ? root_1.root.game.interface_.chatMsg(msg.substr(5), "#8CD882") : "chat$-1$" === msg.substr(0, 8) && (0, floatTip_1.floatTip)("success", msg.substr(8), 8e3), root_1.root.game.replayFile.push(msg)) : console.log(arr)
                    } else config_1.playerData.server_client_id = parseInt(arr[1])
                }

                function preExitGame() {
                    root_1.root.leavingGame && (root_1.root.leavingGame = !1), UI_1.UI.hideDeathScreen()
                }

                function getClanObj(arr) {
                    return {
                        tag: arr[1],
                        name: arr[2],
                        countMembers: parseInt(arr[3]),
                        clan_role: parseInt(arr[4]),
                        elo: parseInt(arr[5]),
                        id: parseInt(arr[6]),
                        appsCount: parseInt(arr[7]),
                        description: arr[8]
                    }
                }

                function clickPlayerNameInLadderList(e) {
                    var id = parseInt(e.currentTarget.getAttribute("data-playerId"));
                    UI_1.UI.showPlayerInfoById(id);
                    var ladderListDiv = document.getElementById("ladderList");
                    ladderListDiv.parentNode.removeChild(ladderListDiv)
                }
                exports.networkInit = networkInit, exports.Network = {
                    lastPing: 0,
                    connectedServerIndex: 0,
                    lastTimePingSent: 0,
                    onopen: function(socket, serverIndex) {
                        _connected = !0, _socket = socket, exports.Network.connectedServerIndex = serverIndex, bottomBar_1.bottomBar.show();
                        var hkv = localStorage.getItem("hotkeyValue");
                        hkv && hkv.length > 0 && exports.Network.send("hotkeyInfo$" + hkv), (0, _1.initGame)(), _socket.onmessage = function(data) {
                            handleNetworkMsg(data.data, exports.Network.send, root_1.root.game)
                        };
                        var autologinStr = localStorage.getItem("autologin");
                        autologinStr && autologinStr.length > 0 ? exports.Network.send("login$" + autologinStr) : -1 !== _forcedGameID && (exports.Network.send("join-game$" + _forcedGameID), _forcedGameID = -1)
                    },
                    send: function(data) {
                        _connected && _socket ? _socket.send(data) : console.log("No connection.")
                    }
                }, exports.handleNetworkMsg = handleNetworkMsg
            },
            3646: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.Object_ = void 0;
                var Abilities_1 = __webpack_require__(6489),
                    MapObject_1 = __webpack_require__(5583),
                    functions_1 = __webpack_require__(7582),
                    Img_1 = __webpack_require__(360),
                    Slpash_1 = __webpack_require__(6921),
                    Data_1 = __webpack_require__(6313),
                    Input_1 = __webpack_require__(5860),
                    Sprite_1 = __webpack_require__(9145),
                    Sound_1 = __webpack_require__(3754),
                    functions_2 = __webpack_require__(8394),
                    _1 = __webpack_require__(2174),
                    Object_ = function() {
                        function Object_(game, id, owner, ability, x, y, hp, maxHP, ticks2live, aoe, tickOfDeath, targetX, targetY) {
                            if (this.z = 0, this.z0 = 0, this.isObject = !0, this.particles = [], this.lightPillarsTop = [], this.lightPillarsBottom = [], this.invincibleUntil = -9999, this.laserHitUntil = -999, this.hitUntil = -999, this.bleeds = !1, this.lastTickFire = -9999, this.direction = 1, this.lastShootX = 0, this.lastShootY = 0, this.rotation = 1, this.hpGlideEnd = 0, this.hpGlideAmount = 0, this.hpGlideStart = 0, this.id = id, this.game = game, this.x = x, this.y = y, this.x0 = this.x, this.y0 = this.y, this.maxHP = maxHP, this.hp = hp || this.maxHP, this.aoe = aoe || 0, this.owner = owner, this.ability = ability, this.object = MapObject_1.objects[ability.object], this.barYOffset = this.object && this.object.barYOffset ? this.object.barYOffset : 1.55, this.hpPerTick = this.object ? this.object.hpPerTick : 0, this.dmg = this.object ? this.object.dmg : 0, this.animation = MapObject_1.animationData[this.object.animation], this.weapon = this.object ? this.object.weapon : null, this.lifetime = ticks2live || this.object.lifetime || 99999999, this.tickOfDeath = tickOfDeath ? tickOfDeath + game.ticksCounter : game.ticksCounter + this.lifetime, this.tickOfBirth = this.tickOfDeath - this.lifetime, this.imgScale = this.object && this.object.imgScale ? this.object.imgScale : 1, this.healthBarW = this.object && this.object.healthBarW ? this.object.healthBarW : 24, this.showLifeTimeBar = !(!this.object || !this.object.showLifeTimeBar), this.ability.type === Abilities_1.AbilityType.Place && this.createSpawnEffect(), this.ability.type === Abilities_1.AbilityType.Throw && this.x + 3 >= game.cameraX && this.y + 3 >= game.cameraY && this.x - 3 <= game.cameraX2 && this.y - 3 <= game.cameraY2 && Sound_1.Sound.playSound("throw", this.x, this.y, .8), this.countParticles = Math.floor(this.aoe * Math.pow(Math.PI, 2) * .25), this.yOffset = this.object && this.object.yOffset ? this.object.yOffset : 0, this.emitsSmoke = this.object && this.object.emitsSmoke, this.flash = this.object && this.object.flash, ability.type === Abilities_1.AbilityType.Throw && void 0 !== targetX && void 0 !== targetY) {
                                this.x = x, this.y = y, this.vecX = targetX - this.x, this.vecY = targetY - this.y;
                                var len = Math.sqrt(this.vecX * this.vecX + this.vecY * this.vecY);
                                0 === len && (len = .01), this.z = .6, this.vecH = .12 * Math.pow(len, .25);
                                var speed = .065 * len;
                                this.vecX *= speed / len, this.vecY *= speed / len, this.groundBounceCounter = 0, this.lastBlockHeight = 0, this.tickOfDeath = game.ticksCounter + 999999, this.hasLanded = !1
                            }
                            game.addToObjectsToDraw(this), ability.type === Abilities_1.AbilityType.Place && this.object && void 0 !== this.object.pathing && game.pathingArray[x] && game.pathingArray[x][y] && (game.pathingArray[x][y] = this.object.pathing)
                        }
                        return Object_.prototype.blink = function(x, y, oldX, oldY) {
                            Sound_1.Sound.playSound("blink", this.x, this.y, .6), this.game.createBlinkEffectSmall(oldX - .2 + .4 * Math.random(), oldY - .2 + .4 * Math.random()), this.x = x, this.y = y, this.x0 = this.x, this.y0 = this.y, Sound_1.Sound.playSound("blink", this.x, this.y, .6), this.game.createBlinkEffectSmall(this.x - .25 + .5 * Math.random(), this.y - .25 + .5 * Math.random())
                        }, Object_.prototype.groundBounce = function() {
                            if (!this.hasLanded) {
                                this.groundBounceCounter++;
                                var power = Math.min(1, 10 * this.vecH);
                                Sound_1.Sound.playSound("grenade_bounce", this.x, this.y, .45 * power), this.game.createPoundSmoke(this.x, this.y + .9, .35 * power, 7, .4), this.rotation = 2 * Math.random() - 1, 3 === this.groundBounceCounter && this.flash && this.x + 3 >= this.game.cameraX && this.y + 3 >= this.game.cameraY && this.x - 3 <= this.game.cameraX2 && this.y - 3 <= this.game.cameraY2 && Sound_1.Sound.playSound("flash_start", this.x, this.y, 1), 5 === this.groundBounceCounter && (this.emitsSmoke && this.x + 3 >= this.game.cameraX && this.y + 3 >= this.game.cameraY && this.x - 3 <= this.game.cameraX2 && this.y - 3 <= this.game.cameraY2 && (Sound_1.Sound.playSound("smoke_start", this.x, this.x, .15), this.game.createPoundSmoke(this.x, this.y + .5, .7, 9, .4)), this.tickOfDeath = this.game.ticksCounter + this.lifetime + 5, this.tickOfBirth = this.game.ticksCounter + 5)
                            }
                        }, Object_.prototype.wallBounceEffect = function(oldVX, oldVY, newVX, newVY) {
                            if (!this.game.fastForward) {
                                if (oldVX !== newVX && this.tickOfBirth + 1 < this.game.ticksCounter) {
                                    Sound_1.Sound.playSound("grenade_bounce", this.x, this.y, .45), this.rotation = 3 * Math.random() - 1.5;
                                    for (var x_circular = 0, y_circular = 1, z_circular = 1, i = 0; i < 2 * Math.PI; i += .7 + .4 * Math.random()) new Sprite_1.Sprite(this.game, {
                                        x: this.x,
                                        y: this.y - this.z,
                                        img: Img_1.imgCoords.dust2,
                                        scaleFunction: function(age) {
                                            return this.r4 + .04 * age
                                        },
                                        alphaFunction: function(age) {
                                            return .2 * Math.max(0, 1 - age / this.ticksToLive)
                                        },
                                        age: 20 + 10 * Math.random(),
                                        r1: x_circular * Math.sin(i) * (.8 * Math.random() + .6),
                                        r2: y_circular * Math.sin(i) * (.8 * Math.random() + .6),
                                        r3: z_circular * Math.cos(i) * (.8 * Math.random() + .6),
                                        r4: .2 * Math.random() + .5,
                                        xFunction: function(age) {
                                            return (-5 / (.9 * age + 2.5) + 2) * this.r1 * .2
                                        },
                                        yFunction: function(age) {
                                            return (-5 / (.9 * age + 2.5) + 2) * this.r2 * .2
                                        },
                                        zFunction: function(age) {
                                            return (-5 / (.9 * age + 2.5) + 2) * this.r3 * .2
                                        }
                                    })
                                }
                                if (oldVY !== newVY && this.tickOfBirth + 1 < this.game.ticksCounter) {
                                    Sound_1.Sound.playSound("grenade_bounce", this.x, this.y, .45), this.rotation = 3 * Math.random() - 1.5;
                                    for (x_circular = 1, y_circular = 0, z_circular = 1, i = 0; i < 2 * Math.PI; i += .7 + .4 * Math.random()) new Sprite_1.Sprite(this.game, {
                                        x: this.x,
                                        y: this.y - this.z,
                                        img: Img_1.imgCoords.dust2,
                                        scaleFunction: function(age) {
                                            return this.r4 + .04 * age
                                        },
                                        alphaFunction: function(age) {
                                            return .2 * Math.max(0, 1 - age / this.ticksToLive)
                                        },
                                        age: 20 + 10 * Math.random(),
                                        r1: x_circular * Math.sin(i) * (.8 * Math.random() + .6),
                                        r2: y_circular * Math.sin(i) * (.8 * Math.random() + .6),
                                        r3: z_circular * Math.cos(i) * (.8 * Math.random() + .6),
                                        r4: .2 * Math.random() + .5,
                                        xFunction: function(age) {
                                            return (-5 / (.9 * age + 2.5) + 2) * this.r1 * .2
                                        },
                                        yFunction: function(age) {
                                            return (-5 / (.9 * age + 2.5) + 2) * this.r2 * .2
                                        },
                                        zFunction: function(age) {
                                            return (-5 / (.9 * age + 2.5) + 2) * this.r3 * .2
                                        }
                                    })
                                }
                            }
                        }, Object_.prototype.update = function() {
                            if (this.ability.type === Abilities_1.AbilityType.Throw) {
                                this.x0 = this.x, this.y0 = this.y, this.z0 = this.z, this.x += this.vecX, this.y += this.vecY;
                                var blockHeight = this.game.getHeight2(Math.floor(this.x), Math.floor(this.y)),
                                    hitWall = !1;
                                if (this.z < blockHeight)
                                    if (blockHeight === this.lastBlockHeight) {
                                        if (9 === this.game.getFieldPath(Math.floor(this.x), Math.floor(this.y))) return this.x + 3 >= this.game.cameraX && this.y + 3 >= this.game.cameraY && this.x - 3 <= this.game.cameraX2 && this.y - 3 <= this.game.cameraY2 && new Slpash_1.Splash(this.game, this.x, this.y, Img_1.imgCoords.splash), !1;
                                        if (this.vecH *= -.5, this.vecX *= .9, this.vecY *= .9, this.z = blockHeight, this.groundBounce(), this.vecH < .002 || this.groundBounceCounter > 6 && !this.hasLanded) return this.tickOfDeath = this.game.ticksCounter + this.lifetime, this.hasLanded = !0, !0
                                    } else hitWall = !0, this.x -= 2 * this.vecX, blockHeight = this.game.getHeight2(Math.floor(this.x), Math.floor(this.y)), this.z < blockHeight && (this.x += 2 * this.vecX, this.y -= 2 * this.vecY, blockHeight = this.game.getHeight2(Math.floor(this.x), Math.floor(this.y)), this.z < blockHeight && (this.x -= 2 * this.vecX));
                                if (this.vecX = this.x - this.x0, this.vecY = this.y - this.y0, hitWall) {
                                    var oldVX = Math.sign(this.x - this.x0),
                                        oldVY = Math.sign(this.y - this.y0);
                                    this.vecX *= .9, this.vecY *= .9, this.x = this.x0, this.y = this.y0;
                                    var newVX = Math.sign(this.x - this.x0),
                                        newVY = Math.sign(this.y - this.y0);
                                    this.wallBounceEffect(oldVX, oldVY, newVX, newVY)
                                }
                                if (this.z += this.vecH, this.z < 0) {
                                    if (9 === this.game.getFieldPath(Math.floor(this.x), Math.floor(this.y))) return this.x + 3 >= this.game.cameraX && this.y + 3 >= this.game.cameraY && this.x - 3 <= this.game.cameraX2 && this.y - 3 <= this.game.cameraY2 && new Slpash_1.Splash(this.game, this.x, this.y, Img_1.imgCoords.splash), !1;
                                    if (this.z = 0, this.vecH *= -.5, this.vecX *= .75, this.vecY *= .75, this.groundBounce(), this.vecH < .005 || this.groundBounceCounter > 6 && !this.hasLanded) return this.tickOfDeath = this.game.ticksCounter + this.lifetime, this.hasLanded = !0, !0
                                }
                                if (this.vecH -= .045, this.vecX *= .97, this.vecY *= .97, this.lastBlockHeight = blockHeight, !this.hasLanded && this.groundBounceCounter >= 4 && this.game.ticksCounter % 5 == 2 && this.emitsSmoke && this.x + 3 >= this.game.cameraX && this.y + 3 >= this.game.cameraY && this.x - 3 <= this.game.cameraX2 && this.y - 3 <= this.game.cameraY2 && this.game.createPoundSmoke(this.x, this.y + .5, .7, 9, .4), !this.hasLanded) return !0
                            }
                            return this.hpPerTick && this.game.ticksCounter % 7 == 0 && this.x + 5 >= this.game.cameraX && this.y + 5 >= this.game.cameraY && this.x - 5 <= this.game.cameraX2 && this.y - 5 <= this.game.cameraY2 && Sound_1.Sound.playSound("heal_aura", this.x, this.y, .4), this.emitsSmoke && (this.game.ticksCounter - this.tickOfBirth) % 20 == 0 && !this.game.fastForward && (new Sprite_1.Sprite(this.game, {
                                x: this.x + 9 * Math.random() - 4.5,
                                y: this.y + 6 + 9 * Math.random() - 4.5,
                                r1: .05 * Math.random() - .025,
                                r2: .05 * Math.random() - .025,
                                img: Img_1.imgCoords.hpBar4,
                                r3: .2 * Math.random() + .9,
                                scaleFunction: function(age) {
                                    return (3.5 + .002 * age) * this.r3
                                },
                                alphaFunction: function(age) {
                                    return Math.min(.03 * this.ticksLeft, .05 * age, 1)
                                },
                                xFunction: function(age) {
                                    return age * this.r1
                                },
                                yFunction: function(age) {
                                    return age * this.r2
                                },
                                zFunction: function(age) {
                                    return 7
                                },
                                age: 240
                            }), new Sprite_1.Sprite(this.game, {
                                x: this.x + .5 * Math.random() - .25,
                                y: this.y + 4 + .5 * Math.random() - .25,
                                r1: .01 * Math.random() - .005,
                                r2: .01 * Math.random() - .005,
                                img: Img_1.imgCoords.hpBar4,
                                r3: .2 * Math.random() + .9,
                                scaleFunction: function(age) {
                                    return (.4 + .011 * age) * this.r3
                                },
                                alphaFunction: function(age) {
                                    return Math.min(.1 * this.ticksLeft, .1 * age, 1)
                                },
                                xFunction: function(age) {
                                    return age * this.r1
                                },
                                yFunction: function(age) {
                                    return age * this.r2
                                },
                                zFunction: function(age) {
                                    return 4
                                },
                                age: 40
                            })), (this.emitsSmoke || this.object && this.object.emitsPoison) && (this.game.ticksCounter - this.tickOfBirth) % 14 == 9 && this.x + 3 >= this.game.cameraX && this.y + 3 >= this.game.cameraY && this.x - 3 <= this.game.cameraX2 && this.y - 3 <= this.game.cameraY2 && Sound_1.Sound.playSound("smoke_loop", this.x, this.y, .5), this.ability.type === Abilities_1.AbilityType.Throw && this.aoe && this.dmg && this.tickOfDeath === this.game.ticksCounter && this.x + 10 >= this.game.cameraX && this.y + 10 >= this.game.cameraY && this.x - 10 <= this.game.cameraX2 && this.y - 10 <= this.game.cameraY2 && (this.game.createExplosion(this.x, this.y, this.aoe, 1), Sound_1.Sound.playSound("explo", this.x, this.y, .8), this.game.corpseBounce(this.x, this.y, this.aoe)), this.object && this.object.emitsPoison && this.tickOfBirth === this.game.ticksCounter && (this.game.createPoundSmoke(this.x, this.y, .5, 8, .3), Sound_1.Sound.playSound("smoke_start", this.x, this.y, .15)), this.game.ticksCounter < this.tickOfDeath
                        }, Object_.prototype.die = function() {
                            (0, functions_2.deleteFromArray)(this.game.objectsToDraw, this), this.ability.type === Abilities_1.AbilityType.Place && (this.game.pathingArray[Math.floor(this.x)] && this.game.pathingArray[Math.floor(this.x)][Math.floor(this.y)] >= 0 && (this.game.pathingArray[Math.floor(this.x)][Math.floor(this.y)] = 10), this.game.createExplosion(this.x, this.y, 1, .25), Sound_1.Sound.playSound("explo", this.x, this.y, .5)), this.ability.type === Abilities_1.AbilityType.Throw && this.object && this.object.countLasers && (this.game.createExplosion(this.x, this.y, .3, .25), Sound_1.Sound.playSound("explo", this.x, this.y, .6), Sound_1.Sound.playSound("laser", this.x, this.y, 1))
                        }, Object_.prototype.getYDrawingOffset = function() {
                            return this.y
                        }, Object_.prototype.createSpawnEffect = function() {
                            if (this.lightPillarsTop = [], this.lightPillarsBottom = [], this.x + 5 >= this.game.cameraX && this.y + 5 >= this.game.cameraY && this.x - 5 <= this.game.cameraX2 && this.y - 5 <= this.game.cameraY2) {
                                for (var i = 0; i < 2 * Math.PI; i += .3 + .15 * Math.random())(i <= Math.PI ? this.lightPillarsBottom : this.lightPillarsTop).push({
                                    x: .45 * Math.sin(i) + this.x,
                                    y: .45 * Math.cos(i) + this.y,
                                    w: .15 + .3 * Math.random(),
                                    h: 1.5 * Math.random(),
                                    vh: .04 + .08 * Math.random(),
                                    vw: .01 * Math.random(),
                                    age_offset: 8 * Math.random() - 4
                                });
                                Sound_1.Sound.playSound(this.object && this.object.spawnSound ? this.object.spawnSound : "ammo_spawn", this.x, this.y, this.object && this.object.volume ? this.object.volume : .7)
                            }
                        }, Object_.prototype.updateAndDrawPillar = function(p, age) {
                            p.h += p.vh * this.game.exactTickDiff, p.w += p.vw * this.game.exactTickDiff;
                            var x = (p.x - p.w / 2 - this.game.cameraX) * this.game.FIELD_SIZE,
                                y = (p.y - p.h - this.game.cameraY) * this.game.FIELD_SIZE,
                                this_age = age + p.age_offset;
                            this.game.ctx.globalAlpha = .4 * (this_age < 5 ? Math.max(this_age / 5, 0) : this_age < 10 ? 1 : Math.max(2 - this_age / 10, 0)), this.game.ctx.drawImage(_1.imgs.miscSheet, Img_1.imgCoords.pillar_of_light.x, Img_1.imgCoords.pillar_of_light.y, Img_1.imgCoords.pillar_of_light.w, Img_1.imgCoords.pillar_of_light.h, x, y, p.w * this.game.FIELD_SIZE, p.h * this.game.FIELD_SIZE)
                        }, Object_.prototype.shoot = function(x1, y1, x2, y2) {
                            this.lastTickFire = this.game.ticksCounter, this.direction = (0, functions_1.getDirectionFromAgle)(x1, y1, x2, y2), this.lastShootX = x2, this.lastShootY = y2
                        }, Object_.prototype.draw = function(exactTicks, x1, y1, x2, y2, percentageOfCurrentTickPassed) {
                            if (this.x + 5 >= x1 && this.y + 5 >= y1 && this.x - 5 <= x2 && this.y - 5 <= y2) {
                                var c = this.game.ctx;
                                if (this.ability.type === Abilities_1.AbilityType.Throw) {
                                    if (!this.hasLanded) {
                                        var x_1 = (this.x0 + percentageOfCurrentTickPassed * (this.x - this.x0) - this.game.cameraX) * this.game.FIELD_SIZE,
                                            y_1 = (this.y0 + percentageOfCurrentTickPassed * (this.y - this.y0) - this.game.cameraY) * this.game.FIELD_SIZE,
                                            h_1 = (this.z0 + percentageOfCurrentTickPassed * (this.z - this.z0)) * this.game.FIELD_SIZE,
                                            img_1 = Img_1.imgCoords[this.object.img[Math.floor(exactTicks * this.rotation + 99999999) % this.object.img.length]];
                                        return void c.drawImage(_1.imgs.miscSheet, img_1.x, img_1.y, img_1.w, img_1.h, x_1 - img_1.w * this.game.SCALE_FACTOR / 2, y_1 - img_1.h * this.game.SCALE_FACTOR / 2 - h_1, img_1.w * this.game.SCALE_FACTOR, img_1.h * this.game.SCALE_FACTOR)
                                    }
                                    var x_2 = (this.x - this.game.cameraX) * this.game.FIELD_SIZE,
                                        y_2 = (this.y - this.game.cameraY) * this.game.FIELD_SIZE,
                                        img_2 = Img_1.imgCoords[this.object.img[0]];
                                    return this.object && this.object.emitsPoison && (c.globalAlpha = Math.min(Math.max(.03 * (this.tickOfDeath - exactTicks), 0), 1)), c.drawImage(_1.imgs.miscSheet, img_2.x, img_2.y, img_2.w, img_2.h, x_2 - img_2.w * this.game.SCALE_FACTOR / 2, y_2 - img_2.h * this.game.SCALE_FACTOR / 2 - 0, img_2.w * this.game.SCALE_FACTOR, img_2.h * this.game.SCALE_FACTOR), void(c.globalAlpha = 1)
                                }
                                var age = exactTicks - this.tickOfBirth;
                                if (age < 25)
                                    for (var i = 0; i < this.lightPillarsTop.length; i++) this.updateAndDrawPillar(this.lightPillarsTop[i], age);
                                c.globalAlpha = 1;
                                var scale = this.game.SCALE_FACTOR * this.imgScale,
                                    img = Img_1.imgCoords[this.object.img[0]];
                                this.object && this.object.animationType === MapObject_1.Animation.Dmg && ((img = Img_1.imgCoords[this.object.img[Math.floor(this.object.img.length * (1 - this.hp / this.maxHP))]]) || (img = Img_1.imgCoords[this.object.img[0]])), this.object && this.object.animationType === MapObject_1.Animation.Auto && ((img = Img_1.imgCoords[this.object.img[Math.floor(.2 * this.game.ticksCounter + 999999) % this.object.img.length]]) || (img = Img_1.imgCoords[this.object.img[0]]));
                                var x = (this.x - this.game.cameraX) * this.game.FIELD_SIZE + -img.w / 2 * scale,
                                    y = (this.y + this.yOffset / 16 - .2 - this.game.cameraY) * this.game.FIELD_SIZE + (8 - img.h) * scale;
                                c.globalAlpha = age < 8 ? Math.max(age / 8, 0) : 1, c.drawImage(_1.imgs.miscSheet, img.x, img.y, img.w, img.h, x, y, img.w * scale, img.h * scale), c.globalAlpha = 1;
                                var whiteness = 0;
                                if (this.hitUntil >= exactTicks && (whiteness = Math.random() < .5 ? .95 : .1), this.laserHitUntil >= exactTicks && (whiteness = .95), whiteness > 0 && (c.globalAlpha = whiteness, c.drawImage(_1.imgs.miscSheetWhite, img.x, img.y, img.w, img.h, x, y, img.w * scale, img.h * scale), c.globalAlpha = 1), this.weapon) {
                                    var x_recoiled = 0,
                                        y_recoiled = 0;
                                    if (this.lastTickFire >= exactTicks - 8) {
                                        x_recoiled = -this.lastShootX, y_recoiled = -this.lastShootY;
                                        var len = Math.sqrt(x_recoiled * x_recoiled + y_recoiled * y_recoiled),
                                            len2 = .2 - Math.min(.09 * Math.max(exactTicks - this.lastTickFire - (this.weapon && this.weapon.recoilTime ? this.weapon.recoilTime : 3), 0), .2);
                                        x_recoiled *= len2 * this.game.FIELD_SIZE / len, y_recoiled *= len2 * this.game.FIELD_SIZE / len, this.weapon.recoil && (x_recoiled *= this.weapon.recoil, y_recoiled *= this.weapon.recoil)
                                    }
                                    var wpn_nr = 0;
                                    if (this.animation.countFrames && (wpn_nr = this.lastTickFire + 4 > exactTicks ? Math.floor(exactTicks / this.weapon.cooldown) % this.animation.countFrames : 0), img = this.animation["imgTurret" + wpn_nr + this.direction], x2 = (this.x - this.game.cameraX) * this.game.FIELD_SIZE + -img.w / 2 * scale, y2 = (this.y - .2 - this.game.cameraY) * this.game.FIELD_SIZE + (8 - img.h) * scale, c.drawImage(_1.imgs.miscSheet, img.x, img.y, img.w, img.h, x2 + x_recoiled, y2 + y_recoiled, img.w * scale, img.h * scale), this.animation.muzzleFlash && this.lastTickFire >= exactTicks - 2) {
                                        var mfi = this.animation.muzzleFlash,
                                            mff = Math.floor(.5 * exactTicks) % 2;
                                        x2 = (this.x - this.game.cameraX) * this.game.FIELD_SIZE - 22 * scale, y2 = (this.y - .2 - this.game.cameraY) * this.game.FIELD_SIZE - 22 * scale, c.drawImage(_1.imgs.miscSheet, mfi.x + 44 * this.direction, mfi.y + 44 * mff, 44, 44, x2 - 0 * scale + x_recoiled, y2 - 0 * scale + y_recoiled, 44 * scale, 44 * scale)
                                    }
                                }
                                if (age < 25)
                                    for (var _i = 0, _a = this.lightPillarsBottom; _i < _a.length; _i++) {
                                        var p = _a[_i];
                                        this.updateAndDrawPillar(p, age)
                                    }
                                if (c.globalAlpha = 1, this.ability === Abilities_1.abilities[0]) {
                                    for ((0, functions_1.drawCircle)(this.game.ctx, (this.x - this.game.cameraX) * this.game.FIELD_SIZE, (this.y - this.game.cameraY) * this.game.FIELD_SIZE, this.aoe * this.game.FIELD_SIZE, void 0, "rgba(30, 255, 30, 0.05)", .85), (0, functions_1.drawCircle)(this.game.ctx, (this.x - this.game.cameraX) * this.game.FIELD_SIZE, (this.y - this.game.cameraY) * this.game.FIELD_SIZE, this.aoe * this.game.FIELD_SIZE, "rgba(200, 200, 255, 0.1)", void 0, .85, .7); this.particles.length < this.countParticles;) {
                                        var rng = Math.random() * Math.PI * 2;
                                        this.particles.push({
                                            x: Math.sin(rng) * this.aoe * Math.random() + this.x,
                                            y: Math.cos(rng) * this.aoe * Math.random() + this.y,
                                            tickOfCreation: exactTicks,
                                            tickOfDeath: exactTicks + 40 * Math.random() + 20,
                                            speed: (.5 * Math.random() + .35) / 1e3
                                        })
                                    }
                                    c.lineWidth = this.game.SCALE_FACTOR;
                                    for (var i_1 = 0; i_1 < this.particles.length; i_1++) {
                                        var particle = this.particles[i_1];
                                        if (particle.tickOfDeath <= exactTicks) this.particles.splice(i_1, 1), i_1--;
                                        else {
                                            var age2 = 50 * (exactTicks - particle.tickOfCreation),
                                                drawX = (particle.x - this.game.cameraX) * this.game.FIELD_SIZE,
                                                drawX2 = drawX,
                                                drawY = (particle.y - 1 - this.game.cameraY) * this.game.FIELD_SIZE,
                                                drawY1 = drawY - particle.speed * age2 * this.game.FIELD_SIZE,
                                                drawY2 = drawY - (particle.speed * age2 * 1.5 - 1.2) * this.game.FIELD_SIZE;
                                            age2 < 500 && (c.globalAlpha = age2 / 500), particle.tickOfDeath - exactTicks < 10 && (c.globalAlpha = (particle.tickOfDeath - exactTicks) / 10);
                                            var grad = c.createLinearGradient(drawX2, drawY2, drawX, drawY1);
                                            grad.addColorStop(0, "rgba(180, 255, 170, 0.0)"), grad.addColorStop(.5, "rgba(180, 255, 170, 0.3)"), grad.addColorStop(1, "rgba(180, 255, 170, 0.0)"), c.strokeStyle = grad, c.beginPath(), c.moveTo(drawX, drawY1), c.lineTo(drawX2, drawY2), c.stroke(), c.globalAlpha = 1
                                        }
                                    }
                                    c.globalAlpha = 1
                                }
                                if (!this.object || !this.object.noBars || Input_1.Input.keys[Input_1.KEY.ALT]) {
                                    x = (this.x - this.game.cameraX) * this.game.FIELD_SIZE, y = (this.y - this.game.cameraY) * this.game.FIELD_SIZE;
                                    var barScale = .55 * this.game.SCALE_FACTOR,
                                        barW = 1.8 * this.healthBarW;
                                    x2 = x - barW * barScale / 2, y2 = y - 1.85 * this.game.FIELD_SIZE, c.fillStyle = "black", c.fillRect(x2, y2, barW * barScale, 8 * barScale);
                                    var hp = Math.min(this.hp - (this.hpGlideEnd >= exactTicks ? this.hpGlideAmount * (this.hpGlideEnd - exactTicks) / (this.hpGlideEnd - this.hpGlideStart) : 0), this.maxHP);
                                    img = !this.game.playingPlayer || this.owner && this.owner.isAlliedWith(this.game.playingPlayer) ? Img_1.imgCoords.hpBar1 : Img_1.imgCoords.hpBar3;
                                    var w = (barW - 2) * barScale * (hp / this.maxHP);
                                    c.drawImage(_1.imgs.miscSheet, img.x, img.y, img.w, img.h, x2 + 1 * barScale, y2 + 1 * barScale, w, 6 * barScale), c.strokeStyle = "rgba(0, 0, 0, 1)", c.lineWidth = barScale;
                                    for (i = Data_1.CONST.HP_SEPERATOR_AMOUNT; i < this.maxHP; i += Data_1.CONST.HP_SEPERATOR_AMOUNT) c.beginPath(), c.moveTo(x2 + 1 * barScale + i / this.maxHP * (barW - 2) * barScale, y2 + 5 * barScale), c.lineTo(x2 + 1 * barScale + i / this.maxHP * (barW - 2) * barScale, y2 + 7 * barScale), c.stroke();
                                    this.object.noBars || (this.showLifeTimeBar && (y2 -= .375 * this.game.FIELD_SIZE, c.fillStyle = "black", c.fillRect(x2 - .03 * this.game.FIELD_SIZE, y2 - .03 * this.game.FIELD_SIZE, 1.56 * this.game.FIELD_SIZE, .3 * this.game.FIELD_SIZE), w = (this.tickOfDeath - exactTicks) / this.lifetime * 24, c.drawImage(_1.imgs.miscSheet, Img_1.imgCoords.barBlue.x, Img_1.imgCoords.barBlue.y, w, 4, x2, y2, this.game.SCALE_FACTOR * w, .24 * this.game.FIELD_SIZE)), this.object.initTicks && this.tickOfBirth + this.object.initTicks > exactTicks && (y2 -= .375 * this.game.FIELD_SIZE, c.fillStyle = "black", c.fillRect(x2 - .03 * this.game.FIELD_SIZE, y2 - .03 * this.game.FIELD_SIZE, 1.56 * this.game.FIELD_SIZE, .3 * this.game.FIELD_SIZE), w = (exactTicks - this.tickOfBirth) / this.object.initTicks * 24, c.drawImage(_1.imgs.miscSheet, Img_1.imgCoords.barBlue.x, Img_1.imgCoords.barBlue.y, w, 4, x2, y2, this.game.SCALE_FACTOR * w, .24 * this.game.FIELD_SIZE)))
                                }
                            }
                        }, Object_
                    }();
                exports.Object_ = Object_
            },
            4959: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.PlasmaShield = void 0;
                var functions_1 = __webpack_require__(7582),
                    PlasmaShield = function() {
                        function PlasmaShield(game, x, y, toX, toY, radius, color) {
                            this.game = game, this.x = x, this.y = y, this.radius = null != radius ? radius : .5, this.color = null != color ? color : "200, 200, 255";
                            var vecX = toX - x,
                                vecY = toY - y;
                            this.angle = (0, functions_1.getAngle)(x, y, toX, toY) + .2 * Math.random() - .1;
                            var len = Math.sqrt(vecX * vecX + vecY * vecY);
                            this.x -= vecX * (this.radius - .1) / len, this.y -= vecY * (this.radius - .1) / len, this.tickOfBirth = game.ticksCounter, this.tickOfDeath = game.ticksCounter + 10, game.effects.push(this), game.addToObjectsToDraw(this)
                        }
                        return PlasmaShield.prototype.update = function() {
                            return this.tickOfDeath > this.game.ticksCounter
                        }, PlasmaShield.prototype.getYDrawingOffset = function() {
                            return this.y
                        }, PlasmaShield.prototype.draw = function(exactTicks, x1, y1, x2, y2) {
                            if (this.x + 3 >= x1 && this.y + 3 >= y1 && this.x - 3 <= x2 && this.y - 3 <= y2) {
                                var age = 50 * (exactTicks - this.tickOfBirth),
                                    randomYOffsetPixels = (.05 * age % 4 - 2) * this.game.SCALE_FACTOR * .5,
                                    c = this.game.ctx;
                                c.scale(1, .8), c.strokeStyle = "rgba(" + this.color + ", " + .6 * (1 - age / 400) + ")", c.lineWidth = 1.5 * this.game.SCALE_FACTOR, c.beginPath(), c.arc((this.x - this.game.cameraX) * this.game.FIELD_SIZE, ((this.y - .2 - this.game.cameraY) * this.game.FIELD_SIZE + randomYOffsetPixels) / .8, this.radius * this.game.FIELD_SIZE, this.angle - .5, this.angle + .5, !1), c.arc((this.x - this.game.cameraX) * this.game.FIELD_SIZE, ((this.y - .3 - this.game.cameraY) * this.game.FIELD_SIZE + randomYOffsetPixels) / .8, this.radius * this.game.FIELD_SIZE, this.angle - .5, this.angle + .5, !1), c.arc((this.x - this.game.cameraX) * this.game.FIELD_SIZE, ((this.y - .4 - this.game.cameraY) * this.game.FIELD_SIZE + randomYOffsetPixels) / .8, this.radius * this.game.FIELD_SIZE, this.angle - .5, this.angle + .5, !1), c.stroke(), c.scale(1, 1.25)
                            }
                        }, PlasmaShield
                    }();
                exports.PlasmaShield = PlasmaShield
            },
            2245: function(__unused_webpack_module, exports, __webpack_require__) {
                "use strict";
                var extendStatics, __extends = this && this.__extends || (extendStatics = function(d, b) {
                    return extendStatics = Object.setPrototypeOf || {
                        __proto__: []
                    }
                    instanceof Array && function(d, b) {
                        d.__proto__ = b
                    } || function(d, b) {
                        for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p])
                    }, extendStatics(d, b)
                }, function(d, b) {
                    if ("function" != typeof b && null !== b) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");

                    function __() {
                        this.constructor = d
                    }
                    extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __)
                });
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.Player = void 0;
                var _1 = __webpack_require__(2174),
                    Abilities_1 = __webpack_require__(6489),
                    Data_1 = __webpack_require__(6313),
                    functions_1 = __webpack_require__(8394),
                    Skins_1 = __webpack_require__(3346),
                    Weapons_1 = __webpack_require__(2007),
                    config_1 = __webpack_require__(5303),
                    FloatingText_1 = __webpack_require__(9936),
                    functions_2 = __webpack_require__(7582),
                    Humanoid_1 = __webpack_require__(5951),
                    Img_1 = __webpack_require__(360),
                    Input_1 = __webpack_require__(5860),
                    Network_1 = __webpack_require__(367),
                    PlasmaShield_1 = __webpack_require__(4959),
                    rankInGame_1 = __webpack_require__(6480),
                    root_1 = __webpack_require__(17),
                    Sound_1 = __webpack_require__(3754),
                    Sprite_1 = __webpack_require__(9145),
                    UI_1 = __webpack_require__(2664),
                    viewHelpers_1 = __webpack_require__(7174),
                    lang_1 = __webpack_require__(9655),
                    teamColors = ["rgba(255, 255, 255, 0)", "rgba(255, 107, 107, 0.25)", "rgba(153, 153, 255, 0.35)"],
                    Player = function(_super) {
                        function Player(game, id, x, y, name, hp, armor, kills, deaths, weaponNr, x0, y0, hatNr, team, isInvisible, maxHP, hpRegeneration, clan_tag, authLevel, souls, energyRegeneration, invisEnergyRate, elo, isHumanZombie, isFakeCorpse, isBoss, db_id, worldElo, nameColor) {
                            var _this = _super.call(this, game, id) || this;
                            return _this.legFrame = 0, _this.aimX = 0, _this.aimY = 0, _this.removeAt = 0, _this.reloadSound2 = null, _this.lastKiller = null, _this.noDraw = !1, _this.lastShieldActivated = -999999, _this.lastShieldActivated2 = -999999, _this.isHumanZombie = !1, _this.handsOffset = 0, _this.startBlinkingGreen = -9999, _this.nextPlayer = null, _this.isPlayer = !0, _this.iac = "", _this.direction2 = Math.floor(8 * Math.random()), _this.lastWeapon = null, _this.db_id = db_id, name || (name = "Player"), _this.unsafeName = name.substr(0, 15), _this.name = (0, functions_2.escapeHtml)(_this.unsafeName), _this.authLevel = authLevel, (nameColor |= 0) in Data_1.NAME_COLOR || (nameColor = 50), nameColor > 200 && config_1.options.forcePlayerNameColor && (nameColor = 200), _this.nameColor = nameColor, _this.nameColorCode = Data_1.NAME_COLOR[nameColor].code, _this.x = x, _this.y = y, _this.x0 = x0 || x, _this.y0 = y0 || y, _this.x00 = x0, _this.y00 = y0, _this.hp = hp, _this.maxHP = maxHP, _this.hpRegeneration = hpRegeneration, _this.armor = armor, _this.elo = elo || 0, _this.kills = kills, _this.deaths = deaths, _this.weapon = weaponNr ? Weapons_1.weapons[weaponNr] : Weapons_1.weapons[0], _this.team = team, _this.armorBar = Img_1.imgCoords.armorBar, 1 === _this.team ? _this.armorBar = Img_1.imgCoords.armorBarRed : 2 === _this.team && (_this.armorBar = Img_1.imgCoords.armorBarBlue), _this.souls = 0 | souls, _this.soulLvl = (0, Data_1.getLvlFromSouls)(_this.souls), _this.energyRegeneration = energyRegeneration, _this.invisEnergyRate = invisEnergyRate, _this.hat = Skins_1.hats[hatNr], _this.hat || (_this.hat = Skins_1.hats[0]), _this.originalHat = _this.hat, _this.clan_tag = clan_tag || "", _this.init(), _this.isFakeCorpse = isFakeCorpse, _this.isBoss = !!isBoss, _this.hp <= 0 && (_this.dieAt = game.ticksCounter, _this.finallyRemoveAt = game.ticksCounter + 50), game.addToObjectsToDraw(_this), _this.isInvisible = !!isInvisible, _this === game.playingPlayer && (game.playingPlayerAbilities = config_1.playerData && config_1.playerData.authLevel >= 6 ? config_1.playerData.abilities : (0, Abilities_1.getDefaultAbilityObj)(Abilities_1.abilities)), isHumanZombie && _this.turnZombie(!0), rankInGame_1.rankInGame.addPlayer(_this), _this
                        }
                        return __extends(Player, _super), Player.prototype.init = function() {
                            this.z = 0, this.vz = 0, this.zNegative = 0, this.zNegative0 = 0, this.vzNegative = 0, this.z0 = 0, this.dieAt = 0, this.direction = 0, this.direction2 = 0, this.lastTickFire = -999, this.lastTimeFlameSoundStarted = -999, this.lastDirection2Update = -999, this.lastPosUpdate = -999, this.standTime = 0, this.isInvisible = !1, this.noInvisUntil = -9999, this.lastThrow = -9999, this.lastLifeSteal = -999, this.zombieSense = 0, this.isBoss = !1, this.turnedBossAt = -99999, this.switchWeaponUntil = -999, this.bouncePoints.length = 0, this.flameSound = null, this.flameDeath = !1, this.flameDeathAndNowBouncing = !1, this.path.length = 0, this.laserHitUntil = -999, this.lastHit = -999, this.lockDirection = 0, this.lockDirection2 = 0, this.finallyRemoveAt = 0, this.hitUntil = -999, this.isReloading = !1, this.startBlinkingGreen = -9999, this.noCorpseBounce = !1, this.lastHumanToZombieTransformation = -999, this.lastDeathToZombieTransformation = -999, this.lastZombieToHumanTransformation = -999, this.unturnCorpseTill = -99999, this.turnCorpseTill = -99999, this.isFakeCorpse = !1, this.lastSpawnTick = -99999, this.lightPillarsTop.length = 0, this.lightPillarsBottom.length = 0, this.hpGlideStart = -999, this.hpGlideEnd = -999, this.hpGlideAmount = 0, this.noDraw = !1, this.lastShieldActivated = -999999, this.lastShieldActivated2 = -999999, this.lastShieldHit = -999999, this.invincibleUntil = -9999, this.weaponCooldowns = [], this.weaponCooldowns2 = [];
                            for (var i = 0; i < 20; i++) this.weaponCooldowns2[i] = Weapons_1.weapons[i] && Weapons_1.weapons[i].cooldown2 ? Weapons_1.weapons[i].cooldown2 : 0
                        }, Player.prototype.respawn = function(x, y, turnZombie) {
                            this.isHumanZombie && this.createCorpse(), turnZombie && this.turnZombie(), this.x = x, this.y = y, this.x0 = this.x, this.y0 = this.y, this.hp = this.maxHP, this.armor = 0, this.weapon = this.isHumanZombie ? Weapons_1.weapons[12] : Weapons_1.weapons[0], this.bouncePoints = [], this.init(), turnZombie && (this.lastDeathToZombieTransformation = this.game.ticksCounter), this.game.playingPlayer === this && (this.game.resetPlayingPlayerStats(), this.game.lastPickUp = Date.now()), turnZombie || this.createSpawnEffect(this.game.playingPlayer === this), !this.isHumanZombie && this.game.ticksCounter >= 2 && (this.invincibleUntil = this.game.ticksCounter + Data_1.CONST.SPAWN_INVINCIBILITY), this.game.playingPlayer === this && (UI_1.UI.hideDeathScreen(), (0, viewHelpers_1.hideAd)())
                        }, Player.prototype.turnBoss = function() {
                            this.isBoss = !0, this.turnedBossAt = this.game.ticksCounter, this.isHumanZombie ? (this.weapon = Weapons_1.weapons[14], Sound_1.Sound.playSound("zombie_transform", this.x, this.y)) : Sound_1.Sound.playSound("human_transform", this.x, this.y), this.hp = this.maxHP
                        }, Player.prototype.getCured = function() {
                            this === this.game.playingPlayer && (this.game.playingPlayerIsZombie = !1), this.lastZombieToHumanTransformation = this.game.ticksCounter, this.isHumanZombie = !1, this.weapon = Weapons_1.weapons[0], this.team = 1, this.armor = 0, this.hat = this.originalHat, this.handsOffset = 0, this.isBoss && (this.isBoss = !1);
                            var el = document.getElementById("tr_" + this.id);
                            el && document.getElementById("statsTable1").appendChild(el), this === this.game.playingPlayer && (this.game.resetPlayingPlayerStats(), this.game.playingPlayerAbilities = config_1.playerData && config_1.playerData.authLevel >= 6 ? config_1.playerData.abilities : (0, Abilities_1.getDefaultAbilityObj)(Abilities_1.abilities), this.game.setActiveAbilities(), this.game.playingPlayerEnergy = Data_1.CONST.START_ENERGY)
                        }, Player.prototype.turnZombie = function(noHpSet) {
                            this === this.game.playingPlayer && (this.game.playingPlayerIsZombie = !0), this.isHumanZombie = !0, noHpSet || (this.hp = this.maxHP), this.hpRegeneration = this.game.type.zombieHpRegeneration || 0, this.energyRegeneration = this.game.type.zombieEnergyReg || 0, this.weapon = Weapons_1.weapons[12], this.armor = 0, this.team = 2, this.hat = {
                                name: "Zombie",
                                offset: 23,
                                legs: 10,
                                quality: "Common"
                            }, this.handsOffset = 256, this === this.game.playingPlayer && (this.game.playingPlayerEnergy = 1 === this.soulLvl ? 100 : Data_1.CONST.START_ENERGY);
                            var el = document.getElementById("tr_" + this.id);
                            el && document.getElementById("statsTable2").appendChild(el), this === this.game.playingPlayer && (this.game.playingPlayerAbilities = (0, Abilities_1.getDefaultZombieAbilityObj)(config_1.playerData && config_1.playerData.authLevel >= 6 ? config_1.playerData.abilities : (0, Abilities_1.getDefaultAbilityObj)(Abilities_1.abilities), Abilities_1.abilities), this.game.setActiveAbilities())
                        }, Player.prototype.turnHuman = function() {
                            this === this.game.playingPlayer && (this.game.playingPlayerIsZombie = !1), this.isHumanZombie = !1, this.weapon = Weapons_1.weapons[0], this.team = 1, this.resetCooldowns(), this.hat = this.originalHat, this.handsOffset = 0;
                            var el = document.getElementById("tr_" + this.id);
                            el && document.getElementById("statsTable1").appendChild(el), this === this.game.playingPlayer && (this.game.playingPlayerAbilities = config_1.playerData && config_1.playerData.authLevel >= 6 ? config_1.playerData.abilities : (0, Abilities_1.getDefaultAbilityObj)(Abilities_1.abilities), this.game.setActiveAbilities())
                        }, Player.prototype.resetCooldowns = function() {
                            this.weapon && this.weaponCooldowns[this.weapon.id] > 0 && this.weapon.cooldown && (this.weaponCooldowns[this.weapon.id] = this.weapon.cooldown), this.weapon && this.weaponCooldowns2[this.weapon.id] > 0 && this.weapon.cooldown2 && (this.weaponCooldowns2[this.weapon.id] = this.weapon.cooldown2), this.stopReloadSound()
                        }, Player.prototype.stopReloadSound = function() {
                            this.reloadSound2 && this.reloadSound2.pause && (this.reloadSound2.pause(), this.reloadSound2.currentTime = 0, this.reloadSound2 = null)
                        }, Player.prototype.hpUpdate = function(hp, armor, splash) {
                            var newHP = hp,
                                newArmor = armor,
                                diff = this.hp - newHP + (this.armor - newArmor);
                            this.hp = newHP, this.armor = newArmor, this.game.playingPlayer === this && (this.game.redScreen = 5 * Math.min(diff, 100)), !splash && diff > 9.9 && diff < 10.1 && this.lastShieldActivated <= this.game.ticksCounter && this.lastShieldActivated + Abilities_1.abilities[16].duration >= this.game.ticksCounter && (this.lastShieldHit = this.game.ticksCounter, Sound_1.Sound.playSound("shield_hit", this.x, this.y), this.hitUntil = -999, this.lastHit = -999)
                        }, Player.prototype.performLifesteal = function(amount) {
                            if (amount = Math.min(amount, 300), this.hp = Math.min(this.maxHP, this.hp + amount), this.lastLifeSteal = this.game.ticksCounter, this.x + 3 >= this.game.cameraX && this.y + 3 >= this.game.cameraY && this.x - 3 <= this.game.cameraX2 && this.y - 3 <= this.game.cameraY2 && !this.game.fastForward)
                                for (var i = 0; i < amount; i += 5) new Sprite_1.Sprite(this.game, {
                                    x: this.x + .5 * Math.random() - .25,
                                    y: this.y + .5 + .5 * Math.random(),
                                    img: Img_1.imgCoords.healRed,
                                    scaleFunction: function(age) {
                                        return (this.ticksToLive - age) / this.ticksToLive * 2
                                    },
                                    age: 10 * Math.random() + 35,
                                    r1: .1 * Math.random() - .05,
                                    xFunction: function(age) {
                                        return Math.pow(age, .7) * this.r1
                                    },
                                    zFunction: function(age) {
                                        return 1.4 + .02 * age
                                    }
                                })
                        }, Player.prototype.disableAbility = function(ab) {
                            ab.type === Abilities_1.AbilityType.Invis ? (this.isInvisible = !1, this.x + 3 >= this.game.cameraX && this.y + 3 >= this.game.cameraY && this.x - 3 <= this.game.cameraX2 && this.y - 3 <= this.game.cameraY2 && (this.game.createPoundSmoke(this.x, this.y + .5, .5, 9, .4), Sound_1.Sound.playSound("invis2", this.x, this.y))) : ab.type === Abilities_1.AbilityType.Playdead && (this.unturnCorpseTill = this.game.ticksCounter + ab.duration2, this.isFakeCorpse = !1)
                        }, Player.prototype.die = function(projectile, murderWeaponId, objX, objY, objAOE, killer, obj, startX, startY, vecX, vecY, vecH) {
                            if (this.dieAt = this.game.ticksCounter, this.finallyRemoveAt = this.game.ticksCounter + 100, this.lastKiller = null != killer ? killer : null, this.game.redFlag && this.game.redFlag.carriedBy === this && (this.game.addToObjectsToDraw(this.game.redFlag), this.game.redFlag.carriedBy = null, this.game.redFlag.isActive = !0, this.game.getFieldPath(Math.floor(this.x), Math.floor(this.y)) >= 10 ? (this.game.redFlag.currentX = this.x, this.game.redFlag.currentY = this.y) : (this.game.redFlag.currentX = this.game.redFlag.x, this.game.redFlag.currentY = this.game.redFlag.y, this.game.playingPlayer && 1 === this.game.playingPlayer.team ? this.game.interface_.setMainKillMsg(lang_1.lang.get("game.msg.flag.self_resetted"), "#36FF36", "textInGreen") : this.game.interface_.setMainKillMsg(lang_1.lang.get("game.msg.flag.enemy_resetted"), "#FF3232", "textInRed"), Sound_1.Sound.playSound("frag1", void 0, void 0, .68))), this.game.blueFlag && this.game.blueFlag.carriedBy === this && (this.game.addToObjectsToDraw(this.game.blueFlag), this.game.blueFlag.carriedBy = null, this.game.blueFlag.isActive = !0, this.game.getFieldPath(Math.floor(this.x), Math.floor(this.y)) >= 10 ? (this.game.blueFlag.currentX = this.x, this.game.blueFlag.currentY = this.y) : (this.game.blueFlag.currentX = this.game.blueFlag.x, this.game.blueFlag.currentY = this.game.blueFlag.y, this.game.playingPlayer && 2 === this.game.playingPlayer.team ? this.game.interface_.setMainKillMsg(lang_1.lang.get("game.msg.flag.self_resetted"), "#36FF36", "textInGreen") : this.game.interface_.setMainKillMsg(lang_1.lang.get("game.msg.flag.enemy_resetted"), "#FF3232", "textInRed"), Sound_1.Sound.playSound("frag1", void 0, void 0, .68))), this.game.playingPlayer && this.game.redFlag && this.game.redFlag.carriedBy === this && (this === this.game.playingPlayer || (this.team === this.game.playingPlayer.team ? (this.game.interface_.setMainKillMsg(lang_1.lang.get("game.msg.flag.enemy_dropped", {
                                    playerName: this.name
                                }), "#FF3232", "textInRed"), Sound_1.Sound.playSound("frag1", void 0, void 0, .68)) : (this.game.interface_.setMainKillMsg(lang_1.lang.get("game.msg.flag.self_dropped", {
                                    playerName: this.name
                                }), "#36FF36", "textInGreen"), Sound_1.Sound.playSound("frag1", void 0, void 0, .68)))), this.game.targetLockedPlayer === this && (this.game.targetLockedPlayer = null), this.game.playingPlayer === this && this.game.resetPlayingPlayerStats(), murderWeaponId && Weapons_1.weapons[murderWeaponId] && Weapons_1.weapons[murderWeaponId].flameDeath && (this.flameDeath = !0), void 0 === startX || void 0 === startY || void 0 === vecX || void 0 === vecY || void 0 === vecH || isNaN(vecH)) {
                                var vec = (0, functions_1.createBounce)(this, projectile, objX, objY, objAOE, killer, null == obj ? void 0 : obj.object.noBounce, void 0 !== murderWeaponId && Weapons_1.weapons[murderWeaponId] ? Weapons_1.weapons[murderWeaponId].flameDeath : void 0, this.weapon);
                                this.bouncePoints = (0, functions_1.createBounce2)(this.x, this.y, vec.x, vec.y, vec.z, this.game), vec.sound in Data_1.soundLinks && Sound_1.Sound.playSound(vec.sound, this.x, this.y, vec.volume)
                            } else this.bouncePoints = (0, functions_1.createBounce2)(startX, startY, vecX, vecY, vecH, this.game), this.noCorpseBounce = !0
                        }, Player.prototype.isShootable = function() {
                            var wID = this.weapon.id;
                            return this.z <= .6 && this.weaponCooldowns[wID] <= 0 && (this.weaponCooldowns2[wID] <= 0 || this.weaponCooldowns2[wID] >= this.weapon.cooldown2) && this.game.noShootUntil < this.game.ticksCounter
                        }, Player.prototype.getTeamColor = function() {
                            return teamColors[this.team]
                        }, Player.prototype.carriesFlag = function() {
                            return null !== this.game.redFlag && this.game.redFlag.carriedBy === this || null !== this.game.blueFlag && this.game.blueFlag.carriedBy === this
                        }, Player.prototype.update = function() {
                            if (this.removeAt && this.removeAt <= this.game.ticksCounter) return !1;
                            if (this.dieAt) {
                                if (this.dieAt + 40 === this.game.ticksCounter && this.isInvisible && this.disableAbility(Abilities_1.abilities[4]), this.dieAt + 20 === this.game.ticksCounter && this.game.playingPlayer === this && (!this.game.type.coopZombieMode || this.game.type.convertTime > this.game.ticksCounter || this.isHumanZombie) && UI_1.UI.showDeathScreen(this.lastKiller instanceof Player ? this.lastKiller.name : ""), this.flameDeath) {
                                    var timeDead = this.game.ticksCounter - this.dieAt,
                                        pos = Math.floor(timeDead / 5);
                                    pos > this.path.length - 2 ? (this.updateBounce(), this.flameDeathAndNowBouncing = !0) : (this.x0 = this.x, this.y0 = this.y, this.x = this.path[pos].x + (this.path[pos + 1].x - this.path[pos].x) * (timeDead / 5 % 1), this.y = this.path[pos].y + (this.path[pos + 1].y - this.path[pos].y) * (timeDead / 5 % 1), this.direction = (0, functions_2.getDirectionFromAgle)(this.x0, this.y0, this.x, this.y), this.direction2 = this.direction), this.game.ticksCounter % 3 == 1 && this.x + 3 >= this.game.cameraX && this.y + 3 >= this.game.cameraY && this.x - 3 <= this.game.cameraX2 && this.y - 3 <= this.game.cameraY2 && !this.game.fastForward && (new Sprite_1.Sprite(this.game, {
                                        x: this.x + .6 * Math.random() - .3,
                                        y: this.y + .6 * Math.random() - .3,
                                        img: Img_1.imgCoords["fire" + (Math.floor(4 * Math.random()) + 1)],
                                        scaleFunction: function(age) {
                                            return Math.max(.75 - age / 20, 0) * this.r1
                                        },
                                        alphaFunction: function(age) {
                                            return Math.max(.75 - age / 20, 0)
                                        },
                                        r1: 3 + 1 * Math.random(),
                                        zFunction: function(age) {
                                            return .1 * age
                                        }
                                    }), new Sprite_1.Sprite(this.game, {
                                        x: this.x + .6 * Math.random() - .3,
                                        y: this.y + .6 * Math.random() - .3,
                                        img: Img_1.imgCoords.dust1,
                                        scaleFunction: function(age) {
                                            return Math.max(.75 - age / 70, 0) * this.r1
                                        },
                                        alphaFunction: function(age) {
                                            return Math.max(.4 - age / 90, 0)
                                        },
                                        r1: 3 + 1 * Math.random(),
                                        zFunction: function(age) {
                                            return .1 * age
                                        }
                                    }), new Sprite_1.Sprite(this.game, {
                                        x: this.x,
                                        y: this.y - .5,
                                        img: Img_1.imgCoords.light_yellow,
                                        scaleFunction: function(age) {
                                            return 4 * Math.max(1 - age / 30, 0)
                                        },
                                        alphaFunction: function(age) {
                                            return .16 * Math.max(1 - age / 25, 0)
                                        }
                                    }))
                                } else this.updateBounce();
                                if (this.dieAt && this.game.playingPlayer === this) {
                                    var timeTillRespawn = Math.floor((this.dieAt + Data_1.CONST.PLAYER_RESPAWN_DELAY - this.game.ticksCounter) / 20 * 10) / 10;
                                    UI_1.UI.countDownDeath(timeTillRespawn)
                                }
                            } else this.bouncePoints.length > 0 ? this.updateBounce() : this.weapon && this.switchWeaponUntil <= this.game.ticksCounter && (this.weaponCooldowns[this.weapon.id]--, this.isReloading && (this.weaponCooldowns2[this.weapon.id]--, this.weaponCooldowns2[this.weapon.id] < 0 && (this.isReloading = !1, this.stopReloadSound())));
                            if (!this.dieAt && (this.z0 = this.z, this.z > 0 && (this.z = Math.max(this.z + this.vz, 0), this.vz -= Data_1.CONST.GRAVITY, this.z <= 0 && (this.zNegative = -.001, this.zNegative0 = 0, this.vzNegative = Math.max(.9 * this.vz, -.38))), (this.zNegative < 0 || this.zNegative0 < 0) && (this.zNegative0 = this.zNegative, this.zNegative += this.vzNegative, this.vzNegative += .15, this.zNegative > 0 && (this.zNegative = 0), this.zNegative0 > 0 && (this.zNegative0 = 0)), this.spillBloodFromMeleeAttack(), this.isHumanZombie && this === this.game.playingPlayer && this.game.ticksCounter % 20 == 13)) {
                                for (var bestDist = 999999, bestPlayer = null, i = 0; i < this.game.players.length; i++) {
                                    var p = this.game.players[i];
                                    if (!p.dieAt && !p.isHumanZombie) {
                                        var dist = Math.sqrt(Math.pow(p.x - this.x, 2) + Math.pow(p.y - this.y, 2));
                                        dist < bestDist && dist > 10 && (bestDist = dist, bestPlayer = p)
                                    }
                                }
                                this.nextPlayer = bestPlayer
                            }
                            if (this.weapon === Weapons_1.weapons[2] && this.lastTickFire + 7 > this.game.ticksCounter) {
                                var volume = .7 * Math.min((this.lastTickFire + 7 - this.game.ticksCounter) / 5, 1);
                                this.flameSound ? (this.flameSound.volume = Math.max(volume * Sound_1.Sound.getVolumeModifier(this.game, this.x, this.y), 0) * config_1.options.sound_volume, this.lastTimeFlameSoundStarted + 5300 < Date.now() && (this.flameSound = Sound_1.Sound.playSound("flamethrower", this.x, this.y, volume), this.lastTimeFlameSoundStarted = Date.now())) : (this.flameSound = Sound_1.Sound.playSound("flamethrower", this.x, this.y, volume), this.lastTimeFlameSoundStarted = Date.now())
                            } else this.flameSound && (this.flameSound.pause(), this.flameSound.currentTime = 0, this.flameSound = null);
                            if (!this.dieAt && 0 === this.bouncePoints.length && this.lastPosUpdate < this.game.ticksCounter) {
                                Math.sqrt(Math.pow(this.x - this.x0, 2) + Math.pow(this.y - this.y0, 2)) < .005 && (this.x0 = this.x, this.y0 = this.y);
                                var x0 = this.x,
                                    y0 = this.y;
                                this.x += this.x - this.x0, this.y += this.y - this.y0, this.x0 = x0, this.y0 = y0, this.z <= 0 && (this.x !== this.x0 || this.y !== this.y0) && this.stepOffset === this.game.ticksCounter % 5 && Sound_1.Sound.playSound("step", this.x, this.y, .65)
                            }
                            if (this.game.type.coopZombieMode && this.isInvisible && 1 == this.game.ticksCounter % 20) {
                                for (var _i = 0, _a = this.game.players; _i < _a.length; _i++) {
                                    var p_1 = _a[_i];
                                    (p_1.team !== this.team || 0 === this.team) && p_1 !== this && Math.sqrt(Math.pow(p_1.x - this.x, 2) + Math.pow(p_1.y - this.y, 2)) < 3 && (this.noInvisUntil = this.game.ticksCounter + 40)
                                }
                                for (var _b = 0, _c = this.game.zombies; _b < _c.length; _b++) {
                                    var z = _c[_b];
                                    z.team !== this.team && Math.sqrt(Math.pow(z.x - this.x, 2) + Math.pow(z.y - this.y, 2)) < 3 && (this.noInvisUntil = this.game.ticksCounter + 40)
                                }
                            }
                            return this.hp = Math.min(this.hp + this.hpRegeneration, this.maxHP), !0
                        }, Player.prototype.setElo = function(count, x, y) {
                            var oldElo = this.elo;
                            this.elo = count;
                            var diff = this.elo - oldElo;
                            return rankInGame_1.rankInGame.refreshPlayer(this), this === this.game.playingPlayer && diff > 0 && void 0 !== x && void 0 !== y && this.game.floatingTexts.push(new FloatingText_1.FloatingText(this.game, "+" + diff, x, y - .6, 1700, 1, "#B4B7B8", 6 * this.game.SCALE_FACTOR)), diff
                        }, Player.prototype.setKills = function(count) {
                            this === this.game.playingPlayer && this.isHumanZombie && count === this.kills + 1 && this.game.playingPlayerZombieKillStreak++, this.kills = count, rankInGame_1.rankInGame.refreshPlayer(this)
                        }, Player.prototype.setDeaths = function(count) {
                            this.deaths = count, this === this.game.playingPlayer && this.isHumanZombie && (this.game.playingPlayerZombieKillStreak = 0), rankInGame_1.rankInGame.refreshPlayer(this)
                        }, Player.prototype.setSouls = function(count, x, y) {
                            var diff = count - this.souls;
                            this.souls = count, this.soulLvl = (0, Data_1.getLvlFromSouls)(count), this === this.game.playingPlayer && diff > 0 && void 0 !== x && void 0 !== y && this.game.floatingTexts.push(new FloatingText_1.FloatingText(this.game, "+" + diff, x, y - 1.6, 1700, 1, "#B4B7B8", 6 * this.game.SCALE_FACTOR, Img_1.imgCoords.souls)), this === this.game.playingPlayer && 0 !== diff && this.game.interface_.refreshSouls(this.souls), rankInGame_1.rankInGame.refreshPlayer(this)
                        }, Player.prototype.createAtributeEffect = function() {
                            if (this.lightPillarsTop.length = 0, this.lightPillarsBottom.length = 0, this.x + 5 >= this.game.cameraX && this.y + 5 >= this.game.cameraY && this.x - 5 <= this.game.cameraX2 && this.y - 5 <= this.game.cameraY2 && !this.game.fastForward) {
                                for (var i = 0; i < 2 * Math.PI; i += .4 + .15 * Math.random())(i <= Math.PI ? this.lightPillarsBottom : this.lightPillarsTop).push({
                                    x: .45 * Math.sin(i) + this.x,
                                    y: .45 * Math.cos(i) + this.y,
                                    w: .15 + .3 * Math.random(),
                                    h: 1.5 * Math.random(),
                                    vh: .05 + .1 * Math.random(),
                                    vw: .01 * Math.random(),
                                    age_offset: 8 * Math.random() - 4,
                                    img: Img_1.imgCoords.pillar_of_light_yellow
                                });
                                for (var k = 0; k < 8; k++) {
                                    var randomAngle = Math.random() * Math.PI * 2,
                                        rand = .7 * Math.random();
                                    new Sprite_1.Sprite(this.game, {
                                        x: this.x + Math.cos(randomAngle) * rand,
                                        y: this.y - this.game.SHOT_HEIGHT + Math.sin(randomAngle) * rand,
                                        img: Img_1.imgCoords.particleWhite,
                                        scaleFunction: function(age) {
                                            return this.r1
                                        },
                                        r1: 2 * Math.random() + 2,
                                        r2: .09 * Math.random(),
                                        zFunction: function(age) {
                                            return age * this.r2
                                        },
                                        age: 21
                                    })
                                }
                                new Sprite_1.Sprite(this.game, {
                                    x: this.x,
                                    y: this.y,
                                    img: Img_1.imgCoords.light_white,
                                    scaleFunction: function(age) {
                                        return 5 * Math.max(0, 1 - age / this.ticksToLive * .6)
                                    },
                                    alphaFunction: function(age) {
                                        return .04 * Math.max(3.7 * (-1 * (1 / ((.9 * age - 125) / 500 + .31) + age / 4) + 16.9), 0)
                                    },
                                    age: 40
                                }), Sound_1.Sound.playSound("att_up", this.x, this.y, .85), this.lastSpawnTick = this.game.ticksCounter - 8
                            }
                        }, Player.prototype.createLvlUpEffect = function() {
                            if (this.lightPillarsTop.length = 0, this.lightPillarsBottom.length = 0, this.x + 5 >= this.game.cameraX && this.y + 5 >= this.game.cameraY && this.x - 5 <= this.game.cameraX2 && this.y - 5 <= this.game.cameraY2 && !this.game.fastForward) {
                                this.game.playingPlayer === this && this.game.floatingTexts.push(new FloatingText_1.FloatingText(this.game, "+" + Data_1.CONST.CRYSTALS_PER_SOULS_LVL, this.x, this.y - 1, 1700, 1, "#5cc3ef", 6 * this.game.SCALE_FACTOR, Img_1.imgCoords.crystals));
                                for (var i = 0; i < 2 * Math.PI; i += .25 + .1 * Math.random())(i <= Math.PI ? this.lightPillarsBottom : this.lightPillarsTop).push({
                                    x: .6 * Math.sin(i) + this.x,
                                    y: .6 * Math.cos(i) + this.y,
                                    w: .15 + .3 * Math.random(),
                                    h: 1.5 * Math.random(),
                                    vh: .05 + .1 * Math.random(),
                                    vw: .01 * Math.random(),
                                    age_offset: 8 * Math.random() - 4,
                                    img: Img_1.imgCoords.pillar_of_light_blue
                                });
                                for (var k = 0; k < 12; k++) {
                                    var randomAngle = Math.random() * Math.PI * 2,
                                        rand = .7 * Math.random();
                                    new Sprite_1.Sprite(this.game, {
                                        x: this.x + Math.cos(randomAngle) * rand,
                                        y: this.y - this.game.SHOT_HEIGHT + Math.sin(randomAngle) * rand,
                                        img: Img_1.imgCoords.particleWhite,
                                        scaleFunction: function(age) {
                                            return this.r1
                                        },
                                        r1: 2 * Math.random() + 2,
                                        r2: .09 * Math.random(),
                                        zFunction: function(age) {
                                            return age * this.r2
                                        },
                                        age: 26
                                    })
                                }
                                new Sprite_1.Sprite(this.game, {
                                    x: this.x,
                                    y: this.y,
                                    img: Img_1.imgCoords.light_white,
                                    scaleFunction: function(age) {
                                        return 5 * Math.max(0, 1 - age / this.ticksToLive * .6)
                                    },
                                    alphaFunction: function(age) {
                                        return .04 * Math.max(3.7 * (-1 * (1 / ((.9 * age - 125) / 500 + .31) + age / 4) + 16.9), 0)
                                    },
                                    age: 44
                                }), new Sprite_1.Sprite(this.game, {
                                    x: this.x,
                                    y: this.y,
                                    img: Img_1.imgCoords.light_white,
                                    scaleFunction: function(age) {
                                        return 5 * Math.max(0, 1 - age / this.ticksToLive * .7)
                                    },
                                    alphaFunction: function(age) {
                                        return .1 * Math.max(3.7 * (-1 * (1 / ((.9 * age - 125) / 500 + .31) + age / 4) + 16.9), 0)
                                    },
                                    age: 60
                                }), this.lastSpawnTick = this.game.ticksCounter, Sound_1.Sound.playSound("lvl_up", this.x, this.y, this === this.game.playingPlayer ? 1 : .5)
                            }
                        }, Player.prototype.playFragSound = function(multiKillCount, volume) {
                            var fragSoundVolume = .68 * (volume || 1);
                            Data_1.multiKills[multiKillCount] && (Sound_1.Sound.playSound(Data_1.multiKills[multiKillCount].sound, void 0, void 0, 1), fragSoundVolume = .5), Sound_1.Sound.playSound("frag" + Math.min(multiKillCount, 5), void 0, void 0, fragSoundVolume)
                        }, Player.prototype.refShieldHit = function(projectile, timesReflected) {
                            projectile.timesShieldReflected = timesReflected, Sound_1.Sound.playSound("shield_hit", this.x, this.y), Sound_1.Sound.playSound("reflect", this.x, this.y), Sound_1.Sound.playSound("reflect", this.x, this.y), this.lastShieldHit = this.game.ticksCounter, new PlasmaShield_1.PlasmaShield(this.game, projectile.x, projectile.y, projectile.x + projectile.vecX, projectile.y + projectile.vecY, 2), new PlasmaShield_1.PlasmaShield(this.game, projectile.x, projectile.y, projectile.x + projectile.vecX, projectile.y + projectile.vecY, 1.5), new PlasmaShield_1.PlasmaShield(this.game, projectile.x, projectile.y, projectile.x + projectile.vecX, projectile.y + projectile.vecY, 1.1)
                        }, Player.prototype.isAlliedWith = function(player) {
                            return this === player || this.team === player.team && this.team >= 1
                        }, Player.prototype.draw = function(exactTicks, x1, y1, x2, y2, percentageOfCurrentTickPassed) {
                            if (this.x + 3 >= x1 && this.y + 3 >= y1 && this.x - 3 <= x2 && this.y - 3 <= y2 && !this.noDraw) {
                                (this.laserHitUntil >= exactTicks || this.hitUntil >= exactTicks) && (percentageOfCurrentTickPassed = 0, exactTicks = this.lastHit);
                                var c = this.game.ctx,
                                    scale = 1.4 * this.game.SCALE_FACTOR,
                                    frame = 0;
                                this.isHumanZombie && this.soulLvl > 1 && (scale *= Math.pow(1.018, this.soulLvl - 1));
                                var x = (this.x0 + percentageOfCurrentTickPassed * (this.x - this.x0) - this.game.cameraX) * this.game.FIELD_SIZE,
                                    y = (this.y0 + percentageOfCurrentTickPassed * (this.y - this.y0) - this.game.cameraY) * this.game.FIELD_SIZE,
                                    h = (this.z0 + percentageOfCurrentTickPassed * (this.z - this.z0)) * this.game.FIELD_SIZE,
                                    x_ = x - 16 * scale,
                                    y_ = y - 20 * scale,
                                    x_recoiled = 0,
                                    y_recoiled = 0,
                                    wpn_offset = 0,
                                    weapon = null,
                                    bounce = !1,
                                    blackness = 0,
                                    whiteness = 0,
                                    invisAlpha = 1,
                                    isHumanZombie = this.isHumanZombie,
                                    lastTickFire = this.lastTickFire,
                                    hat = this.hat,
                                    team = this.team,
                                    zHead = !this.dieAt && this.z <= 0 ? -(this.zNegative0 + percentageOfCurrentTickPassed * (this.zNegative - this.zNegative0)) * this.game.FIELD_SIZE * .25 : 0,
                                    isInvisible = this.isInvisible;
                                if (isInvisible && (invisAlpha = this.noInvisUntil >= this.game.ticksCounter ? .6 : !this.game.playingPlayer || this.isAlliedWith(this.game.playingPlayer) ? .3 : this.game.showEnemiesOnMinimapUntil >= this.game.ticksCounter ? .185 : this.game.playingPlayer && this.game.playingPlayer.zombieSense && Math.sqrt(Math.pow(this.x - this.game.playingPlayer.x, 2) + Math.pow(this.y - this.game.playingPlayer.y, 2)) < 10 ? .4 : .086), this.game.playingPlayer && this.game.bushArray[Math.floor(this.x)] && this.game.bushArray[Math.floor(this.x)][Math.floor(this.y)] && (this.isAlliedWith(this.game.playingPlayer) ? this.game.playingPlayer === this && (invisAlpha = .56) : (invisAlpha = .076, isInvisible = !0, this.game.bushArray[Math.floor(this.game.playingPlayer.x)] && this.game.bushArray[Math.floor(this.game.playingPlayer.x)][Math.floor(this.game.playingPlayer.y)] && Math.sqrt(Math.pow(this.game.playingPlayer.x - this.x, 2) + Math.pow(this.game.playingPlayer.y - this.y, 2)) <= Data_1.CONST.BUSH_VISION_RANGE && (invisAlpha = .55))), this.flameDeath && !this.flameDeathAndNowBouncing) {
                                    var timeDead = exactTicks - this.dieAt;
                                    blackness = Math.min(timeDead / 50, .9), h = 0, timeDead < 10 * (this.path.length - 1) && (frame = Math.floor(.6 * exactTicks % 8))
                                } else if (this.dieAt || this.bouncePoints.length > 0) this.x !== this.x0 ? this.direction = this.x > this.x0 ? 0 : 2 : 2 !== this.direction && 0 !== this.direction && (this.direction = 2), frame = this.z >= this.z0 || this.z < .1 ? 1 : 0, bounce = !0;
                                else {
                                    var shiftX = 0,
                                        shiftY = 0;
                                    if (this.z <= 0) {
                                        var shift = this.game.shiftArray[Math.floor(this.x)] ? this.game.shiftArray[Math.floor(this.x)][Math.floor(this.y)] : null;
                                        shift && shift[0] && (shiftX = shift[0]), shift && shift[1] && (shiftY = shift[1])
                                    }
                                    if (Math.abs(this.x0 + shiftX - this.x) > .01 || Math.abs(this.y0 + shiftY - this.y) > .01) {
                                        this.direction = (0, functions_2.getDirectionFromAgle)(this.x0, this.y0, this.x, this.y);
                                        var dist_1 = Math.sqrt(Math.pow(this.x - this.x0, 2) + Math.pow(this.y - this.y0, 2));
                                        this.game.ticksCounter > 0 && (this.z > 0 ? this.legFrame += .125 * this.game.exactTickDiff : this.legFrame += .6 * this.game.exactTickDiff * (dist_1 / .202)), frame = Math.floor(this.legFrame) % 8, this.game.tickDiff > 0 && this.game.ticksCounter >= 0 && (this.game.ticksCounter + this.smokeTimeOffset) % 6 == 1 && !this.game.fastForward && new Sprite_1.Sprite(this.game, {
                                            x: this.x + .6 * Math.random() - .3,
                                            y: this.y + .6 * Math.random() - .3,
                                            img: Img_1.imgCoords.dust1,
                                            scaleFunction: function(age) {
                                                return this.r1 - .01 * age
                                            },
                                            r1: Math.random() + .75,
                                            alphaFunction: function(age) {
                                                return .23 * Math.max(0, 1 - age / this.ticksToLive)
                                            },
                                            age: 20 * (1.7 + Math.random()),
                                            r2: 40 * Math.random() + 32,
                                            zFunction: function(age) {
                                                return age / this.r2
                                            }
                                        })
                                    } else this.direction = 0, frame = 3;
                                    if (this === this.game.playingPlayer && this.game.ticksCounter >= 0 && !root_1.root.leavingGame && this.lastDeathToZombieTransformation + 40 < exactTicks && this.lastHumanToZombieTransformation + 40 < exactTicks && !this.isFakeCorpse) {
                                        var newdirection2 = (0, functions_2.getDirectionFromAgle)(x, y, Input_1.Input.x, Input_1.Input.y);
                                        newdirection2 !== this.direction2 && (this.direction2 = newdirection2, Network_1.Network.send("dirU$" + this.direction2))
                                    }
                                    var switchTimer = (exactTicks + Data_1.CONST.WPN_SWITCH_TICKS - this.switchWeaponUntil) / Data_1.CONST.WPN_SWITCH_TICKS;
                                    if (weapon = this.weapon, switchTimer < .17 ? (weapon = this.lastWeapon, wpn_offset = 70 * switchTimer) : switchTimer < .83 ? weapon = null : switchTimer < 1 && (wpn_offset = 70 * -(-1 + switchTimer)), isHumanZombie && (weapon = null), lastTickFire >= exactTicks - 8) {
                                        x_recoiled = x - Input_1.Input.x, y_recoiled = y - Input_1.Input.y;
                                        var len = Math.sqrt(x_recoiled * x_recoiled + y_recoiled * y_recoiled),
                                            len2 = .2 - Math.min(.09 * Math.max(exactTicks - lastTickFire - (weapon && weapon.recoilTime ? weapon.recoilTime : 3), 0), .2);
                                        x_recoiled *= len2 * this.game.FIELD_SIZE / len, y_recoiled *= len2 * this.game.FIELD_SIZE / len, this.weapon && this.weapon.recoil && (x_recoiled *= this.weapon.recoil, y_recoiled *= this.weapon.recoil)
                                    }
                                }
                                var wpn_nr = weapon && weapon.frames && lastTickFire + 4 > exactTicks ? Math.floor(exactTicks / weapon.cooldown) % weapon.frames + weapon.frame : weapon ? weapon.frame : 0;
                                this.flameDeathAndNowBouncing && (blackness = .9), this.hitUntil >= exactTicks && (whiteness = Math.random() < .5 ? .95 : .1);
                                var direction = this.direction,
                                    direction2 = this.direction2;
                                this.laserHitUntil >= exactTicks && (whiteness = .95, weapon = null, direction = this.lockDirection, direction2 = this.lockDirection2);
                                var vanishingAlpha = this.getVanishingAlpha(),
                                    nzOffset = 0,
                                    standTime = this.standTime,
                                    requiredStandTime = this.weapon.requiredStandTime;
                                if (standTime && !this.dieAt && (nzOffset = Math.min((standTime + percentageOfCurrentTickPassed) / requiredStandTime, 1), frame = Math.floor(2 * nzOffset), direction = 8, nzOffset *= 2 * this.game.SCALE_FACTOR), this.nextPlayer && this === this.game.playingPlayer) {
                                    var a = (0, functions_2.getAngle)(this.x, this.y, this.nextPlayer.x, this.nextPlayer.y),
                                        dist = 1 + Math.max(.1 * this.game.ticksCounter, 0) % 1 * .3;
                                    c.fillStyle = "rgba(0, 0, 0, " + (.4 + .2 * Math.sin(.3 * exactTicks)) + ")", c.beginPath(), c.moveTo(x + Math.cos(a) * (dist + .4) * this.game.FIELD_SIZE, y + Math.sin(a) * (dist + .4) * this.game.FIELD_SIZE + .1 * this.game.FIELD_SIZE), c.lineTo(x + Math.cos(a - .15) * dist * this.game.FIELD_SIZE, y + Math.sin(a - .15) * dist * this.game.FIELD_SIZE + .1 * this.game.FIELD_SIZE), c.lineTo(x + Math.cos(a + .15) * dist * this.game.FIELD_SIZE, y + Math.sin(a + .15) * dist * this.game.FIELD_SIZE + .1 * this.game.FIELD_SIZE), c.lineTo(x + Math.cos(a) * (dist + .4) * this.game.FIELD_SIZE, y + Math.sin(a) * (dist + .4) * this.game.FIELD_SIZE + .1 * this.game.FIELD_SIZE), c.closePath(), c.fill(), c.fillStyle = "rgba(255, 255, 255, " + (.4 + .2 * Math.sin(.3 * exactTicks)) + ")", c.beginPath(), c.moveTo(x + Math.cos(a) * (dist + .4) * this.game.FIELD_SIZE, y + Math.sin(a) * (dist + .4) * this.game.FIELD_SIZE), c.lineTo(x + Math.cos(a - .15) * dist * this.game.FIELD_SIZE, y + Math.sin(a - .15) * dist * this.game.FIELD_SIZE), c.lineTo(x + Math.cos(a + .15) * dist * this.game.FIELD_SIZE, y + Math.sin(a + .15) * dist * this.game.FIELD_SIZE), c.lineTo(x + Math.cos(a) * (dist + .4) * this.game.FIELD_SIZE, y + Math.sin(a) * (dist + .4) * this.game.FIELD_SIZE), c.closePath(), c.fill()
                                }
                                this.weapon === Weapons_1.weapons[2] && lastTickFire + 2 >= exactTicks && (c.globalAlpha = .4), c.globalAlpha *= vanishingAlpha * invisAlpha, c.drawImage(_1.imgs.shadow, x_, y_, 32 * scale, 32 * scale), c.globalAlpha = 1;
                                var age = exactTicks - this.lastSpawnTick;
                                if ((1 === team || 2 === team) && !this.isFakeCorpse) {
                                    var img_1 = 1 === this.team ? Img_1.imgCoords.light_red : Img_1.imgCoords.light_blue,
                                        lightAlpha = 1;
                                    isHumanZombie && (img_1 = Img_1.imgCoords.light_green, lightAlpha = .33);
                                    var scale2 = 3.5 * this.game.SCALE_FACTOR;
                                    c.globalAlpha = .3 * invisAlpha * lightAlpha, c.drawImage(_1.imgs.miscSheet, img_1.x, img_1.y, img_1.w, img_1.h, x - scale2 * img_1.w / 2, y - h - 12 * scale2, img_1.w * scale2, img_1.h * scale2), c.globalAlpha = 1
                                }
                                var frameOffset = this.hat.noShake ? 0 : frame % 2;
                                if (age < 25)
                                    for (var i = 0; i < this.lightPillarsTop.length; i++) this.updateAndDrawPillar(this.lightPillarsTop[i], age);
                                var flag = 1 === team ? this.game.blueFlag : this.game.redFlag,
                                    obj = 1 === team ? Img_1.imgCoords.blueFlag : Img_1.imgCoords.redFlag;
                                flag && flag.carriedBy === this && c.drawImage(_1.imgs.miscSheet, obj.x, obj.y, obj.w, obj.h, x - this.game.SCALE_FACTOR * obj.w / 2, y - h + nzOffset + zHead - frameOffset * this.game.SCALE_FACTOR / 2 - 38 * this.game.SCALE_FACTOR, obj.w * this.game.SCALE_FACTOR, obj.h * this.game.SCALE_FACTOR);
                                var reloadPerc = 0;
                                if (!wpn_offset && !x_recoiled && !y_recoiled && this.weapon && this.weaponCooldowns2[this.weapon.id] > 0 && this.weaponCooldowns2[this.weapon.id] < this.weapon.cooldown2 && 0 === this.bouncePoints.length && (reloadPerc = (this.weaponCooldowns2[this.weapon.id] - percentageOfCurrentTickPassed) / this.weapon.cooldown2), this.turnCorpseTill >= exactTicks) {
                                    var dir = this.direction2 % 2;
                                    return frame = 7 - Math.max(Math.min(Math.floor(7 * (this.turnCorpseTill - exactTicks) / 20), 7), 0), void c.drawImage(_1.imgs.zombieDeath, 32 * frame, 32 * dir, 32, 32, x_, y_ - h, 32 * scale, 32 * scale)
                                }
                                if (this.unturnCorpseTill >= exactTicks) {
                                    dir = this.direction2 % 2;
                                    return frame = Math.max(Math.min(Math.floor(7 * (this.unturnCorpseTill - exactTicks) / 20), 7), 0), void c.drawImage(_1.imgs.zombieDeath, 32 * frame, 32 * dir, 32, 32, x_, y_ - h, 32 * scale, 32 * scale)
                                }
                                if (this.isFakeCorpse) {
                                    dir = this.direction2 % 2;
                                    c.drawImage(_1.imgs.zombieDeath, 224, 32 * dir, 32, 32, x_, y_ - h, 32 * scale, 32 * scale)
                                } else {
                                    var normalDraw = !0;
                                    if (this.lastDeathToZombieTransformation + 40 > exactTicks) {
                                        var turnFrame = Math.max(Math.min(Math.floor(10 * (exactTicks - this.lastDeathToZombieTransformation) / 40), 10), 0);
                                        dir = this.direction2 % 2;
                                        c.globalAlpha = invisAlpha, c.drawImage(_1.imgs.turnZombie, 32 * turnFrame, 32 * dir, 32, 32, x_, y_ - h, 32 * scale, 32 * scale), c.globalAlpha = 1, normalDraw = !1, weapon = null, hat = this.originalHat, isHumanZombie = !1, turnFrame <= 5 && (c.globalAlpha = (5 - turnFrame) / 5, c.drawImage(_1.imgs.legs, 32 * (this.legFrame + 3), 256 + 288 * hat.legs, 32, 32, x_, y_ - h, 32 * scale, 32 * scale), hat.hatOnly && c.drawImage(_1.imgs.heads, 512 + 32 * this.legFrame, 0, 32, 32, x_, y_ - h, 32 * scale, 32 * scale), c.drawImage(_1.imgs.heads, 512 + 32 * this.legFrame, 32 * hat.offset, 32, 32, x_, y_ - h, 32 * scale, 32 * scale), c.globalAlpha = 1)
                                    } else if (this.lastHumanToZombieTransformation + 40 > exactTicks) {
                                        turnFrame = Math.max(Math.min(Math.floor(10 * (exactTicks - this.lastHumanToZombieTransformation) / 40), 10), 0);
                                        var turnDirection = this.x0 > this.x ? 0 : 1;
                                        c.globalAlpha = invisAlpha, c.drawImage(_1.imgs.turnZombie, 32 * turnFrame, 32 * (2 + turnDirection), 32, 32, x_, y_ - h, 32 * scale, 32 * scale), c.globalAlpha = 1, normalDraw = turnFrame <= 4, weapon = null, team = 1, hat = this.originalHat, isHumanZombie = !1
                                    } else if (this.lastZombieToHumanTransformation + 40 > exactTicks) {
                                        turnFrame = Math.max(Math.min(Math.floor(5 * (exactTicks - this.lastZombieToHumanTransformation) / 40), 5), 0);
                                        c.globalAlpha = invisAlpha, c.drawImage(_1.imgs.turnZombie, 32 * turnFrame, 128, 32, 32, x_, y_ - h, 32 * scale, 32 * scale), c.globalAlpha = 1, normalDraw = turnFrame <= 0, weapon = null, team = 1, hat = this.originalHat, isHumanZombie = !1
                                    } else if (this.turnedBossAt + 40 > exactTicks) {
                                        var img_2 = this.isHumanZombie ? _1.imgs.zombieBoss : _1.imgs.humanBoss,
                                            transFrame = Math.max(Math.min(Math.floor(7 * (exactTicks - this.turnedBossAt) / 40), 7), 0);
                                        c.drawImage(img_2, 45 * transFrame, 405, 45, 45, x - 22.5 * scale, y - 38 * scale - h + nzOffset - frame % 2 * scale / 2 + zHead, 45 * scale, 45 * scale), normalDraw = !1
                                    }
                                    if (normalDraw) {
                                        if (this.lastThrow + 7 < exactTicks) {
                                            if (weapon) {
                                                if (c.globalAlpha = invisAlpha, c.drawImage(_1.imgs.weaponsMinus, 32 * direction2 + (reloadPerc ? 256 : 0), 32 * wpn_nr, 32, 32, x_ + x_recoiled + Math.sin(frame * (Math.PI / 2)) * scale / 3, y_ - h + zHead + nzOffset + wpn_offset + y_recoiled - frameOffset * scale / 2, 32 * scale, 32 * scale), c.drawImage(_1.imgs.weaponsBodyMinus, 32 * direction2 + (reloadPerc ? 256 : 0), 32 * wpn_nr, 32, 32, x_, y_ - h + zHead - frameOffset * scale / 2, 32 * scale, 32 * scale), reloadPerc && (3 === direction2 || 4 === direction2 || 5 === direction2)) {
                                                    var reloadFrame_1 = Math.floor(exactTicks / 3) % 4;
                                                    c.drawImage(_1.imgs.hands, 32 * reloadFrame_1 + 256, 32 * direction2, 32, 32, x_, y_ - h + nzOffset + zHead, 32 * scale, 32 * scale)
                                                }
                                                if (weapon.muzzleFlash && (3 === direction2 || 4 === direction2 || 5 === direction2) && lastTickFire >= Math.floor(exactTicks) - 4) {
                                                    var mfi_1 = Img_1.imgCoords[weapon.muzzleFlash],
                                                        mff_1 = -1;
                                                    lastTickFire >= this.game.ticksCounter - 1 && "row" !== weapon.muzzleFlashAnimationType && (mff_1 = Math.floor(.5 * exactTicks) % 2), lastTickFire >= this.game.ticksCounter - 4 && "row" === weapon.muzzleFlashAnimationType && (mff_1 = Math.min(Math.floor(1 * (exactTicks - 1 - lastTickFire)), 3)), mff_1 >= 0 && c.drawImage(_1.imgs.miscSheet, mfi_1.x + 52 * direction2, mfi_1.y + 52 * mff_1, 52, 52, x_ - 10 * scale + x_recoiled + Math.sin(frame * (Math.PI / 2)) * scale / 2, y_ - 10 * scale - h + zHead + nzOffset + wpn_offset + y_recoiled - frame % 2 * scale / 1.8, 52 * scale, 52 * scale)
                                                }
                                                c.globalAlpha = 1
                                            }
                                            weapon || bounce || isHumanZombie || (c.globalAlpha = invisAlpha, c.drawImage(_1.imgs.hands, 32 * frame, 32 * direction2 + this.handsOffset, 32, 32, x_, y_ - h + nzOffset + zHead, 32 * scale, 32 * scale), c.globalAlpha = 1, this.flameDeath && (c.globalAlpha = blackness * invisAlpha, c.drawImage(_1.imgs.handsBlack, 32 * frame, 32 * direction2 + this.handsOffset, 32, 32, x_, y_ - h + zHead, 32 * scale, 32 * scale), c.globalAlpha = 1), whiteness > 0 && (c.globalAlpha = whiteness, c.drawImage(_1.imgs.handsWhite, 32 * frame, 32 * direction2 + this.handsOffset, 32, 32, x_, y_ - h + nzOffset + zHead, 32 * scale, 32 * scale), c.globalAlpha = 1))
                                        }
                                        if (bounce)
                                            if (this.isBoss) {
                                                var img_3 = this.isHumanZombie ? _1.imgs.zombieBoss : _1.imgs.humanBoss,
                                                    xFrame = Math.floor(Math.min(Math.max(.25 * (exactTicks - this.dieAt), 0), 6));
                                                c.globalAlpha = vanishingAlpha * invisAlpha, c.drawImage(img_3, 45 * xFrame, 360, 45, 45, x - 22.5 * scale, y - 38 * scale - h + nzOffset - frame % 2 * scale / 2 + zHead, 45 * scale, 45 * scale), c.globalAlpha = 1
                                            } else if (isHumanZombie) {
                                            var yFrame = this.direction;
                                            yFrame >= 1 && (yFrame = 1);
                                            xFrame = Math.floor(Math.min(Math.max(.25 * (exactTicks - this.dieAt), 0), 7));
                                            c.globalAlpha = vanishingAlpha * invisAlpha, c.drawImage(_1.imgs.zombieDeath, 32 * xFrame, 32 * yFrame, 32, 32, x_, y_ - h, 32 * scale, 32 * scale), c.globalAlpha = 1, this.flameDeath && (c.globalAlpha = blackness * vanishingAlpha * invisAlpha, c.drawImage(_1.imgs.zombieDeathBlack, 32 * xFrame, 32 * yFrame, 32, 32, x_, y_ - h, 32 * scale, 32 * scale), c.globalAlpha = 1)
                                        } else {
                                            var legFrame = this.direction + frame,
                                                legs_offset = 0 === hat.legs && 2 === team ? 4 : hat.legs;
                                            c.globalAlpha = vanishingAlpha * invisAlpha, c.drawImage(_1.imgs.legs, 32 * (legFrame + 3), 256 + 288 * legs_offset, 32, 32, x_, y_ - h, 32 * scale, 32 * scale), hat.hatOnly && c.drawImage(_1.imgs.heads, 512 + 32 * legFrame, 0, 32, 32, x_, y_ - h, 32 * scale, 32 * scale), c.drawImage(_1.imgs.heads, 512 + 32 * legFrame, 32 * hat.offset, 32, 32, x_, y_ - h, 32 * scale, 32 * scale), c.globalAlpha = 1, this.flameDeath && (c.globalAlpha = blackness * vanishingAlpha * invisAlpha, c.drawImage(_1.imgs.legsBlack, 32 * (legFrame + 3), 256 + 288 * legs_offset, 32, 32, x_, y_ - h, 32 * scale, 32 * scale), hat.hatOnly && c.drawImage(_1.imgs.headsBlack, 512 + 32 * legFrame, 0, 32, 32, x_, y_ - h, 32 * scale, 32 * scale), c.drawImage(_1.imgs.headsBlack, 512 + 32 * legFrame, 32 * hat.offset, 32, 32, x_, y_ - h, 32 * scale, 32 * scale), c.globalAlpha = 1), whiteness > 0 && (c.globalAlpha = whiteness, c.drawImage(_1.imgs.legsWhite, 32 * (legFrame + 3), 256 + 288 * legs_offset, 32, 32, x_, y_ - h, 32 * scale, 32 * scale), hat.hatOnly && c.drawImage(_1.imgs.headsWhite, 512 + 32 * legFrame, 0, 32, 32, x_, y_ - h, 32 * scale, 32 * scale), c.drawImage(_1.imgs.headsWhite, 512 + 32 * legFrame, 32 * hat.offset, 32, 32, x_, y_ - h, 32 * scale, 32 * scale), c.globalAlpha = 1)
                                        } else if (isHumanZombie && lastTickFire + 12 > this.game.ticksCounter && !this.flameDeath) {
                                            var attackAge = this.game.ticksCounter - lastTickFire,
                                                frame2 = attackAge < 4 ? 0 : 256;
                                            c.drawImage(_1.imgs.legs, 32 * frame, 32 * direction + 288 * hat.legs, 32, 32, x_, y_ - h, 32 * scale, 32 * scale), whiteness > 0 && (c.globalAlpha = whiteness, c.drawImage(_1.imgs.legsWhite, 32 * frame, 32 * direction + 288 * hat.legs, 32, 32, x_, y_ - h, 32 * scale, 32 * scale), c.globalAlpha = 1), this.isBoss ? (frame2 = Math.min(5 + 1 * attackAge, 9), c.drawImage(_1.imgs.zombieBoss, 45 * frame2, 45 * direction2, 45, 45, x - 22.5 * scale, y - 38 * scale - h + nzOffset - frame % 2 * scale / 2 + zHead, 45 * scale, 45 * scale)) : (c.drawImage(_1.imgs.heads, 32 * direction2 + frame2, 32 * (hat.offset + 1), 32, 32, x_, y_ - h + nzOffset, 32 * scale, 32 * scale), whiteness > 0 && (c.globalAlpha = whiteness, c.drawImage(_1.imgs.headsWhite, 32 * direction2 + frame2, 32 * (hat.offset + 1), 32, 32, x_, y_ - h + nzOffset, 32 * scale, 32 * scale), c.globalAlpha = 1))
                                        } else {
                                            legs_offset = 0 === hat.legs && 2 === team ? 4 : hat.legs;
                                            if (c.globalAlpha = invisAlpha, c.drawImage(_1.imgs.legs, 32 * frame, 32 * direction + 288 * legs_offset, 32, 32, x_, y_ - h, 32 * scale, 32 * scale), c.globalAlpha = 1, this.flameDeath && (c.globalAlpha = blackness * invisAlpha, c.drawImage(_1.imgs.legsBlack, 32 * frame, 32 * direction + 288 * legs_offset, 32, 32, x_, y_ - h, 32 * scale, 32 * scale), c.globalAlpha = 1), whiteness > 0 && (c.globalAlpha = whiteness, c.drawImage(_1.imgs.legsWhite, 32 * frame, 32 * direction + 288 * legs_offset, 32, 32, x_, y_ - h, 32 * scale, 32 * scale), c.globalAlpha = 1), this.isBoss) {
                                                var img_ = this.isHumanZombie ? _1.imgs.zombieBoss : _1.imgs.humanBoss;
                                                c.globalAlpha = invisAlpha, c.drawImage(img_, 0, 45 * direction2, 45, 45, x - 22.5 * scale, y - 38 * scale - h + nzOffset - frame % 2 * scale / 2 + zHead, 45 * scale, 45 * scale), c.globalAlpha = 1
                                            } else hat.hatOnly && (c.globalAlpha = invisAlpha, c.drawImage(_1.imgs.heads, 32 * direction2 + (reloadPerc ? 256 : 0), 0, 32, 32, x_, y_ - h + nzOffset - frameOffset * scale / 2 + zHead, 32 * scale, 32 * scale), c.globalAlpha = 1, this.flameDeath && (c.globalAlpha = blackness * invisAlpha, c.drawImage(_1.imgs.headsBlack, 32 * direction2 + (reloadPerc ? 256 : 0), 0, 32, 32, x_, y_ - h - frameOffset * scale / 2 + zHead, 32 * scale, 32 * scale), c.globalAlpha = 1), whiteness > 0 && (c.globalAlpha = whiteness, c.drawImage(_1.imgs.headsWhite, 32 * direction2 + (reloadPerc ? 256 : 0), 0, 32, 32, x_, y_ - h + nzOffset - frameOffset * scale / 2 + zHead, 32 * scale, 32 * scale), c.globalAlpha = 1)), c.globalAlpha = invisAlpha, c.drawImage(_1.imgs.heads, 32 * direction2 + (reloadPerc ? 256 : 0), 32 * hat.offset, 32, 32, x_, y_ - h + nzOffset - frameOffset * scale / 2 + zHead, 32 * scale, 32 * scale), c.globalAlpha = 1, this.flameDeath && (c.globalAlpha = blackness * invisAlpha, c.drawImage(_1.imgs.headsBlack, 32 * direction2 + (reloadPerc ? 256 : 0), 32 * hat.offset, 32, 32, x_, y_ - h - frameOffset * scale / 2 + zHead, 32 * scale, 32 * scale), c.globalAlpha = 1), whiteness > 0 && (c.globalAlpha = whiteness, c.drawImage(_1.imgs.headsWhite, 32 * direction2 + (reloadPerc ? 256 : 0), 32 * hat.offset, 32, 32, x_, y_ - h + nzOffset - frameOffset * scale / 2 + zHead, 32 * scale, 32 * scale), c.globalAlpha = 1)
                                        }
                                        if (this.lastThrow + 7 >= exactTicks) {
                                            c.globalAlpha = invisAlpha;
                                            var throwHandsFrame = Math.max(Math.min(Math.floor(.5 * (exactTicks - this.lastThrow + 1)), 3), 0);
                                            c.drawImage(_1.imgs.throwHands, 32 * throwHandsFrame, 32 * direction2, 32, 32, x_, y_ - h + nzOffset + zHead, 32 * scale, 32 * scale), c.globalAlpha = 1
                                        } else if (weapon) {
                                            if (c.globalAlpha = invisAlpha, reloadPerc && 3 !== direction2 && 4 !== direction2 && 5 !== direction2) {
                                                var reloadFrame = Math.floor(exactTicks / 3) % 4;
                                                c.drawImage(_1.imgs.hands, 32 * reloadFrame + 256, 32 * direction2, 32, 32, x_, y_ - h + nzOffset + zHead, 32 * scale, 32 * scale)
                                            }
                                            if (c.drawImage(_1.imgs.weaponsPlus, 32 * direction2 + (reloadPerc ? 256 : 0), 32 * wpn_nr, 32, 32, x_ + x_recoiled + Math.sin(frame * (Math.PI / 2)) * scale / 2, y_ - h + zHead + nzOffset + wpn_offset + y_recoiled - frameOffset * scale / 1.8, 32 * scale, 32 * scale), c.drawImage(_1.imgs.weaponsBodyPlus, 32 * direction2 + (reloadPerc ? 256 : 0), 32 * wpn_nr, 32, 32, x_, y_ - h + zHead + nzOffset - frameOffset * scale / 2, 32 * scale, 32 * scale), weapon.muzzleFlash && 3 !== direction2 && 4 !== direction2 && 5 !== direction2 && lastTickFire >= Math.floor(exactTicks) - 4) {
                                                var mfi = Img_1.imgCoords[weapon.muzzleFlash],
                                                    mff = -1;
                                                lastTickFire >= this.game.ticksCounter - 1 && "row" !== weapon.muzzleFlashAnimationType && (mff = Math.floor(.5 * exactTicks) % 2), lastTickFire >= this.game.ticksCounter - 4 && "row" === weapon.muzzleFlashAnimationType && (mff = Math.min(Math.floor(1 * (exactTicks - 1 - lastTickFire)), 2)), mff >= 0 && c.drawImage(_1.imgs.miscSheet, mfi.x + 52 * direction2, mfi.y + 52 * mff, 52, 52, x_ - 10 * scale + x_recoiled + Math.sin(frame * (Math.PI / 2)) * scale / 2, y_ - 10 * scale - h + zHead + nzOffset + wpn_offset + y_recoiled - frame % 2 * scale / 1.8, 52 * scale, 52 * scale)
                                            }
                                            c.globalAlpha = 1
                                        }!weapon && !bounce && isHumanZombie && !this.isBoss && lastTickFire + 12 <= this.game.ticksCounter && (c.globalAlpha = invisAlpha, c.drawImage(_1.imgs.hands, 32 * frame, 32 * direction2 + this.handsOffset, 32, 32, x_, y_ - h + nzOffset + zHead, 32 * scale, 32 * scale), c.globalAlpha = 1, this.flameDeath && (c.globalAlpha = blackness * invisAlpha, c.drawImage(_1.imgs.handsBlack, 32 * frame, 32 * direction2 + this.handsOffset, 32, 32, x_, y_ - h + zHead, 32 * scale, 32 * scale), c.globalAlpha = 1), whiteness > 0 && (c.globalAlpha = whiteness, c.drawImage(_1.imgs.handsWhite, 32 * frame, 32 * direction2 + this.handsOffset, 32, 32, x_, y_ - h + nzOffset + zHead, 32 * scale, 32 * scale), c.globalAlpha = 1))
                                    }
                                    if (this.invincibleUntil >= exactTicks) {
                                        var img_4 = Img_1.imgCoords["bubble" + (Math.floor(.8 * exactTicks) % 4 + 1)];
                                        c.globalAlpha = Math.max(Math.min(.25, .02 * (this.invincibleUntil - exactTicks)), 0) * (.2 * Math.random() + .9), c.drawImage(_1.imgs.miscSheet, img_4.x, img_4.y, img_4.w, img_4.h, x - img_4.w / 2 * scale, y - h - (img_4.h / 2 + 6) * scale, img_4.w * scale, img_4.h * scale), c.globalAlpha = 1
                                    }
                                    if (this.lastLifeSteal + 10 >= exactTicks) {
                                        var img_5 = Img_1.imgCoords.bubbleRed;
                                        c.globalAlpha = .04 * Math.max(this.lastLifeSteal + 10 - exactTicks, 0), c.drawImage(_1.imgs.miscSheet, img_5.x, img_5.y, img_5.w, img_5.h, x - img_5.w / 2 * scale, y - h - (img_5.h / 2 + 6) * scale, img_5.w * scale, img_5.h * scale), c.globalAlpha = 1
                                    }
                                    if (this.startBlinkingGreen < this.game.ticksCounter && this.startBlinkingGreen + 200 >= this.game.ticksCounter) {
                                        var img_6 = Img_1.imgCoords.bubbleGreen;
                                        c.globalAlpha = .25 * (.7 + .3 * Math.sin(exactTicks)), c.drawImage(_1.imgs.miscSheet, img_6.x, img_6.y, img_6.w, img_6.h, x - img_6.w / 2 * scale, y - h - (img_6.h / 2 + 6) * scale, img_6.w * scale, img_6.h * scale), c.globalAlpha = 1
                                    }
                                    if (this.lastShieldActivated <= exactTicks && this.lastShieldActivated + Abilities_1.abilities[16].duration >= exactTicks) {
                                        var age_1 = Math.min(Math.max(exactTicks - this.lastShieldActivated, 0), 20) / 20,
                                            alphaMod = 1;
                                        age_1 < .2 && (alphaMod = 5 * age_1), age_1 > .8 && (alphaMod = 5 * (1 - age_1)), this.lastShieldHit <= exactTicks && this.lastShieldHit + 10 >= exactTicks && (alphaMod *= .6);
                                        var img_7 = Img_1.imgCoords.shield,
                                            img2_ = Img_1.imgCoords.shield2;
                                        c.globalAlpha = .5 * (Math.cos(exactTicks / 2) + 1) * alphaMod, c.drawImage(_1.imgs.miscSheet, img_7.x, img_7.y, img_7.w, img_7.h, x - img_7.w / 2 * scale, y - h - (img_7.h / 2 + 6) * scale, img_7.w * scale, img_7.h * scale), c.globalAlpha = .5 * (Math.sin(exactTicks / 2) + 1) * alphaMod, c.drawImage(_1.imgs.miscSheet, img2_.x, img2_.y, img2_.w, img2_.h, x - img2_.w / 2 * scale, y - h - (img2_.h / 2 + 6) * scale, img2_.w * scale, img2_.h * scale), c.globalAlpha = 1, this.lastShieldHit <= exactTicks && this.lastShieldHit + 10 >= exactTicks && (alphaMod = 1, (age_1 = Math.min(Math.max(exactTicks - this.lastShieldHit, 0), 10) / 10) < .1 && (alphaMod = 10 * age_1), age_1 > .5 && (alphaMod = .5 * (1 - age_1)), img2_ = Img_1.imgCoords.shield3, c.globalAlpha = alphaMod, c.drawImage(_1.imgs.miscSheet, img2_.x, img2_.y, img2_.w, img2_.h, x - img2_.w / 2 * scale, y - h - (img2_.h / 2 + 6) * scale, img2_.w * scale, img2_.h * scale), c.globalAlpha = 1)
                                    }
                                    if (this.lastShieldActivated2 <= exactTicks && this.lastShieldActivated2 + Abilities_1.abilities[16].duration >= exactTicks) {
                                        var age_2 = Math.min(Math.max(exactTicks - this.lastShieldActivated2, 0), 20) / 20;
                                        alphaMod = 1;
                                        age_2 < .2 && (alphaMod = 5 * age_2), age_2 > .8 && (alphaMod = 5 * (1 - age_2)), this.lastShieldHit <= exactTicks && this.lastShieldHit + 10 >= exactTicks && (alphaMod *= .6);
                                        var img_8 = Img_1.imgCoords.refShield;
                                        img2_ = Img_1.imgCoords.refShield2;
                                        if (c.globalAlpha = .5 * (Math.cos(exactTicks / 2) + 1) * alphaMod, c.drawImage(_1.imgs.miscSheet, img_8.x, img_8.y, img_8.w, img_8.h, x - img_8.w / 2 * scale, y - h - (img_8.h / 2 + 6) * scale, img_8.w * scale, img_8.h * scale), c.globalAlpha = .5 * (Math.sin(exactTicks / 2) + 1) * alphaMod, c.drawImage(_1.imgs.miscSheet, img2_.x, img2_.y, img2_.w, img2_.h, x - img2_.w / 2 * scale, y - h - (img2_.h / 2 + 6) * scale, img2_.w * scale, img2_.h * scale), c.globalAlpha = 1, this.lastShieldHit <= exactTicks && this.lastShieldHit + 10 >= exactTicks) {
                                            alphaMod = 1;
                                            var scaleS = 1.1 * scale;
                                            (age_2 = Math.min(Math.max(exactTicks - this.lastShieldHit, 0), 10) / 10) < .1 && (alphaMod = 10 * age_2, scaleS = scale + scale * age_2 * 1), age_2 > .5 && (alphaMod = .66 * (1 - age_2)), img2_ = Img_1.imgCoords.refShield3, c.globalAlpha = alphaMod, c.drawImage(_1.imgs.miscSheet, img2_.x, img2_.y, img2_.w, img2_.h, x - img2_.w / 2 * scale, y - h - (img2_.h / 2 + 6) * scale, img2_.w * scale, img2_.h * scale), c.drawImage(_1.imgs.miscSheet, img2_.x, img2_.y, img2_.w, img2_.h, x - img2_.w / 2 * scaleS, y - h - (img2_.h / 2 + 6) * scaleS, img2_.w * scaleS, img2_.h * scaleS), c.globalAlpha = 1
                                        }
                                    }
                                    if (this.zombieSense && !this.isFakeCorpse && this.hp > 0) {
                                        var phase = exactTicks % 16 / 15,
                                            imgZ = Img_1.imgCoords.zombieSenseCircle,
                                            scaleZ = scale * (.25 + 1.5 * phase);
                                        c.globalAlpha = Math.max(.8 - phase, .01), c.drawImage(_1.imgs.miscSheet, imgZ.x, imgZ.y, imgZ.w, imgZ.h, x - imgZ.w / 2 * scaleZ, y - h - imgZ.h / 2 * scaleZ - 14 * scale, imgZ.w * scaleZ, imgZ.h * scaleZ), c.globalAlpha = 1
                                    }
                                    if (age < 25)
                                        for (var _i = 0, _a = this.lightPillarsBottom; _i < _a.length; _i++) {
                                            var p = _a[_i];
                                            this.updateAndDrawPillar(p, age)
                                        }
                                    if ((!isInvisible || !this.game.playingPlayer || this.isAlliedWith(this.game.playingPlayer)) && (x = (this.x0 + percentageOfCurrentTickPassed * (this.x - this.x0) - this.game.cameraX) * this.game.FIELD_SIZE, y = (this.y0 + percentageOfCurrentTickPassed * (this.y - this.y0) - this.game.cameraY) * this.game.FIELD_SIZE, !this.dieAt)) {
                                        var barScale = .55 * this.game.SCALE_FACTOR,
                                            barH = this.game.playingPlayer === this ? 13 : 9,
                                            lvlSqSize = .45 * this.game.FIELD_SIZE;
                                        x2 = x - (42 * barScale + lvlSqSize) / 2, y2 = y - 1.85 * this.game.FIELD_SIZE - h;
                                        this.isBoss && (y2 -= (this.isHumanZombie ? 1 : .5) * this.game.FIELD_SIZE), this.game.type.souls ? (c.fillStyle = "rgba(22, 22, 22, 0.8)", c.fillRect(x2, y2, lvlSqSize, lvlSqSize), (0, functions_2.drawText)(c, this.soulLvl.toString(), "white", 4 * this.game.SCALE_FACTOR, x2 + lvlSqSize / 2, y2 + .75 * lvlSqSize, this.game.FIELD_SIZE, "center"), x2 += lvlSqSize) : x2 += .5 * lvlSqSize, y2 += lvlSqSize - barH * barScale, c.fillStyle = "black", c.fillRect(x2, y2, 42 * barScale, barH * barScale), c.fillStyle = "rgba(22, 22, 22, 0.8)", 1 === this.team ? c.fillStyle = "rgba(140, 11, 11, 0.8)" : 2 === this.team && (c.fillStyle = "rgba(11, 11, 140, 0.8)"), c.fillRect(x2, y2 - .27 * this.game.FIELD_SIZE, 42 * barScale, .26 * this.game.FIELD_SIZE);
                                        var nameX = x,
                                            nameAlign = "center";
                                        this.game.type.souls && (nameX = x2 + .1 * this.game.FIELD_SIZE, nameAlign = "left"), (0, functions_2.drawText)(c, this.unsafeName, this.nameColorCode, .22 * this.game.FIELD_SIZE, nameX, y2 - .05 * this.game.FIELD_SIZE, void 0, nameAlign, void 0, void 0, void 0, 38 * barScale);
                                        var hp = Math.min(this.hp - (this.hpGlideEnd >= exactTicks ? this.hpGlideAmount * (this.hpGlideEnd - exactTicks) / (this.hpGlideEnd - this.hpGlideStart) : 0), this.maxHP),
                                            img = !this.game.playingPlayer || this.isAlliedWith(this.game.playingPlayer) ? Img_1.imgCoords.hpBar1 : Img_1.imgCoords.hpBar3,
                                            w = 40 * barScale * (hp / this.maxHP);
                                        c.drawImage(_1.imgs.miscSheet, img.x, img.y, img.w, img.h, x2 + 1 * barScale, y2 + 1 * barScale, w, 7 * barScale), c.strokeStyle = "rgba(0, 0, 0, 1)", c.lineWidth = barScale;
                                        for (var i_1 = Data_1.CONST.HP_SEPERATOR_AMOUNT; i_1 < this.maxHP; i_1 += Data_1.CONST.HP_SEPERATOR_AMOUNT) c.beginPath(), c.moveTo(x2 + 1 * barScale + i_1 / this.maxHP * 40 * barScale, y2 + 6 * barScale), c.lineTo(x2 + 1 * barScale + i_1 / this.maxHP * 40 * barScale, y2 + 8 * barScale), c.stroke();
                                        if (this.armor > 0) {
                                            var w2 = this.armor / Data_1.CONST.MAX_ARMOR * 40;
                                            c.drawImage(_1.imgs.miscSheet, this.armorBar.x, this.armorBar.y, .7 * w2, this.armorBar.h, x2 + 1 * barScale, y2 + 1 * barScale, w2 * barScale, 7 * barScale), c.strokeStyle = "#CFD2E0", c.lineWidth = barScale, c.strokeRect(x2 + .5 * barScale, y2 + .5 * barScale, 41 * barScale, 8 * barScale)
                                        }
                                        if (this.game.playingPlayer === this) {
                                            var hoverAb = this.game.pl_active_abilities[this.hoverAbility];
                                            Input_1.Input.keys[Input_1.commandKeys[Input_1.COMMAND.ABILITY1]] && (hoverAb = this.game.pl_active_abilities[0]), Input_1.Input.keys[Input_1.commandKeys[Input_1.COMMAND.ABILITY2]] && (hoverAb = this.game.pl_active_abilities[1]), !hoverAb && Input_1.Input.activeAbility && (hoverAb = Input_1.Input.activeAbility), hoverAb && (img = Img_1.imgCoords.barBlue, w = hoverAb.energy / 100 * 40 * barScale, c.globalAlpha = .6, c.drawImage(_1.imgs.miscSheet, img.x, img.y, img.w, img.h, x2 + 1 * barScale, y2 + 9 * barScale, w, 3 * barScale), c.globalAlpha = 1), img = Img_1.imgCoords.energyBar, w = this.game.playingPlayerEnergy / 100 * 40 * barScale, c.drawImage(_1.imgs.miscSheet, img.x, img.y, img.w, img.h, x2 + 1 * barScale, y2 + 9 * barScale, w, 3 * barScale)
                                        }
                                        if (y2 += .05 * this.game.FIELD_SIZE, x2 = x - 1.56 * this.game.FIELD_SIZE / 2, this === this.game.playingPlayer && (this.switchWeaponUntil > exactTicks ? (y2 -= .75 * this.game.FIELD_SIZE, c.fillStyle = "black", c.fillRect(x2 - .03 * this.game.FIELD_SIZE, y2 - .03 * this.game.FIELD_SIZE, 1.56 * this.game.FIELD_SIZE, .3 * this.game.FIELD_SIZE), (w = 24 * (1 + (exactTicks - this.switchWeaponUntil) / Data_1.CONST.WPN_SWITCH_TICKS)) >= 0 && c.drawImage(_1.imgs.miscSheet, Img_1.imgCoords.barGrey.x, Img_1.imgCoords.barGrey.y, w, 4, x2, y2, this.game.SCALE_FACTOR * w, .24 * this.game.FIELD_SIZE), (0, functions_2.drawText)(c, lang_1.lang.get("game.msg.switching_weapon"), "rgba(255, 255, 255, 0.75)", 3 * this.game.SCALE_FACTOR, x2 + 1.56 * this.game.FIELD_SIZE / 2, y2 + 3 * this.game.SCALE_FACTOR, 500, "center")) : this.weapon && this.weaponCooldowns[this.weapon.id] > 0 && this.weapon.cooldown > 7 && 0 === this.bouncePoints.length ? (y2 -= .75 * this.game.FIELD_SIZE, c.fillStyle = "black", c.fillRect(x2 - .03 * this.game.FIELD_SIZE, y2 - .03 * this.game.FIELD_SIZE, 1.56 * this.game.FIELD_SIZE, .3 * this.game.FIELD_SIZE), (w = (this.weaponCooldowns[this.weapon.id] - percentageOfCurrentTickPassed) / this.weapon.cooldown * 24) >= 0 && c.drawImage(_1.imgs.miscSheet, Img_1.imgCoords.barBlue.x, Img_1.imgCoords.barBlue.y, w, 4, x2, y2, this.game.SCALE_FACTOR * w, .24 * this.game.FIELD_SIZE)) : this.weapon && this.weaponCooldowns2[this.weapon.id] > 0 && this.weaponCooldowns2[this.weapon.id] < this.weapon.cooldown2 && 0 === this.bouncePoints.length ? (y2 -= .75 * this.game.FIELD_SIZE, c.fillStyle = "black", c.fillRect(x2 - .03 * this.game.FIELD_SIZE, y2 - .03 * this.game.FIELD_SIZE, 1.56 * this.game.FIELD_SIZE, .3 * this.game.FIELD_SIZE), (w = (this.weaponCooldowns2[this.weapon.id] - percentageOfCurrentTickPassed) / this.weapon.cooldown2 * 24) >= 0 && c.drawImage(_1.imgs.miscSheet, Img_1.imgCoords.barBlue.x, Img_1.imgCoords.barBlue.y, w, 4, x2, y2, this.game.SCALE_FACTOR * w, .24 * this.game.FIELD_SIZE), (0, functions_2.drawText)(c, lang_1.lang.get("game.msg.reloading"), "rgba(255, 255, 255, 0.75)", 3 * this.game.SCALE_FACTOR, x2 + 1.56 * this.game.FIELD_SIZE / 2, y2 + 3 * this.game.SCALE_FACTOR, 500, "center")) : this.game.noShootUntil > exactTicks && (y2 -= .75 * this.game.FIELD_SIZE, c.fillStyle = "white", c.fillRect(x2 - .03 * this.game.FIELD_SIZE, y2 - .03 * this.game.FIELD_SIZE, 1.56 * this.game.FIELD_SIZE, .3 * this.game.FIELD_SIZE), (w = (exactTicks - (this.game.noShootUntil - Data_1.CONST.NO_SHOOT_AFTER_BLINK_TICKS)) / Data_1.CONST.NO_SHOOT_AFTER_BLINK_TICKS * 24) >= 0 && c.drawImage(_1.imgs.miscSheet, Img_1.imgCoords.barGrey.x, Img_1.imgCoords.barGrey.y, w, 4, x2, y2, this.game.SCALE_FACTOR * w, .24 * this.game.FIELD_SIZE))), this.lastEmoteStart + Data_1.CONST.EMOTE_DURATION > this.game.ticksCounter && this.lastEmote) {
                                            var age_3 = exactTicks - this.lastEmoteStart,
                                                alpha = 1;
                                            age_3 < 10 ? alpha = .1 * age_3 : age_3 > Data_1.CONST.EMOTE_DURATION - 10 && (alpha = .1 * (Data_1.CONST.EMOTE_DURATION - age_3));
                                            var scale_1 = this.game.SCALE_FACTOR,
                                                yE = y - 3.5 * this.game.FIELD_SIZE,
                                                imgE = Img_1.imgCoords.emotesBubble;
                                            c.globalAlpha = .8 * alpha, c.drawImage(_1.imgs.miscSheet, imgE.x, imgE.y, imgE.w, imgE.h, x - .5 * imgE.w * scale_1, yE, scale_1 * imgE.w, scale_1 * imgE.h);
                                            scale2 = 10 * scale_1 / (imgE = this.lastEmote.img).h;
                                            c.globalAlpha = 1 * alpha, c.drawImage(_1.imgs.miscSheet, imgE.x, imgE.y, imgE.w, imgE.h, x - .5 * imgE.w * scale2, yE + 2 * scale_1, scale2 * imgE.w, scale2 * imgE.h), c.globalAlpha = 1
                                        }
                                        this === this.game.playingPlayer && this.weapon && this.weapon.hasLine && this.standTime >= this.weapon.requiredStandTime && (this.aimX = (0, functions_2.getMouseGamePlayX)(), this.aimY = (0, functions_2.getMouseGamePlayY)(), this.drawSniperLine(exactTicks))
                                    }
                                }
                            }
                        }, Player.prototype.drawSniperLine = function(exactTicks) {
                            if (!this.game.replayMode) {
                                var startX = this.x,
                                    startY = this.y,
                                    vecX = this.aimX - this.x,
                                    vecY = this.aimY - this.y,
                                    len = Math.sqrt(vecX * vecX + vecY * vecY);
                                vecX *= .1 / len, vecY *= .1 / len;
                                for (var x = this.x, y = this.y, running = !0, counter = 0; running;) counter++, this.game.getFieldPath(Math.floor(x), Math.floor(y)) <= 5 || counter > 300 ? running = !1 : (x += vecX, y += vecY);
                                if (counter > 15) {
                                    var img = this.game.playingPlayer === this ? Img_1.imgCoords.particleWhite : Img_1.imgCoords.particleOrange,
                                        size = 1.5 * this.game.SCALE_FACTOR;
                                    this.game.playingPlayer !== this && this.isInvisible && (this.game.ctx.globalAlpha = .1);
                                    for (var i = 15 + exactTicks % 4; i < counter - 3; i += 4) this.game.ctx.drawImage(_1.imgs.miscSheet, img.x, img.y, img.w, img.h, (startX + vecX * i - this.game.cameraX) * this.game.FIELD_SIZE - size / 2, (startY + vecY * i - this.game.SHOT_HEIGHT - this.game.cameraY) * this.game.FIELD_SIZE - size / 2, size, size);
                                    this.game.playingPlayer !== this && this.isInvisible && (this.game.ctx.globalAlpha = 1)
                                }
                            }
                        }, Player
                    }(Humanoid_1.Humanoid);
                exports.Player = Player
            },
            1200: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.Projectile = void 0;
                var _1 = __webpack_require__(2174),
                    Data_1 = __webpack_require__(6313),
                    Weapons_1 = __webpack_require__(2007),
                    Blood_1 = __webpack_require__(3513),
                    Bullet_1 = __webpack_require__(4636),
                    config_1 = __webpack_require__(5303),
                    functions_1 = __webpack_require__(7582),
                    Humanoid_1 = __webpack_require__(5951),
                    Img_1 = __webpack_require__(360),
                    Object_1 = __webpack_require__(3646),
                    PlasmaShield_1 = __webpack_require__(4959),
                    Player_1 = __webpack_require__(2245),
                    Slpash_1 = __webpack_require__(6921),
                    Sound_1 = __webpack_require__(3754),
                    Sprite_1 = __webpack_require__(9145),
                    Projectile = function() {
                        function Projectile(game, startX, startY, vecX, vecY, lifetime, id, weapon, isHomingMissile, remainingBullets, isMulti, playerID, aoe) {
                            if (this.skipNextUpdate = !1, this.rocketSound = null, this.lastTimeRocketSoundStarted = -9999, this.prediction = [], this.stepVecX = 0, this.stepVecY = 0, this.steps = 0, this.timesShieldReflected = 0, this.dieAt = 0, this.game = game, this.x = startX, this.y = startY, this.x0 = startX, this.y0 = startY, !isMulti && (weapon.soundName && Sound_1.Sound.playSound(weapon.soundName, this.x, this.y, weapon.volume ? weapon.volume : 1), weapon.poundSmokeSize)) {
                                game.createPoundSmoke(this.x, this.y, weapon.poundSmokeSize, 10);
                                var now = Date.now();
                                game.rumbleUntil = now + 500, game.rumblePower = .05 * weapon.poundSmokeSize, game.rumbleStart = now
                            }
                            0 === remainingBullets && weapon.lastShotSound && !isMulti && Sound_1.Sound.playSound(weapon.lastShotSound, this.x, this.y), this.vecX = vecX, this.vecY = vecY, this.stepVecX = this.vecX, this.stepVecY = this.vecY;
                            var factor = Math.sqrt(this.vecX * this.vecX + this.vecY * this.vecY) / weapon.projectileSpeed;
                            if (this.vecX /= factor, this.vecY /= factor, this.dmg = weapon ? weapon.dmg : 0, this.weapon = weapon, this.aoe = aoe || weapon.aoe, this.isMulti = isMulti, this.createDrawLens(), this.speed = this.weapon && this.weapon.projectileSpeed ? this.weapon.projectileSpeed : .1, this.tickOfDeath = lifetime + game.ticksCounter, this.tickOfCreation = game.ticksCounter, this.id = id, this.playerID = playerID, this.isHomingMissile = isHomingMissile, game.addToObjectsToDraw(this), !isMulti && !game.fastForward && this.x + 4 >= game.cameraX && this.y + 4 >= game.cameraY && this.x - 4 <= game.cameraX2 && this.y - 4 <= game.cameraY2) {
                                if (this.weapon.isLaser && new Sprite_1.Sprite(this.game, {
                                        x: this.x + .2 * this.drawLenX,
                                        y: this.y + .2 * this.drawLenY - this.game.SHOT_HEIGHT,
                                        img: Img_1.imgCoords[weapon.light],
                                        scaleFunction: function(age) {
                                            return 1
                                        },
                                        alphaFunction: function() {
                                            return .2
                                        },
                                        age: 1
                                    }), this.weapon.spawnBullets && config_1.graphics[config_1.options.graphicSettings].spawnBullets && new Bullet_1.Bullet(this.game, this.x, this.y), this.weapon.isRocket && this.weapon.noRocketEffects && (new Sprite_1.Sprite(this.game, {
                                        x: this.x + 2 * this.drawLenX + .5 * Math.random() - .25,
                                        y: this.y + 2 * this.drawLenY + .5 * Math.random() - .25 - game.SHOT_HEIGHT,
                                        img: Img_1.imgCoords[this.weapon.spawnLight ? this.weapon.spawnLight : "light_yellow"],
                                        scaleFunction: function(age) {
                                            return 5
                                        },
                                        age: 8
                                    }), new Sprite_1.Sprite(this.game, {
                                        x: this.x + 2 * this.drawLenX + .15 * Math.random() - .075,
                                        y: this.y + 2 * this.drawLenY + .15 * Math.random() - .075 - game.SHOT_HEIGHT,
                                        img: Img_1.imgCoords[this.weapon.spawnLight ? this.weapon.spawnLight : "light_yellow"],
                                        scaleFunction: function(age) {
                                            return 1
                                        },
                                        age: 8
                                    }), new Sprite_1.Sprite(this.game, {
                                        x: this.x + 1 * this.drawLenX + .15 * Math.random() - .075,
                                        y: this.y + 1 * this.drawLenY + .15 * Math.random() - .075 - game.SHOT_HEIGHT,
                                        img: Img_1.imgCoords[this.weapon.spawnLight ? this.weapon.spawnLight : "light_yellow"],
                                        scaleFunction: function(age) {
                                            return 1
                                        },
                                        age: 8
                                    }), new Sprite_1.Sprite(this.game, {
                                        x: this.x + 1 * this.drawLenX + .1 * Math.random() - .05,
                                        y: this.y + 1 * this.drawLenY + .1 * Math.random() - .05 - game.SHOT_HEIGHT,
                                        img: Img_1.imgCoords.light_white,
                                        scaleFunction: function(age) {
                                            return .5
                                        },
                                        age: 8
                                    }), new Sprite_1.Sprite(this.game, {
                                        x: this.x - 3 * this.drawLenX + .1 * Math.random() - .05,
                                        y: this.y - 3 * this.drawLenY + .1 * Math.random() - .05 - game.SHOT_HEIGHT,
                                        img: Img_1.imgCoords[this.weapon.spawnLight ? this.weapon.spawnLight : "light_yellow"],
                                        scaleFunction: function(age) {
                                            return 1
                                        },
                                        age: 8
                                    })), this.weapon === Weapons_1.weapons[8]) {
                                    for (var x = this.x + 5.5 * this.drawLenX, y = this.y + 5.5 * this.drawLenY, i = 0; i < 5; i++) new Sprite_1.Sprite(this.game, {
                                        x: x + .3 * Math.random() - .15,
                                        y: y - this.game.SHOT_HEIGHT + .3 * Math.random() - .15,
                                        img: Img_1.imgCoords.dust1,
                                        scaleFunction: function(age) {
                                            return this.r1 - .01 * age
                                        },
                                        r1: Math.random() + 1.1,
                                        alphaFunction: function(age) {
                                            return .35 * Math.max(0, 1 - age / this.ticksToLive)
                                        },
                                        age: 20 * (2.7 + Math.random()),
                                        r2: 2.25 * this.drawLenX,
                                        r3: 2.25 * this.drawLenY,
                                        r4: i / 5,
                                        xFunction: function(age) {
                                            return 5 * (-1 / Math.pow(age / 5 + 1, 3) + 1) * this.r4 * this.r2
                                        },
                                        yFunction: function(age) {
                                            return 5 * (-1 / Math.pow(age / 5 + 1, 3) + 1) * this.r4 * this.r3
                                        }
                                    });
                                    for (i = 1; i < 3; i++) new Sprite_1.Sprite(this.game, {
                                        x: x + .3 * Math.random() - .15,
                                        y: y - this.game.SHOT_HEIGHT + .3 * Math.random() - .15,
                                        img: Img_1.imgCoords.dust1,
                                        scaleFunction: function(age) {
                                            return this.r1 - .01 * age
                                        },
                                        r1: Math.random() + 1.1,
                                        alphaFunction: function(age) {
                                            return .3 * Math.max(0, 1 - age / this.ticksToLive)
                                        },
                                        age: 20 * (2.7 + Math.random()),
                                        r2: 2.25 * -this.drawLenY,
                                        r3: 2.25 * this.drawLenX,
                                        r4: i / 5,
                                        xFunction: function(age) {
                                            return 3 * (-1 / Math.pow(age / 5 + 1, 3) + 1) * this.r4 * this.r2
                                        },
                                        yFunction: function(age) {
                                            return 3 * (-1 / Math.pow(age / 5 + 1, 3) + 1) * this.r4 * this.r3
                                        }
                                    });
                                    for (i = 1; i < 3; i++) new Sprite_1.Sprite(this.game, {
                                        x: x + .3 * Math.random() - .15,
                                        y: y - this.game.SHOT_HEIGHT + .3 * Math.random() - .15,
                                        img: Img_1.imgCoords.dust2,
                                        scaleFunction: function(age) {
                                            return this.r1 - .01 * age
                                        },
                                        r1: Math.random() + 1.1,
                                        alphaFunction: function(age) {
                                            return .3 * Math.max(0, 1 - age / this.ticksToLive)
                                        },
                                        age: 20 * (2.7 + Math.random()),
                                        r2: 2.25 * this.drawLenY,
                                        r3: 2.25 * -this.drawLenX,
                                        r4: i / 5,
                                        xFunction: function(age) {
                                            return 3 * (-1 / Math.pow(age / 5 + 1, 3) + 1) * this.r4 * this.r2
                                        },
                                        yFunction: function(age) {
                                            return 3 * (-1 / Math.pow(age / 5 + 1, 3) + 1) * this.r4 * this.r3
                                        }
                                    });
                                    new Sprite_1.Sprite(this.game, {
                                        x,
                                        y: y - this.game.SHOT_HEIGHT,
                                        img: Img_1.imgCoords.light_yellow,
                                        scaleFunction: function(age) {
                                            return 5
                                        },
                                        age: 7
                                    })
                                }
                                if (this.weapon.isRocket) {
                                    for (x = this.x, y = this.y, i = 0; i < 5; i++) new Sprite_1.Sprite(this.game, {
                                        x: x + .3 * Math.random() - .15,
                                        y: y - this.game.SHOT_HEIGHT + .3 * Math.random() - .15,
                                        img: Img_1.imgCoords.dust1,
                                        scaleFunction: function(age) {
                                            return this.r1 - .01 * age
                                        },
                                        r1: Math.random() + 1.1,
                                        alphaFunction: function(age) {
                                            return .35 * Math.max(0, 1 - age / this.ticksToLive)
                                        },
                                        age: 20 * (2.7 + Math.random()),
                                        r2: 4.25 * this.drawLenX,
                                        r3: 4.25 * this.drawLenY,
                                        r4: i / 5,
                                        xFunction: function(age) {
                                            return 2 * (-1 / Math.pow(age / 5 + 1, 3) + 1) * this.r4 * this.r2
                                        },
                                        yFunction: function(age) {
                                            return 2 * (-1 / Math.pow(age / 5 + 1, 3) + 1) * this.r4 * this.r3
                                        }
                                    });
                                    if (!this.weapon.noRocketEffects)
                                        for (i = 1; i < 3; i++) new Sprite_1.Sprite(this.game, {
                                            x: x + .3 * Math.random() - .15,
                                            y: y - this.game.SHOT_HEIGHT + .3 * Math.random() - .15,
                                            img: Img_1.imgCoords.dust1,
                                            scaleFunction: function(age) {
                                                return this.r1 - .01 * age
                                            },
                                            r1: Math.random() + 1.1,
                                            alphaFunction: function(age) {
                                                return .35 * Math.max(0, 1 - age / this.ticksToLive)
                                            },
                                            age: 20 * (2.7 + Math.random()),
                                            r2: 8.25 * -this.drawLenY,
                                            r3: 8.25 * this.drawLenX,
                                            r4: i / 5,
                                            xFunction: function(age) {
                                                return 2 * (-1 / Math.pow(age / 5 + 1, 3) + 1) * this.r4 * this.r2
                                            },
                                            yFunction: function(age) {
                                                return 2 * (-1 / Math.pow(age / 5 + 1, 3) + 1) * this.r4 * this.r3
                                            }
                                        });
                                    if (!this.weapon.noRocketEffects)
                                        for (i = 1; i < 3; i++) new Sprite_1.Sprite(this.game, {
                                            x: x + .3 * Math.random() - .15,
                                            y: y - this.game.SHOT_HEIGHT + .3 * Math.random() - .15,
                                            img: Img_1.imgCoords.dust1,
                                            scaleFunction: function(age) {
                                                return this.r1 - .01 * age
                                            },
                                            r1: Math.random() + 1.1,
                                            alphaFunction: function(age) {
                                                return .35 * Math.max(0, 1 - age / this.ticksToLive)
                                            },
                                            age: 20 * (2.7 + Math.random()),
                                            r2: 8.25 * this.drawLenY,
                                            r3: 8.25 * -this.drawLenX,
                                            r4: i / 5,
                                            xFunction: function(age) {
                                                return 2 * (-1 / Math.pow(age / 5 + 1, 3) + 1) * this.r4 * this.r2
                                            },
                                            yFunction: function(age) {
                                                return 2 * (-1 / Math.pow(age / 5 + 1, 3) + 1) * this.r4 * this.r3
                                            }
                                        });
                                    if (!this.weapon.noRocketEffects)
                                        for (i = 1; i < 6; i++) new Sprite_1.Sprite(this.game, {
                                            x: this.x - 2 * this.drawLenX + .3 * Math.random() - .15,
                                            y: this.y - 2 * this.drawLenY - this.game.SHOT_HEIGHT + .3 * Math.random() - .15,
                                            img: Img_1.imgCoords.dust1,
                                            scaleFunction: function(age) {
                                                return this.r1 - .01 * age
                                            },
                                            r1: Math.random() + 1.25,
                                            alphaFunction: function(age) {
                                                return .35 * Math.max(0, 1 - age / this.ticksToLive)
                                            },
                                            age: 20 * (2.7 + Math.random()),
                                            r2: 8.25 * -this.drawLenX,
                                            r3: 8.25 * -this.drawLenY,
                                            r4: i / 8,
                                            xFunction: function(age) {
                                                return 2 * (-1 / Math.pow(age / 5 + 1, 3) + 1) * this.r4 * this.r2
                                            },
                                            yFunction: function(age) {
                                                return 2 * (-1 / Math.pow(age / 5 + 1, 3) + 1) * this.r4 * this.r3
                                            }
                                        });
                                    new Sprite_1.Sprite(this.game, {
                                        x,
                                        y: y - this.game.SHOT_HEIGHT,
                                        img: Img_1.imgCoords[this.weapon.spawnLight ? this.weapon.spawnLight : "light_yellow"],
                                        scaleFunction: function(age) {
                                            return 5
                                        },
                                        age: 7
                                    })
                                }
                            }
                        }
                        return Projectile.prototype.createDrawLens = function() {
                            var len = Math.sqrt(this.vecX * this.vecX + this.vecY * this.vecY) * (this.isMulti ? .2 * Math.random() + .9 : 1);
                            this.drawLenX = .2 * this.vecX / len, this.drawLenY = .2 * this.vecY / len, this.vecX /= len / this.weapon.projectileSpeed, this.vecY /= len / this.weapon.projectileSpeed
                        }, Projectile.prototype.reflectionUpdate = function(x, y, vecX, vecY) {
                            var oldVecX = this.vecX,
                                oldVecY = this.vecY;
                            this.x0 = this.x, this.y0 = this.y, this.x = x, this.y = y, this.vecX = vecX, this.vecY = vecY;
                            var len = Math.sqrt(this.vecX * this.vecX + this.vecY * this.vecY);
                            vecX = .1 * this.vecX / len, vecY = .1 * this.vecY / len, this.createDrawLens(), this.skipNextUpdate = !0;
                            var stepX = (this.vecX - oldVecX) / 2,
                                stepY = (this.vecY - oldVecY) / 2;
                            if (this.x + 3 >= this.game.cameraX && this.y + 3 >= this.game.cameraY && this.x - 3 <= this.game.cameraX2 && this.y - 3 <= this.game.cameraY2) {
                                if (!(Math.abs(stepX) < .01 && stepY < 0)) {
                                    new PlasmaShield_1.PlasmaShield(this.game, this.x, this.y, this.x + stepX, this.y + stepY, this.weapon.isRocket ? 1 : void 0, this.weapon.isRocket ? "200, 200, 255" : "200, 255, 200");
                                    for (var i = 0; i < 5; i++) new Sprite_1.Sprite(this.game, {
                                        x: this.x,
                                        y: this.y,
                                        img: Img_1.imgCoords[this.weapon.particle],
                                        scaleFunction: function(age) {
                                            return this.r4 - .2 * age
                                        },
                                        age: 5 + 5 * Math.random(),
                                        r1: .6 * Math.random() + .7,
                                        r2: .3 * stepX + .4 * stepX * Math.random(),
                                        r3: .3 * stepY + .4 * stepY * Math.random(),
                                        r4: 2 * Math.random() + 1,
                                        zFunction: function(age) {
                                            return .6 * Math.max(.3, Math.abs(Math.cos(age * this.r1 * .2)) / Math.max(1, .2 * age)) - .3
                                        },
                                        xFunction: function(age) {
                                            return (-5 / (.08 * age + 1) + 5) * this.r2
                                        },
                                        yFunction: function(age) {
                                            return (-5 / (.08 * age + 1) + 5) * this.r3
                                        }
                                    });
                                    for (var k = 0; k < 2; k++) new Sprite_1.Sprite(this.game, {
                                        x: this.x + .6 * Math.random() - .3,
                                        y: this.y + .6 * Math.random() - .3,
                                        img: Img_1.imgCoords.dust1,
                                        scaleFunction: function(age) {
                                            return this.r1 - .01 * age
                                        },
                                        r1: Math.random() + 1,
                                        alphaFunction: function(age) {
                                            return .2 * Math.max(0, 1 - age / this.ticksToLive)
                                        },
                                        age: 20 * (1.7 + Math.random()),
                                        r2: 40 * Math.random() + 12,
                                        zFunction: function(age) {
                                            return this.game.SHOT_HEIGHT + age / this.r2
                                        }
                                    })
                                }
                                Sound_1.Sound.playSound("reflect", this.x, this.y, this.weapon.isRocket ? .9 : .6), this.weapon.isLaser && Sound_1.Sound.playSound("sizzle", this.x, this.y, .2), new Sprite_1.Sprite(this.game, {
                                    x: this.x,
                                    y: this.y,
                                    img: Img_1.imgCoords[this.weapon.light],
                                    scaleFunction: function(age) {
                                        return Math.max(0, 4 - age / this.ticksToLive * 4)
                                    },
                                    alphaFunction: function(age) {
                                        return .17 * Math.max(0, 1 - age / this.ticksToLive)
                                    },
                                    age: 15
                                })
                            }
                        }, Projectile.prototype.blink = function(x, y, oldX, oldY) {
                            this.dmg < 10 ? (Sound_1.Sound.playSound("blink", this.x, this.y, .4), this.game.createBlinkEffectVerySmall(oldX - .2 + .4 * Math.random(), oldY - .2 + .4 * Math.random())) : (this.game.createBlinkEffectSmall(oldX - .2 + .4 * Math.random(), oldY - .2 + .4 * Math.random()), Sound_1.Sound.playSound("blink", this.x, this.y, .65)), this.x = x, this.y = y, this.x0 = this.x, this.y0 = this.y, this.dmg < 10 ? (this.game.createBlinkEffectVerySmall(this.x - .25 + .5 * Math.random(), this.y - .25 + .5 * Math.random()), Sound_1.Sound.playSound("blink", this.x, this.y, .4)) : (this.game.createBlinkEffectSmall(this.x - .25 + .5 * Math.random(), this.y - .25 + .5 * Math.random()), Sound_1.Sound.playSound("blink", this.x, this.y, .65))
                        }, Projectile.prototype.normalizeVector = function() {
                            var factor = Math.sqrt(this.vecX * this.vecX + this.vecY * this.vecY) / this.speed;
                            this.stepVecX = this.vecX / factor, this.stepVecY = this.vecY / factor, this.steps = 1;
                            var len = Math.sqrt(this.stepVecX * this.stepVecX + this.stepVecY * this.stepVecY);
                            len > .1 && (this.steps = Math.ceil(len / .1), this.stepVecX /= this.steps, this.stepVecY /= this.steps)
                        }, Projectile.prototype.update = function() {
                            if (this.dieAt && this.dieAt + 10 <= this.game.ticksCounter) return !1;
                            if (this.dieAt) return !0;
                            if (this.skipNextUpdate ? this.skipNextUpdate = !1 : (this.x0 = this.x, this.y0 = this.y, this.x += this.vecX, this.y += this.vecY), this.prediction.length > 0)
                                for (var node = this.prediction.splice(0, 1); node && node[0] && !node[0].step;) node = this.prediction.splice(0, 1);
                            if (this.weapon.isRocket && !this.game.fastForward && this.x + 3 >= this.game.cameraX && this.y + 3 >= this.game.cameraY && this.x - 3 <= this.game.cameraX2 && this.y - 3 <= this.game.cameraY2 && Math.random() < .8 && !this.weapon.noRocketEffects && new Sprite_1.Sprite(this.game, {
                                    x: this.x0 + .4 * Math.random() - .2,
                                    y: this.y0 - this.game.SHOT_HEIGHT + .4 * Math.random() - .2,
                                    img: Img_1.imgCoords.dust1,
                                    scaleFunction: function(age) {
                                        return this.r1 - .01 * age
                                    },
                                    r1: Math.random() + .75,
                                    alphaFunction: function(age) {
                                        return .35 * Math.max(0, 1 - age / this.ticksToLive)
                                    },
                                    age: 20 * (1.7 + Math.random()),
                                    r2: 40 * Math.random() + 32,
                                    zFunction: function(age) {
                                        return age / this.r2
                                    }
                                }), this.weapon.isRocket)
                                if (this.rocketSound) {
                                    var volume = Sound_1.Sound.getVolumeModifier(this.game, this.x, this.y);
                                    (isNaN(volume) || volume <= 0) && (volume = 0), this.rocketSound.volume = .35 * volume * config_1.options.sound_volume, this.lastTimeRocketSoundStarted + 700 < Date.now() && (this.rocketSound = Sound_1.Sound.playSound(this.weapon.flySound ? this.weapon.flySound : "rocket_fly", this.x, this.y, .35), this.lastTimeRocketSoundStarted = Date.now())
                                } else this.rocketSound = Sound_1.Sound.playSound(this.weapon.flySound ? this.weapon.flySound : "rocket_fly", this.x, this.y, .35), this.lastTimeRocketSoundStarted = Date.now();
                            return this.timesShieldReflected && this.game.ticksCounter % 2 == 1 && (new Sprite_1.Sprite(this.game, {
                                x: this.x + .4 * Math.random() - .2,
                                y: this.y - this.game.SHOT_HEIGHT + .4 * Math.random() - .2,
                                img: Img_1.imgCoords.particleWhite,
                                scaleFunction: function(age) {
                                    return this.r1 - .01 * age
                                },
                                r1: Math.random() + .75,
                                alphaFunction: function(age) {
                                    return .85 * Math.max(0, 1 - age / this.ticksToLive)
                                },
                                age: 10 + 10 * Math.random()
                            }), new Sprite_1.Sprite(this.game, {
                                x: this.x + .4 * Math.random() - .2,
                                y: this.y - this.game.SHOT_HEIGHT + .4 * Math.random() - .2,
                                img: Math.random() > .5 ? Img_1.imgCoords.light_yellow : Img_1.imgCoords.light_purple,
                                scaleFunction: function(age) {
                                    return this.r1 - .01 * age
                                },
                                r1: Math.random() + .75 + (Math.min(this.timesShieldReflected, 3) - 1),
                                alphaFunction: function(age) {
                                    return .45 * Math.max(0, 1 - age / this.ticksToLive)
                                },
                                age: 10 + 10 * Math.random()
                            })), this.isHomingMissile && this.tickOfCreation === this.game.ticksCounter - 1 && Sound_1.Sound.playSound("rocket_beep", this.x, this.y, .65), this.tickOfDeath >= this.game.ticksCounter
                        }, Projectile.prototype.createHitEffect = function(player) {
                            if (!this.game.fastForward && this.x + 5 >= this.game.cameraX && this.y + 5 >= this.game.cameraY && this.x - 5 <= this.game.cameraX2 && this.y - 5 <= this.game.cameraY2) {
                                if (this.weapon.isLaser) {
                                    var x = this.x,
                                        y = this.y;
                                    if (player) {
                                        var vecX = this.x - player.x,
                                            vecY = this.y - player.y,
                                            len = Math.sqrt(vecX * vecX + vecY * vecY);
                                        vecX *= Data_1.CONST.PLAYER_RADIUS / len, vecY *= Data_1.CONST.PLAYER_RADIUS / len, x = player.x + vecX, y = player.y + vecY, (player instanceof Humanoid_1.Humanoid || player instanceof Object_1.Object_) && player.invincibleUntil < this.game.ticksCounter ? (player.laserHitUntil = this.game.ticksCounter + 3, player instanceof Humanoid_1.Humanoid && (player.lastHit = this.game.ticksCounter, player.lockDirection = player.direction, player instanceof Player_1.Player && (player.lockDirection2 = player.direction2)), Sound_1.Sound.playSound("sizzle2", this.x, this.y, .47)) : Sound_1.Sound.playSound("sizzle2", this.x, this.y, .2)
                                    }
                                    for (var k = 0; k < 3; k++) new Sprite_1.Sprite(this.game, {
                                        x: x + .6 * Math.random() - .3,
                                        y: y + .6 * Math.random() - .3,
                                        img: Img_1.imgCoords.dust1,
                                        scaleFunction: function(age) {
                                            return this.r1 - .01 * age
                                        },
                                        r1: Math.random() + 1,
                                        alphaFunction: function(age) {
                                            return .4 * Math.max(0, 1 - age / this.ticksToLive)
                                        },
                                        age: 20 * (1.7 + Math.random()),
                                        r2: 40 * Math.random() + 12,
                                        zFunction: function(age) {
                                            return this.game.SHOT_HEIGHT + age / this.r2
                                        }
                                    });
                                    for (k = 0; k < 9; k++) {
                                        var randomAngle = Math.random() * Math.PI * 2,
                                            rand = .7 * Math.random();
                                        new Sprite_1.Sprite(this.game, {
                                            x: x + Math.cos(randomAngle) * rand,
                                            y: y - this.game.SHOT_HEIGHT + Math.sin(randomAngle) * rand,
                                            img: Img_1.imgCoords[this.weapon.particle],
                                            scaleFunction: function(age) {
                                                return this.r1
                                            },
                                            r1: 3 * Math.random() + 2,
                                            alphaFunction: function(age) {
                                                return .44 * Math.floor(3 * Math.random())
                                            },
                                            age: 4
                                        })
                                    }
                                    new Sprite_1.Sprite(this.game, {
                                        x,
                                        y,
                                        img: Img_1.imgCoords.light_white,
                                        scaleFunction: function(age) {
                                            return 7 * Math.max(0, 1 - age / this.ticksToLive * .3)
                                        },
                                        alphaFunction: function(age) {
                                            return .066 * Math.floor(3 * Math.random())
                                        },
                                        age: 4
                                    }), new Sprite_1.Sprite(this.game, {
                                        x,
                                        y,
                                        img: Img_1.imgCoords.light_purple,
                                        scaleFunction: function(age) {
                                            return 5 * Math.max(0, 1 - age / this.ticksToLive * .3)
                                        },
                                        alphaFunction: function(age) {
                                            return .066 * Math.floor(3 * Math.random())
                                        },
                                        age: 4
                                    })
                                } else if (this.weapon.normalProjectile) {
                                    if (player instanceof Humanoid_1.Humanoid && player.bleeds && player.invincibleUntil < this.game.ticksCounter) {
                                        vecX = this.x - player.x, vecY = this.y - player.y, len = Math.sqrt(vecX * vecX + vecY * vecY);
                                        vecX *= Data_1.CONST.PLAYER_RADIUS / len, vecY *= Data_1.CONST.PLAYER_RADIUS / len;
                                        for (x = player.x + vecX, y = player.y + vecY, k = 0; k < 2; k++) new Blood_1.Blood(this.game, x, y, -vecX, -vecY)
                                    }
                                    Sound_1.Sound.playSound("gun_impact", this.x, this.y, 1), player instanceof Humanoid_1.Humanoid && player.invincibleUntil < this.game.ticksCounter && Sound_1.Sound.playSound("gun_impact_2", this.x, this.y, 1)
                                }
                                this.weapon.isZombieRangedWeapon && new Slpash_1.Splash(this.game, this.x + this.vecX, this.y + this.vecY - .4, Img_1.imgCoords.rangedZombieImpact, 1.15, 40, !1)
                            }!this.dieAt && this.playerID === this.game.playingPlayerID && this.weapon.isHeatSeeking2 && this.game.playingPlayerCountActiveHeatseeking2Missiles--, this.dieAt = this.game.ticksCounter + 10
                        }, Projectile.prototype.createDeathEffect = function(x, y, comboDeath) {
                            var _a;
                            if (this.weapon.isZombieRangedWeapon && !this.game.fastForward && this.x + 5 >= this.game.cameraX && this.y + 5 >= this.game.cameraY && this.x - 5 <= this.game.cameraX2 && this.y - 5 <= this.game.cameraY2 && (new Slpash_1.Splash(this.game, x, y, Img_1.imgCoords.rangedZombieImpact, 1.15, 40, !1), Sound_1.Sound.playSound("zombie_bite", x, y, 1)), this.weapon.isRocket) {
                                if (x + 10 >= this.game.cameraX && y + 10 >= this.game.cameraY && x - 10 <= this.game.cameraX2 && y - 10 <= this.game.cameraY2) {
                                    var aoe = comboDeath && this.weapon.comboAoe ? this.weapon.comboAoe : this.aoe,
                                        sound = null !== (_a = this.weapon.impactSound) && void 0 !== _a ? _a : "explo";
                                    comboDeath && this.weapon.impactSoundCombo && (sound = this.weapon.impactSoundCombo), aoe *= Math.pow(1.17, Math.min(this.timesShieldReflected, 3)), this.game.createExplosion(x, y, aoe, 0, this.weapon.redExplosion), Sound_1.Sound.playSound(sound, x, y), this.game.corpseBounce(x, y, this.aoe)
                                }
                                this.rocketSound && (this.rocketSound.pause(), this.rocketSound.currentTime = 0)
                            } else if (this.x + 4 >= this.game.cameraX && this.y + 4 >= this.game.cameraY && this.x - 4 <= this.game.cameraX2 && this.y - 4 <= this.game.cameraY2 && !this.game.fastForward) {
                                for (var x_ = this.x, y_ = this.y, stepX = this.vecX / 100, stepY = this.vecY / 100, i = 0; this.game.getFieldPath(Math.floor(x_), Math.floor(y_)) <= 5;)
                                    if (x_ -= stepX, y_ -= stepY, ++i > 200) return;
                                for (i = 0; this.game.getFieldPath(Math.floor(x_), Math.floor(y_)) > 5 && i < 200;)
                                    if (x_ += stepX, y_ += stepY, ++i > 200) return;
                                var p1x = x_ - stepX,
                                    p1y = y_ + stepY,
                                    p2x = x_ + stepX,
                                    p2y = y_ - stepY,
                                    p3x = x_ - stepX,
                                    p3y = y_ - stepY;
                                if (this.game.getFieldPath(Math.floor(p1x), Math.floor(p1y)) > 5);
                                else if (this.game.getFieldPath(Math.floor(p2x), Math.floor(p2y)) > 5);
                                else {
                                    if (!(this.game.getFieldPath(Math.floor(p3x), Math.floor(p3y)) > 5)) return
                                }
                                var stepX1 = 50 * ((0 + x_ - stepX) / 2 - x_),
                                    stepY1 = 50 * ((0 + y_ - stepY) / 2 - y_);
                                if (stepX = 50 * (0 - x_), stepY = 50 * (0 - y_), this.weapon.normalProjectile) {
                                    for (var x_circular = stepY1 > stepX1 ? 1 : 0, y_circular = stepX1 > stepY1 ? 1 : 0, i_1 = 0; i_1 < 9; i_1++) new Sprite_1.Sprite(this.game, {
                                        x: x_,
                                        y: y_,
                                        img: Img_1.imgCoords.particle2,
                                        scaleFunction: function(age) {
                                            return this.r4
                                        },
                                        age: 10 + 30 * Math.random(),
                                        r1: .6 * Math.random() + .7,
                                        r2: .6 * stepX1 + .8 * Math.random() - .4,
                                        r3: .6 * stepY1 + .8 * Math.random() - .4,
                                        r4: 1 * Math.random() + .5,
                                        zFunction: function(age) {
                                            return .6 * Math.max(.3, Math.abs(Math.cos(age * this.r1 * .2)) / Math.max(1, .2 * age))
                                        },
                                        xFunction: function(age) {
                                            return (-5 / (.28 * Math.min(age, 7) + 1.6) + 3) * this.r2
                                        },
                                        yFunction: function(age) {
                                            return (-5 / (.28 * Math.min(age, 7) + 1.6) + 3) * this.r3
                                        }
                                    });
                                    for (var i_2 = 0; i_2 < 4; i_2++) new Sprite_1.Sprite(this.game, {
                                        x: x_,
                                        y: y_ - this.game.SHOT_HEIGHT,
                                        img: Img_1.imgCoords.dust2,
                                        scaleFunction: function(age) {
                                            return this.r4 + .04 * age
                                        },
                                        alphaFunction: function(age) {
                                            return .2 * Math.max(0, 1 - age / this.ticksToLive)
                                        },
                                        age: 20 + 10 * Math.random(),
                                        r1: .6 * Math.random() + .7,
                                        r2: (.6 * stepX1 + .4 * Math.random() - .2) * ((i_2 + 1) / 3),
                                        r3: (.6 * stepY1 + .4 * Math.random() - .2) * ((i_2 + 1) / 3),
                                        r4: .2 * Math.random() + .7,
                                        xFunction: function(age) {
                                            return (-5 / (.9 * age + 2.5) + 2) * this.r2 * .5
                                        },
                                        yFunction: function(age) {
                                            return (-5 / (.9 * age + 2.5) + 2) * this.r3 * .5
                                        }
                                    });
                                    for (var i_3 = 0; i_3 < 2 * Math.PI; i_3 += .7 + .4 * Math.random()) new Sprite_1.Sprite(this.game, {
                                        x: x_,
                                        y: y_ - this.game.SHOT_HEIGHT,
                                        img: Img_1.imgCoords.dust2,
                                        scaleFunction: function(age) {
                                            return this.r4 + .04 * age
                                        },
                                        alphaFunction: function(age) {
                                            return .2 * Math.max(0, 1 - age / this.ticksToLive)
                                        },
                                        age: 20 + 10 * Math.random(),
                                        r1: x_circular * Math.sin(i_3) * (.8 * Math.random() + .6),
                                        r2: y_circular * Math.sin(i_3) * (.8 * Math.random() + .6),
                                        r3: 1 * Math.cos(i_3) * (.8 * Math.random() + .6),
                                        r4: .2 * Math.random() + .5,
                                        xFunction: function(age) {
                                            return (-5 / (.9 * age + 2.5) + 2) * this.r1 * .2
                                        },
                                        yFunction: function(age) {
                                            return (-5 / (.9 * age + 2.5) + 2) * this.r2 * .2
                                        },
                                        zFunction: function(age) {
                                            return (-5 / (.9 * age + 2.5) + 2) * this.r3 * .2
                                        }
                                    });
                                    this.isMulti || Sound_1.Sound.playSound("gun_impact", x_, y_, 1)
                                }
                                if (this.weapon.isLaser) {
                                    for (var k = 0; k < 3; k++) new Sprite_1.Sprite(this.game, {
                                        x: x_ + .6 * Math.random() - .3,
                                        y: y_ + .6 * Math.random() - .3,
                                        img: Img_1.imgCoords.dust1,
                                        scaleFunction: function(age) {
                                            return this.r1 - .01 * age
                                        },
                                        r1: Math.random() + 1,
                                        alphaFunction: function(age) {
                                            return .4 * Math.max(0, 1 - age / this.ticksToLive)
                                        },
                                        age: 20 * (1.7 + Math.random()),
                                        r2: 40 * Math.random() + 12,
                                        zFunction: function(age) {
                                            return this.game.SHOT_HEIGHT + age / this.r2
                                        }
                                    });
                                    for (var i_4 = 0; i_4 < 7; i_4++) new Sprite_1.Sprite(this.game, {
                                        x: x_,
                                        y: y_,
                                        img: Img_1.imgCoords[this.weapon.particle],
                                        scaleFunction: function(age) {
                                            return this.r4 - .2 * age
                                        },
                                        age: 5 + 5 * Math.random(),
                                        r1: .6 * Math.random() + .7,
                                        r2: .6 * stepX + .8 * stepX * Math.random(),
                                        r3: .6 * stepY + .8 * stepY * Math.random(),
                                        r4: 2 * Math.random() + 1,
                                        zFunction: function(age) {
                                            return .6 * Math.max(.3, Math.abs(Math.cos(age * this.r1 * .2)) / Math.max(1, .2 * age))
                                        },
                                        xFunction: function(age) {
                                            return (-5 / (.08 * age + 1) + 5) * this.r2
                                        },
                                        yFunction: function(age) {
                                            return (-5 / (.08 * age + 1) + 5) * this.r3
                                        }
                                    });
                                    Sound_1.Sound.playSound("sizzle", x_, y_, .35), new Sprite_1.Sprite(this.game, {
                                        x: x_,
                                        y: y_,
                                        img: Img_1.imgCoords[this.weapon.light],
                                        scaleFunction: function(age) {
                                            return Math.max(0, 4 - age / this.ticksToLive * 4)
                                        },
                                        alphaFunction: function(age) {
                                            return .17 * Math.max(0, 1 - age / this.ticksToLive)
                                        },
                                        age: 15
                                    })
                                }
                            }
                        }, Projectile.prototype.getYDrawingOffset = function() {
                            return this.y
                        }, Projectile.prototype.draw = function(exactTicks, x1, y1, x2, y2, percentageOfCurrentTickPassed) {
                            if (this.x + 3 >= x1 && this.y + 3 >= y1 && this.x - 3 <= x2 && this.y - 3 <= y2 && !this.dieAt) {
                                var c = this.game.ctx,
                                    x = this.x0 + percentageOfCurrentTickPassed * (this.x - this.x0),
                                    y = this.y0 + percentageOfCurrentTickPassed * (this.y - this.y0) - this.game.SHOT_HEIGHT;
                                if (x2 = x + this.drawLenX, y2 = y + this.drawLenY, this.weapon.isZombieRangedWeapon) {
                                    var scale = this.game.SCALE_FACTOR * (this.weapon.projectileScale ? this.weapon.projectileScale : 1);
                                    scale += .18 * scale * Math.sin(.6 * exactTicks), c.drawImage(_1.imgs.rangedZombie, 24, 216, 24, 24, (x - this.game.cameraX) * this.game.FIELD_SIZE - 12 * scale, (y - this.game.cameraY) * this.game.FIELD_SIZE - 12 * scale, 24 * scale, 24 * scale)
                                } else if (this.weapon.projectileImg) {
                                    var direction = 16 === this.weapon.directions ? (0, functions_1.getDirectionFromAgle16)(this.x0, this.y0, this.x, this.y) : (0, functions_1.getDirectionFromAgle)(this.x0, this.y0, this.x, this.y);
                                    if (1 === this.weapon.directions && (direction = 0), this.weapon.isRocket && !this.weapon.noRocketEffects) {
                                        var vecY = this.x0 - this.x,
                                            vecX = -(this.y0 - this.y),
                                            len = Math.sqrt(vecX * vecX + vecY * vecY),
                                            targetLen = .12 * Math.sin(exactTicks / 1.5);
                                        x += vecX * targetLen / len, y += vecY * targetLen / len;
                                        var img_1 = Img_1.imgCoords.fire5,
                                            xF = x - .7 * this.drawLenX,
                                            yF = y - .7 * this.drawLenY,
                                            scale_1 = .9 * this.game.SCALE_FACTOR * (.6 * Math.random() + .6);
                                        c.globalAlpha = .5 * Math.random() + .2, c.drawImage(_1.imgs.miscSheet, img_1.x, img_1.y, img_1.w, img_1.h, (xF - this.game.cameraX) * this.game.FIELD_SIZE - img_1.w / 2 * scale_1, (yF - this.game.cameraY) * this.game.FIELD_SIZE - img_1.h / 2 * scale_1, img_1.w * scale_1, img_1.h * scale_1), c.globalAlpha = 1, img_1 = Img_1.imgCoords.fire4, xF = x - 1.05 * this.drawLenX, yF = y - 1.05 * this.drawLenY, scale_1 = .9 * this.game.SCALE_FACTOR * (.6 * Math.random() + .6), c.globalAlpha = .5 * Math.random() + .2, c.drawImage(_1.imgs.miscSheet, img_1.x, img_1.y, img_1.w, img_1.h, (xF - this.game.cameraX) * this.game.FIELD_SIZE - img_1.w / 2 * scale_1, (yF - this.game.cameraY) * this.game.FIELD_SIZE - img_1.h / 2 * scale_1, img_1.w * scale_1, img_1.h * scale_1), c.globalAlpha = 1
                                    }
                                    if (this.weapon.light) {
                                        var img_2 = Img_1.imgCoords[this.weapon.light],
                                            size = this.game.FIELD_SIZE * (this.game, 7.5 + getGameTickRng2(this.game, 0, 1));
                                        c.globalAlpha = .08 + getGameTickRng(this.game, 0, .04), c.drawImage(_1.imgs.miscSheet, img_2.x, img_2.y, img_2.w, img_2.h, (x - this.game.cameraX) * this.game.FIELD_SIZE - size / 2, (y + .5 - this.game.cameraY) * this.game.FIELD_SIZE - size / 2, size, size), c.globalAlpha = 1, img_2 = Img_1.imgCoords.light_white, size = this.game.FIELD_SIZE * (7.5 + getGameTickRng(this.game, 0, 1)), c.globalAlpha = .08 + getGameTickRng2(this.game, 0, .04), c.drawImage(_1.imgs.miscSheet, img_2.x, img_2.y, img_2.w, img_2.h, (x - this.game.cameraX) * this.game.FIELD_SIZE - size / 2, (y + .5 - this.game.cameraY) * this.game.FIELD_SIZE - size / 2, size, size), c.globalAlpha = 1
                                    }
                                    if (this.weapon.glowLightImg) {
                                        var img_3 = Img_1.imgCoords[this.weapon.glowLightImg],
                                            scale_2 = 4 * this.game.SCALE_FACTOR;
                                        c.globalAlpha = .25, c.drawImage(_1.imgs.miscSheet, img_3.x, img_3.y, img_3.w, img_3.h, (x - this.game.cameraX) * this.game.FIELD_SIZE - img_3.w / 2 * scale_2, (y + this.game.SHOT_HEIGHT - this.game.cameraY) * this.game.FIELD_SIZE - img_3.h / 2 * scale_2, img_3.w * scale_2, img_3.h * scale_2), c.globalAlpha = 1
                                    }
                                    var img = Img_1.imgCoords[this.weapon.projectileImg],
                                        frameH = img.h / (this.weapon.directions ? this.weapon.directions : 8),
                                        xMod = (scale = this.game.SCALE_FACTOR * (this.weapon.projectileScale ? this.weapon.projectileScale : 1), 0),
                                        yMod = 0;
                                    this.weapon.projectileWiggle && (scale *= .9 + .91235 * Math.floor(.5 * this.game.ticksCounter) % .2, xMod = .7 * (.131235 * Math.floor(.8 * this.game.ticksCounter) % .2 - .1), yMod = .7 * (.1213555635 * Math.floor(1.1 * this.game.ticksCounter) % .2 - .1)), c.drawImage(_1.imgs.miscSheet, img.x, img.y + frameH * direction, img.w, frameH, (x + xMod - this.game.cameraX) * this.game.FIELD_SIZE - img.w / 2 * scale, (y + yMod - this.game.cameraY) * this.game.FIELD_SIZE - frameH / 2 * scale, img.w * scale, frameH * scale)
                                }
                            }
                        }, Projectile
                    }();

                function getGameTickRng(game, from, to, seed) {
                    return void 0 === seed && (seed = game ? game.ticksCounter : 0), from + (93071 * seed + 49297) % 233280 / 233280 * (to - from)
                }

                function getGameTickRng2(game, from, to, seed) {
                    return void 0 === seed && (seed = game ? game.ticksCounter : 0), from + (34873 * seed + 49297) % 233280 / 233280 * (to - from)
                }
                exports.Projectile = Projectile
            },
            192: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.Skin_ = void 0;
                var _1 = __webpack_require__(2174),
                    Abilities_1 = __webpack_require__(6489),
                    functions_1 = __webpack_require__(8394),
                    Skins_1 = __webpack_require__(3346),
                    config_1 = __webpack_require__(5303),
                    functions_2 = __webpack_require__(7582),
                    Img_1 = __webpack_require__(360),
                    Network_1 = __webpack_require__(367),
                    Sound_1 = __webpack_require__(3754),
                    UI_1 = __webpack_require__(2664),
                    resourceBar_1 = __webpack_require__(4542),
                    clickable_1 = __webpack_require__(2513),
                    hoverLight_1 = __webpack_require__(2068),
                    lang_1 = __webpack_require__(9655),
                    toolTip_1 = __webpack_require__(5847),
                    _heroSelect = 0,
                    _currentUpgradeHero = 0,
                    _heroClick = 0,
                    Skin_ = function() {
                        function Skin_() {}
                        return Skin_.show = function() {
                            if (config_1.playerData) {
                                _heroSelect || (_heroSelect = config_1.playerData ? config_1.playerData.skin.id : 0), _heroClick || (_heroClick = _heroSelect), _currentUpgradeHero = 0;
                                var o = this.get();
                                this.tplHeroList(), o.style.display = "block"
                            }
                        }, Skin_.get = function() {
                            return document.getElementById("skin") || this._create()
                        }, Skin_._createUpgrade = function() {
                            var box = document.createElement("div");
                            box.id = "upgradeHero", box.className = "F-Window";
                            var h2 = document.createElement("div");
                            h2.className = "title", h2.innerText = "BUY SLAYER", box.appendChild(h2);
                            var inBox = document.createElement("div");
                            inBox.className = "content", box.appendChild(inBox);
                            var close = document.createElement("div");
                            close.className = "F-Button close", close.onclick = this.closeUpgrade, box.appendChild(close);
                            var divBG = document.createElement("div");
                            return divBG.className = "bg", box.appendChild(divBG), document.body.appendChild(box), box
                        }, Skin_.closeUpgrade = function() {
                            var o = document.getElementById("upgradeHero");
                            o && (o.style.display = "none")
                        }, Skin_._create = function() {
                            var _this = this,
                                box = document.createElement("div");
                            box.id = "skin", box.className = "F-Window";
                            var h2 = document.createElement("div");
                            h2.className = "title", h2.innerText = lang_1.lang.get("hero.list.title"), box.appendChild(h2);
                            var inBox = document.createElement("div");
                            inBox.className = "content";
                            var filterBox = document.createElement("div");
                            filterBox.className = "filter", inBox.appendChild(filterBox);
                            var viewBox = document.createElement("div");
                            viewBox.className = "view", inBox.appendChild(viewBox);
                            var heroBox = document.createElement("div");
                            heroBox.className = "hero", inBox.appendChild(heroBox), box.appendChild(inBox);
                            var close = document.createElement("div");
                            close.className = "F-Button close", close.onclick = function() {
                                _this.close()
                            }, box.appendChild(close);
                            var divBG = document.createElement("div");
                            return divBG.className = "bg", box.appendChild(divBG), document.body.appendChild(box), _heroClick = config_1.playerData ? config_1.playerData.skin.id : 0, box
                        }, Skin_.upgradeHero = function(heroId) {
                            var o = document.getElementById("upgradeHero");
                            o || (o = this._createUpgrade()), _currentUpgradeHero = heroId, this.refreshUpgrade(), o.style.display = "block"
                        }, Skin_.refreshUpgrade = function() {
                            var _this = this,
                                heroId = _currentUpgradeHero,
                                o = document.getElementById("upgradeHero");
                            if (o) {
                                var box = o.querySelector(".content");
                                box.innerHTML = "", box.style.textAlign = "center";
                                var canvas = document.createElement("canvas");
                                canvas.className = "hat", canvas.width = 100, canvas.height = 100, canvas.style.width = "200px", canvas.style.height = "200px", canvas.style.marginTop = "10px", box.appendChild(canvas);
                                var ctx = canvas.getContext("2d");
                                ctx.mozImageSmoothingEnabled = !1, ctx.msImageSmoothingEnabled = !1, ctx.imageSmoothingEnabled = !1, (0, functions_2.drawHat)(ctx, Skins_1.hats[heroId], 3.5, 2, 100, 100);
                                var skinName = document.createElement("p");
                                if (skinName.innerHTML = Skins_1.hats[heroId].name, skinName.style.fontSize = "30px", skinName.style.marginBottom = "60px", box.appendChild(skinName), !(0, functions_1.arrayContains)(config_1.playerData.skinsUnlocked.split(";"), heroId.toString())) {
                                    if (!Skins_1.hats[heroId].gems && !Skins_1.hats[heroId].lvl) {
                                        var cost = Skins_1.goldCostBySkinQuality[Skins_1.hats[heroId].quality];
                                        this._appendButton(box, "full", "Buy for Gold x " + cost, config_1.playerData.gold >= cost, (function() {
                                            _this._actionBuy("gold", heroId)
                                        }))
                                    }
                                    if (Skins_1.hats[heroId].gems && this._appendButton(box, "gem", "Buy for Gem x " + Skins_1.hats[heroId].gems, config_1.playerData.gems >= Skins_1.hats[heroId].gems, (function() {
                                            _this._actionBuy("gems", heroId)
                                        })), Skins_1.hats[heroId].lvl) {
                                        var lvlUnlock = document.createElement("p");
                                        lvlUnlock.innerHTML = "Gets unlocked when you reach level " + Skins_1.hats[heroId].lvl, lvlUnlock.style.fontSize = "20px", lvlUnlock.style.color = "#dab700", box.appendChild(lvlUnlock)
                                    }
                                }
                                this.tplHeroList(), this.tplHeroView(Skins_1.hats[heroId])
                            }
                        }, Skin_._actionBuy = function(action, heroId) {
                            document.getElementById("upgradeHero") && (Network_1.Network.send("buyHero$" + action + "$" + heroId), config_1.playerData.skinsUnlocked += ";" + heroId, "gold" === action ? config_1.playerData.gold -= Skins_1.goldCostBySkinQuality[Skins_1.hats[heroId].quality] : "gems" === action && (config_1.playerData.gems -= Skins_1.hats[heroId].gems), resourceBar_1.resourceBar.refresh(), Skin_.refreshUpgrade(), UI_1.unlocks2Show.push({
                                type: UI_1.UnlockType.Skin,
                                skin: Skins_1.hats[heroId]
                            }), UI_1.UI.showAchivement(), this.closeUpgrade())
                        }, Skin_._appendText = function(box, className, text) {
                            var p = document.createElement("p");
                            p.className = className, p.innerText = text, box.appendChild(p)
                        }, Skin_._appendButton = function(box, className, text, isEnable, onClick) {
                            text = (text = text.replace(/Gold/, '<i class="gold"></i>')).replace(/Gem/, '<i class="gem"></i>');
                            var button = document.createElement("button");
                            button.className = className + (isEnable ? "" : " disabled"), button.innerHTML = text, isEnable ? button.onclick = onClick : button.disabled = !0;
                            var div = document.createElement("div");
                            div.className = className, div.appendChild(button), box.appendChild(div)
                        }, Skin_.tplHeroList = function() {
                            var _this = this,
                                o = document.getElementById("skin");
                            if (o) {
                                var list = o.querySelector("div.hero");
                                list.innerHTML = "";
                                for (var skinsArr = config_1.playerData.skinsUnlocked.split(";"), _i = 0, _a = [!0, !1]; _i < _a.length; _i++)
                                    for (var isHave = _a[_i], _loop_1 = function(hat) {
                                            var iHaveSkin = (0, functions_1.arrayContains)(skinsArr, hat.id.toString());
                                            if (iHaveSkin !== isHave) return "continue";
                                            var o_1 = document.createElement("div"),
                                                className = "one-hero";
                                            iHaveSkin || (className += " nohave"), o_1.className = className, hat.id === _heroSelect && (o_1.className = o_1.className.replace(" selected", "") + " selected"), o_1.appendChild(this_1.tplCanvasHero(hat));
                                            var nameColor = Skins_1.hatQualityColor[hat.quality] ? " style='color: " + Skins_1.hatQualityColor[hat.quality] + ";' " : "",
                                                name_1 = document.createElement("div");
                                            name_1.className = "info", name_1.innerHTML = '<br><span class="name" ' + nameColor + ">" + hat.name + '</span><br><span class="lvl">' + (iHaveSkin ? "" : lang_1.lang.get("hero.buy.locked")) + "</span>", o_1.appendChild(name_1), o_1.onclick = function() {
                                                _this.clickHeroSelect(_this, hat, o_1)
                                            }, list.appendChild(o_1), _heroClick === hat.id && o_1.click()
                                        }, this_1 = this, _b = 0, hats_1 = Skins_1.hats; _b < hats_1.length; _b++) {
                                        _loop_1(hats_1[_b])
                                    }
                            }
                        }, Skin_.tplHeroView = function(hat) {
                            var _this = this,
                                o = document.getElementById("skin");
                            if (o) {
                                var iHaveSkin = (0, functions_1.arrayContains)(config_1.playerData.skinsUnlocked.split(";"), hat.id.toString()),
                                    view = o.querySelector("div.view");
                                view.innerHTML = "", view.appendChild(this.tplCanvasHero(hat));
                                var name = document.createElement("div");
                                name.className = "info";
                                var s = '<br /><span class="name">' + hat.name + "</span>";
                                iHaveSkin || (s += '<br><span class="locked">' + lang_1.lang.get("hero.buy.locked") + "</span>"), name.innerHTML = s, view.appendChild(name);
                                var bSelect = _heroSelect === hat.id;
                                if (hat.by) {
                                    var pAuthor = document.createElement("p");
                                    pAuthor.className = "skin-author", pAuthor.innerText = lang_1.lang.get("skin.author").replace(/\[\[name\]\]/, hat.by), view.appendChild(pAuthor)
                                }
                                var p = document.createElement("p");
                                p.className = "btn", -1 === ["en-US", "zh-CN", "zh-TW"].indexOf(lang_1.lang.locale) && (p.className = "btn btn-small"), p.appendChild(this._tplHeroViewButton("setHat", iHaveSkin, bSelect ? lang_1.lang.get("hero.list.currentBtn") : lang_1.lang.get("hero.list.selectBtn"), (function() {
                                    bSelect ? _this.close() : _this.setHero(hat.id)
                                }))), iHaveSkin || p.appendChild(this._tplHeroViewButton("upgrade", !0, lang_1.lang.get("hero.list.buyBtn"), (function() {
                                    _this.upgradeHero(hat.id)
                                }))), view.appendChild(p)
                            }
                        }, Skin_._tplHeroViewButton = function(className, isEnable, name, click) {
                            var button = document.createElement("button");
                            return button.innerText = name, isEnable ? (button.onclick = click, button.className = className) : (button.disabled = !0, button.className = className + " disabled"), button
                        }, Skin_.setHero = function(id) {
                            config_1.playerData.skin = Skins_1.hats[id], _heroSelect = id, Network_1.Network.send("setHat$" + id), this.tplHeroList(), this.refreshAbilitiesButton(null)
                        }, Skin_.resetCard = function(s) {
                            config_1.playerData.skinsUnlocked = s
                        }, Skin_.tplCanvasHero = function(hat) {
                            var canvas = document.createElement("canvas");
                            canvas.className = "hat", canvas.width = 100, canvas.height = 100;
                            var ctx = canvas.getContext("2d");
                            return ctx.mozImageSmoothingEnabled = !1, ctx.msImageSmoothingEnabled = !1, ctx.imageSmoothingEnabled = !1, (0, functions_2.drawHat)(ctx, hat, 3.5, 2, 100, 100), canvas
                        }, Skin_.tplCanvasAb = function(i, size) {
                            (size |= 0) || (size = 32);
                            var canvas = document.createElement("canvas");
                            canvas.width = size, canvas.height = size;
                            var ctx = canvas.getContext("2d");
                            ctx.mozImageSmoothingEnabled = !1, ctx.msImageSmoothingEnabled = !1, ctx.imageSmoothingEnabled = !1;
                            var a = Abilities_1.abilities[i],
                                img = Img_1.imgCoords[a.icon],
                                fac = size / Math.max(img.w, img.h),
                                w = img.w * fac,
                                h = img.h * fac;
                            return ctx.drawImage(_1.imgs.miscSheet, img.x, img.y, img.w, img.h, 0, 0, w, h), canvas
                        }, Skin_.close = function() {
                            var o = document.getElementById("skin");
                            o && (o.style.display = "none"), Skin_.closeUpgrade()
                        }, Skin_.refreshAbilitiesButton = function(button) {
                            (button || (button = document.getElementById("ability_button_main"))) && (Skin_.abilitiesThumbnail(button, config_1.playerData && config_1.playerData.authLevel >= 6 ? config_1.playerData.abilities : (0, Abilities_1.getDefaultAbilityObj)(Abilities_1.abilities)), (0, hoverLight_1.hoverLight)(button, {
                                width: "180px",
                                height: "118px",
                                left: "-6px",
                                top: "-6px"
                            }), (0, toolTip_1.tooltip)(button, {
                                tip: config_1.playerData.authLevel >= 6 ? "Change abilities" : "Register to change abilities",
                                align: "center"
                            }), (0, clickable_1.clickable)(button))
                        }, Skin_.clickHeroSelect = function(obj, hat, o) {
                            Sound_1.Sound.playSound("click"), _heroClick = hat.id, obj.prevSelect && (obj.prevSelect.className = obj.prevSelect.className.replace(" click", "")), o.className = o.className.replace(" click", "") + " click", obj.prevSelect = o, obj.tplHeroView(hat)
                        }, Skin_.abilitiesThumbnail = function(box, pl, size) {
                            size || (size = 32), box.innerHTML = "";
                            for (var _i = 0, _a = [!1, !0]; _i < _a.length; _i++) {
                                for (var isPassive = _a[_i], i = 0; i < Abilities_1.abilities.length; i++) {
                                    var playerAbility = pl[i];
                                    if (playerAbility && 0 !== playerAbility.lvl) {
                                        var ab = Abilities_1.abilities[i];
                                        if (ab.type === Abilities_1.AbilityType.Passive === isPassive) {
                                            var c_ = document.createElement("canvas");
                                            c_.width = size, isPassive || (c_.width *= 1.5), c_.height = c_.width;
                                            var ctx_ = c_.getContext("2d");
                                            ctx_.mozImageSmoothingEnabled = !1, ctx_.msImageSmoothingEnabled = !1, ctx_.imageSmoothingEnabled = !1;
                                            var img = Img_1.imgCoords.button;
                                            ctx_.drawImage(_1.imgs.miscSheet, img.x, img.y, img.w, img.h, 0, 0, c_.width, c_.height), img = Img_1.imgCoords[ab.icon];
                                            var fac = .75 * c_.width / Math.max(img.w, img.h),
                                                w = img.w * fac,
                                                h = img.h * fac;
                                            ctx_.drawImage(_1.imgs.miscSheet, img.x, img.y, img.w, img.h, (c_.width - w) / 2, (c_.height - h) / 2, w, h), box.appendChild(c_)
                                        }
                                    }
                                }
                                isPassive || box.appendChild(document.createElement("br"))
                            }
                        }, Skin_
                    }();
                exports.Skin_ = Skin_
            },
            6921: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.Splash = void 0;
                var _1 = __webpack_require__(2174),
                    Sound_1 = __webpack_require__(3754),
                    Splash = function() {
                        function Splash(game, x, y, img, scale, age, loop, yOffsetMod, animSpeed) {
                            this.game = game, this.x = x, this.y = y, this.yOffset = y + (yOffsetMod || 0), this.scale = scale || 1, this.img = img, this.frameW = img.frameW ? img.frameW : img.w, this.countFrames = img.w / this.frameW, this.tickOfBirth = game.ticksCounter, this.tickOfDeath = this.tickOfBirth + (void 0 === age ? 40 : 0 === age ? 999999999 : age), this.loop = !!loop, this.frameOffset = this.loop ? Math.floor(999 * Math.random()) : 0, this.animSpeed = animSpeed || .5, Sound_1.Sound.playSound("splash", this.x, this.y), game.effects.push(this), game.addToObjectsToDraw(this)
                        }
                        return Splash.prototype.update = function() {
                            return this.tickOfDeath > this.game.ticksCounter
                        }, Splash.prototype.getYDrawingOffset = function() {
                            return this.yOffset
                        }, Splash.prototype.draw = function(exactTicks, x1, y1, x2, y2, percentageOfCurrentTickPassed) {
                            if (this.x + 3 >= x1 && this.y + 3 >= y1 && this.x - 3 <= x2 && this.y - 3 <= y2) {
                                var age = exactTicks - this.tickOfBirth,
                                    scale = this.game.SCALE_FACTOR * this.scale,
                                    x_offset = Math.floor((age + this.frameOffset) * this.animSpeed);
                                if (this.loop && (x_offset %= this.countFrames), !(x_offset > this.countFrames - 1)) {
                                    var drawX = this.game.g2rx(this.x) - this.frameW / 2 * scale,
                                        drawY = this.game.g2ry(this.y) - this.img.h / 2 * scale;
                                    this.game.ctx.globalAlpha = .9, this.game.ctx.drawImage(_1.imgs.miscSheet, this.img.x + x_offset * this.frameW, this.img.y, this.frameW, this.img.h, drawX, drawY, this.frameW * scale, this.img.h * scale), this.game.ctx.globalAlpha = 1
                                }
                            }
                        }, Splash
                    }();
                exports.Splash = Splash
            },
            3754: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.Sound = void 0;
                var Data_1 = __webpack_require__(6313),
                    config_1 = __webpack_require__(5303),
                    root_1 = __webpack_require__(17),
                    _sounds = {};
                for (var name_1 in Data_1.soundLinks) {
                    _sounds[name_1] = [];
                    for (var _i = 0, _a = Data_1.soundLinks[name_1]; _i < _a.length; _i++) {
                        var file = _a[_i];
                        _sounds[name_1].push(new Audio(file))
                    }
                }
                exports.Sound = {
                    getVolumeModifier: function(game, x, y) {
                        var volume = 1,
                            left = game.cameraX,
                            top = game.cameraY,
                            right = game.cameraX + window.innerWidth / game.FIELD_SIZE,
                            bottom = game.cameraY + window.innerHeight / game.FIELD_SIZE,
                            distX = 0;
                        (x < left || x > right) && (distX = Math.min(Math.abs(x - left), Math.abs(x - right)));
                        var distY = 0;
                        (y < top || y > bottom) && (distY = Math.min(Math.abs(y - top), Math.abs(y - bottom)));
                        var dist = Math.sqrt(distX * distX + distY * distY);
                        return dist > 0 && (volume = 1 - dist / 5), volume *= Math.min(game.SCALE_FACTOR / 15 + .6, 1)
                    },
                    playSound: function(sound, x, y, volumeModifier) {
                        if (!(config_1.options.sound_volume > 0) || !_sounds[sound] || null !== root_1.root.game && root_1.root.game.fastForward) return null;
                        var volume = void 0 !== x && void 0 !== y && null !== root_1.root.game ? exports.Sound.getVolumeModifier(root_1.root.game, x, y) : 1;
                        if ((volume = volumeModifier ? volume * volumeModifier : volume) <= 0) return null;
                        for (var s = _sounds[sound], readySounds = [], i = 0; i < s.length; i++)(s[i].currentTime >= s[i].duration || 0 === s[i].currentTime || !s[i].currentTime) && readySounds.push(s[i]);
                        if (0 === readySounds.length) return null;
                        var soundToPlay = readySounds[Math.floor(Math.random() * readySounds.length)];
                        return soundToPlay.loop = !1, soundToPlay.play(), (volume = volume * config_1.options.sound_volume * .7) > 1 ? volume = 1 : volume < 0 && (volume = 0), soundToPlay.volume = volume, soundToPlay
                    }
                }
            },
            9145: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.Sprite = void 0;
                var _1 = __webpack_require__(2174),
                    Sprite = function() {
                        function Sprite(game, data) {
                            this.game = game, this.offsetDrawing = 5, this.age = data.age || 30, this.x = data.x, this.y = data.y, this.dieOnCollision = !!data.dieOnCollision, this.img = data.img, this.r0 = data.r0, this.r1 = data.r1, this.r2 = data.r2, this.r3 = data.r3, this.r4 = data.r4, this.r5 = data.r5, this.tickOfBirth = game.ticksCounter, this.ticksToLive = this.age, this.ticksLeft = this.ticksToLive, this.tickOfDeath = this.tickOfBirth + this.ticksToLive, this.alphaFunction = data.alphaFunction || function(age) {
                                return this.ticksToLive - age < 20 ? Math.max((this.ticksToLive - age) / 20, 0) : 1
                            }, this.xFunction = data.xFunction, this.yFunction = data.yFunction, this.zFunction = data.zFunction, this.scaleFunction = data.scaleFunction, this.height = data.height || 0, this.drawY = this.y, game.effects.push(this), game.addToObjectsToDraw(this)
                        }
                        return Sprite.prototype.update = function() {
                            if (this.dieOnCollision) {
                                var age = this.game.ticksCounter + 1 - this.tickOfBirth,
                                    x = this.x;
                                this.xFunction && (x += this.xFunction(age));
                                var y = this.y;
                                return this.yFunction && (y += this.yFunction(age)), this.game.getFieldPath(Math.floor(x), Math.floor(y)) > 5 && this.tickOfDeath > this.game.ticksCounter
                            }
                            return this.tickOfDeath > this.game.ticksCounter
                        }, Sprite.prototype.getYDrawingOffset = function() {
                            return this.drawY > -999999 ? this.drawY : -1
                        }, Sprite.prototype.draw = function(exactTicks, x1, y1, x2, y2, percentageOfCurrentTickPassed) {
                            if (this.x + this.offsetDrawing >= x1 && this.y + this.offsetDrawing >= y1 && this.x - this.offsetDrawing <= x2 && this.y - 2 * this.offsetDrawing <= y2 && this.img) {
                                var age = exactTicks - this.tickOfBirth;
                                this.ticksLeft = Math.max(this.ticksToLive - age, 0);
                                var alpha = this.alphaFunction ? this.alphaFunction(age) : 1,
                                    scale = Math.max(this.scaleFunction(age), 0) * this.game.SCALE_FACTOR,
                                    z = this.zFunction ? this.zFunction(age) : 0,
                                    x = this.x;
                                this.xFunction && (x += this.xFunction(age));
                                var y = this.y;
                                this.yFunction && (y += .75 * this.yFunction(age)), this.drawY = y, y > -999999 || y < -999999 || (this.drawY = -10, this.ticksLeft = 0);
                                var drawX = this.game.g2rx(x) - this.img.w / 2 * scale,
                                    drawY = this.game.g2ry(y - z) - this.img.h / 2 * scale;
                                this.game.ctx.globalAlpha = alpha, this.game.ctx.drawImage(_1.imgs.miscSheet, this.img.x, this.img.y, this.img.w, this.img.h, drawX, drawY, this.img.w * scale, this.img.h * scale), this.game.ctx.globalAlpha = 1
                            }
                        }, Sprite
                    }();
                exports.Sprite = Sprite
            },
            7609: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.Tile = void 0;
                var _1 = __webpack_require__(2174),
                    Tile = function() {
                        function Tile(x, y, type, game) {
                            this.isTile = !0, this.game = game, this.x = x, this.y = y, this.img = type.img, this.type = type, game.addToObjectsToDraw(this), game.noGridTiles.push(this)
                        }
                        return Tile.prototype.getYDrawingOffset = function() {
                            return this.y
                        }, Tile.prototype.draw = function(exactTicks, x1, y1, x2, y2) {
                            if (this.x + 3 >= x1 && this.y + 3 >= y1 && this.x - 3 <= x2 && this.y - 3 <= y2) {
                                var scale = this.game.SCALE_FACTOR,
                                    drawX = this.game.g2rx(this.x) - this.img.w / 2 * scale,
                                    drawY = this.game.g2ry(this.y) - this.img.h / 2 * scale;
                                this.game.ctx.drawImage(_1.imgs.tileSheet, this.img.x, this.img.y, this.img.w, this.img.h, drawX, drawY, this.img.w * scale, this.img.h * scale)
                            }
                        }, Tile
                    }();
                exports.Tile = Tile
            },
            2664: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.attemptExitGame = exports.UI = exports.currentProfile = exports.unlocks2Show = exports.UnlockType = exports.authLevelNames = void 0;
                var UnlockType, _1 = __webpack_require__(2174),
                    Data_1 = __webpack_require__(6313),
                    GameTypes_1 = __webpack_require__(3963),
                    Skins_1 = __webpack_require__(3346),
                    config_1 = __webpack_require__(5303),
                    functions_1 = __webpack_require__(7582),
                    Game_1 = __webpack_require__(9158),
                    Input_1 = __webpack_require__(5860),
                    map1_1 = __webpack_require__(9620),
                    NameColor_1 = __webpack_require__(3280),
                    Network_1 = __webpack_require__(367),
                    rankInGame_1 = __webpack_require__(6480),
                    root_1 = __webpack_require__(17),
                    Sound_1 = __webpack_require__(3754),
                    clanMain_1 = __webpack_require__(429),
                    confirm_1 = __webpack_require__(9110),
                    emotes_1 = __webpack_require__(5165),
                    homeScreen_1 = __webpack_require__(1292),
                    levelUp_1 = __webpack_require__(3519),
                    optionsScreen_1 = __webpack_require__(613),
                    playerProfileScreen_1 = __webpack_require__(3550),
                    resourceBar_1 = __webpack_require__(4542),
                    respawn_1 = __webpack_require__(6749),
                    viewHelpers_1 = __webpack_require__(7174),
                    clickable_1 = __webpack_require__(2513),
                    floatTip_1 = __webpack_require__(9177),
                    iconButton_1 = __webpack_require__(3831),
                    labelButton_1 = __webpack_require__(3329),
                    lang_1 = __webpack_require__(9655);
                exports.authLevelNames = [], exports.authLevelNames[Data_1.AUTH_LEVEL.NONE] = "Member", exports.authLevelNames[Data_1.AUTH_LEVEL.GUEST] = "", exports.authLevelNames[Data_1.AUTH_LEVEL.PLAYER] = "", exports.authLevelNames[Data_1.AUTH_LEVEL.MOD] = "Moderator", exports.authLevelNames[Data_1.AUTH_LEVEL.ADMIN] = "Admin",
                    function(UnlockType) {
                        UnlockType[UnlockType.Lvlup = 0] = "Lvlup", UnlockType[UnlockType.Skin = 1] = "Skin", UnlockType[UnlockType.Emote = 2] = "Emote"
                    }(UnlockType = exports.UnlockType || (exports.UnlockType = {})), exports.unlocks2Show = [], exports.currentProfile = null;
                var buttonData = {
                    exitGame: {
                        widget: "iconButton",
                        cssId: "btnExitGame",
                        iconClass: "iconButtonExitGame",
                        methodShow: function() {
                            attemptExitGame()
                        },
                        methodShouldShow: function() {
                            return (0, functions_1.isInGame)()
                        },
                        label: "top.buttons.exit_game.tooltip"
                    },
                    gameOptions: {
                        widget: "iconButton",
                        cssId: "btnOptions",
                        iconClass: "iconButtonOptions",
                        methodShow: function() {
                            exports.UI.toggleOptionsMenu()
                        },
                        label: "top.buttons.options.tooltip"
                    },
                    fullScreen: {
                        widget: "iconButton",
                        cssId: "btnSeparate",
                        iconClass: "iconButtonFullScreen",
                        methodShow: function() {
                            (0, functions_1.toggleFullscreen)(document.documentElement)
                        },
                        methodShouldShow: function() {
                            return !0
                        },
                        label: "options.btn_fullscreen.tooltip"
                    },
                    rankings: {
                        widget: "iconButton",
                        cssId: "btnRankList",
                        iconClass: "iconButtonRankList",
                        methodShow: function() {
                            exports.UI.togglePlayerList(0)
                        },
                        methodShouldShow: function() {
                            return !(0, functions_1.isInGame)()
                        },
                        label: "top.buttons.ranking.tooltip"
                    },
                    myProfile: {
                        widget: "iconButton",
                        cssId: "btnProfile",
                        iconClass: "iconButtonProfile",
                        methodShow: function() {
                            exports.UI.showPlayerInfoById(config_1.playerData.db_id)
                        },
                        methodShouldShow: function() {
                            return !(0, functions_1.isInGame)() && config_1.playerData.authLevel >= Data_1.AUTH_LEVEL.PLAYER
                        },
                        label: "top.buttons.profile.tooltip"
                    },
                    myClan: {
                        widget: "iconButton",
                        cssId: "btnClanList",
                        iconClass: "iconButtonClanList",
                        methodShow: function() {
                            clanMain_1.clanMain.show()
                        },
                        methodShouldShow: function() {
                            return !(0, functions_1.isInGame)() && config_1.playerData.authLevel >= Data_1.AUTH_LEVEL.PLAYER
                        },
                        label: "top.buttons.myclan.tooltip"
                    },
                    emotes: {
                        widget: "iconButton",
                        cssId: "btnEmotes",
                        iconClass: "iconButtonEmotes",
                        methodShow: function() {
                            emotes_1.emotesWindow.show()
                        },
                        methodShouldShow: function() {
                            return !(0, functions_1.isInGame)() && config_1.playerData.authLevel >= Data_1.AUTH_LEVEL.PLAYER && Data_1.CONST.ENABLE_EMOTES
                        },
                        labelDirect: "Emotes",
                        label: "Emotes"
                    },
                    changelog: {
                        widget: "iconButton",
                        cssId: "btnChangelog",
                        iconClass: "iconButtonChangelog",
                        methodShow: function() {
                            exports.UI.showChangelog()
                        },
                        methodShouldShow: function() {
                            return !(0, functions_1.isInGame)()
                        },
                        labelDirect: "Changelog",
                        label: "Changelog"
                    }
                };

                function attemptExitGame() {
                    if (root_1.root.game.replayMode) ! function() {
                        Sound_1.Sound.playSound("click"), document.getElementById("optionsWindow").style.display = "none", config_1.playerData.authLevel >= Data_1.AUTH_LEVEL.PLAYER && resourceBar_1.resourceBar.show();
                        root_1.root.game = new Game_1.Game(map1_1.map1), rankInGame_1.rankInGame.hide(), (0, viewHelpers_1.showAd)(), exports.UI.refreshMenuButtons(), exports.UI.showMainScene()
                    }();
                    else {
                        if (root_1.root.game.ticksCounter < 0 || !root_1.root.game.playingPlayer) return doExitGame();
                        var promptWnd = (0, viewHelpers_1.showPrompt)({
                            title: lang_1.lang.get("msg.leave_game.confirm.title"),
                            content: lang_1.lang.get("msg.leave_game.confirm.content"),
                            buttons: ["cancel", "ok"],
                            onClick: function(btnName) {
                                promptWnd.close(), "ok" === btnName && doExitGame()
                            }
                        })
                    }

                    function doExitGame() {
                        Network_1.Network.send("leave-game"), exports.UI.hideDeathScreen(), root_1.root.leavingGame = !0, root_1.root.startLeavingGameTicksCounter = root_1.root.game.ticksCounter, (0, floatTip_1.floatTip)("error", lang_1.lang.get("msg.leave_game", {
                            seconds: ""
                        }))
                    }
                }
                exports.UI = {
                    canvasChangeSkinsButton: null,
                    showChangelog: function() {
                        (0, viewHelpers_1.showInfoScreen)({
                            title: "Changelog",
                            content: "<p>28.11.2021</p><p>- refactored some of the code.</p><p>- added new skins.</p><p>&nbsp;</p><p>22.8.2019</p><p>- rebuilding the game. Several features are still missing and bugs are in the game. Once everything is back to normal, new stuff is gonna be added.</p><p>&nbsp;</p><p>22.3.2019</p><p>- added some new skins</p><p>&nbsp;</p><p>6.3.2019</p><p>- added some new skins</p><p>- added ingame changelog</p><p>- fixed some issues with custom builds not working in infection mode</p><p>- fixed a bug that would cause zombies in infection mode to become invincible after been thrown into water</p><p>- in team games, when a team has 2 player more than the other team (or more than 2 players) one random player is switched now</p><p>&nbsp;</p><p>26.2.2019</p><p>- playing a game on a map that is not in the vote rotation will not have map voting anymore but replay the same map instead</p><p>- fixed an issue that made joining the game via the 'play' button would not put a player in the most crowded game for some maps</p><p>- guests now can pick names instead of being called 'abc'</p><p>- guests dont have a '*' prior to their name anymore</p><p>- removed skin builds from the game, all modes are now custom build, skins are purely for cosmetics; chests only grant gold</p><p>&nbsp;</p><p>25.1.2019</p><p>- added some new skins</p><p>- changed color of enemy sniper line from red to orange</p><p>- fixed a display bug in the custom build UI</p><p>- shooting now removes your spawn-invulnerability</p><p>- default bot count down to 4; max bot count set to 8 (except for infection mode)</p><p>- fixed a bug that made it impossible for some players to join normal Deathmatch mode</p><p>&nbsp;</p><p>15.1.2019</p><p>- added several new skins</p><p>- default Deathmatch is now 'custom build' instead of 'skin-based build' mode</p><p>- fixed heal aura heal animation</p><p>- fixed turret rotation animation</p><p>- fixed shotgun not cancelling invisibility</p><p>- reduced wall hp from 120 (+45) to 80 (+40)</p><p>- lifesteal now also regenerates life when target has armor and when doing damage with acid grenades</p><p>- shield: increased energy cost from 30 to 33</p><p>- increased the height at which players are affected by an explosion</p><p>- heal gun does not kill rockets anymore</p><p>- energy rifle: reduced ammo size from 40 to 28; reduced clip size from 20 to 14; 1st fire mode is not hitscan anymore, but a projectile with high speed; 1st fire mode doesnt collide with rockets anymore</p><p>- landing on the edge of water doesnt cause drowning anymore (this also means its not possible to drown in 1-tile-wide water anymore, like the 'health islands' on forest for example)</p><p>- when aiming with sniper rifle, every player can see the dotted sniper line now</p>"
                        })
                    },
                    renderMainMenu_: function() {
                        var cssId = "menuButtonContainer",
                            menuButtonContainer = document.getElementById(cssId) || document.createElement("div");
                        for (var buttonKey in menuButtonContainer.id = cssId, menuButtonContainer.setAttribute("data-noclick", "yes"), buttonData) {
                            var btnData = buttonData[buttonKey];
                            "iconButton" === btnData.widget ? btnData.instance = (0, iconButton_1.iconButton)(menuButtonContainer, {
                                cssId: btnData.cssId,
                                iconClassName: btnData.iconClass,
                                onClick: btnData.methodShow,
                                tip: btnData.labelDirect ? btnData.labelDirect : lang_1.lang.get(btnData.label)
                            }) : "labelButton" === btnData.widget && (btnData.instance = (0, labelButton_1.labelButton)(menuButtonContainer, {
                                cssId: btnData.cssId,
                                iconClassName: btnData.iconClass,
                                onClick: btnData.methodShow,
                                label: lang_1.lang.get(btnData.iconLabel),
                                multiline: btnData.multiline,
                                tip: lang_1.lang.get(btnData.label),
                                theme: btnData.theme
                            })), btnData.instance.style.display = "none"
                        }
                        document.body.appendChild(menuButtonContainer)
                    },
                    loadLatestReplays: function() {
                        Sound_1.Sound.playSound("click"), Network_1.Network.send("getVODs");
                        var slayTV = document.getElementById("slayTV");
                        slayTV.className = "", slayTV.onclick = null, setInterval((function() {
                            Network_1.Network.send("getVODs")
                        }), 102e4)
                    },
                    showLatestReplays: function(arr) {
                        var slayTV_content = document.getElementById("slayTV_content");
                        slayTV_content.innerHTML = "";
                        for (var i = 1; i < arr.length; i += 7) {
                            var div = document.createElement("div"),
                                p1 = document.createElement("span");
                            p1.className = "nick pseudoLink withClickSound", p1.style.color = "rgb(255, 255, 120)", p1.innerText = arr[i + 3], p1.onclick = exports.UI.showPlayerInfoById0, p1.setAttribute("data-playerId", arr[i + 1]), div.appendChild(p1);
                            var x = document.createElement("span");
                            x.innerText = " x ", div.appendChild(x);
                            var p2 = document.createElement("span");
                            p2.className = "nick pseudoLink withClickSound", p2.style.color = "rgb(255, 255, 120)", p2.innerText = arr[i + 4], p2.onclick = exports.UI.showPlayerInfoById0, p2.setAttribute("data-playerId", arr[i + 2]), div.appendChild(p2);
                            var watch = document.createElement("span");
                            watch.className = "watchRepLink pseudoLink withClickSound", watch.style.color = "rgb(255, 255, 120)", watch.innerText = " view", watch.onclick = functions_1.watchLaddergame, watch.setAttribute("data-laddergameId", arr[i]), div.appendChild(watch), slayTV_content.appendChild(div)
                        }
                    },
                    requestMyClanInfo: function(tag) {
                        clanMain_1.clanMain.show(tag)
                    },
                    requestMyClanInfo0: function(e) {
                        null !== e.target && exports.UI.requestMyClanInfo(e.target.getAttribute("data-clanTag"))
                    },
                    togglePlayerList: function(page, elo) {
                        var el = document.getElementById("optionsWindow");
                        el.className = "optionsWindow1", el.style.display = "inline", Network_1.Network.send("playerList$" + (page || "0") + "$" + (elo ? "1" : "0"))
                    },
                    togglePlayerList0: function(e) {
                        var _a;
                        null !== e.target && exports.UI.togglePlayerList(null !== (_a = parseInt(e.target.getAttribute("data-page"))) && void 0 !== _a ? _a : 1, "true" === e.target.getAttribute("data-elo"))
                    },
                    toggleClanList: function(page) {
                        var el = document.getElementById("optionsWindow");
                        el.className = "optionsWindow1", el.style.display = "inline", Network_1.Network.send("clanList$$" + (page || "0") + "$10")
                    },
                    toggleClanList0: function(e) {
                        var _a;
                        null !== e.target && exports.UI.toggleClanList(null !== (_a = parseInt(e.target.getAttribute("data-page"))) && void 0 !== _a ? _a : 1)
                    },
                    showLobby: function(tabIndex) {
                        (0, viewHelpers_1.showPopup)("lobby", {
                            theme: "tabbed",
                            initTabIndex: tabIndex || 0,
                            title: lang_1.lang.get("lobby.title"),
                            tabs: [{
                                label: lang_1.lang.get("lobby.tabs.browse.label"),
                                view: "roomsListScreen",
                                tip: lang_1.lang.get("lobby.tabs.browse.tooltip")
                            }, {
                                label: lang_1.lang.get("lobby.tabs.create.label"),
                                view: "roomCreateScreen",
                                tip: lang_1.lang.get("lobby.tabs.create.tooltip")
                            }]
                        })
                    },
                    showHotkeyWindow: function() {
                        var div = document.createElement("div");
                        for (var cmd in div.className = "hreader", div.innerText = "Controls", Input_1.commandNames) {
                            var div1 = document.createElement("div");
                            div1.className = "hotkeySubDiv", div.appendChild(div1), div1.innerText = Input_1.commandNames[cmd];
                            var b = document.createElement("button");
                            b.setAttribute("data-key", cmd), b.className = "hotkey_button withClickSound", b.id = "hotkey_" + cmd, b.innerText = Input_1.keyNames[Input_1.commandKeys[cmd]], b.onclick = exports.UI.changeHotkey1, div1.appendChild(b)
                        }
                        var el = document.getElementById("optionsWindow");
                        el.innerHTML = "", el.appendChild(div), el.appendChild(exports.UI.createCloseButton()), el.setAttribute("data-windowtype", "hotkeys")
                    },
                    toggleOptionsMenu: function() {
                        optionsScreen_1.optionsScreen.showWindow()
                    },
                    toggleImprint: function() {
                        (0, viewHelpers_1.showInfoScreen)({
                            title: "Imprint",
                            content: '<div>Slay.one is a free indie 2D multiplayer topdown shooter for browsers. For more info, you can check out our <a class=\'withClickSound\' href="https://www.reddit.com/r/WebGames/comments/5b48nw/slayone_a_multiplayer_topdown_shooter_were_the/" target="_blank">Reddit AMA</a>.<br><br>Publisher:<br><br>KingsGroup Holding<br>San Francisco, CA, USA<br><br>Contact Email: <a class=\'withClickSound\' href="mailto:support@slay.one">support@slay.one</a><br></div>'
                        })
                    },
                    toggleAGB: function() {
                        (0, functions_1.ajax)("legalities/agb.html", (function(data) {
                            (0, viewHelpers_1.showInfoScreen)({
                                title: "General Terms and Conditions",
                                content: data
                            })
                        }))
                    },
                    showAGB2: function() {
                        (0, functions_1.ajax)("legalities/agb.html", (function(data) {
                            (0, viewHelpers_1.showInfoScreen)({
                                title: "General Terms and Conditions",
                                content: data
                            })
                        }))
                    },
                    toggleWRE: function() {
                        (0, functions_1.ajax)("legalities/wre.html", (function(data) {
                            (0, viewHelpers_1.showInfoScreen)({
                                title: "Cancellation Policy",
                                content: data
                            })
                        }))
                    },
                    toggleDSE: function() {
                        (0, functions_1.ajax)("legalities/dse.html", (function(data) {
                            (0, viewHelpers_1.showInfoScreen)({
                                title: "Privacy Policy",
                                content: data
                            })
                        }))
                    },
                    changeHotkey1: function(e) {
                        for (var hotkey_buttons = document.getElementsByClassName("hotkey_button"), i = 0; i < hotkey_buttons.length; i++) hotkey_buttons[i].style.color = "", hotkey_buttons[i].className = "hotkey_button";
                        var el = document.getElementById("hotkey_" + e.target.getAttribute("data-key"));
                        el.style.color = "red", el.className = "hotkey_button hotkey_button_active"
                    },
                    getClansLink: function() {
                        var a = document.createElement("a");
                        return a.className = "pseudoLink withClickSound", a.onclick = exports.UI.toggleClanList0, a.setAttribute("data-page", "-1"), a.innerText = "Clans", a
                    },
                    getClansText: function() {
                        var span = document.createElement("span");
                        return span.innerText = "Clans", span
                    },
                    getPlayersXPLink: function() {
                        var a = document.createElement("a");
                        return a.className = "pseudoLink withClickSound", a.onclick = exports.UI.togglePlayerList0, a.setAttribute("data-page", "-1"), a.setAttribute("data-elo", "false"), a.innerText = "Players (XP)", a
                    },
                    getPlayersXPText: function() {
                        var span = document.createElement("span");
                        return span.innerText = "Players (XP)", span
                    },
                    getSeperartinDash: function() {
                        var span = document.createElement("span");
                        return span.innerText = " | ", span
                    },
                    getPlayersEloLink: function() {
                        var a = document.createElement("a");
                        return a.className = "pseudoLink withClickSound", a.onclick = exports.UI.togglePlayerList0, a.setAttribute("data-page", "-1"), a.setAttribute("data-elo", "true"), a.innerText = "Players (Elo)", a
                    },
                    getPlayersEloText: function() {
                        var span = document.createElement("span");
                        return span.innerText = "Players (elo)", span
                    },
                    showPlayerList: function(data) {
                        var page = parseInt(data[2]),
                            lastpage = 0,
                            countPages = Math.ceil(parseInt(data[1]) / 10),
                            elo = "1" === data[3],
                            mainDiv = document.createElement("div");
                        elo ? (mainDiv.appendChild(exports.UI.getPlayersXPLink()), mainDiv.appendChild(exports.UI.getSeperartinDash()), mainDiv.appendChild(exports.UI.getPlayersEloText()), mainDiv.appendChild(exports.UI.getSeperartinDash()), mainDiv.appendChild(exports.UI.getClansLink())) : (mainDiv.appendChild(exports.UI.getPlayersXPText()), mainDiv.appendChild(exports.UI.getSeperartinDash()), mainDiv.appendChild(exports.UI.getPlayersEloLink()), mainDiv.appendChild(exports.UI.getSeperartinDash()), mainDiv.appendChild(exports.UI.getClansLink()));
                        var table = document.createElement("table");
                        table.id = "playerListTable", mainDiv.appendChild(table);
                        var tr = document.createElement("tr");
                        tr.id = "headTR", table.appendChild(tr);
                        var td = document.createElement("td");
                        td.innerText = "Rank", tr.appendChild(td), (td = document.createElement("td")).innerText = "Name", tr.appendChild(td), (td = document.createElement("td")).innerText = "Clan", tr.appendChild(td), (td = document.createElement("td")).innerText = elo ? "elo" : "level", tr.appendChild(td);
                        for (var k = 1, i = 4; i < data.length; i += 5) {
                            var playerId = data[i],
                                playerName = data[i + 1],
                                playerClanTag = data[i + 3],
                                playerScore = parseInt(data[i + 2]),
                                playerColor = NameColor_1.NameColor.getColor(parseInt(data[i + 4]));
                            tr = document.createElement("tr"), table.appendChild(tr), (td = document.createElement("td")).innerText = (k + 10 * page).toString(), tr.appendChild(td);
                            var a = document.createElement("a");
                            a.className = "pseudoLink withClickSound", a.style.color = playerColor, a.setAttribute("data-playerId", playerId), a.onclick = exports.UI.showPlayerInfoById0, a.innerText = (0, functions_1.escapeHtml)(playerName), (td = document.createElement("td")).appendChild(a), tr.appendChild(td), (a = document.createElement("a")).className = "pseudoLink yellow withClickSound", a.setAttribute("data-clanTag", playerClanTag), a.onclick = exports.UI.requestMyClanInfo0, a.innerText = playerClanTag;
                            var span1 = document.createElement("span");
                            span1.innerText = "[";
                            var span2 = document.createElement("span");
                            span2.innerText = "]", td = document.createElement("td"), playerClanTag.length > 0 && (td.appendChild(span1), td.appendChild(a), td.appendChild(span2)), tr.appendChild(td), (td = document.createElement("td")).innerText = (elo ? playerScore : (0, Data_1.getLvlFromXp)(playerScore)).toString(), tr.appendChild(td), k++
                        }
                        var el = document.getElementById("optionsWindow");
                        if (el.innerHTML = "", el.appendChild(mainDiv), el.appendChild(exports.UI.createCloseButton()), el.setAttribute("data-windowtype", "playerlist"), countPages > 1) {
                            var div = document.createElement("div");
                            div.id = "pageSystem";
                            for (i = 0; i < countPages; i++)
                                if (i <= 1 || i >= countPages - 2 || i >= page - 3 && i <= page + 3) {
                                    if (lastpage > 0 && lastpage !== i - 1)(span = document.createElement("span")).innerText = " ... ", div.appendChild(span);
                                    if (i === page) {
                                        var span;
                                        (span = document.createElement("span")).innerText = " " + (i + 1) + " ", div.appendChild(span)
                                    } else {
                                        var b = document.createElement("button");
                                        b.className = "withClickSound", b.onclick = exports.UI.togglePlayerList0, b.setAttribute("data-page", i.toString()), b.setAttribute("data-elo", elo ? "true" : "false"), b.innerText = (i + 1).toString(), div.appendChild(b)
                                    }
                                    lastpage = i
                                } el.appendChild(div)
                        }
                    },
                    showClanList: function(data, total, page) {
                        var lastpage = 0,
                            countPages = Math.ceil(total / 10),
                            mainDiv = document.createElement("div");
                        mainDiv.appendChild(exports.UI.getPlayersXPLink()), mainDiv.appendChild(exports.UI.getSeperartinDash()), mainDiv.appendChild(exports.UI.getPlayersEloLink()), mainDiv.appendChild(exports.UI.getSeperartinDash()), mainDiv.appendChild(exports.UI.getClansText());
                        var table = document.createElement("table");
                        table.id = "playerListTable", mainDiv.appendChild(table);
                        var tr = document.createElement("tr");
                        tr.id = "headTR", table.appendChild(tr);
                        var td = document.createElement("td");
                        td.innerText = "Rank", tr.appendChild(td), (td = document.createElement("td")).innerText = "Tag", tr.appendChild(td), (td = document.createElement("td")).innerText = "Name", tr.appendChild(td), (td = document.createElement("td")).innerText = "Members", tr.appendChild(td), (td = document.createElement("td")).innerText = "Score", tr.appendChild(td);
                        for (var k = 1, _i = 0, data_1 = data; _i < data_1.length; _i++) {
                            var d = data_1[_i];
                            tr = document.createElement("tr"), table.appendChild(tr), (td = document.createElement("td")).innerText = (k + 10 * page).toString(), tr.appendChild(td);
                            var a = document.createElement("a");
                            a.className = "pseudoLink withClickSound", a.setAttribute("data-clanTag", d.tag), a.onclick = exports.UI.requestMyClanInfo0, a.innerText = d.tag;
                            var leftBracket = document.createElement("span");
                            leftBracket.innerText = "[";
                            var rightBracket = document.createElement("span");
                            rightBracket.innerText = "]", (td = document.createElement("td")).appendChild(leftBracket), td.appendChild(a), td.appendChild(rightBracket), tr.appendChild(td), (td = document.createElement("td")).innerText = d.name, tr.appendChild(td), (td = document.createElement("td")).innerText = d.countMembers.toString(), tr.appendChild(td), (td = document.createElement("td")).innerText = d.elo.toString(), tr.appendChild(td), k++
                        }
                        var el = document.getElementById("optionsWindow");
                        if (el.innerHTML = "", el.style.display = "inline", el.className = "optionsWindow1", el.appendChild(mainDiv), el.appendChild(exports.UI.createCloseButton()), el.setAttribute("data-windowtype", "playerlist"), countPages > 1) {
                            var div = document.createElement("div");
                            div.id = "pageSystem";
                            for (var i = 0; i < countPages; i++)
                                if (i <= 1 || i >= countPages - 2 || i >= page - 3 && i <= page + 3) {
                                    if (lastpage > 0 && lastpage !== i - 1)(span = document.createElement("span")).innerText = " ... ", div.appendChild(span);
                                    if (i === page) {
                                        var span;
                                        (span = document.createElement("span")).innerText = " " + (i + 1) + " ", div.appendChild(span)
                                    } else {
                                        var b = document.createElement("button");
                                        b.className = "withClickSound", b.onclick = exports.UI.toggleClanList0, b.setAttribute("data-page", i.toString()), b.innerText = (i + 1).toString(), div.appendChild(b)
                                    }
                                    lastpage = i
                                } el.appendChild(div)
                        }(el = document.querySelector(".F-popUpLayer")) && el.parentNode.removeChild(el)
                    },
                    showPlayerInfoById: function(pid) {
                        Network_1.Network.send("plInfo$" + pid)
                    },
                    showPlayerInfoById0: function(e) {
                        null !== e.target && exports.UI.showPlayerInfoById(parseInt(e.target.getAttribute("data-playerId")))
                    },
                    showPlayerInfoWithData: function(data) {
                        var profile = {
                            pid: parseInt(data[1]),
                            displayName: data[2],
                            exp: parseFloat(data[3]),
                            elo: parseInt(data[4]),
                            clanName: data[5],
                            numKills: parseInt(data[6]),
                            numDeaths: parseInt(data[7]),
                            tsCreated: data[8],
                            desc: data[9],
                            tsNick: parseInt(data[10]),
                            color: parseInt(data[11]),
                            isLegacy: "1" === data[12]
                        };
                        config_1.playerData.db_id === profile.pid && (exports.currentProfile = profile), playerProfileScreen_1.playerProfileScreen.show({
                            perspective: config_1.playerData.db_id === profile.pid ? "self" : "guest",
                            profile
                        })
                    },
                    memberList: function(data) {
                        if ("memberList" === data[0]) {
                            for (var clanMembers = [], i = 2; i < data.length; i += 3) clanMembers.push({
                                id: parseInt(data[i]),
                                name: data[i + 1],
                                role: exports.authLevelNames[parseInt(data[i + 2])],
                                roleNumber: parseInt(data[i + 2])
                            });
                            clanMain_1.clanMain.renderClanMembers(clanMembers)
                        } else {
                            var clanApps = [];
                            for (i = 2; i < data.length; i += 3) clanApps.push({
                                id: parseInt(data[i]),
                                text: data[i + 2],
                                name: data[i + 1]
                            });
                            clanMain_1.clanMain.renderClanApps(clanApps)
                        }
                    },
                    rejectMember: function(e) {
                        Network_1.Network.send("rejectClanMember$" + e.currentTarget.getAttribute("data-playerId"))
                    },
                    acceptMember: function(e) {
                        Network_1.Network.send("acceptClanMember$" + e.currentTarget.getAttribute("data-playerId"))
                    },
                    kickMember: function(id, name) {
                        confirm_1.confirmPrompt.show("Kick", lang_1.lang.get("myClan.kick.confirm", {
                            playerName: name
                        }), (function() {
                            Network_1.Network.send("kickMember$" + id), confirm_1.confirmPrompt.hide()
                        }))
                    },
                    kickMember0: function(e) {
                        exports.UI.kickMember(parseInt(e.target.getAttribute("data-playerId")), e.target.getAttribute("data-playerName"))
                    },
                    demoteMember: function(id) {
                        Network_1.Network.send("demote$" + id)
                    },
                    demoteMember0: function(e) {
                        exports.UI.demoteMember(parseInt(e.target.getAttribute("data-playerId")))
                    },
                    promoteMember: function(id) {
                        Network_1.Network.send("promote$" + id)
                    },
                    promoteMember0: function(e) {
                        exports.UI.promoteMember(parseInt(e.target.getAttribute("data-playerId")))
                    },
                    createCloseButton: function(cb) {
                        var closeButton = document.createElement("button");
                        return closeButton.innerHTML = "x", closeButton.className = "closeButton", closeButton.onclick = function() {
                            this.parentNode.style.display = "none", cb && cb()
                        }, (0, clickable_1.clickable)(closeButton), closeButton
                    },
                    createButton: function(caption, className, onclick, css, appendTo, id, onmouseover, onmouseout, name, att1) {
                        var b = document.createElement("button");
                        return b.innerHTML = caption, css && (b.style.cssText = css), className && (b.className = className), id && (b.id = id), b.onclick = onclick, appendTo && appendTo.appendChild && appendTo.appendChild(b), b.setAttribute("data-noclick", "yes"), onmouseover && (b.onmouseover = onmouseover), onmouseout && (b.onmouseout = onmouseout), name && (b.name = name), att1 && b.setAttribute("data-att1", att1), (0, clickable_1.clickable)(b), b
                    },
                    login: function() {
                        var inputUserName = document.getElementById("playerNameInput").value,
                            inputPassword = document.getElementById("playerPwInput").value,
                            inputStayLoggedIn = document.getElementById("stayLoggedIn").checked;
                        Network_1.Network.send(["login", inputUserName, inputPassword, inputStayLoggedIn].join("$"))
                    },
                    register: function() {
                        var inputUserName = document.getElementById("playerNameInput").value,
                            inputPassword = document.getElementById("playerPwInput").value,
                            inputEmail = document.getElementById("emailInput").value;
                        Network_1.Network.send(["register", inputUserName, inputPassword, inputEmail, "", ""].join("$"))
                    },
                    crateGamesListTable: function() {
                        var t = document.createElement("table");
                        t.id = "mainGamesTable", t.className = "basicTable";
                        var tr = document.createElement("tr");
                        tr.innerHTML = "<tr><td>Map</td><td>Players</td><td>Mode</td><td></td>", t.appendChild(tr), document.getElementById("gamesDiv").innerHTML = "", document.getElementById("gamesDiv").appendChild(t)
                    },
                    switchMode: function(mod) {
                        Sound_1.Sound.playSound("click");
                        var modeSwitchDiv = document.getElementById("modeSwitchDiv"),
                            countModes = GameTypes_1.MAP_TYPE_SETTINGS.length,
                            newMode = (parseInt(modeSwitchDiv.getAttribute("data-mode-id")) + countModes + mod) % countModes;
                        modeSwitchDiv.setAttribute("data-mode-id", newMode.toString()), modeSwitchDiv.innerHTML = "<span>" + GameTypes_1.MAP_TYPE_SETTINGS[newMode].name + "</span>", config_1.options.defaultGameMode = newMode, localStorage.setItem("defaultGameMode", config_1.options.defaultGameMode.toString())
                    },
                    showMainScene: function() {
                        homeScreen_1.homeScreen.render(), exports.UI.refreshMenuButtons()
                    },
                    refreshClanDiv: function() {
                        var el = document.getElementById("playerNameDiv");
                        if (el) {
                            var playerNameHTML = "";
                            config_1.playerData.clanTag && config_1.playerData.clanTag.length > 0 && (playerNameHTML += "[<span id='playerClanDiv' class='yellow withClickSound' onclick='uiManager.requestMyClanInfo();'>" + config_1.playerData.clanTag + "</span>] "), playerNameHTML += "<span onclick='uiManager.showPlayerInfoById(\"" + config_1.playerData.db_id + "\");'>" + (0, functions_1.escapeHtml)(config_1.playerData.name) + "</span>", el.innerHTML = playerNameHTML
                        }
                        homeScreen_1.homeScreen.refreshWelcomeMessage()
                    },
                    refreshWelcomeDiv: function() {
                        var el = document.getElementById("welcomeName");
                        if (el) {
                            var clan_tag_str = config_1.playerData.clanTag && config_1.playerData.clanTag.length > 0 ? "[<span class='yellow withClickSound' onclick='uiManager.requestMyClanInfo();'>" + config_1.playerData.clanTag + "</span>] " : "";
                            el.innerHTML = clan_tag_str + config_1.playerData.name
                        }
                    },
                    refreshMenuButtons: function() {
                        for (var buttonKey in buttonData) {
                            var btnData = buttonData[buttonKey];
                            !btnData.methodShouldShow || btnData.methodShouldShow() ? btnData.instance.style.display = "inline-block" : btnData.instance.style.display = "none"
                        }
                    },
                    setXP: function(xp) {
                        config_1.playerData.xp = xp, homeScreen_1.homeScreen.refreshExp()
                    },
                    showDeathScreen: function(killerName) {
                        respawn_1.respawn.show(killerName), (0, viewHelpers_1.showAd)()
                    },
                    hideDeathScreen: function() {
                        respawn_1.respawn.hide()
                    },
                    countDownDeath: function(timeTillRespawn) {
                        respawn_1.respawn.progress(timeTillRespawn)
                    },
                    closeAchivementWindow: function() {
                        Sound_1.Sound.playSound("click");
                        var div = document.getElementById("unlockDiv");
                        div.style.animationName = "fadeOut2", div.style.animationDuration = "0.4s", div.style.animationFillMode = "forwards", setTimeout((function() {
                            document.getElementById("unlockDiv").style.display = "none"
                        }), 500), setTimeout(exports.UI.showAchivement, 1e3)
                    },
                    showAchivement: function() {
                        if (exports.unlocks2Show.length > 0 && "inline" !== document.getElementById("unlockDiv").style.display) {
                            if (exports.unlocks2Show[0].type === UnlockType.Lvlup) {
                                var div = document.getElementById("unlockDiv"),
                                    str = "<button id='unlockCloseButton'>X</button><div id='lvlUpDiv1'>Level Up</div><div id='lvlUpDiv2'>You reached level <span class='green'>";
                                str += exports.unlocks2Show[0].lvl + "</span></div><div id='lvlUpDiv3'>You gained <span class='yellow'>" + exports.unlocks2Show[0].gold + "</span> gold</div>", document.getElementById("unlockDivInner").innerHTML = str, div.style.display = "inline", div.style.animationName = "fadeIn", div.style.animationDuration = "0.65s", div.style.animationFillMode = "forwards", (div = document.getElementById("lvlUpDiv1")).style.animationName = "shine", div.style.animationDuration = "0.8s", div.style.animationIterationCount = "infinite", Sound_1.Sound.playSound("lvlup"), config_1.playerData.gold = exports.unlocks2Show[0].gold, resourceBar_1.resourceBar.refresh(), document.getElementById("unlockCloseButton").onclick = exports.UI.closeAchivementWindow
                            } else {
                                div = document.getElementById("unlockDiv");
                                document.getElementById("unlockDivInner").innerHTML = "<button id='unlockCloseButton' onclick='closeAchivementWindow();'>X</button>", div.style.display = "inline";
                                var ca_ = document.createElement("canvas");
                                document.getElementById("unlockDivInner").appendChild(ca_), ca_.id = "unlockCanvas", ca_.width = 256, ca_.height = 256;
                                var c_ = ca_.getContext("2d");
                                c_.mozImageSmoothingEnabled = !1, c_.msImageSmoothingEnabled = !1, c_.imageSmoothingEnabled = !1;
                                var div2 = document.createElement("div");
                                if (void 0 !== exports.unlocks2Show[0].skin) {
                                    var hat = exports.unlocks2Show[0].skin,
                                        scale = 8;
                                    c_.drawImage(_1.imgs.shadow, 0, 0, 32 * scale, 32 * scale), c_.drawImage(_1.imgs.weaponsMinus, 64, 0, 32, 32, Math.sin(Math.PI / 2 * 1) * scale / 3, -1 * scale / 2, 32 * scale, 32 * scale), c_.drawImage(_1.imgs.legs, 32, 64 + 288 * hat.legs, 32, 32, 0, 0, 32 * scale, 32 * scale), hat.hatOnly && c_.drawImage(_1.imgs.heads, 64, 0, 32, 32, 0, 0 - 1 * scale / 2, 32 * scale, 32 * scale), c_.drawImage(_1.imgs.heads, 64, 32 * hat.offset, 32, 32, 0, 0 - 1 * scale / 2, 32 * scale, 32 * scale), c_.drawImage(_1.imgs.weaponsPlus, 64, 0, 32, 32, Math.sin(Math.PI / 2 * 1) * scale / 2, -1 * scale / 1.8, 32 * scale, 32 * scale), div2.innerHTML = "Unlocked skin \"<span class='green'>" + hat.name + '</span>"'
                                } else if (void 0 !== exports.unlocks2Show[0].emote) {
                                    var emote = exports.unlocks2Show[0].emote,
                                        img = emote.img;
                                    scale = 150 / Math.max(img.w, img.h);
                                    c_.drawImage(_1.imgs.miscSheet, img.x, img.y, img.w, img.h, 128 - img.w * scale / 2, 118 - img.h * scale / 2, img.w * scale, img.h * scale), div2.innerHTML = "Unlocked emote \"<span class='green'>" + emote.name + '</span>"'
                                }
                                div2.className = "fontSize20px", document.getElementById("unlockDivInner").appendChild(div2), div.style.animationName = "fadeIn", div.style.animationDuration = "0.65s", div.style.animationFillMode = "forwards", Sound_1.Sound.playSound("unlock"), document.getElementById("unlockCloseButton").onclick = exports.UI.closeAchivementWindow
                            }
                            exports.unlocks2Show.splice(0, 1)
                        }
                    },
                    lvlUp: function(arr) {
                        config_1.playerData.gold = parseInt(arr[3]), config_1.playerData.gems = parseInt(arr[5]);
                        var level = parseInt(arr[1]),
                            rewards = [];
                        arr[7] && rewards.push({
                            id: parseInt(arr[6]),
                            type: "chest",
                            value: arr[7]
                        }), arr[2] && rewards.push({
                            type: "gold",
                            value: arr[2]
                        }), arr[4] && rewards.push({
                            type: "gem",
                            value: arr[4]
                        });
                        for (var i = 0; i < GameTypes_1.MAP_TYPE_SETTINGS.length; i++) {
                            var mapType = GameTypes_1.MAP_TYPE_SETTINGS[i];
                            mapType.unlockLevel !== level || mapType.inactive || rewards.push({
                                type: "mode",
                                value: i.toString()
                            })
                        }
                        if (arr[8] && arr[8].length)
                            for (var _i = 0, _a = arr[8].split(";"); _i < _a.length; _i++) {
                                var skin = _a[_i];
                                rewards.push({
                                    type: "hat",
                                    value: skin
                                })
                            }
                        resourceBar_1.resourceBar.refresh(), levelUp_1.levelUp.show(level, rewards)
                    },
                    unlock: function(data) {
                        var hat = Skins_1.hats[parseInt(data[1])];
                        config_1.playerData.skinsUnlocked += ";" + hat.id, exports.unlocks2Show.push({
                            type: UnlockType.Skin,
                            skin: hat
                        }), exports.UI.showAchivement(), data[2] && (config_1.playerData.gold = parseInt(data[2]), resourceBar_1.resourceBar.refresh())
                    }
                }, exports.attemptExitGame = attemptExitGame, document.getElementById("slayTV").onclick = exports.UI.loadLatestReplays
            },
            4331: function(__unused_webpack_module, exports, __webpack_require__) {
                "use strict";
                var extendStatics, __extends = this && this.__extends || (extendStatics = function(d, b) {
                    return extendStatics = Object.setPrototypeOf || {
                        __proto__: []
                    }
                    instanceof Array && function(d, b) {
                        d.__proto__ = b
                    } || function(d, b) {
                        for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p])
                    }, extendStatics(d, b)
                }, function(d, b) {
                    if ("function" != typeof b && null !== b) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");

                    function __() {
                        this.constructor = d
                    }
                    extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __)
                });
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.Zombie = void 0;
                var _1 = __webpack_require__(2174),
                    Data_1 = __webpack_require__(6313),
                    functions_1 = __webpack_require__(8394),
                    Skins_1 = __webpack_require__(3346),
                    Weapons_1 = __webpack_require__(2007),
                    functions_2 = __webpack_require__(7582),
                    Humanoid_1 = __webpack_require__(5951),
                    Img_1 = __webpack_require__(360),
                    Sound_1 = __webpack_require__(3754),
                    Sprite_1 = __webpack_require__(9145),
                    _zombieSkins = [17],
                    Zombie = function(_super) {
                        function Zombie(game, id, x, y, hp, x0, y0, maxHP, hpRegeneration, randomizer, imgScale, masterId, name) {
                            var _this = _super.call(this, game, id) || this;
                            return _this.isZombie = !0, _this.legFrame = 0, _this.name = name, _this.team = -1, _this.x = x, _this.y = y, _this.x0 = x0 || x, _this.y0 = y0 || y, _this.x00 = x0, _this.y00 = y0, _this.masterId = masterId, _this.hp = hp, _this.maxHP = maxHP, _this.hpRegeneration = hpRegeneration, 3 === randomizer ? (_this.head = 36, _this.hat = null, _this.legs = 9, _this.imgScale = 1, _this.handsOffset = 512, _this.isDarkZombie = !0) : 4 === randomizer ? (_this.head = 23, _this.hat = null, _this.legs = 10, _this.imgScale = 1, _this.handsOffset = 256, _this.isRangedZombie = !0, _this.specialImg = _1.imgs.rangedZombie, _this.specialImgWhite = _1.imgs.rangedZombieWhite, _this.frameOffset = 48, _this.frameW = 24, _this.moveFrames = 7, _this.specialScale = 1, _this.specialHight = 8) : 5 === randomizer ? (_this.head = 23, _this.hat = null, _this.legs = 10, _this.imgScale = 1, _this.handsOffset = 256, _this.isCrawler = !0, _this.frameOffset = 0, _this.specialImg = _1.imgs.crawler, _this.specialImgWhite = _1.imgs.crawlerWhite, _this.frameW = 30, _this.specialHight = 11, _this.moveFrames = 3, _this.specialScale = .85) : (_this.head = 23, _this.hat = randomizer < .2 ? Skins_1.hats[_zombieSkins[Math.floor(5 * randomizer * _zombieSkins.length)]] : null, _this.legs = _this.hat ? _this.hat.legs : 10, _this.imgScale = imgScale, _this.handsOffset = 256), _this.targetX = 0, _this.targetY = 0, _this.playSpawnAnimation = masterId > 0, _this.tickOfSpawn = game.ticksCounter, _this.hp <= 0 && (_this.dieAt = game.ticksCounter, _this.finallyRemoveAt = game.ticksCounter + 50), game.addToObjectsToDraw(_this), _this
                        }
                        return __extends(Zombie, _super), Zombie.prototype.hpUpdate = function(hp) {
                            this.hp = hp, this.hp <= 0 && this.isCrawler && this.game.createExplosionGreen(this.x, this.y, 2.3)
                        }, Zombie.prototype.die = function(projectile, murderWeaponId, objX, objY, objAOE, killer, obj, startX, startY, vecX, vecY, vecH) {
                            if (this.dieAt = this.game.ticksCounter, this.finallyRemoveAt = this.game.ticksCounter + 100, this.isCrawler && (this.finallyRemoveAt = this.game.ticksCounter), Sound_1.Sound.playSound("zombie_death", this.x, this.y, .6), this.game.targetLockedPlayer === this && (this.game.targetLockedPlayer = null), murderWeaponId && Weapons_1.weapons[murderWeaponId] && Weapons_1.weapons[murderWeaponId].flameDeath && (this.flameDeath = !0), startX || startY || vecX || vecY || vecH) this.bouncePoints = (0, functions_1.createBounce2)(startX, startY, vecX, vecY, vecH, this.game), this.noCorpseBounce = !0;
                            else {
                                var vec = (0, functions_1.createBounce)(this, projectile, objX, objY, objAOE, killer, obj && obj.object.noBounce);
                                this.bouncePoints = (0, functions_1.createBounce2)(this.x, this.y, vec.x, vec.y, vec.z, this.game), vec.sound in Data_1.soundLinks && Sound_1.Sound.playSound(vec.sound, this.x, this.y, vec.volume)
                            }
                        }, Zombie.prototype.update = function() {
                            if (this.finallyRemoveAt && this.finallyRemoveAt <= this.game.ticksCounter) return this.game.type.coopZombieMode && !this.isCrawler && this.createCorpse(), !1;
                            if (this.dieAt)
                                if (this.flameDeath) {
                                    var timeDead = this.game.ticksCounter - this.dieAt,
                                        pos = Math.floor(timeDead / 5);
                                    pos > this.path.length - 2 ? (this.updateBounce(), this.flameDeathAndNowBouncing = !0) : (this.x0 = this.x, this.y0 = this.y, this.x = this.path[pos].x + (this.path[pos + 1].x - this.path[pos].x) * (timeDead / 5 % 1), this.y = this.path[pos].y + (this.path[pos + 1].y - this.path[pos].y) * (timeDead / 5 % 1), this.direction = (0, functions_2.getDirectionFromAgle)(this.x0, this.y0, this.x, this.y)), !this.game.fastForward && this.game.ticksCounter % 3 == 1 && this.x + 3 >= this.game.cameraX && this.y + 3 >= this.game.cameraY && this.x - 3 <= this.game.cameraX2 && this.y - 3 <= this.game.cameraY2 && (new Sprite_1.Sprite(this.game, {
                                        x: this.x + .6 * Math.random() - .3,
                                        y: this.y + .6 * Math.random() - .3,
                                        img: Img_1.imgCoords["fire" + (Math.floor(4 * Math.random()) + 1)],
                                        scaleFunction: function(age) {
                                            return Math.max(.75 - age / 20, 0) * this.r1
                                        },
                                        alphaFunction: function(age) {
                                            return Math.max(.75 - age / 20, 0)
                                        },
                                        r1: 3 + 1 * Math.random(),
                                        zFunction: function(age) {
                                            return .1 * age
                                        }
                                    }), new Sprite_1.Sprite(this.game, {
                                        x: this.x + .6 * Math.random() - .3,
                                        y: this.y + .6 * Math.random() - .3,
                                        img: Img_1.imgCoords.dust1,
                                        scaleFunction: function(age) {
                                            return Math.max(.75 - age / 70, 0) * this.r1
                                        },
                                        alphaFunction: function(age) {
                                            return Math.max(.4 - age / 90, 0)
                                        },
                                        r1: 3 + 1 * Math.random(),
                                        zFunction: function(age) {
                                            return .1 * age
                                        }
                                    }), new Sprite_1.Sprite(this.game, {
                                        x: this.x,
                                        y: this.y - .5,
                                        img: Img_1.imgCoords.light_yellow,
                                        scaleFunction: function(age) {
                                            return 4 * Math.max(1 - age / 30, 0)
                                        },
                                        alphaFunction: function(age) {
                                            return .16 * Math.max(1 - age / 25, 0)
                                        }
                                    }))
                                } else this.updateBounce(), this.isRangedZombie && this.dieAt + 5 === this.game.ticksCounter && (Sound_1.Sound.playSound("zombie_bite", this.x, this.y, .8), Sound_1.Sound.playSound("zombie_att", this.x, this.y, .9));
                            else this.bouncePoints.length > 0 && this.updateBounce();
                            if (this.dieAt || (this.x === this.x0 && this.y === this.y0 || (this.direction = (0, functions_2.getDirectionFromAgle)(this.x0, this.y0, this.x, this.y)), this.z0 = this.z, this.z > 0 && (this.z = Math.max(this.z + this.vz, 0), this.vz -= Data_1.CONST.GRAVITY), this.spillBloodFromMeleeAttack()), !this.dieAt && 0 === this.bouncePoints.length && this.lastPosUpdate < this.game.ticksCounter) {
                                Math.sqrt(Math.pow(this.x - this.x0, 2) + Math.pow(this.y - this.y0, 2)) < .005 && (this.x0 = this.x, this.y0 = this.y);
                                var x0 = this.x,
                                    y0 = this.y;
                                this.x += this.x - this.x0, this.y += this.y - this.y0, this.x0 = x0, this.y0 = y0, this.z <= 0 && (this.x !== this.x0 || this.y !== this.y0) && this.stepOffset === this.game.ticksCounter % 5 && Sound_1.Sound.playSound("step", this.x, this.y, .65)
                            }
                            return this.hp = Math.min(this.hp + this.hpRegeneration, this.maxHP), !0
                        }, Zombie.prototype.isAlliedWith = function(player) {
                            return player.isHumanZombie
                        }, Zombie.prototype.performPreHit = function(victim) {
                            this.lastTickFire = this.game.ticksCounter, this.targetX = victim.x, this.targetY = victim.y, this.victim = victim, this.isCrawler && (this.dieAt = this.game.ticksCounter), this.x + 3 >= this.game.cameraX && this.y + 3 >= this.game.cameraY && this.x - 3 <= this.game.cameraX2 && this.y - 3 <= this.game.cameraY2 && Sound_1.Sound.playSound("zombie_att", victim.x, victim.y)
                        }, Zombie.prototype.draw = function(exactTicks, x1, y1, x2, y2, percentageOfCurrentTickPassed) {
                            if (this.x + 3 >= x1 && this.y + 3 >= y1 && this.x - 3 <= x2 && this.y - 3 <= y2) {
                                (this.laserHitUntil >= exactTicks || this.hitUntil >= exactTicks) && (percentageOfCurrentTickPassed = 0, exactTicks = this.lastHit);
                                var c = this.game.ctx,
                                    scale = 1.4 * this.game.SCALE_FACTOR * (this.imgScale || 1),
                                    frame = 0,
                                    x = (this.x0 + percentageOfCurrentTickPassed * (this.x - this.x0) - this.game.cameraX) * this.game.FIELD_SIZE,
                                    y = (this.y0 + percentageOfCurrentTickPassed * (this.y - this.y0) - this.game.cameraY) * this.game.FIELD_SIZE,
                                    h = (this.z0 + percentageOfCurrentTickPassed * (this.z - this.z0)) * this.game.FIELD_SIZE,
                                    x_ = x - 16 * scale,
                                    y_ = y - 20 * scale,
                                    bounce = !1,
                                    blackness = 0,
                                    whiteness = 0;
                                if (this.flameDeath && !this.flameDeathAndNowBouncing) {
                                    var timeDead = exactTicks - this.dieAt;
                                    blackness = Math.min(timeDead / 50, .9), timeDead < 10 * (this.path.length - 1) && (frame = Math.floor(.6 * exactTicks % 8))
                                } else if (this.dieAt || this.bouncePoints.length > 0) this.x !== this.x0 ? this.direction = this.x > this.x0 ? 0 : 2 : 2 !== this.direction && 0 !== this.direction && (this.direction = 2), frame = this.z >= this.z0 || this.z < .1 ? 1 : 0, bounce = !0;
                                else {
                                    var shiftX = 0,
                                        shiftY = 0;
                                    if (this.z <= 0) {
                                        var shift = this.game.shiftArray[Math.floor(this.x)] ? this.game.shiftArray[Math.floor(this.x)][Math.floor(this.y)] : null;
                                        shift && shift[0] && (shiftX = shift[0]), shift && shift[1] && (shiftY = shift[1])
                                    }
                                    if (Math.abs(this.x0 + shiftX - this.x) > .01 || Math.abs(this.y0 + shiftY - this.y) > .01) {
                                        var dist = Math.sqrt(Math.pow(this.x - this.x0, 2) + Math.pow(this.y - this.y0, 2));
                                        this.game.ticksCounter > 0 && (this.z > 0 ? this.legFrame += .0025 * this.game.timeDiff : this.legFrame += .012 * this.game.timeDiff * dist / .202), frame = Math.floor(this.legFrame) % 8, this.game.tickDiff > 0 && this.game.ticksCounter >= 0 && (this.game.ticksCounter + this.smokeTimeOffset) % 6 == 1 && !this.game.fastForward && new Sprite_1.Sprite(this.game, {
                                            x: this.x + .6 * Math.random() - .3,
                                            y: this.y + .6 * Math.random() - .3,
                                            img: Img_1.imgCoords.dust1,
                                            scaleFunction: function(age) {
                                                return this.r1 - .01 * age
                                            },
                                            r1: Math.random() + .75,
                                            alphaFunction: function(age) {
                                                return .23 * Math.max(0, 1 - age / this.ticksToLive)
                                            },
                                            age: 20 * (1.7 + Math.random()),
                                            r2: 40 * Math.random() + 32,
                                            zFunction: function(age) {
                                                return age / this.r2
                                            }
                                        })
                                    } else frame = 3
                                }
                                this.flameDeathAndNowBouncing && (blackness = .9), this.hitUntil >= exactTicks && (whiteness = Math.random() < .5 ? .95 : .1);
                                var direction = this.direction;
                                this.laserHitUntil >= exactTicks && (whiteness = .95, direction = this.lockDirection);
                                var vanishingAlpha = this.getVanishingAlpha();
                                c.globalAlpha = .4 * vanishingAlpha, c.drawImage(_1.imgs.shadow, x_, y_, 32 * scale, 32 * scale), c.globalAlpha = 1;
                                var age = exactTicks - this.lastSpawnTick;
                                if (age < 25)
                                    for (var _i = 0, _a = this.lightPillarsTop; _i < _a.length; _i++) {
                                        var p = _a[_i];
                                        this.updateAndDrawPillar(p, age)
                                    }
                                if (bounce)
                                    if (this.specialImg) {
                                        var rFrame = Math.floor(Math.min(Math.max(.35 * (exactTicks - this.dieAt - 2), 0), 8));
                                        x_ = x - this.frameW / 2 * scale * this.specialScale, y_ = y - (this.frameW - this.specialHight) * scale * this.specialScale, c.drawImage(this.specialImg, rFrame * this.frameW, 8 * this.frameW, this.frameW, this.frameW, x_, y_, this.frameW * scale * this.specialScale, this.frameW * scale * this.specialScale)
                                    } else {
                                        var yFrame = this.direction;
                                        yFrame >= 1 && (yFrame = 1);
                                        var xFrame = Math.floor(Math.min(Math.max(.25 * (exactTicks - this.dieAt), 0), 7));
                                        c.globalAlpha = vanishingAlpha, c.drawImage(_1.imgs.zombieDeath, 32 * xFrame, 32 * yFrame, 32, 32, x_, y_ - h, 32 * scale, 32 * scale), c.globalAlpha = 1, this.flameDeath && (c.globalAlpha = blackness * vanishingAlpha, c.drawImage(_1.imgs.zombieDeathBlack, 32 * xFrame, 32 * yFrame, 32, 32, x_, y_ - h, 32 * scale, 32 * scale), c.globalAlpha = 1)
                                    }
                                else if (this.playSpawnAnimation && this.tickOfSpawn + 30 >= exactTicks) {
                                    var spawnAge = this.game.ticksCounter - this.tickOfSpawn,
                                        frame2 = Math.floor(Math.min(spawnAge / 30 * 8, 7)),
                                        imgS = this.isRangedZombie ? Img_1.imgCoords.zombieSpawn2 : Img_1.imgCoords.zombieSpawn1;
                                    this.isDarkZombie && (imgS = Img_1.imgCoords.zombieSpawn3), this.isCrawler && (imgS = Img_1.imgCoords.zombieSpawn4), c.drawImage(_1.imgs.miscSheet, imgS.x + 32 * frame2, imgS.y, 32, imgS.h, x_, y_ - h, 32 * scale * this.specialScale, 32 * scale * this.specialScale), whiteness > 0 && (c.globalAlpha = whiteness, c.drawImage(_1.imgs.miscSheetWhite, imgS.x + 32 * frame2, imgS.y, 32, imgS.h, x_, y_ - h, 32 * scale * this.specialScale, 32 * scale * this.specialScale), c.globalAlpha = 1)
                                } else if (this.lastTickFire + 12 > this.game.ticksCounter && !this.flameDeath) {
                                    var attackAge = this.game.ticksCounter - this.lastTickFire;
                                    if (direction = (0, functions_2.getDirectionFromAgle)(this.x, this.y, this.targetX, this.targetY), this.direction = direction, this.specialImg) {
                                        c.globalAlpha = .4 * vanishingAlpha, c.drawImage(_1.imgs.shadow, x_, y_ + 4 * scale, 32 * scale, 32 * scale), c.globalAlpha = 1;
                                        rFrame = attackAge <= 4 ? 0 : 1;
                                        x_ = x - this.frameW / 2 * scale * this.specialScale, y_ = y - (this.frameW - this.specialHight) * scale * this.specialScale, c.drawImage(this.specialImg, rFrame * this.frameW, direction * this.frameW, this.frameW, this.frameW, x_, y_ - h, this.frameW * scale * this.specialScale, this.frameW * scale * this.specialScale), whiteness > 0 && (c.globalAlpha = whiteness, c.drawImage(this.specialImgWhite, rFrame * this.frameW, direction * this.frameW, this.frameW, this.frameW, x_, y_ - h, this.frameW * scale * this.specialScale, this.frameW * scale * this.specialScale), c.globalAlpha = 1)
                                    } else {
                                        frame2 = attackAge < 4 ? 0 : 256;
                                        frame = 2, c.drawImage(_1.imgs.legs, 32 * frame, 32 * direction + 288 * this.legs, 32, 32, x_, y_ - h, 32 * scale, 32 * scale), whiteness > 0 && (c.globalAlpha = whiteness, c.drawImage(_1.imgs.legsWhite, 32 * frame, 32 * direction + 288 * this.legs, 32, 32, x_, y_ - h, 32 * scale, 32 * scale), c.globalAlpha = 1), c.drawImage(_1.imgs.heads, 32 * direction + frame2, 32 * (this.head + 1), 32, 32, x_, y_ - h, 32 * scale, 32 * scale), this.hat && c.drawImage(_1.imgs.heads, 32 * direction + frame2, 32 * (1 + this.hat.offset), 32, 32, x_, y_ - h - frame % 2 * scale / 2, 32 * scale, 32 * scale), whiteness > 0 && (c.globalAlpha = whiteness, c.drawImage(_1.imgs.headsWhite, 32 * direction + frame2, 32 * (this.head + 1), 32, 32, x_, y_ - h, 32 * scale, 32 * scale), this.hat && c.drawImage(_1.imgs.headsWhite, 32 * direction + frame2, 32 * (1 + this.hat.offset), 32, 32, x_, y_ - h, 32 * scale, 32 * scale), c.globalAlpha = 1)
                                    }
                                } else if (this.specialImg) {
                                    c.globalAlpha = .4 * vanishingAlpha, c.drawImage(_1.imgs.shadow, x_, y_ + 4 * scale, 32 * scale, 32 * scale), c.globalAlpha = 1;
                                    rFrame = 3 === frame ? 0 : Math.floor(.6 * exactTicks) % this.moveFrames;
                                    x_ = x - this.frameW / 2 * scale * this.specialScale, y_ = y - (this.frameW - this.specialHight) * scale * this.specialScale, c.drawImage(this.specialImg, rFrame * this.frameW + this.frameOffset, direction * this.frameW, this.frameW, this.frameW, x_, y_ - h, this.frameW * scale * this.specialScale, this.frameW * scale * this.specialScale), whiteness > 0 && (c.globalAlpha = whiteness, c.drawImage(this.specialImgWhite, rFrame * this.frameW + this.frameOffset, direction * this.frameW, this.frameW, this.frameW, x_, y_ - h, this.frameW * scale * this.specialScale, this.frameW * scale * this.specialScale), c.globalAlpha = 1)
                                } else c.drawImage(_1.imgs.legs, 32 * frame, 32 * direction + 288 * this.legs, 32, 32, x_, y_ - h, 32 * scale, 32 * scale), this.flameDeath && (c.globalAlpha = blackness, c.drawImage(_1.imgs.legsBlack, 32 * frame, 32 * direction + 288 * this.legs, 32, 32, x_, y_ - h, 32 * scale, 32 * scale), c.globalAlpha = 1), whiteness > 0 && (c.globalAlpha = whiteness, c.drawImage(_1.imgs.legsWhite, 32 * frame, 32 * direction + 288 * this.legs, 32, 32, x_, y_ - h, 32 * scale, 32 * scale), c.globalAlpha = 1), c.drawImage(_1.imgs.heads, 32 * direction, 32 * this.head, 32, 32, x_, y_ - h - frame % 2 * scale / 2, 32 * scale, 32 * scale), this.hat && c.drawImage(_1.imgs.heads, 32 * direction, 32 * this.hat.offset, 32, 32, x_, y_ - h - frame % 2 * scale / 2, 32 * scale, 32 * scale), this.flameDeath && (c.globalAlpha = blackness, c.drawImage(_1.imgs.headsBlack, 32 * direction, 32 * this.head, 32, 32, x_, y_ - h - frame % 2 * scale / 2, 32 * scale, 32 * scale), this.hat && c.drawImage(_1.imgs.headsBlack, 32 * direction, 32 * this.hat.offset, 32, 32, x_, y_ - h - frame % 2 * scale / 2, 32 * scale, 32 * scale), c.globalAlpha = 1), whiteness > 0 && (c.globalAlpha = whiteness, c.drawImage(_1.imgs.headsWhite, 32 * direction, 32 * this.head, 32, 32, x_, y_ - h - frame % 2 * scale / 2, 32 * scale, 32 * scale), this.hat && c.drawImage(_1.imgs.headsWhite, 32 * direction, 32 * this.hat.offset, 32, 32, x_, y_ - h - frame % 2 * scale / 2, 32 * scale, 32 * scale), c.globalAlpha = 1), c.drawImage(_1.imgs.hands, 32 * frame, 32 * direction + this.handsOffset, 32, 32, x_, y_ - h, 32 * scale, 32 * scale), this.flameDeath && (c.globalAlpha = blackness, c.drawImage(_1.imgs.handsBlack, 32 * frame, 32 * direction + this.handsOffset, 32, 32, x_, y_ - h, 32 * scale, 32 * scale), c.globalAlpha = 1), whiteness > 0 && (c.globalAlpha = whiteness, c.drawImage(_1.imgs.handsWhite, 32 * frame, 32 * direction + this.handsOffset, 32, 32, x_, y_ - h, 32 * scale, 32 * scale), c.globalAlpha = 1);
                                if (age < 25)
                                    for (var _b = 0, _c = this.lightPillarsBottom; _b < _c.length; _b++) {
                                        p = _c[_b];
                                        this.updateAndDrawPillar(p, age)
                                    }
                                if (x = (this.x0 + percentageOfCurrentTickPassed * (this.x - this.x0) - this.game.cameraX) * this.game.FIELD_SIZE, y = (this.y0 + percentageOfCurrentTickPassed * (this.y - this.y0) - this.game.cameraY) * this.game.FIELD_SIZE, !this.dieAt) {
                                    var barScale = .55 * this.game.SCALE_FACTOR;
                                    x2 = x - 42 * barScale / 2, y2 = y - 1.85 * this.game.FIELD_SIZE - h;
                                    var nameColor = Data_1.NAME_COLOR[50].code;
                                    if (this.name && this.name.length > 0) {
                                        var nameX = x,
                                            nameAlign = "center";
                                        this.game.type.souls && (nameX = x2 + .1 * this.game.FIELD_SIZE, nameAlign = "left"), (0, functions_2.drawText)(c, this.name, nameColor, .22 * this.game.FIELD_SIZE, nameX, y2 - .05 * this.game.FIELD_SIZE, void 0, nameAlign, void 0, void 0, void 0, 38 * barScale)
                                    }
                                    c.fillStyle = "black", c.fillRect(x2, y2, 42 * barScale, 8 * barScale);
                                    var hp = Math.min(this.hp - (this.hpGlideEnd >= exactTicks ? this.hpGlideAmount * (this.hpGlideEnd - exactTicks) / (this.hpGlideEnd - this.hpGlideStart) : 0), this.maxHP),
                                        img = this.game.playingPlayer && this.isAlliedWith(this.game.playingPlayer) ? Img_1.imgCoords.hpBar1 : Img_1.imgCoords.hpBar3,
                                        w = 40 * barScale * (hp / this.maxHP);
                                    c.drawImage(_1.imgs.miscSheet, img.x, img.y, img.w, img.h, x2 + 1 * barScale, y2 + 1 * barScale, w, 6 * barScale), c.strokeStyle = "rgba(0, 0, 0, 1)", c.lineWidth = barScale;
                                    for (var i = Data_1.CONST.HP_SEPERATOR_AMOUNT; i < this.maxHP; i += Data_1.CONST.HP_SEPERATOR_AMOUNT) c.beginPath(), c.moveTo(x2 + 1 * barScale + i / this.maxHP * 40 * barScale, y2 + 5 * barScale), c.lineTo(x2 + 1 * barScale + i / this.maxHP * 40 * barScale, y2 + 7 * barScale), c.stroke()
                                }
                            }
                        }, Zombie
                    }(Humanoid_1.Humanoid);
                exports.Zombie = Zombie
            },
            5303: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.graphics = exports.options = exports.setPlayerData = exports.playerData = void 0;
                var Abilities_1 = __webpack_require__(6489),
                    Data_1 = __webpack_require__(6313),
                    GameTypes_1 = __webpack_require__(3963),
                    Skins_1 = __webpack_require__(3346),
                    functions_1 = __webpack_require__(7582);
                exports.playerData = {
                    name: "",
                    authLevel: Data_1.AUTH_LEVEL.GUEST,
                    lvl: 1,
                    xp: 0,
                    gold: 0,
                    gems: 0,
                    skinsUnlocked: "",
                    clanTag: "",
                    clanRole: Data_1.AUTH_LEVEL.NONE,
                    skin: Skins_1.hats[0],
                    chests: {},
                    abilities: (0, Abilities_1.getDefaultAbilityObj)(Abilities_1.abilities),
                    db_id: -1,
                    isAdmin: !1,
                    isMod: !1,
                    isMod2: !1,
                    name_color: [],
                    name_color_select: 0,
                    server_client_id: 0,
                    emotes: []
                }, exports.setPlayerData = function(arr) {
                    var authLvl = Data_1.AUTH_LEVEL.PLAYER;
                    "1" === arr[7] && (authLvl = Data_1.AUTH_LEVEL.MOD), "1" === arr[8] && (authLvl = Data_1.AUTH_LEVEL.MOD2), "1" === arr[9] && (authLvl = Data_1.AUTH_LEVEL.ADMIN), exports.playerData.authLevel = authLvl, exports.playerData.name = arr[1], exports.playerData.skin = Skins_1.hats[parseInt(arr[2])], exports.playerData.abilities = JSON.parse(arr[3]), exports.playerData.gold = parseInt(arr[4]), exports.playerData.gems = parseInt(arr[5]), exports.playerData.xp = parseInt(arr[6]), exports.playerData.lvl = (0, Data_1.getLvlFromXp)(parseFloat(arr[6])), exports.playerData.isMod = "1" === arr[7], exports.playerData.isMod2 = "1" === arr[8], exports.playerData.isAdmin = "1" === arr[9], exports.playerData.name_color_select = parseInt(arr[10]), exports.playerData.skinsUnlocked = arr[11], exports.playerData.clanTag = arr[12], exports.playerData.clanRole = parseInt(arr[13]), exports.playerData.chests = (0, functions_1.parseChests)(arr[14]), exports.playerData.db_id = parseInt(arr[15]), exports.playerData.name_color = arr[16].split(",").map(Number), exports.playerData.emotes = JSON.parse(arr[17])
                };
                var defaultGameMode = parseInt(localStorage.getItem("defaultGameMode") || "0");
                GameTypes_1.MAP_TYPE_SETTINGS[defaultGameMode] || (defaultGameMode = GameTypes_1.MAP_TYPE.TOURNAMENT_UNRANKED);
                var hideChat = "1" === localStorage.getItem("hideChat");
                document.getElementById("chatDisplayDiv").style.display = hideChat ? "none" : "block", exports.options = {
                    sound_volume: "string" != typeof localStorage.getItem("sound_volume") ? .8 : parseFloat(localStorage.getItem("sound_volume")),
                    minimapSizeFactor: "string" != typeof localStorage.getItem("minimapSizeFactor") ? 1.13 : parseFloat(localStorage.getItem("minimapSizeFactor")),
                    graphicSettings: "10" === localStorage.getItem("graphicSettings") ? 10 : 0,
                    weaponsUnclickable: "1" === localStorage.getItem("weaponsUnclickable"),
                    hideMinimap: "1" === localStorage.getItem("hideMinimap"),
                    forcePlayerNameColor: "1" === localStorage.getItem("forcePlayerNameColor"),
                    showPing: "1" === localStorage.getItem("showPing"),
                    showFPS: "1" === localStorage.getItem("showFPS"),
                    defaultGameMode,
                    hideChat,
                    ignoreList: (localStorage.getItem("ignoreList") || "").split(";"),
                    ignoreListTemp: []
                }, exports.graphics = [], exports.graphics[0] = {
                    exposionParticles: 10,
                    torchEmitTime: 11,
                    spawnBullets: !1,
                    additionalFTFire: !1
                }, exports.graphics[10] = {
                    exposionParticles: 30,
                    torchEmitTime: 5,
                    spawnBullets: !0,
                    additionalFTFire: !0
                }
            },
            7582: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.drawHat = exports.containsMouse = exports.getCurrentGameLink = exports.copyInput = exports.hideLadderButton = exports.changeReplaySpeed = exports.replaySettings = exports.replayOptions = exports.humanizeSeconds = exports.ticks2TimeStr = exports.logout = exports.startReplay = exports.startReplay0 = exports.loadReplay = exports.toggleIgnore = exports.playerIsBeeingIgnored = exports.ban = exports.resize = exports.showPlayerInfo0 = exports.showPlayerInfo = exports.acceptAGB = exports.toggleFullscreen = exports.setHat = exports.watchLaddergame = exports.initBanGuest = exports.initBan = exports.modPlInfo = exports.getChestName = exports.parseChests = exports.exitGame = exports.ajax = exports.drawText = exports.drawCircle = exports.getDirectionFromAgle16 = exports.getDirectionFromAgle = exports.getAngle = exports.getMouseGamePlayY = exports.getMouseGamePlayX = exports.circleY = exports.circleX = exports.escapeHtml = exports.isInGame = void 0;
                var _1 = __webpack_require__(2174),
                    Abilities_1 = __webpack_require__(6489),
                    Data_1 = __webpack_require__(6313),
                    functions_1 = __webpack_require__(8394),
                    Skins_1 = __webpack_require__(3346),
                    config_1 = __webpack_require__(5303),
                    Game_1 = __webpack_require__(9158),
                    Input_1 = __webpack_require__(5860),
                    map1_1 = __webpack_require__(9620),
                    Network_1 = __webpack_require__(367),
                    rankInGame_1 = __webpack_require__(6480),
                    root_1 = __webpack_require__(17),
                    Sound_1 = __webpack_require__(3754),
                    UI_1 = __webpack_require__(2664),
                    optionsScreen_1 = __webpack_require__(613),
                    resourceBar_1 = __webpack_require__(4542),
                    floatTip_1 = __webpack_require__(9177),
                    lang_1 = __webpack_require__(9655),
                    canvas = document.getElementById("canvas"),
                    c = canvas.getContext("2d");

                function getAngle(x, y, x2, y2) {
                    var angle = Math.atan((y2 - y) / (x2 - x));
                    return angle -= x2 - x < 0 ? Math.PI : 0, angle += angle < -Math.PI ? 2 * Math.PI : 0, angle -= angle > Math.PI ? 2 * Math.PI : 0
                }

                function showPlayerInfo(p) {
                    Network_1.Network.send("plInfo$" + p)
                }

                function resize() {
                    if (canvas.width = window.innerWidth, canvas.height = window.innerHeight, null !== root_1.root.game) {
                        root_1.root.game.FIELD_SIZE = Math.sqrt(window.innerWidth * window.innerHeight) * root_1.root.game.SCALE_CONST, root_1.root.game.FIELD_SIZE_BASE = Math.sqrt(window.innerWidth * window.innerHeight) * root_1.root.game.SCALE_CONST_BASE, root_1.root.game.SCALE_FACTOR = root_1.root.game.FIELD_SIZE / 16, root_1.root.game.SCALE_FACTOR_BASE = root_1.root.game.FIELD_SIZE_BASE / 16, c.mozImageSmoothingEnabled = !1, c.msImageSmoothingEnabled = !1, c.imageSmoothingEnabled = !1;
                        var el = document.getElementById("chatDisplayDiv");
                        el && (el.style.left = root_1.root.game.FIELD_SIZE / 16 * 87 + "px", el.style.right = root_1.root.game.FIELD_SIZE / 16 * 70 + "px", el.style.bottom = root_1.root.game.FIELD_SIZE / 16 * 2 + "px")
                    }
                }

                function startReplay0(r) {
                    r[0] && r[0].split && "replay-version" === r[0].split("=")[0] ? (r.splice(0, 1), root_1.root.game.playingReplay = r, root_1.root.game.playingReplayVersion = parseInt(r[0].split("=")[1])) : (root_1.root.game.playingReplay = r, root_1.root.game.playingReplayVersion = 1), startReplay()
                }

                function startReplay() {
                    var el = document.getElementById("ladderList");
                    el && el.parentNode.removeChild(el), (el = document.getElementById("popupWndContainer")) && el.parentNode.removeChild(el), (el = document.querySelector(".F-popUpLayer")) && el.parentNode.removeChild(el);
                    for (var _i = 0, _a = root_1.root.game.playingReplay; _i < _a.length; _i++) {
                        var row = _a[_i],
                            splitMsg = row.split("$"),
                            map_ = null;
                        try {
                            map_ = JSON.parse(splitMsg[3])
                        } catch (e) {
                            map_ = null
                        }
                        if (map_ && "object" == typeof map_) {
                            cancelLadder();
                            var replay = root_1.root.game.playingReplay;
                            return root_1.root.game = new Game_1.Game(map_), root_1.root.game.playingReplay = replay, resize(), root_1.root.game.replayMode = !0, root_1.root.game.iAmSpec = !0, root_1.root.game.init(splitMsg, row), root_1.root.game.interface_.analyzeReplay(root_1.root.game.playingReplay), void UI_1.UI.refreshMenuButtons()
                        }
                        if ("init" === splitMsg[0]) {
                            cancelLadder();
                            replay = root_1.root.game.playingReplay;
                            return root_1.root.game = new Game_1.Game(JSON.parse(splitMsg[1])), root_1.root.game.playingReplay = replay, resize(), root_1.root.game.replayMode = !0, root_1.root.game.iAmSpec = !0, root_1.root.game.init(splitMsg, row), root_1.root.game.interface_.analyzeReplay(root_1.root.game.playingReplay), void UI_1.UI.refreshMenuButtons()
                        }
                    }
                }

                function humanizeSeconds(seconds) {
                    if (seconds >= 0) {
                        var hour = Math.floor(seconds / 3600),
                            min = Math.floor(seconds / 60) % 60,
                            sec = seconds % 60,
                            str = "";
                        if (hour > 0) str = (hour < 10 ? "0" + hour : hour) + ":";
                        return str + (min < 10 ? "0" + min : min) + ":" + (sec < 10 ? "0" + sec : sec)
                    }
                    return "--:--"
                }

                function cancelLadder() {
                    root_1.root.searchingLadder && (Sound_1.Sound.playSound("click"), Network_1.Network.send("cancelLadder")), hideLadderButton()
                }

                function hideLadderButton() {
                    root_1.root.searchingLadder = !1, document.getElementById("ladderDiv").style.display = "none"
                }
                exports.isInGame = function() {
                        return null !== root_1.root.game && root_1.root.game.map !== map1_1.map1
                    }, exports.escapeHtml = function(text) {
                        return text.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;")
                    }, exports.circleX = [0, Math.SQRT1_2, 1, Math.SQRT1_2, 0, -Math.SQRT1_2, -1, Math.SQRT1_2], exports.circleY = [-1, -Math.SQRT1_2, 0, Math.SQRT1_2, 1, Math.SQRT1_2, 0, -Math.SQRT1_2], exports.getMouseGamePlayX = function() {
                        return null !== root_1.root.game ? Input_1.Input.x / root_1.root.game.FIELD_SIZE + root_1.root.game.cameraX : 0
                    }, exports.getMouseGamePlayY = function() {
                        return null !== root_1.root.game ? Input_1.Input.y / root_1.root.game.FIELD_SIZE + root_1.root.game.cameraY + (root_1.root.game.playingPlayer && root_1.root.game.playingPlayer.weapon && root_1.root.game.playingPlayer.weapon.addHeight ? root_1.root.game.SHOT_HEIGHT : 0) : 0
                    }, exports.getAngle = getAngle, exports.getDirectionFromAgle = function(x, y, x2, y2) {
                        var angle = getAngle(x, y, x2, y2);
                        return angle >= 3 * Math.PI / 8 && angle <= 5 * Math.PI / 8 ? 0 : angle <= 3 * -Math.PI / 8 && angle >= 5 * -Math.PI / 8 ? 4 : angle >= 7 * Math.PI / 8 || angle <= 7 * -Math.PI / 8 ? 2 : angle <= 1 * Math.PI / 8 && angle >= 0 || angle >= 1 * -Math.PI / 8 && angle <= 0 ? 6 : angle <= 7 * Math.PI / 8 && angle >= 5 * Math.PI / 8 ? 1 : angle <= 3 * Math.PI / 8 && angle >= 1 * Math.PI / 8 ? 7 : angle >= 7 * -Math.PI / 8 && angle <= 5 * -Math.PI / 8 ? 3 : 5
                    }, exports.getDirectionFromAgle16 = function(x, y, x2, y2) {
                        var angle = getAngle(x, y, x2, y2),
                            direction = 0;
                        return angle <= 7 * -Math.PI / 16 && angle >= 9 * -Math.PI / 16 ? direction = 0 : angle <= 5 * -Math.PI / 16 && angle >= 7 * -Math.PI / 16 ? direction = 1 : angle <= 3 * -Math.PI / 16 && angle >= 5 * -Math.PI / 16 ? direction = 2 : angle <= 1 * -Math.PI / 16 && angle >= 3 * -Math.PI / 16 ? direction = 3 : angle <= 1 * Math.PI / 16 && angle >= 1 * -Math.PI / 16 ? direction = 4 : angle <= 3 * Math.PI / 16 && angle >= 1 * Math.PI / 16 ? direction = 5 : angle <= 5 * Math.PI / 16 && angle >= 3 * Math.PI / 16 ? direction = 6 : angle <= 7 * Math.PI / 16 && angle >= 5 * Math.PI / 16 ? direction = 7 : angle <= 9 * Math.PI / 16 && angle >= 7 * Math.PI / 16 ? direction = 8 : angle <= 11 * Math.PI / 16 && angle >= 9 * Math.PI / 16 ? direction = 9 : angle <= 13 * Math.PI / 16 && angle >= 11 * Math.PI / 16 ? direction = 10 : angle <= 15 * Math.PI / 16 && angle >= 13 * Math.PI / 16 ? direction = 11 : angle <= 15 * -Math.PI / 16 || angle >= 15 * Math.PI / 16 ? direction = 12 : angle <= 13 * -Math.PI / 16 && angle >= 15 * -Math.PI / 16 ? direction = 13 : angle <= 11 * -Math.PI / 16 && angle >= 13 * -Math.PI / 16 ? direction = 14 : angle <= 9 * -Math.PI / 16 && angle >= 11 * -Math.PI / 16 && (direction = 15), direction
                    }, exports.drawCircle = function(ctx, x, y, size, color, fillColor, yScale, lineWidth) {
                        var yScale_ = yScale || 1;
                        ctx.scale(1, yScale_), ctx.lineWidth = root_1.root.game.SCALE_FACTOR * (lineWidth || 1), ctx.beginPath(), ctx.arc(x, y / yScale_, size, 0, 2 * Math.PI, !1), color && (ctx.strokeStyle = color, ctx.stroke()), fillColor && (ctx.fillStyle = fillColor, ctx.fill()), ctx.scale(1, 1 / yScale_)
                    }, exports.drawText = function drawText(ctx, text, color, size, x, y, w, align, alpha, fillStyle, height, maxWidth, shadowColor) {
                        var fontFamily = window.getComputedStyle(document.documentElement)["font-family"],
                            text2 = text,
                            w2 = w || 99999;
                        alpha = alpha || 1;
                        var returnValue = 1;
                        if (ctx.font = "bold " + size + "px " + fontFamily, ctx.textAlign = align || "left", ctx.shadowColor = shadowColor || "black", ctx.shadowBlur = 0, ctx.measureText(text).width > w2) {
                            for (var words = text.split(" "), line = words[0], lastFittingLine = void 0, i = 1; ctx.measureText(line).width <= w2 && i < words.length;) lastFittingLine = line, line = line + " " + words[i], i++;
                            text2 = lastFittingLine || line, words.splice(0, Math.max(i - 1, 1)), words.length > 0 && void 0 !== height && (returnValue += drawText(ctx, words.join(" "), color, size, x, y + height + 4, w2, align, alpha, fillStyle, height, maxWidth, shadowColor))
                        }
                        var textWidth = ctx.measureText(text2).width,
                            x2 = Math.floor(x),
                            y2 = Math.floor(y);
                        if (fillStyle && void 0 !== height) {
                            var x3 = x2;
                            "center" === align ? x3 -= (textWidth + 6) / 2 : "right" === align && (x3 -= textWidth + 6), ctx.globalAlpha = alpha, ctx.fillStyle = fillStyle, ctx.fillRect(x3, y2 - .9 * height, textWidth + 6, 1.1 * height)
                        }
                        return alpha && (ctx.globalAlpha = alpha), ctx.fillStyle = color, maxWidth ? ctx.fillText(text2, x2, y2, maxWidth) : ctx.fillText(text2, x2, y2), ctx.globalAlpha = 1, ctx.shadowBlur = 0, returnValue
                    }, exports.ajax = function(url, callback) {
                        var xmlhttp = new XMLHttpRequest;
                        xmlhttp.onreadystatechange = function() {
                            xmlhttp.readyState === XMLHttpRequest.DONE && (200 === xmlhttp.status ? callback(xmlhttp.responseText) : 400 === xmlhttp.status ? alert("Ajax error 400") : alert("Ajax error unspecified"))
                        }, xmlhttp.open("GET", url, !0), xmlhttp.send()
                    }, exports.exitGame = function() {
                        Sound_1.Sound.playSound("click"), document.getElementById("optionsWindow").style.display = "none", config_1.playerData.authLevel >= Data_1.AUTH_LEVEL.PLAYER && resourceBar_1.resourceBar.show(), root_1.root.game = new Game_1.Game(map1_1.map1), resize(), rankInGame_1.rankInGame.hide(), UI_1.UI.refreshMenuButtons(), UI_1.UI.showMainScene()
                    }, exports.parseChests = function(str) {
                        for (var chests = {}, a1 = str.split(";"), i = 0; i < a1.length; i++)
                            if (a1[i]) {
                                var a2 = a1[i].split(",");
                                chests[parseInt(a2[0])] = {
                                    count: parseInt(a2[1]),
                                    openTime: parseInt(a2[2])
                                }
                            } return chests
                    }, exports.getChestName = function(id) {
                        return lang_1.lang.get("chest.name." + id)
                    }, exports.modPlInfo = function(e) {
                        var plID = e.currentTarget.getAttribute("data-playerId");
                        root_1.root.game && (root_1.root.game.interface_.addMsg("request sent", "red"), root_1.root.game.map !== map1_1.map1 ? Network_1.Network.send("chat/plinfo " + plID) : Network_1.Network.send("chat/plinfo$ " + plID))
                    }, exports.initBan = function(e) {
                        var plID = e.currentTarget.getAttribute("data-playerId");
                        if (root_1.root.game && root_1.root.game.map !== map1_1.map1) {
                            var el = document.getElementById("chatInputDiv"),
                                el2 = document.getElementById("chatInput"),
                                el3 = document.getElementById("chatlog"),
                                el4 = document.getElementById("chatloginner");
                            "inline" !== el.style.display && (el.style.display = "inline", el3.style.display = "inline", el4.scrollTop = el4.scrollHeight), el2.value = "/ban " + plID + " ", el2.focus()
                        } else(0, floatTip_1.floatTip)("success", "Only works ingame", 2e3)
                    }, exports.initBanGuest = function(name) {
                        if (root_1.root.game && root_1.root.game.map !== map1_1.map1) {
                            var el = document.getElementById("chatInputDiv"),
                                el2 = document.getElementById("chatInput"),
                                el3 = document.getElementById("chatlog"),
                                el4 = document.getElementById("chatloginner");
                            "inline" !== el.style.display && (el.style.display = "inline", el3.style.display = "inline", el4.scrollTop = el4.scrollHeight), el2.value = "/banguest " + name + " ", el2.focus()
                        } else(0, floatTip_1.floatTip)("success", "Only works ingame", 2e3)
                    }, exports.watchLaddergame = function(e) {
                        var el = e.currentTarget;
                        Network_1.Network.send("wlg$" + el.getAttribute("data-laddergameId"))
                    }, exports.setHat = function(i) {
                        var item;
                        void 0 !== (item = Skins_1.hats[i]).id && (0, functions_1.arrayContains)(config_1.playerData.skinsUnlocked.split(";"), item.id.toString()) && (Network_1.Network.send("setHat$" + i), config_1.playerData.skin = Skins_1.hats[i])
                    }, exports.toggleFullscreen = function(element) {
                        element.requestFullScreenWithKeys && (document.fullScreen ? document.exitFullScreen() : element.requestFullScreenWithKeys()), element.requestFullScreen ? document.fullScreen ? document.exitFullScreen() : element.requestFullscreen() : element.mozRequestFullScreen ? document.mozFullScreen ? document.mozCancelFullScreen() : element.mozRequestFullScreen() : element.webkitRequestFullScreen && (document.webkitIsFullScreen ? document.webkitCancelFullScreen() : element.webkitRequestFullScreen(element.ALLOW_KEYBOARD_INPUT)), resize()
                    }, exports.acceptAGB = function() {
                        Network_1.Network.send("i-accept-agb"), Sound_1.Sound.playSound("click")
                    }, exports.showPlayerInfo = showPlayerInfo, exports.showPlayerInfo0 = function(e) {
                        showPlayerInfo(parseInt(e.target.getAttribute("data-playerId")))
                    }, exports.resize = resize, resize(), window.onresize = resize, exports.ban = function(name) {
                        Network_1.Network.send("ban$" + name)
                    }, exports.playerIsBeeingIgnored = function(name) {
                        return name = name.toLowerCase(), config_1.options.ignoreList.indexOf(name) >= 0 || config_1.options.ignoreListTemp.indexOf(name) >= 0
                    }, exports.toggleIgnore = function(button, name, isGuest) {
                        var el = document.getElementById("button_ignore_" + name);
                        name = name.toLowerCase();
                        for (var i = 0; i < config_1.options.ignoreList.length; i++)
                            if (config_1.options.ignoreList[i] === name) return config_1.options.ignoreList.splice(i, 1), localStorage.ignoreList = config_1.options.ignoreList.join(";"), el && (el.innerHTML = "ignore"), void(null !== root_1.root.game && root_1.root.game.interface_.addMsg(lang_1.lang.get("game.msg.ignore.off", {
                                playerName: name
                            }), "white"));
                        for (i = 0; i < config_1.options.ignoreListTemp.length; i++)
                            if (config_1.options.ignoreListTemp[i] === name) return config_1.options.ignoreListTemp.splice(i, 1), el && (el.innerHTML = "ignore"), void(null !== root_1.root.game && root_1.root.game.interface_.addMsg(lang_1.lang.get("game.msg.ignore.off", {
                                playerName: name
                            }), "white"));
                        (isGuest ? config_1.options.ignoreListTemp : config_1.options.ignoreList).push(name), localStorage.ignoreList = config_1.options.ignoreList.join(";"), el && (el.innerHTML = "unignore"), null !== root_1.root.game && root_1.root.game.interface_.addMsg(lang_1.lang.get("game.msg.ignore.on", {
                            playerName: name
                        }), "white")
                    }, exports.loadReplay = function() {
                        var fileInput = document.createElement("input");
                        fileInput.type = "file", fileInput.click(), fileInput.onchange = function() {
                            var file = fileInput.files[0];
                            if (file) {
                                optionsScreen_1.optionsScreen.hideWindow();
                                var reader = new FileReader;
                                reader.readAsText(file), reader.onload = function(e) {
                                    setTimeout((function() {
                                        startReplay0(JSON.parse(e.target.result))
                                    }), 50)
                                }
                            }
                        }, Sound_1.Sound.playSound("click")
                    }, exports.startReplay0 = startReplay0, exports.startReplay = startReplay, exports.logout = function() {
                        Sound_1.Sound.playSound("click"), Network_1.Network.send("logout"), resourceBar_1.resourceBar.hide(), config_1.playerData.name = "", config_1.playerData.authLevel = Data_1.AUTH_LEVEL.GUEST, config_1.playerData.lvl = 1, config_1.playerData.xp = 0, config_1.playerData.gold = 0, config_1.playerData.gems = 0, config_1.playerData.skinsUnlocked = "", config_1.playerData.clanTag = "", config_1.playerData.clanRole = Data_1.AUTH_LEVEL.NONE, config_1.playerData.skin = Skins_1.hats[0], config_1.playerData.chests = {}, config_1.playerData.abilities = (0, Abilities_1.getDefaultAbilityObj)(Abilities_1.abilities), config_1.playerData.db_id = -1, config_1.playerData.isAdmin = !1, config_1.playerData.isMod = !1, config_1.playerData.isMod2 = !1, config_1.playerData.name_color = [], config_1.playerData.name_color_select = 0, localStorage.setItem("autologin", ""), UI_1.UI.showMainScene(), UI_1.UI.refreshMenuButtons()
                    }, exports.ticks2TimeStr = function(ticks) {
                        return humanizeSeconds(Math.floor(ticks / 20))
                    }, exports.humanizeSeconds = humanizeSeconds, exports.replayOptions = [{
                        tickTime: 200,
                        loops: 0,
                        display: 0
                    }, {
                        tickTime: 200,
                        loops: 1,
                        display: .25
                    }, {
                        tickTime: 100,
                        loops: 1,
                        display: .5
                    }, {
                        tickTime: 50,
                        loops: 1,
                        display: 1
                    }, {
                        tickTime: 25,
                        loops: 1,
                        display: 2
                    }, {
                        tickTime: 12,
                        loops: 1,
                        display: 4
                    }, {
                        tickTime: 6,
                        loops: 1,
                        display: 8
                    }, {
                        tickTime: 6,
                        loops: 2,
                        display: 16
                    }, {
                        tickTime: 6,
                        loops: 4,
                        display: 32
                    }, {
                        tickTime: 6,
                        loops: 8,
                        display: 64
                    }, {
                        tickTime: 6,
                        loops: 32,
                        display: 128
                    }], exports.replaySettings = {
                        replayOptionsIndex: 3,
                        oldReplayOptionsIndex: 3,
                        replayOption: exports.replayOptions[3],
                        lastReplaySpeedChange: -9999
                    }, exports.changeReplaySpeed = function(inc) {
                        if (null !== root_1.root.game && (root_1.root.game.fastForward || root_1.root.game.interface_.fastForwardTo >= 0)) return root_1.root.game.fastForward = !1, root_1.root.game.interface_.fastForwardTo = -1, exports.replaySettings.oldReplayOptionsIndex = exports.replaySettings.replayOptionsIndex, exports.replaySettings.replayOptionsIndex = exports.replayOptions.length - 1, void(exports.replaySettings.replayOption = exports.replayOptions[exports.replaySettings.replayOptionsIndex]);
                        exports.replaySettings.replayOptionsIndex = Math.max(Math.min(exports.replaySettings.replayOptionsIndex + inc, exports.replayOptions.length - 2), 0), exports.replaySettings.replayOption = exports.replayOptions[exports.replaySettings.replayOptionsIndex], exports.replaySettings.lastReplaySpeedChange = Date.now()
                    },
                    function replayLoop() {
                        if (null !== root_1.root.game && root_1.root.game.replayMode)
                            for (var k = 0; k < exports.replaySettings.replayOption.loops; k++)
                                for (var i = root_1.root.game.replayIndex; i < root_1.root.game.playingReplay.length; i++) {
                                    root_1.root.game.fastForward && root_1.root.game.interface_.fastForwardTo - 200 <= root_1.root.game.interface_.replayTimer && (root_1.root.game.fastForward = !1, exports.replaySettings.replayOptionsIndex = exports.replayOptions.length - 3, exports.replaySettings.replayOption = exports.replayOptions[exports.replaySettings.replayOptionsIndex]), root_1.root.game.interface_.fastForwardTo === root_1.root.game.interface_.replayTimer && (root_1.root.game.interface_.fastForwardTo = -1, exports.replaySettings.replayOptionsIndex = exports.replaySettings.oldReplayOptionsIndex, exports.replaySettings.replayOption = exports.replayOptions[exports.replaySettings.replayOptionsIndex]);
                                    var splitMsg = root_1.root.game.playingReplay[i].split("$");
                                    (0, Network_1.handleNetworkMsg)(root_1.root.game.playingReplay[i]), root_1.root.game.replayIndex = i + 1, "upd" === splitMsg[0] && (root_1.root.game.interface_.replayTimer++, i = root_1.root.game.playingReplay.length)
                                }
                        setTimeout(replayLoop, exports.replaySettings.replayOption.tickTime)
                    }(), document.getElementById("ladderDiv").onclick = cancelLadder, exports.hideLadderButton = hideLadderButton, exports.copyInput = function(input) {
                        input.select();
                        try {
                            document.execCommand("copy") ? (0, floatTip_1.floatTip)("success", lang_1.lang.get("msg.copy_ok"), 2e3) : (0, floatTip_1.floatTip)("error", lang_1.lang.get("msg.copy_fail"))
                        } catch (err) {
                            (0, floatTip_1.floatTip)("error", lang_1.lang.get("msg.copy_fail_with_reason", err.toString()))
                        }
                    }, exports.getCurrentGameLink = function() {
                        return null !== root_1.root.game && root_1.root.game.map !== map1_1.map1 ? window.location.href + "?server=" + Network_1.Network.connectedServerIndex + "&game=" + root_1.root.game.id : ""
                    };
                exports.containsMouse = function(el) {
                    var rect = el.getBoundingClientRect();
                    return rect.left <= Input_1.Input.x && rect.right >= Input_1.Input.x && rect.top <= Input_1.Input.y && rect.bottom >= Input_1.Input.y
                }, exports.drawHat = function(ctx, hat, scale, direction, width, height) {
                    ctx.fillStyle = "rgba(0, 0, 0, 0)", ctx.clearRect(0, 0, width, height), ctx.drawImage(_1.imgs.shadow, 0, 0, 32 * scale, 32 * scale), ctx.drawImage(_1.imgs.weaponsMinus, 32 * direction, 0, 32, 32, Math.sin(Math.PI / 2 * 1) * scale / 3, -1 * scale / 2, 32 * scale, 32 * scale), ctx.drawImage(_1.imgs.legs, 32, 32 * direction + 288 * hat.legs, 32, 32, 0, 0, 32 * scale, 32 * scale), hat.hatOnly && ctx.drawImage(_1.imgs.heads, 32 * direction, 0, 32, 32, 0, 0 - 1 * scale / 2, 32 * scale, 32 * scale), ctx.drawImage(_1.imgs.heads, 32 * direction, 32 * hat.offset, 32, 32, 0, 0 - 1 * scale / 2, 32 * scale, 32 * scale), ctx.drawImage(_1.imgs.weaponsPlus, 32 * direction, 0, 32, 32, Math.sin(Math.PI / 2 * 1) * scale / 2, -1 * scale / 1.8, 32 * scale, 32 * scale)
                }
            },
            2174: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.imageTransforms = exports.imgs = exports.initGame = exports.mainLoop = exports.refreshHatCanvasOld = exports.refreshHatCanvas = void 0;
                var Data_1 = __webpack_require__(6313),
                    Skins_1 = __webpack_require__(3346),
                    TileTypes_1 = __webpack_require__(9285),
                    config_1 = __webpack_require__(5303),
                    functions_1 = __webpack_require__(7582),
                    Game_1 = __webpack_require__(9158),
                    lightMapController_1 = __webpack_require__(6582),
                    map1_1 = __webpack_require__(9620),
                    Network_1 = __webpack_require__(367),
                    root_1 = __webpack_require__(17),
                    UI_1 = __webpack_require__(2664),
                    homeScreen_1 = __webpack_require__(1292),
                    lang_1 = __webpack_require__(9655),
                    c = document.getElementById("canvas").getContext("2d"),
                    _lastGame = null,
                    rAF = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function(callback) {
                        window.setTimeout(callback, 16)
                    };

                function refreshHatCanvas(ca_, hat) {
                    ca_.width = ca_.offsetWidth, ca_.height = ca_.offsetHeight;
                    var noAnimate = "yes" === ca_.getAttribute("data-no-animate"),
                        c_ = ca_.getContext("2d"),
                        scaledSize = Math.max(1, Math.round(118.4)),
                        xOffset = -Math.round(16),
                        yOffset = -Math.round(32 / 3),
                        frame = noAnimate ? 1 : Math.floor(Date.now() / 66 * .6 % 8);
                    c_.mozImageSmoothingEnabled = !1, c_.msimageSmoothingEnabled = !1, c_.imageSmoothingEnabled = !1;
                    try {
                        c_.drawImage(exports.imgs.shadow, 0, 0, scaledSize, scaledSize, xOffset, yOffset, scaledSize, scaledSize)
                    } catch (err) {}
                    c_.drawImage(exports.imgs.weaponsMinus, 64, 0, 32, 32, 3.7 * Math.sin(frame * (Math.PI / 2)) / 3 + xOffset, -frame % 2 * 3.7 / 2 + yOffset, scaledSize, scaledSize), c_.drawImage(exports.imgs.legs, 32 * frame, 64 + 288 * hat.legs, 32, 32, xOffset, yOffset, scaledSize, scaledSize), hat.hatOnly && c_.drawImage(exports.imgs.heads, 64, 0, 32, 32, xOffset, 0 - frame % 2 * 3.7 / 2 + yOffset, scaledSize, scaledSize), c_.drawImage(exports.imgs.heads, 64, 32 * hat.offset, 32, 32, xOffset, 0 - frame % 2 * 3.7 / 2 + yOffset, scaledSize, scaledSize), c_.drawImage(exports.imgs.weaponsPlus, 64, 0, 32, 32, 3.7 * Math.sin(frame * (Math.PI / 2)) / 2 + xOffset, -frame % 2 * 3.7 / 1.8 + yOffset, scaledSize, scaledSize)
                }

                function refreshHatCanvasOld(ca_, hat) {
                    var noAnimate = "yes" === ca_.getAttribute("data-no-animate");
                    ca_.width = 164, ca_.height = 164;
                    var c_ = ca_.getContext("2d");
                    c_.mozImageSmoothingEnabled = !1, c_.msImageSmoothingEnabled = !1, c_.imageSmoothingEnabled = !1;
                    var frame = noAnimate ? 1 : Math.floor(Date.now() / 66 * .6 % 8);
                    c_.drawImage(exports.imgs.shadow, 0, 0, 160, 160), c_.drawImage(exports.imgs.weaponsMinus, 64, 0, 32, 32, 5 * Math.sin(frame * (Math.PI / 2)) / 3, -frame % 2 * 5 / 2, 160, 160), c_.drawImage(exports.imgs.legs, 32 * frame, 64 + 288 * hat.legs, 32, 32, 0, 0, 160, 160), hat.hatOnly && c_.drawImage(exports.imgs.heads, 64, 0, 32, 32, 0, 0 - frame % 2 * 5 / 2, 160, 160), c_.drawImage(exports.imgs.heads, 64, 32 * hat.offset, 32, 32, 0, 0 - frame % 2 * 5 / 2, 160, 160), c_.drawImage(exports.imgs.weaponsPlus, 64, 0, 32, 32, 5 * Math.sin(frame * (Math.PI / 2)) / 2, -frame % 2 * 5 / 1.8, 160, 160)
                }

                function mainLoop() {
                    if (rAF(mainLoop), null !== root_1.root.game) {
                        if (root_1.root.game.newTime = Date.now(), root_1.root.game.timeDiff = root_1.root.game.newTime - root_1.root.game.timestamp, root_1.root.game.timestamp = root_1.root.game.newTime, root_1.root.game.tickDiff = root_1.root.game.ticksCounter - root_1.root.game.lastFramesTick, root_1.root.game.lastFramesTick = root_1.root.game.ticksCounter, root_1.root.game.exactTickDiff = root_1.root.game.ticksCounter + Math.min((Date.now() - root_1.root.game.lastUpdate) / functions_1.replaySettings.replayOption.tickTime, 1) - root_1.root.game.lastFramesExactTick, root_1.root.game.lastFramesExactTick = root_1.root.game.ticksCounter + Math.min((Date.now() - root_1.root.game.lastUpdate) / functions_1.replaySettings.replayOption.tickTime, 1), root_1.root.game.map === map1_1.map1)
                            if (Math.floor(root_1.root.game.newTime / 50) > Math.floor((root_1.root.game.newTime - root_1.root.game.timeDiff) / 50) && root_1.root.game.receiveUpdate([]), root_1.root.game.cameraX < 0 || root_1.root.game.cameraY < 0 || root_1.root.game.cameraX2 > root_1.root.game.map.x || root_1.root.game.cameraY2 > root_1.root.game.map.y || 0 === root_1.root.game.camFlyX && 0 === root_1.root.game.camFlyY) {
                                var angle = Math.random() * Math.PI * 2;
                                root_1.root.game.camFlyX = .001 * Math.cos(angle), root_1.root.game.camFlyY = .001 * Math.sin(angle), root_1.root.game.cameraX = Math.random() * (root_1.root.game.map.x - window.innerWidth / root_1.root.game.FIELD_SIZE), root_1.root.game.cameraY = Math.random() * (root_1.root.game.map.y - window.innerHeight / root_1.root.game.FIELD_SIZE)
                            } else root_1.root.game.cameraX += root_1.root.game.camFlyX * root_1.root.game.timeDiff, root_1.root.game.cameraY += root_1.root.game.camFlyY * root_1.root.game.timeDiff
                    } else c.fillStyle = "black", c.fillRect(0, 0, window.innerWidth, window.innerHeight);
                    if ("none" !== document.getElementById("optionsWindow").style.display)
                        for (var i = 0; document.getElementById("hats_canvas_" + i); i++) refreshHatCanvasOld(document.getElementById("hats_canvas_" + i), Skins_1.hats[i]);
                    if (null !== root_1.root.game && root_1.root.game.map === map1_1.map1 && UI_1.UI.canvasChangeSkinsButton && refreshHatCanvas(UI_1.UI.canvasChangeSkinsButton, config_1.playerData.skin), null !== root_1.root.game && (_lastGame !== root_1.root.game && Data_1.CONST.ENABLE_LIGHTMAP && (_lastGame = root_1.root.game, (0, lightMapController_1.sendInitGrid)(root_1.root.game)), root_1.root.game.draw(), Data_1.CONST.ENABLE_LIGHTMAP && (0, lightMapController_1.sendVisionRequest)(root_1.root.game)), root_1.root.searchingLadder && null !== root_1.root.game) {
                        var div = document.getElementById("ladderDivInner2"),
                            countDots = root_1.root.game.timestamp % 1e3 / 251,
                            dotsStr = "";
                        for (i = 0; i < countDots; i++) dotsStr += ".";
                        div.innerHTML = dotsStr + " searching " + dotsStr
                    }
                }
                exports.refreshHatCanvas = refreshHatCanvas, exports.refreshHatCanvasOld = refreshHatCanvasOld, exports.mainLoop = mainLoop;
                var _ressourcesToLoad = 1;

                function loadImage(imgFile) {
                    _ressourcesToLoad++;
                    var img = new Image;
                    return img.onload = function() {
                        ressourceLoaded(img)
                    }, img.crossOrigin = "Anonymous", img.src = imgFile, img.srcCpy = imgFile, img
                }

                function ressourceLoaded(img) {
                    if (img && (!img.complete || !(img.width > 0))) return img.src = "", void(img.src = img.srcCpy);
                    0 === --_ressourcesToLoad && (console.log("all imgs loaded"), lang_1.lang.initialize((function() {
                        console.log("lang loaded"), root_1.root.langAndImgsLoaded = !0, lang_1.lang.applyLocale(), initGame()
                    })))
                }

                function initGame() {
                    !root_1.root.gameHasBeenInited && root_1.root.langAndImgsLoaded && (root_1.root.gameHasBeenInited = !0, imageTransforms(), UI_1.UI.renderMainMenu_(), UI_1.UI.refreshMenuButtons(), homeScreen_1.homeScreen.render(), root_1.root.game = new Game_1.Game(map1_1.map1), (0, functions_1.resize)(), rAF(mainLoop), (0, Network_1.networkInit)())
                }

                function imageTransforms() {
                    var canv = document.createElement("canvas");
                    canv.height = exports.imgs.miscSheet.height, canv.width = exports.imgs.miscSheet.width;
                    var ctx = canv.getContext("2d");
                    ctx.drawImage(exports.imgs.miscSheet, 0, 0);
                    for (var imgData = ctx.getImageData(0, 0, canv.width, canv.height), i_1 = 0; i_1 < imgData.data.length; i_1 += 4) {
                        var newValue = (imgData.data[i_1] + imgData.data[i_1 + 1] + imgData.data[i_1 + 2]) / 3;
                        imgData.data[i_1] = newValue, imgData.data[i_1 + 1] = newValue, imgData.data[i_1 + 2] = newValue
                    }
                    ctx.putImageData(imgData, 0, 0), exports.imgs.miscSheetGrey = canv, (canv = document.createElement("canvas")).height = exports.imgs.miscSheet.height, canv.width = exports.imgs.miscSheet.width, (ctx = canv.getContext("2d")).drawImage(exports.imgs.miscSheet, 0, 0), imgData = ctx.getImageData(0, 0, canv.width, canv.height);
                    for (var i_2 = 0; i_2 < imgData.data.length; i_2 += 4) imgData.data[i_2] = 255, imgData.data[i_2 + 1] = 255, imgData.data[i_2 + 2] = 255;
                    ctx.putImageData(imgData, 0, 0), exports.imgs.miscSheetWhite = canv;
                    for (var imgs_ = ["heads", "hands", "legs", "zombieDeath", "tileSheet", "rangedZombie", "crawler"], k = 0; k < imgs_.length; k++) {
                        var img = exports.imgs[imgs_[k]];
                        ctx = (canv = document.createElement("canvas")).getContext("2d"), canv.height = img.height, canv.width = img.width, ctx.drawImage(img, 0, 0), imgData = ctx.getImageData(0, 0, canv.width, canv.height);
                        for (var i_3 = 0; i_3 < imgData.data.length; i_3 += 4) imgData.data[i_3 + 3] > 0 && (imgData.data[i_3] = 0, imgData.data[i_3 + 1] = 0, imgData.data[i_3 + 2] = 0);
                        ctx.putImageData(imgData, 0, 0), exports.imgs[imgs_[k] + "Black"] = canv, ctx = (canv = document.createElement("canvas")).getContext("2d"), canv.height = img.height, canv.width = img.width;
                        for (var i = 0; i < imgData.data.length; i += 4) imgData.data[i + 3] > 0 && (imgData.data[i] = 255, imgData.data[i + 1] = 255, imgData.data[i + 2] = 255);
                        ctx.putImageData(imgData, 0, 0), exports.imgs[imgs_[k] + "White"] = canv
                    }
                    for (var _i = 0, tileTypes_1 = TileTypes_1.tileTypes; _i < tileTypes_1.length; _i++) {
                        var type = tileTypes_1[_i];
                        if (!type.hideOnMinimap) {
                            var img_1 = type.img;
                            ctx = (canv = document.createElement("canvas")).getContext("2d"), canv.width = img_1.w, canv.height = img_1.h, ctx.drawImage(exports.imgs.tileSheet, img_1.x, img_1.y, img_1.w, img_1.h, 0, 0, img_1.w, img_1.h), imgData = ctx.getImageData(0, 0, canv.width, canv.height);
                            for (var r_ = 0, g_ = 0, b_ = 0, counter_ = 0, k_1 = 0; k_1 < imgData.data.length; k_1 += 8) imgData.data[k_1 + 3] > 0 && (r_ += imgData.data[k_1], g_ += imgData.data[k_1 + 1], b_ += imgData.data[k_1 + 2], counter_++);
                            counter_ > 0 && (type.avgColor = "rgb(" + Math.floor(r_ / counter_) + ", " + Math.floor(g_ / counter_) + ", " + Math.floor(b_ / counter_) + ")")
                        }
                    }
                }
                exports.initGame = initGame, exports.imgs = {
                    legs: loadImage("imgs/legs.png"),
                    heads: loadImage("imgs/heads.png"),
                    hands: loadImage("imgs/hands.png"),
                    throwHands: loadImage("imgs/throw_hands.png"),
                    shadow: loadImage("imgs/shadow.png"),
                    miscSheet: loadImage("imgs/miscSheet.png"),
                    tileSheet: loadImage("imgs/tileSheet.png"),
                    weaponsPlus: loadImage("imgs/weaponsPlus.png"),
                    weaponsMinus: loadImage("imgs/weaponsMinus.png"),
                    weaponsBodyPlus: loadImage("imgs/weaponsBodyPlus.png"),
                    weaponsBodyMinus: loadImage("imgs/weaponsBodyMinus.png"),
                    zombieDeath: loadImage("imgs/zombie-death.png"),
                    turnZombie: loadImage("imgs/turn-zombie.png"),
                    rangedZombie: loadImage("imgs/rangedZombie.png"),
                    crawler: loadImage("imgs/spider.png"),
                    humanBoss: loadImage("imgs/human_boss.png"),
                    zombieBoss: loadImage("imgs/zombie_boss.png")
                }, ressourceLoaded(), exports.imageTransforms = imageTransforms
            },
            6582: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.sendInitGrid = exports.sendVisionRequest = void 0;
                var lightMap_1 = __webpack_require__(1196),
                    Data_1 = __webpack_require__(6313),
                    root_1 = __webpack_require__(17),
                    _visionPathIdCounter = 1,
                    _visionResults = {
                        paths: [],
                        countWorkersSubmitted: 0,
                        id: -1
                    },
                    _visionWorkers = [];
                if (Data_1.CONST.ENABLE_LIGHTMAP)
                    for (var i = 0; i < 2; i++) {
                        var visionWorker = new Worker("dist/worker-bundle.js");
                        _visionWorkers.push(visionWorker), visionWorker.addEventListener("message", (function(e) {
                            var _a, msg = e.data;
                            msg.id >= _visionResults.id && (msg.id > _visionResults.id && (_visionResults.paths.length = 0, _visionResults.countWorkersSubmitted = 0, _visionResults.id = msg.id), (_a = _visionResults.paths).push.apply(_a, msg.paths), _visionResults.countWorkersSubmitted++, _visionResults.countWorkersSubmitted >= 2 && null !== root_1.root.game && root_1.root.game.updateVisionCanvas(_visionResults.paths))
                        }), !1)
                    }
                exports.sendVisionRequest = function(game) {
                    for (var units = [], i_1 = 0; i_1 < 2; i_1++) units.push([]);
                    for (var gameUnits = game.getLightEmittingObjects(), i = 0; gameUnits.length > 0;) {
                        var rndIndex = Math.floor(Math.random() * gameUnits.length),
                            u = gameUnits.splice(rndIndex, 1)[0];
                        units[i].push(u), i = (i + 1) % 2
                    }
                    _visionPathIdCounter++;
                    for (var i_2 = 0; i_2 < 2; i_2++) {
                        var msg = {
                            w: lightMap_1.VisionWorkerRequestType.Run,
                            units: units[i_2],
                            id: _visionPathIdCounter
                        };
                        _visionWorkers[i_2].postMessage(msg)
                    }
                };
                exports.sendInitGrid = function(game) {
                    for (var msg = {
                            w: lightMap_1.VisionWorkerRequestType.GridUpdate,
                            grid: game.pathingArray
                        }, _i = 0, _visionWorkers_1 = _visionWorkers; _i < _visionWorkers_1.length; _i++) {
                        _visionWorkers_1[_i].postMessage(msg)
                    }
                }
            },
            9620: (__unused_webpack_module, exports) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.map1 = void 0, exports.map1 = {
                    name: "",
                    x: 64,
                    y: 64,
                    defaultTiles: 0,
                    tiles: [{
                        x: 12,
                        y: 0,
                        id: 11
                    }, {
                        x: 12,
                        y: 1,
                        id: 12
                    }, {
                        x: 12,
                        y: 2,
                        id: 24
                    }, {
                        x: 13,
                        y: 2,
                        id: 4
                    }, {
                        x: 14,
                        y: 2,
                        id: 4
                    }, {
                        x: 17,
                        y: 2,
                        id: 4
                    }, {
                        x: 15,
                        y: 2,
                        id: 2
                    }, {
                        x: 16,
                        y: 2,
                        id: 3
                    }, {
                        x: 18,
                        y: 2,
                        id: 23
                    }, {
                        x: 18,
                        y: 0,
                        id: 9
                    }, {
                        x: 18,
                        y: 1,
                        id: 9
                    }, {
                        x: 2,
                        y: 2,
                        id: 1
                    }, {
                        x: 3,
                        y: 2,
                        id: 1
                    }, {
                        x: 7,
                        y: 5,
                        id: 1
                    }, {
                        x: 8,
                        y: 4,
                        id: 1
                    }, {
                        x: 9,
                        y: 3,
                        id: 1
                    }, {
                        x: 0,
                        y: 9,
                        id: 51
                    }, {
                        x: 3,
                        y: 9,
                        id: 51
                    }, {
                        x: 6,
                        y: 9,
                        id: 51
                    }, {
                        x: 9,
                        y: 9,
                        id: 51
                    }, {
                        x: 1,
                        y: 9,
                        id: 50
                    }, {
                        x: 7,
                        y: 9,
                        id: 50
                    }, {
                        x: 2,
                        y: 9,
                        id: 49
                    }, {
                        x: 5,
                        y: 9,
                        id: 49
                    }, {
                        x: 8,
                        y: 9,
                        id: 49
                    }, {
                        x: 4,
                        y: 9,
                        id: 52
                    }, {
                        x: 10,
                        y: 9,
                        id: 52
                    }, {
                        x: 0,
                        y: 11,
                        id: 45
                    }, {
                        x: 3,
                        y: 11,
                        id: 45
                    }, {
                        x: 5,
                        y: 11,
                        id: 45
                    }, {
                        x: 6,
                        y: 11,
                        id: 45
                    }, {
                        x: 9,
                        y: 11,
                        id: 45
                    }, {
                        x: 2,
                        y: 11,
                        id: 43
                    }, {
                        x: 4,
                        y: 11,
                        id: 43
                    }, {
                        x: 8,
                        y: 11,
                        id: 43
                    }, {
                        x: 1,
                        y: 11,
                        id: 44
                    }, {
                        x: 7,
                        y: 11,
                        id: 44
                    }, {
                        x: 10,
                        y: 11,
                        id: 44
                    }, {
                        x: 15,
                        y: 11,
                        id: 47
                    }, {
                        x: 11,
                        y: 11,
                        id: 45
                    }, {
                        x: 13,
                        y: 11,
                        id: 45
                    }, {
                        x: 12,
                        y: 11,
                        id: 43
                    }, {
                        x: 14,
                        y: 11,
                        id: 43
                    }, {
                        x: 15,
                        y: 10,
                        id: 56
                    }, {
                        x: 15,
                        y: 9,
                        id: 57
                    }, {
                        x: 11,
                        y: 9,
                        id: 52
                    }, {
                        x: 12,
                        y: 8,
                        id: 61
                    }, {
                        x: 12,
                        y: 7,
                        id: 63
                    }, {
                        x: 12,
                        y: 5,
                        id: 53
                    }, {
                        x: 15,
                        y: 5,
                        id: 54
                    }, {
                        x: 12,
                        y: 6,
                        id: 63
                    }, {
                        x: 12,
                        y: 9,
                        id: 50
                    }, {
                        x: 13,
                        y: 5,
                        id: 50
                    }, {
                        x: 14,
                        y: 5,
                        id: 49
                    }, {
                        x: 15,
                        y: 8,
                        id: 56
                    }, {
                        x: 15,
                        y: 6,
                        id: 56
                    }, {
                        x: 15,
                        y: 7,
                        id: 56
                    }, {
                        x: 13,
                        y: 9,
                        id: 55
                    }, {
                        x: 14,
                        y: 9,
                        id: 55
                    }, {
                        x: 13,
                        y: 7,
                        id: 55
                    }, {
                        x: 14,
                        y: 7,
                        id: 55
                    }, {
                        x: 2,
                        y: 5,
                        id: 31
                    }, {
                        x: 2,
                        y: 6,
                        id: 31
                    }, {
                        x: 3,
                        y: 6,
                        id: 31
                    }, {
                        x: 3,
                        y: 5,
                        id: 31
                    }, {
                        x: 22,
                        y: 5,
                        id: 45
                    }, {
                        x: 24,
                        y: 5,
                        id: 45
                    }, {
                        x: 26,
                        y: 5,
                        id: 45
                    }, {
                        x: 23,
                        y: 5,
                        id: 46
                    }, {
                        x: 25,
                        y: 5,
                        id: 46
                    }, {
                        x: 26,
                        y: 6,
                        id: 62
                    }, {
                        x: 26,
                        y: 9,
                        id: 62
                    }, {
                        x: 26,
                        y: 12,
                        id: 62
                    }, {
                        x: 26,
                        y: 7,
                        id: 63
                    }, {
                        x: 26,
                        y: 10,
                        id: 63
                    }, {
                        x: 26,
                        y: 13,
                        id: 63
                    }, {
                        x: 26,
                        y: 11,
                        id: 62
                    }, {
                        x: 26,
                        y: 8,
                        id: 62
                    }, {
                        x: 21,
                        y: 5,
                        id: 48
                    }, {
                        x: 21,
                        y: 4,
                        id: 62
                    }, {
                        x: 21,
                        y: 3,
                        id: 53
                    }, {
                        x: 22,
                        y: 3,
                        id: 52
                    }, {
                        x: 25,
                        y: 3,
                        id: 52
                    }, {
                        x: 23,
                        y: 3,
                        id: 51
                    }, {
                        x: 26,
                        y: 3,
                        id: 51
                    }, {
                        x: 24,
                        y: 3,
                        id: 50
                    }, {
                        x: 27,
                        y: 3,
                        id: 50
                    }, {
                        x: 28,
                        y: 3,
                        id: 54
                    }, {
                        x: 28,
                        y: 4,
                        id: 56
                    }, {
                        x: 28,
                        y: 7,
                        id: 56
                    }, {
                        x: 28,
                        y: 9,
                        id: 56
                    }, {
                        x: 28,
                        y: 13,
                        id: 56
                    }, {
                        x: 28,
                        y: 5,
                        id: 57
                    }, {
                        x: 28,
                        y: 8,
                        id: 57
                    }, {
                        x: 28,
                        y: 11,
                        id: 57
                    }, {
                        x: 28,
                        y: 6,
                        id: 58
                    }, {
                        x: 28,
                        y: 10,
                        id: 58
                    }, {
                        x: 28,
                        y: 12,
                        id: 58
                    }, {
                        x: 28,
                        y: 16,
                        id: 58
                    }, {
                        x: 28,
                        y: 17,
                        id: 47
                    }, {
                        x: 26,
                        y: 17,
                        id: 48
                    }, {
                        x: 28,
                        y: 15,
                        id: 56
                    }, {
                        x: 28,
                        y: 14,
                        id: 59
                    }, {
                        x: 27,
                        y: 17,
                        id: 46
                    }, {
                        x: 26,
                        y: 15,
                        id: 62
                    }, {
                        x: 26,
                        y: 16,
                        id: 63
                    }, {
                        x: 26,
                        y: 14,
                        id: 63
                    }, {
                        x: 27,
                        y: 15,
                        id: 55
                    }, {
                        x: 27,
                        y: 13,
                        id: 55
                    }, {
                        x: 27,
                        y: 11,
                        id: 55
                    }, {
                        x: 27,
                        y: 9,
                        id: 55
                    }, {
                        x: 27,
                        y: 7,
                        id: 55
                    }, {
                        x: 27,
                        y: 5,
                        id: 55
                    }, {
                        x: 26,
                        y: 20,
                        id: 53
                    }, {
                        x: 28,
                        y: 20,
                        id: 54
                    }, {
                        x: 27,
                        y: 20,
                        id: 51
                    }, {
                        x: 28,
                        y: 21,
                        id: 56
                    }, {
                        x: 28,
                        y: 24,
                        id: 56
                    }, {
                        x: 28,
                        y: 27,
                        id: 56
                    }, {
                        x: 28,
                        y: 28,
                        id: 56
                    }, {
                        x: 28,
                        y: 29,
                        id: 47
                    }, {
                        x: 27,
                        y: 29,
                        id: 43
                    }, {
                        x: 24,
                        y: 29,
                        id: 43
                    }, {
                        x: 21,
                        y: 29,
                        id: 43
                    }, {
                        x: 17,
                        y: 29,
                        id: 43
                    }, {
                        x: 28,
                        y: 23,
                        id: 57
                    }, {
                        x: 28,
                        y: 25,
                        id: 57
                    }, {
                        x: 28,
                        y: 26,
                        id: 59
                    }, {
                        x: 28,
                        y: 22,
                        id: 59
                    }, {
                        x: 26,
                        y: 21,
                        id: 63
                    }, {
                        x: 26,
                        y: 24,
                        id: 63
                    }, {
                        x: 26,
                        y: 26,
                        id: 63
                    }, {
                        x: 26,
                        y: 27,
                        id: 51
                    }, {
                        x: 22,
                        y: 27,
                        id: 51
                    }, {
                        x: 19,
                        y: 27,
                        id: 51
                    }, {
                        x: 17,
                        y: 27,
                        id: 51
                    }, {
                        x: 18,
                        y: 27,
                        id: 49
                    }, {
                        x: 21,
                        y: 27,
                        id: 49
                    }, {
                        x: 24,
                        y: 27,
                        id: 49
                    }, {
                        x: 20,
                        y: 27,
                        id: 49
                    }, {
                        x: 23,
                        y: 27,
                        id: 49
                    }, {
                        x: 25,
                        y: 27,
                        id: 49
                    }, {
                        x: 26,
                        y: 25,
                        id: 62
                    }, {
                        x: 26,
                        y: 22,
                        id: 62
                    }, {
                        x: 26,
                        y: 23,
                        id: 62
                    }, {
                        x: 18,
                        y: 29,
                        id: 44
                    }, {
                        x: 22,
                        y: 29,
                        id: 44
                    }, {
                        x: 25,
                        y: 29,
                        id: 44
                    }, {
                        x: 19,
                        y: 29,
                        id: 45
                    }, {
                        x: 23,
                        y: 29,
                        id: 45
                    }, {
                        x: 26,
                        y: 29,
                        id: 45
                    }, {
                        x: 20,
                        y: 29,
                        id: 45
                    }, {
                        x: 16,
                        y: 29,
                        id: 48
                    }, {
                        x: 16,
                        y: 27,
                        id: 53
                    }, {
                        x: 16,
                        y: 28,
                        id: 63
                    }, {
                        x: 27,
                        y: 27,
                        id: 55
                    }, {
                        x: 27,
                        y: 25,
                        id: 55
                    }, {
                        x: 27,
                        y: 23,
                        id: 55
                    }, {
                        x: 27,
                        y: 22,
                        id: 55
                    }, {
                        x: 10,
                        y: 14,
                        id: 52
                    }, {
                        x: 7,
                        y: 14,
                        id: 52
                    }, {
                        x: 5,
                        y: 14,
                        id: 52
                    }, {
                        x: 3,
                        y: 14,
                        id: 52
                    }, {
                        x: 9,
                        y: 14,
                        id: 50
                    }, {
                        x: 6,
                        y: 14,
                        id: 50
                    }, {
                        x: 4,
                        y: 14,
                        id: 50
                    }, {
                        x: 11,
                        y: 14,
                        id: 50
                    }, {
                        x: 8,
                        y: 14,
                        id: 50
                    }, {
                        x: 12,
                        y: 14,
                        id: 49
                    }, {
                        x: 2,
                        y: 14,
                        id: 53
                    }, {
                        x: 2,
                        y: 15,
                        id: 63
                    }, {
                        x: 13,
                        y: 14,
                        id: 54
                    }, {
                        x: 13,
                        y: 15,
                        id: 56
                    }, {
                        x: 13,
                        y: 20,
                        id: 56
                    }, {
                        x: 13,
                        y: 23,
                        id: 56
                    }, {
                        x: 13,
                        y: 17,
                        id: 57
                    }, {
                        x: 13,
                        y: 19,
                        id: 57
                    }, {
                        x: 13,
                        y: 24,
                        id: 57
                    }, {
                        x: 13,
                        y: 25,
                        id: 59
                    }, {
                        x: 13,
                        y: 22,
                        id: 59
                    }, {
                        x: 13,
                        y: 18,
                        id: 59
                    }, {
                        x: 13,
                        y: 16,
                        id: 59
                    }, {
                        x: 13,
                        y: 21,
                        id: 59
                    }, {
                        x: 13,
                        y: 26,
                        id: 58
                    }, {
                        x: 13,
                        y: 28,
                        id: 58
                    }, {
                        x: 13,
                        y: 27,
                        id: 59
                    }, {
                        x: 13,
                        y: 29,
                        id: 47
                    }, {
                        x: 11,
                        y: 29,
                        id: 48
                    }, {
                        x: 12,
                        y: 29,
                        id: 45
                    }, {
                        x: 11,
                        y: 27,
                        id: 63
                    }, {
                        x: 11,
                        y: 23,
                        id: 63
                    }, {
                        x: 11,
                        y: 19,
                        id: 63
                    }, {
                        x: 11,
                        y: 25,
                        id: 62
                    }, {
                        x: 11,
                        y: 21,
                        id: 62
                    }, {
                        x: 11,
                        y: 18,
                        id: 62
                    }, {
                        x: 11,
                        y: 26,
                        id: 61
                    }, {
                        x: 11,
                        y: 22,
                        id: 61
                    }, {
                        x: 11,
                        y: 28,
                        id: 60
                    }, {
                        x: 11,
                        y: 24,
                        id: 60
                    }, {
                        x: 11,
                        y: 20,
                        id: 60
                    }, {
                        x: 11,
                        y: 17,
                        id: 60
                    }, {
                        x: 11,
                        y: 16,
                        id: 45
                    }, {
                        x: 8,
                        y: 16,
                        id: 45
                    }, {
                        x: 4,
                        y: 16,
                        id: 45
                    }, {
                        x: 9,
                        y: 16,
                        id: 46
                    }, {
                        x: 6,
                        y: 16,
                        id: 46
                    }, {
                        x: 3,
                        y: 16,
                        id: 46
                    }, {
                        x: 10,
                        y: 16,
                        id: 43
                    }, {
                        x: 7,
                        y: 16,
                        id: 43
                    }, {
                        x: 5,
                        y: 16,
                        id: 43
                    }, {
                        x: 2,
                        y: 16,
                        id: 48
                    }, {
                        x: 12,
                        y: 16,
                        id: 55
                    }, {
                        x: 12,
                        y: 18,
                        id: 55
                    }, {
                        x: 12,
                        y: 20,
                        id: 55
                    }, {
                        x: 12,
                        y: 22,
                        id: 55
                    }, {
                        x: 12,
                        y: 24,
                        id: 55
                    }, {
                        x: 12,
                        y: 26,
                        id: 55
                    }, {
                        x: 12,
                        y: 27,
                        id: 55
                    }, {
                        x: 22,
                        y: 6,
                        id: 1
                    }, {
                        x: 22,
                        y: 10,
                        id: 1
                    }, {
                        x: 22,
                        y: 9,
                        id: 1
                    }, {
                        x: 22,
                        y: 8,
                        id: 1
                    }, {
                        x: 22,
                        y: 7,
                        id: 1
                    }, {
                        x: 23,
                        y: 10,
                        id: 1
                    }, {
                        x: 16,
                        y: 21,
                        id: 1
                    }, {
                        x: 17,
                        y: 21,
                        id: 1
                    }, {
                        x: 22,
                        y: 15,
                        id: 1
                    }, {
                        x: 23,
                        y: 15,
                        id: 1
                    }, {
                        x: 17,
                        y: 15,
                        id: 1
                    }, {
                        x: 22,
                        y: 21,
                        id: 1
                    }, {
                        x: 23,
                        y: 21,
                        id: 1
                    }, {
                        x: 29,
                        y: 22,
                        id: 1
                    }, {
                        x: 31,
                        y: 28,
                        id: 1
                    }, {
                        x: 20,
                        y: 24,
                        id: 31
                    }, {
                        x: 13,
                        y: 0,
                        id: 42
                    }, {
                        x: 14,
                        y: 0,
                        id: 42
                    }, {
                        x: 15,
                        y: 0,
                        id: 42
                    }, {
                        x: 16,
                        y: 0,
                        id: 42
                    }, {
                        x: 17,
                        y: 0,
                        id: 42
                    }, {
                        x: 5,
                        y: 24,
                        id: 43
                    }, {
                        x: 4,
                        y: 23,
                        id: 62
                    }, {
                        x: 6,
                        y: 23,
                        id: 59
                    }, {
                        x: 6,
                        y: 22,
                        id: 54
                    }, {
                        x: 4,
                        y: 22,
                        id: 53
                    }, {
                        x: 5,
                        y: 22,
                        id: 52
                    }, {
                        x: 6,
                        y: 24,
                        id: 47
                    }, {
                        x: 4,
                        y: 24,
                        id: 48
                    }, {
                        x: 0,
                        y: 10,
                        id: 55
                    }, {
                        x: 1,
                        y: 10,
                        id: 55
                    }, {
                        x: 13,
                        y: 6,
                        id: 55
                    }, {
                        x: 14,
                        y: 6,
                        id: 55
                    }, {
                        x: 13,
                        y: 8,
                        id: 55
                    }, {
                        x: 14,
                        y: 8,
                        id: 55
                    }, {
                        x: 13,
                        y: 1,
                        id: 42
                    }, {
                        x: 14,
                        y: 1,
                        id: 42
                    }, {
                        x: 15,
                        y: 1,
                        id: 42
                    }, {
                        x: 16,
                        y: 1,
                        id: 42
                    }, {
                        x: 17,
                        y: 1,
                        id: 42
                    }, {
                        x: 17,
                        y: 0,
                        id: 42
                    }, {
                        x: 16,
                        y: 0,
                        id: 42
                    }, {
                        x: 15,
                        y: 0,
                        id: 42
                    }, {
                        x: 14,
                        y: 0,
                        id: 42
                    }, {
                        x: 13,
                        y: 0,
                        id: 42
                    }, {
                        x: 2,
                        y: 10,
                        id: 55
                    }, {
                        x: 3,
                        y: 10,
                        id: 55
                    }, {
                        x: 4,
                        y: 10,
                        id: 55
                    }, {
                        x: 5,
                        y: 10,
                        id: 55
                    }, {
                        x: 6,
                        y: 10,
                        id: 55
                    }, {
                        x: 7,
                        y: 10,
                        id: 55
                    }, {
                        x: 8,
                        y: 10,
                        id: 55
                    }, {
                        x: 9,
                        y: 10,
                        id: 55
                    }, {
                        x: 10,
                        y: 10,
                        id: 55
                    }, {
                        x: 11,
                        y: 10,
                        id: 55
                    }, {
                        x: 12,
                        y: 10,
                        id: 55
                    }, {
                        x: 13,
                        y: 10,
                        id: 55
                    }, {
                        x: 14,
                        y: 10,
                        id: 55
                    }, {
                        x: 22,
                        y: 4,
                        id: 55
                    }, {
                        x: 23,
                        y: 4,
                        id: 55
                    }, {
                        x: 24,
                        y: 4,
                        id: 55
                    }, {
                        x: 25,
                        y: 4,
                        id: 55
                    }, {
                        x: 26,
                        y: 4,
                        id: 55
                    }, {
                        x: 27,
                        y: 4,
                        id: 55
                    }, {
                        x: 27,
                        y: 6,
                        id: 55
                    }, {
                        x: 27,
                        y: 8,
                        id: 55
                    }, {
                        x: 27,
                        y: 10,
                        id: 55
                    }, {
                        x: 27,
                        y: 12,
                        id: 55
                    }, {
                        x: 27,
                        y: 14,
                        id: 55
                    }, {
                        x: 27,
                        y: 16,
                        id: 55
                    }, {
                        x: 27,
                        y: 21,
                        id: 55
                    }, {
                        x: 27,
                        y: 24,
                        id: 55
                    }, {
                        x: 27,
                        y: 26,
                        id: 55
                    }, {
                        x: 17,
                        y: 28,
                        id: 55
                    }, {
                        x: 18,
                        y: 28,
                        id: 55
                    }, {
                        x: 19,
                        y: 28,
                        id: 55
                    }, {
                        x: 20,
                        y: 28,
                        id: 55
                    }, {
                        x: 21,
                        y: 28,
                        id: 55
                    }, {
                        x: 22,
                        y: 28,
                        id: 55
                    }, {
                        x: 23,
                        y: 28,
                        id: 55
                    }, {
                        x: 24,
                        y: 28,
                        id: 55
                    }, {
                        x: 25,
                        y: 28,
                        id: 55
                    }, {
                        x: 26,
                        y: 28,
                        id: 55
                    }, {
                        x: 27,
                        y: 28,
                        id: 55
                    }, {
                        x: 12,
                        y: 28,
                        id: 55
                    }, {
                        x: 12,
                        y: 25,
                        id: 55
                    }, {
                        x: 12,
                        y: 23,
                        id: 55
                    }, {
                        x: 12,
                        y: 21,
                        id: 55
                    }, {
                        x: 12,
                        y: 19,
                        id: 55
                    }, {
                        x: 12,
                        y: 17,
                        id: 55
                    }, {
                        x: 12,
                        y: 15,
                        id: 55
                    }, {
                        x: 11,
                        y: 15,
                        id: 55
                    }, {
                        x: 10,
                        y: 15,
                        id: 55
                    }, {
                        x: 9,
                        y: 15,
                        id: 55
                    }, {
                        x: 8,
                        y: 15,
                        id: 55
                    }, {
                        x: 7,
                        y: 15,
                        id: 55
                    }, {
                        x: 6,
                        y: 15,
                        id: 55
                    }, {
                        x: 5,
                        y: 15,
                        id: 55
                    }, {
                        x: 4,
                        y: 15,
                        id: 55
                    }, {
                        x: 3,
                        y: 15,
                        id: 55
                    }, {
                        x: 5,
                        y: 23,
                        id: 55
                    }, {
                        x: 32,
                        y: 21,
                        id: 63
                    }, {
                        x: 32,
                        y: 25,
                        id: 63
                    }, {
                        x: 32,
                        y: 29,
                        id: 63
                    }, {
                        x: 32,
                        y: 20,
                        id: 53
                    }, {
                        x: 33,
                        y: 20,
                        id: 52
                    }, {
                        x: 36,
                        y: 20,
                        id: 52
                    }, {
                        x: 39,
                        y: 20,
                        id: 52
                    }, {
                        x: 34,
                        y: 20,
                        id: 50
                    }, {
                        x: 38,
                        y: 20,
                        id: 50
                    }, {
                        x: 41,
                        y: 20,
                        id: 50
                    }, {
                        x: 43,
                        y: 20,
                        id: 50
                    }, {
                        x: 44,
                        y: 20,
                        id: 54
                    }, {
                        x: 44,
                        y: 21,
                        id: 56
                    }, {
                        x: 44,
                        y: 22,
                        id: 47
                    }, {
                        x: 43,
                        y: 22,
                        id: 43
                    }, {
                        x: 40,
                        y: 22,
                        id: 43
                    }, {
                        x: 37,
                        y: 22,
                        id: 43
                    }, {
                        x: 35,
                        y: 22,
                        id: 43
                    }, {
                        x: 34,
                        y: 23,
                        id: 56
                    }, {
                        x: 34,
                        y: 26,
                        id: 56
                    }, {
                        x: 34,
                        y: 30,
                        id: 56
                    }, {
                        x: 34,
                        y: 22,
                        id: 59
                    }, {
                        x: 34,
                        y: 28,
                        id: 59
                    }, {
                        x: 34,
                        y: 24,
                        id: 59
                    }, {
                        x: 34,
                        y: 29,
                        id: 58
                    }, {
                        x: 34,
                        y: 27,
                        id: 58
                    }, {
                        x: 34,
                        y: 25,
                        id: 58
                    }, {
                        x: 38,
                        y: 22,
                        id: 46
                    }, {
                        x: 42,
                        y: 22,
                        id: 46
                    }, {
                        x: 36,
                        y: 22,
                        id: 44
                    }, {
                        x: 39,
                        y: 22,
                        id: 44
                    }, {
                        x: 41,
                        y: 22,
                        id: 44
                    }, {
                        x: 37,
                        y: 20,
                        id: 51
                    }, {
                        x: 40,
                        y: 20,
                        id: 51
                    }, {
                        x: 35,
                        y: 20,
                        id: 49
                    }, {
                        x: 42,
                        y: 20,
                        id: 49
                    }, {
                        x: 32,
                        y: 23,
                        id: 62
                    }, {
                        x: 32,
                        y: 27,
                        id: 62
                    }, {
                        x: 32,
                        y: 30,
                        id: 62
                    }, {
                        x: 32,
                        y: 32,
                        id: 62
                    }, {
                        x: 32,
                        y: 22,
                        id: 60
                    }, {
                        x: 32,
                        y: 24,
                        id: 60
                    }, {
                        x: 32,
                        y: 26,
                        id: 60
                    }, {
                        x: 32,
                        y: 28,
                        id: 60
                    }, {
                        x: 32,
                        y: 31,
                        id: 60
                    }, {
                        x: 32,
                        y: 16,
                        id: 60
                    }, {
                        x: 32,
                        y: 13,
                        id: 60
                    }, {
                        x: 32,
                        y: 8,
                        id: 60
                    }, {
                        x: 32,
                        y: 5,
                        id: 53
                    }, {
                        x: 32,
                        y: 6,
                        id: 62
                    }, {
                        x: 32,
                        y: 10,
                        id: 62
                    }, {
                        x: 32,
                        y: 15,
                        id: 62
                    }, {
                        x: 32,
                        y: 12,
                        id: 62
                    }, {
                        x: 32,
                        y: 17,
                        id: 48
                    }, {
                        x: 34,
                        y: 17,
                        id: 47
                    }, {
                        x: 33,
                        y: 17,
                        id: 44
                    }, {
                        x: 34,
                        y: 16,
                        id: 56
                    }, {
                        x: 34,
                        y: 13,
                        id: 56
                    }, {
                        x: 34,
                        y: 9,
                        id: 56
                    }, {
                        x: 33,
                        y: 5,
                        id: 50
                    }, {
                        x: 36,
                        y: 5,
                        id: 50
                    }, {
                        x: 40,
                        y: 5,
                        id: 50
                    }, {
                        x: 43,
                        y: 5,
                        id: 50
                    }, {
                        x: 48,
                        y: 5,
                        id: 50
                    }, {
                        x: 51,
                        y: 5,
                        id: 50
                    }, {
                        x: 35,
                        y: 5,
                        id: 52
                    }, {
                        x: 38,
                        y: 5,
                        id: 52
                    }, {
                        x: 41,
                        y: 5,
                        id: 52
                    }, {
                        x: 50,
                        y: 5,
                        id: 52
                    }, {
                        x: 53,
                        y: 5,
                        id: 52
                    }, {
                        x: 47,
                        y: 5,
                        id: 53
                    }, {
                        x: 44,
                        y: 5,
                        id: 54
                    }, {
                        x: 44,
                        y: 6,
                        id: 56
                    }, {
                        x: 47,
                        y: 6,
                        id: 62
                    }, {
                        x: 47,
                        y: 7,
                        id: 48
                    }, {
                        x: 44,
                        y: 7,
                        id: 47
                    }, {
                        x: 42,
                        y: 7,
                        id: 46
                    }, {
                        x: 37,
                        y: 7,
                        id: 46
                    }, {
                        x: 39,
                        y: 7,
                        id: 46
                    }, {
                        x: 34,
                        y: 7,
                        id: 46
                    }, {
                        x: 35,
                        y: 7,
                        id: 45
                    }, {
                        x: 38,
                        y: 7,
                        id: 45
                    }, {
                        x: 41,
                        y: 7,
                        id: 45
                    }, {
                        x: 43,
                        y: 7,
                        id: 45
                    }, {
                        x: 36,
                        y: 7,
                        id: 45
                    }, {
                        x: 40,
                        y: 7,
                        id: 43
                    }, {
                        x: 34,
                        y: 11,
                        id: 57
                    }, {
                        x: 34,
                        y: 15,
                        id: 57
                    }, {
                        x: 34,
                        y: 8,
                        id: 58
                    }, {
                        x: 34,
                        y: 10,
                        id: 58
                    }, {
                        x: 34,
                        y: 12,
                        id: 58
                    }, {
                        x: 34,
                        y: 14,
                        id: 58
                    }, {
                        x: 32,
                        y: 14,
                        id: 61
                    }, {
                        x: 32,
                        y: 11,
                        id: 61
                    }, {
                        x: 32,
                        y: 9,
                        id: 61
                    }, {
                        x: 32,
                        y: 7,
                        id: 61
                    }, {
                        x: 34,
                        y: 5,
                        id: 51
                    }, {
                        x: 37,
                        y: 5,
                        id: 51
                    }, {
                        x: 39,
                        y: 5,
                        id: 52
                    }, {
                        x: 42,
                        y: 5,
                        id: 52
                    }, {
                        x: 49,
                        y: 5,
                        id: 52
                    }, {
                        x: 52,
                        y: 5,
                        id: 52
                    }, {
                        x: 54,
                        y: 5,
                        id: 54
                    }, {
                        x: 55,
                        y: 6,
                        id: 54
                    }, {
                        x: 56,
                        y: 7,
                        id: 54
                    }, {
                        x: 57,
                        y: 8,
                        id: 54
                    }, {
                        x: 58,
                        y: 9,
                        id: 54
                    }, {
                        x: 58,
                        y: 10,
                        id: 56
                    }, {
                        x: 58,
                        y: 14,
                        id: 56
                    }, {
                        x: 58,
                        y: 17,
                        id: 56
                    }, {
                        x: 58,
                        y: 19,
                        id: 56
                    }, {
                        x: 58,
                        y: 22,
                        id: 56
                    }, {
                        x: 58,
                        y: 12,
                        id: 57
                    }, {
                        x: 58,
                        y: 15,
                        id: 57
                    }, {
                        x: 58,
                        y: 18,
                        id: 57
                    }, {
                        x: 58,
                        y: 21,
                        id: 57
                    }, {
                        x: 58,
                        y: 11,
                        id: 59
                    }, {
                        x: 58,
                        y: 13,
                        id: 59
                    }, {
                        x: 58,
                        y: 16,
                        id: 59
                    }, {
                        x: 58,
                        y: 20,
                        id: 59
                    }, {
                        x: 48,
                        y: 7,
                        id: 46
                    }, {
                        x: 50,
                        y: 7,
                        id: 46
                    }, {
                        x: 52,
                        y: 7,
                        id: 46
                    }, {
                        x: 49,
                        y: 7,
                        id: 45
                    }, {
                        x: 51,
                        y: 7,
                        id: 45
                    }, {
                        x: 53,
                        y: 7,
                        id: 45
                    }, {
                        x: 56,
                        y: 10,
                        id: 63
                    }, {
                        x: 54,
                        y: 8,
                        id: 48
                    }, {
                        x: 55,
                        y: 9,
                        id: 48
                    }, {
                        x: 56,
                        y: 12,
                        id: 63
                    }, {
                        x: 56,
                        y: 16,
                        id: 63
                    }, {
                        x: 56,
                        y: 19,
                        id: 63
                    }, {
                        x: 56,
                        y: 22,
                        id: 63
                    }, {
                        x: 56,
                        y: 20,
                        id: 62
                    }, {
                        x: 56,
                        y: 18,
                        id: 62
                    }, {
                        x: 56,
                        y: 14,
                        id: 62
                    }, {
                        x: 56,
                        y: 11,
                        id: 62
                    }, {
                        x: 56,
                        y: 21,
                        id: 60
                    }, {
                        x: 56,
                        y: 17,
                        id: 60
                    }, {
                        x: 56,
                        y: 15,
                        id: 60
                    }, {
                        x: 56,
                        y: 13,
                        id: 60
                    }, {
                        x: 56,
                        y: 23,
                        id: 48
                    }, {
                        x: 58,
                        y: 23,
                        id: 47
                    }, {
                        x: 57,
                        y: 23,
                        id: 44
                    }, {
                        x: 57,
                        y: 22,
                        id: 55
                    }, {
                        x: 57,
                        y: 21,
                        id: 55
                    }, {
                        x: 57,
                        y: 20,
                        id: 55
                    }, {
                        x: 57,
                        y: 19,
                        id: 55
                    }, {
                        x: 57,
                        y: 18,
                        id: 55
                    }, {
                        x: 57,
                        y: 17,
                        id: 55
                    }, {
                        x: 57,
                        y: 16,
                        id: 55
                    }, {
                        x: 57,
                        y: 15,
                        id: 55
                    }, {
                        x: 57,
                        y: 14,
                        id: 55
                    }, {
                        x: 57,
                        y: 13,
                        id: 55
                    }, {
                        x: 57,
                        y: 12,
                        id: 55
                    }, {
                        x: 57,
                        y: 11,
                        id: 55
                    }, {
                        x: 57,
                        y: 10,
                        id: 55
                    }, {
                        x: 57,
                        y: 9,
                        id: 55
                    }, {
                        x: 56,
                        y: 8,
                        id: 55
                    }, {
                        x: 55,
                        y: 7,
                        id: 55
                    }, {
                        x: 54,
                        y: 6,
                        id: 55
                    }, {
                        x: 33,
                        y: 16,
                        id: 55
                    }, {
                        x: 33,
                        y: 15,
                        id: 55
                    }, {
                        x: 33,
                        y: 14,
                        id: 55
                    }, {
                        x: 33,
                        y: 13,
                        id: 55
                    }, {
                        x: 33,
                        y: 12,
                        id: 55
                    }, {
                        x: 33,
                        y: 11,
                        id: 55
                    }, {
                        x: 33,
                        y: 10,
                        id: 55
                    }, {
                        x: 33,
                        y: 9,
                        id: 55
                    }, {
                        x: 33,
                        y: 8,
                        id: 55
                    }, {
                        x: 33,
                        y: 7,
                        id: 55
                    }, {
                        x: 33,
                        y: 6,
                        id: 55
                    }, {
                        x: 33,
                        y: 21,
                        id: 55
                    }, {
                        x: 33,
                        y: 22,
                        id: 55
                    }, {
                        x: 33,
                        y: 23,
                        id: 55
                    }, {
                        x: 33,
                        y: 24,
                        id: 55
                    }, {
                        x: 33,
                        y: 25,
                        id: 55
                    }, {
                        x: 33,
                        y: 26,
                        id: 55
                    }, {
                        x: 33,
                        y: 27,
                        id: 55
                    }, {
                        x: 33,
                        y: 28,
                        id: 55
                    }, {
                        x: 33,
                        y: 29,
                        id: 55
                    }, {
                        x: 33,
                        y: 30,
                        id: 55
                    }, {
                        x: 53,
                        y: 23,
                        id: 1
                    }, {
                        x: 53,
                        y: 24,
                        id: 1
                    }, {
                        x: 53,
                        y: 25,
                        id: 1
                    }, {
                        x: 53,
                        y: 26,
                        id: 1
                    }, {
                        x: 53,
                        y: 27,
                        id: 1
                    }, {
                        x: 34,
                        y: 33,
                        id: 56
                    }, {
                        x: 34,
                        y: 36,
                        id: 56
                    }, {
                        x: 34,
                        y: 37,
                        id: 52
                    }, {
                        x: 51,
                        y: 37,
                        id: 51
                    }, {
                        x: 53,
                        y: 37,
                        id: 51
                    }, {
                        x: 55,
                        y: 37,
                        id: 51
                    }, {
                        x: 56,
                        y: 37,
                        id: 62
                    }, {
                        x: 56,
                        y: 34,
                        id: 62
                    }, {
                        x: 56,
                        y: 32,
                        id: 62
                    }, {
                        x: 56,
                        y: 29,
                        id: 62
                    }, {
                        x: 56,
                        y: 27,
                        id: 63
                    }, {
                        x: 56,
                        y: 30,
                        id: 63
                    }, {
                        x: 56,
                        y: 35,
                        id: 63
                    }, {
                        x: 56,
                        y: 26,
                        id: 53
                    }, {
                        x: 58,
                        y: 26,
                        id: 54
                    }, {
                        x: 57,
                        y: 26,
                        id: 51
                    }, {
                        x: 58,
                        y: 27,
                        id: 56
                    }, {
                        x: 58,
                        y: 30,
                        id: 56
                    }, {
                        x: 58,
                        y: 34,
                        id: 56
                    }, {
                        x: 58,
                        y: 37,
                        id: 56
                    }, {
                        x: 58,
                        y: 38,
                        id: 56
                    }, {
                        x: 35,
                        y: 37,
                        id: 50
                    }, {
                        x: 37,
                        y: 37,
                        id: 50
                    }, {
                        x: 36,
                        y: 37,
                        id: 49
                    }, {
                        x: 52,
                        y: 37,
                        id: 49
                    }, {
                        x: 54,
                        y: 37,
                        id: 49
                    }, {
                        x: 56,
                        y: 36,
                        id: 60
                    }, {
                        x: 56,
                        y: 33,
                        id: 60
                    }, {
                        x: 56,
                        y: 31,
                        id: 60
                    }, {
                        x: 56,
                        y: 28,
                        id: 60
                    }, {
                        x: 58,
                        y: 29,
                        id: 59
                    }, {
                        x: 58,
                        y: 32,
                        id: 59
                    }, {
                        x: 58,
                        y: 35,
                        id: 59
                    }, {
                        x: 58,
                        y: 36,
                        id: 58
                    }, {
                        x: 58,
                        y: 33,
                        id: 58
                    }, {
                        x: 58,
                        y: 31,
                        id: 58
                    }, {
                        x: 58,
                        y: 28,
                        id: 58
                    }, {
                        x: 34,
                        y: 31,
                        id: 58
                    }, {
                        x: 34,
                        y: 34,
                        id: 58
                    }, {
                        x: 34,
                        y: 35,
                        id: 59
                    }, {
                        x: 34,
                        y: 32,
                        id: 59
                    }, {
                        x: 53,
                        y: 28,
                        id: 1
                    }, {
                        x: 53,
                        y: 29,
                        id: 1
                    }, {
                        x: 53,
                        y: 30,
                        id: 1
                    }, {
                        x: 53,
                        y: 31,
                        id: 1
                    }, {
                        x: 50,
                        y: 37,
                        id: 53
                    }, {
                        x: 50,
                        y: 38,
                        id: 63
                    }, {
                        x: 50,
                        y: 41,
                        id: 63
                    }, {
                        x: 50,
                        y: 44,
                        id: 63
                    }, {
                        x: 50,
                        y: 47,
                        id: 63
                    }, {
                        x: 47,
                        y: 40,
                        id: 54
                    }, {
                        x: 46,
                        y: 40,
                        id: 53
                    }, {
                        x: 47,
                        y: 41,
                        id: 47
                    }, {
                        x: 46,
                        y: 41,
                        id: 48
                    }, {
                        x: 46,
                        y: 46,
                        id: 48
                    }, {
                        x: 46,
                        y: 45,
                        id: 53
                    }, {
                        x: 47,
                        y: 45,
                        id: 54
                    }, {
                        x: 47,
                        y: 46,
                        id: 47
                    }, {
                        x: 47,
                        y: 51,
                        id: 47
                    }, {
                        x: 46,
                        y: 50,
                        id: 53
                    }, {
                        x: 47,
                        y: 50,
                        id: 54
                    }, {
                        x: 46,
                        y: 51,
                        id: 48
                    }, {
                        x: 41,
                        y: 46,
                        id: 48
                    }, {
                        x: 41,
                        y: 41,
                        id: 48
                    }, {
                        x: 41,
                        y: 51,
                        id: 48
                    }, {
                        x: 42,
                        y: 51,
                        id: 47
                    }, {
                        x: 42,
                        y: 46,
                        id: 47
                    }, {
                        x: 42,
                        y: 41,
                        id: 47
                    }, {
                        x: 41,
                        y: 50,
                        id: 53
                    }, {
                        x: 41,
                        y: 40,
                        id: 53
                    }, {
                        x: 41,
                        y: 45,
                        id: 53
                    }, {
                        x: 42,
                        y: 40,
                        id: 54
                    }, {
                        x: 42,
                        y: 45,
                        id: 54
                    }, {
                        x: 42,
                        y: 50,
                        id: 54
                    }, {
                        x: 38,
                        y: 39,
                        id: 57
                    }, {
                        x: 38,
                        y: 42,
                        id: 57
                    }, {
                        x: 38,
                        y: 45,
                        id: 57
                    }, {
                        x: 38,
                        y: 47,
                        id: 57
                    }, {
                        x: 38,
                        y: 50,
                        id: 57
                    }, {
                        x: 38,
                        y: 53,
                        id: 57
                    }, {
                        x: 50,
                        y: 50,
                        id: 63
                    }, {
                        x: 50,
                        y: 53,
                        id: 63
                    }, {
                        x: 50,
                        y: 39,
                        id: 61
                    }, {
                        x: 50,
                        y: 42,
                        id: 61
                    }, {
                        x: 50,
                        y: 45,
                        id: 61
                    }, {
                        x: 50,
                        y: 48,
                        id: 61
                    }, {
                        x: 50,
                        y: 51,
                        id: 61
                    }, {
                        x: 50,
                        y: 52,
                        id: 63
                    }, {
                        x: 50,
                        y: 49,
                        id: 63
                    }, {
                        x: 50,
                        y: 46,
                        id: 63
                    }, {
                        x: 50,
                        y: 43,
                        id: 63
                    }, {
                        x: 50,
                        y: 40,
                        id: 63
                    }, {
                        x: 38,
                        y: 40,
                        id: 56
                    }, {
                        x: 38,
                        y: 43,
                        id: 56
                    }, {
                        x: 38,
                        y: 46,
                        id: 56
                    }, {
                        x: 38,
                        y: 49,
                        id: 56
                    }, {
                        x: 38,
                        y: 51,
                        id: 56
                    }, {
                        x: 38,
                        y: 37,
                        id: 54
                    }, {
                        x: 38,
                        y: 38,
                        id: 56
                    }, {
                        x: 38,
                        y: 41,
                        id: 56
                    }, {
                        x: 38,
                        y: 44,
                        id: 56
                    }, {
                        x: 38,
                        y: 48,
                        id: 56
                    }, {
                        x: 38,
                        y: 52,
                        id: 56
                    }, {
                        x: 58,
                        y: 39,
                        id: 47
                    }, {
                        x: 57,
                        y: 40,
                        id: 47
                    }, {
                        x: 56,
                        y: 41,
                        id: 47
                    }, {
                        x: 55,
                        y: 42,
                        id: 47
                    }, {
                        x: 54,
                        y: 43,
                        id: 47
                    }, {
                        x: 54,
                        y: 44,
                        id: 56
                    }, {
                        x: 54,
                        y: 48,
                        id: 56
                    }, {
                        x: 54,
                        y: 50,
                        id: 56
                    }, {
                        x: 54,
                        y: 52,
                        id: 56
                    }, {
                        x: 54,
                        y: 54,
                        id: 56
                    }, {
                        x: 54,
                        y: 56,
                        id: 56
                    }, {
                        x: 54,
                        y: 57,
                        id: 47
                    }, {
                        x: 50,
                        y: 57,
                        id: 48
                    }, {
                        x: 52,
                        y: 57,
                        id: 46
                    }, {
                        x: 51,
                        y: 57,
                        id: 44
                    }, {
                        x: 53,
                        y: 57,
                        id: 44
                    }, {
                        x: 50,
                        y: 55,
                        id: 63
                    }, {
                        x: 50,
                        y: 54,
                        id: 62
                    }, {
                        x: 50,
                        y: 56,
                        id: 62
                    }, {
                        x: 54,
                        y: 55,
                        id: 56
                    }, {
                        x: 54,
                        y: 53,
                        id: 56
                    }, {
                        x: 54,
                        y: 46,
                        id: 56
                    }, {
                        x: 54,
                        y: 45,
                        id: 58
                    }, {
                        x: 54,
                        y: 47,
                        id: 58
                    }, {
                        x: 54,
                        y: 49,
                        id: 58
                    }, {
                        x: 54,
                        y: 51,
                        id: 58
                    }, {
                        x: 61,
                        y: 58,
                        id: 58
                    }, {
                        x: 61,
                        y: 55,
                        id: 58
                    }, {
                        x: 61,
                        y: 51,
                        id: 58
                    }, {
                        x: 59,
                        y: 48,
                        id: 53
                    }, {
                        x: 60,
                        y: 48,
                        id: 50
                    }, {
                        x: 59,
                        y: 50,
                        id: 62
                    }, {
                        x: 59,
                        y: 53,
                        id: 62
                    }, {
                        x: 59,
                        y: 57,
                        id: 62
                    }, {
                        x: 62,
                        y: 48,
                        id: 52
                    }, {
                        x: 61,
                        y: 48,
                        id: 51
                    }, {
                        x: 63,
                        y: 48,
                        id: 51
                    }, {
                        x: 63,
                        y: 50,
                        id: 43
                    }, {
                        x: 61,
                        y: 50,
                        id: 43
                    }, {
                        x: 62,
                        y: 50,
                        id: 45
                    }, {
                        x: 61,
                        y: 53,
                        id: 56
                    }, {
                        x: 61,
                        y: 56,
                        id: 56
                    }, {
                        x: 61,
                        y: 59,
                        id: 56
                    }, {
                        x: 61,
                        y: 61,
                        id: 47
                    }, {
                        x: 59,
                        y: 61,
                        id: 48
                    }, {
                        x: 60,
                        y: 61,
                        id: 46
                    }, {
                        x: 61,
                        y: 60,
                        id: 56
                    }, {
                        x: 61,
                        y: 57,
                        id: 56
                    }, {
                        x: 61,
                        y: 54,
                        id: 56
                    }, {
                        x: 61,
                        y: 52,
                        id: 56
                    }, {
                        x: 59,
                        y: 49,
                        id: 63
                    }, {
                        x: 59,
                        y: 52,
                        id: 63
                    }, {
                        x: 59,
                        y: 55,
                        id: 63
                    }, {
                        x: 59,
                        y: 59,
                        id: 63
                    }, {
                        x: 59,
                        y: 51,
                        id: 61
                    }, {
                        x: 59,
                        y: 54,
                        id: 61
                    }, {
                        x: 59,
                        y: 56,
                        id: 61
                    }, {
                        x: 59,
                        y: 58,
                        id: 61
                    }, {
                        x: 59,
                        y: 60,
                        id: 61
                    }, {
                        x: 60,
                        y: 33,
                        id: 31
                    }, {
                        x: 59,
                        y: 33,
                        id: 31
                    }, {
                        x: 61,
                        y: 33,
                        id: 31
                    }, {
                        x: 59,
                        y: 34,
                        id: 31
                    }, {
                        x: 61,
                        y: 19,
                        id: 31
                    }, {
                        x: 62,
                        y: 14,
                        id: 31
                    }, {
                        x: 61,
                        y: 14,
                        id: 31
                    }, {
                        x: 62,
                        y: 29,
                        id: 31
                    }, {
                        x: 61,
                        y: 44,
                        id: 31
                    }, {
                        x: 61,
                        y: 45,
                        id: 31
                    }, {
                        x: 55,
                        y: 49,
                        id: 31
                    }, {
                        x: 56,
                        y: 48,
                        id: 31
                    }, {
                        x: 56,
                        y: 49,
                        id: 31
                    }, {
                        x: 0,
                        y: 32,
                        id: 49
                    }, {
                        x: 4,
                        y: 32,
                        id: 49
                    }, {
                        x: 7,
                        y: 32,
                        id: 49
                    }, {
                        x: 10,
                        y: 32,
                        id: 49
                    }, {
                        x: 12,
                        y: 32,
                        id: 49
                    }, {
                        x: 15,
                        y: 32,
                        id: 49
                    }, {
                        x: 32,
                        y: 35,
                        id: 63
                    }, {
                        x: 32,
                        y: 38,
                        id: 63
                    }, {
                        x: 32,
                        y: 39,
                        id: 62
                    }, {
                        x: 32,
                        y: 40,
                        id: 48
                    }, {
                        x: 33,
                        y: 41,
                        id: 48
                    }, {
                        x: 34,
                        y: 42,
                        id: 48
                    }, {
                        x: 35,
                        y: 43,
                        id: 48
                    }, {
                        x: 35,
                        y: 44,
                        id: 63
                    }, {
                        x: 35,
                        y: 46,
                        id: 63
                    }, {
                        x: 35,
                        y: 49,
                        id: 63
                    }, {
                        x: 35,
                        y: 52,
                        id: 63
                    }, {
                        x: 35,
                        y: 54,
                        id: 48
                    }, {
                        x: 38,
                        y: 54,
                        id: 47
                    }, {
                        x: 36,
                        y: 54,
                        id: 43
                    }, {
                        x: 37,
                        y: 54,
                        id: 44
                    }, {
                        x: 35,
                        y: 58,
                        id: 53
                    }, {
                        x: 37,
                        y: 58,
                        id: 54
                    }, {
                        x: 37,
                        y: 61,
                        id: 56
                    }, {
                        x: 37,
                        y: 60,
                        id: 57
                    }, {
                        x: 37,
                        y: 62,
                        id: 57
                    }, {
                        x: 37,
                        y: 59,
                        id: 59
                    }, {
                        x: 37,
                        y: 63,
                        id: 59
                    }, {
                        x: 35,
                        y: 60,
                        id: 63
                    }, {
                        x: 35,
                        y: 62,
                        id: 63
                    }, {
                        x: 35,
                        y: 59,
                        id: 62
                    }, {
                        x: 35,
                        y: 61,
                        id: 62
                    }, {
                        x: 35,
                        y: 63,
                        id: 62
                    }, {
                        x: 36,
                        y: 58,
                        id: 52
                    }, {
                        x: 35,
                        y: 47,
                        id: 62
                    }, {
                        x: 35,
                        y: 51,
                        id: 62
                    }, {
                        x: 35,
                        y: 53,
                        id: 62
                    }, {
                        x: 35,
                        y: 45,
                        id: 61
                    }, {
                        x: 35,
                        y: 48,
                        id: 61
                    }, {
                        x: 35,
                        y: 50,
                        id: 61
                    }, {
                        x: 32,
                        y: 34,
                        id: 61
                    }, {
                        x: 32,
                        y: 36,
                        id: 61
                    }, {
                        x: 32,
                        y: 37,
                        id: 60
                    }, {
                        x: 32,
                        y: 33,
                        id: 60
                    }, {
                        x: 41,
                        y: 56,
                        id: 48
                    }, {
                        x: 46,
                        y: 56,
                        id: 48
                    }, {
                        x: 42,
                        y: 56,
                        id: 47
                    }, {
                        x: 47,
                        y: 56,
                        id: 47
                    }, {
                        x: 41,
                        y: 55,
                        id: 53
                    }, {
                        x: 46,
                        y: 55,
                        id: 53
                    }, {
                        x: 42,
                        y: 55,
                        id: 54
                    }, {
                        x: 47,
                        y: 55,
                        id: 54
                    }, {
                        x: 16,
                        y: 32,
                        id: 54
                    }, {
                        x: 16,
                        y: 34,
                        id: 47
                    }, {
                        x: 14,
                        y: 34,
                        id: 46
                    }, {
                        x: 11,
                        y: 34,
                        id: 46
                    }, {
                        x: 8,
                        y: 34,
                        id: 46
                    }, {
                        x: 5,
                        y: 34,
                        id: 46
                    }, {
                        x: 2,
                        y: 34,
                        id: 46
                    }, {
                        x: 0,
                        y: 34,
                        id: 43
                    }, {
                        x: 3,
                        y: 34,
                        id: 43
                    }, {
                        x: 6,
                        y: 34,
                        id: 43
                    }, {
                        x: 12,
                        y: 34,
                        id: 43
                    }, {
                        x: 1,
                        y: 34,
                        id: 44
                    }, {
                        x: 4,
                        y: 34,
                        id: 44
                    }, {
                        x: 7,
                        y: 34,
                        id: 44
                    }, {
                        x: 10,
                        y: 34,
                        id: 44
                    }, {
                        x: 13,
                        y: 34,
                        id: 44
                    }, {
                        x: 9,
                        y: 34,
                        id: 45
                    }, {
                        x: 15,
                        y: 34,
                        id: 45
                    }, {
                        x: 2,
                        y: 32,
                        id: 51
                    }, {
                        x: 5,
                        y: 32,
                        id: 51
                    }, {
                        x: 8,
                        y: 32,
                        id: 51
                    }, {
                        x: 13,
                        y: 32,
                        id: 51
                    }, {
                        x: 11,
                        y: 32,
                        id: 51
                    }, {
                        x: 14,
                        y: 32,
                        id: 52
                    }, {
                        x: 9,
                        y: 32,
                        id: 52
                    }, {
                        x: 6,
                        y: 32,
                        id: 52
                    }, {
                        x: 3,
                        y: 32,
                        id: 52
                    }, {
                        x: 1,
                        y: 32,
                        id: 52
                    }, {
                        x: 16,
                        y: 33,
                        id: 56
                    }, {
                        x: 4,
                        y: 38,
                        id: 53
                    }, {
                        x: 6,
                        y: 38,
                        id: 54
                    }, {
                        x: 4,
                        y: 46,
                        id: 48
                    }, {
                        x: 6,
                        y: 46,
                        id: 47
                    }, {
                        x: 6,
                        y: 59,
                        id: 47
                    }, {
                        x: 4,
                        y: 59,
                        id: 48
                    }, {
                        x: 4,
                        y: 50,
                        id: 53
                    }, {
                        x: 6,
                        y: 50,
                        id: 54
                    }, {
                        x: 11,
                        y: 50,
                        id: 53
                    }, {
                        x: 13,
                        y: 50,
                        id: 54
                    }, {
                        x: 13,
                        y: 38,
                        id: 54
                    }, {
                        x: 11,
                        y: 38,
                        id: 53
                    }, {
                        x: 11,
                        y: 46,
                        id: 48
                    }, {
                        x: 13,
                        y: 46,
                        id: 47
                    }, {
                        x: 13,
                        y: 59,
                        id: 47
                    }, {
                        x: 11,
                        y: 59,
                        id: 48
                    }, {
                        x: 18,
                        y: 46,
                        id: 48
                    }, {
                        x: 18,
                        y: 59,
                        id: 48
                    }, {
                        x: 18,
                        y: 38,
                        id: 53
                    }, {
                        x: 18,
                        y: 50,
                        id: 53
                    }, {
                        x: 20,
                        y: 38,
                        id: 54
                    }, {
                        x: 20,
                        y: 50,
                        id: 54
                    }, {
                        x: 20,
                        y: 59,
                        id: 47
                    }, {
                        x: 20,
                        y: 46,
                        id: 47
                    }, {
                        x: 25,
                        y: 32,
                        id: 53
                    }, {
                        x: 27,
                        y: 32,
                        id: 54
                    }, {
                        x: 27,
                        y: 46,
                        id: 47
                    }, {
                        x: 27,
                        y: 59,
                        id: 47
                    }, {
                        x: 25,
                        y: 59,
                        id: 48
                    }, {
                        x: 25,
                        y: 46,
                        id: 48
                    }, {
                        x: 25,
                        y: 50,
                        id: 53
                    }, {
                        x: 27,
                        y: 50,
                        id: 54
                    }, {
                        x: 33,
                        y: 50,
                        id: 1
                    }, {
                        x: 34,
                        y: 50,
                        id: 1
                    }, {
                        x: 30,
                        y: 54,
                        id: 1
                    }, {
                        x: 29,
                        y: 54,
                        id: 1
                    }, {
                        x: 28,
                        y: 54,
                        id: 1
                    }, {
                        x: 27,
                        y: 52,
                        id: 56
                    }, {
                        x: 27,
                        y: 55,
                        id: 56
                    }, {
                        x: 27,
                        y: 57,
                        id: 56
                    }, {
                        x: 20,
                        y: 52,
                        id: 56
                    }, {
                        x: 20,
                        y: 55,
                        id: 56
                    }, {
                        x: 20,
                        y: 57,
                        id: 56
                    }, {
                        x: 13,
                        y: 53,
                        id: 56
                    }, {
                        x: 13,
                        y: 56,
                        id: 56
                    }, {
                        x: 13,
                        y: 58,
                        id: 56
                    }, {
                        x: 6,
                        y: 56,
                        id: 56
                    }, {
                        x: 6,
                        y: 54,
                        id: 56
                    }, {
                        x: 6,
                        y: 52,
                        id: 56
                    }, {
                        x: 6,
                        y: 40,
                        id: 56
                    }, {
                        x: 6,
                        y: 42,
                        id: 56
                    }, {
                        x: 6,
                        y: 43,
                        id: 56
                    }, {
                        x: 13,
                        y: 40,
                        id: 56
                    }, {
                        x: 13,
                        y: 42,
                        id: 56
                    }, {
                        x: 13,
                        y: 45,
                        id: 56
                    }, {
                        x: 20,
                        y: 41,
                        id: 56
                    }, {
                        x: 20,
                        y: 43,
                        id: 56
                    }, {
                        x: 20,
                        y: 45,
                        id: 56
                    }, {
                        x: 27,
                        y: 45,
                        id: 56
                    }, {
                        x: 27,
                        y: 40,
                        id: 56
                    }, {
                        x: 27,
                        y: 35,
                        id: 56
                    }, {
                        x: 27,
                        y: 37,
                        id: 56
                    }, {
                        x: 27,
                        y: 42,
                        id: 56
                    }, {
                        x: 18,
                        y: 57,
                        id: 63
                    }, {
                        x: 18,
                        y: 55,
                        id: 63
                    }, {
                        x: 18,
                        y: 52,
                        id: 63
                    }, {
                        x: 25,
                        y: 52,
                        id: 63
                    }, {
                        x: 25,
                        y: 55,
                        id: 63
                    }, {
                        x: 25,
                        y: 57,
                        id: 63
                    }, {
                        x: 25,
                        y: 43,
                        id: 63
                    }, {
                        x: 25,
                        y: 40,
                        id: 63
                    }, {
                        x: 25,
                        y: 37,
                        id: 63
                    }, {
                        x: 25,
                        y: 34,
                        id: 63
                    }, {
                        x: 18,
                        y: 41,
                        id: 63
                    }, {
                        x: 18,
                        y: 44,
                        id: 63
                    }, {
                        x: 11,
                        y: 44,
                        id: 63
                    }, {
                        x: 11,
                        y: 42,
                        id: 63
                    }, {
                        x: 11,
                        y: 40,
                        id: 63
                    }, {
                        x: 4,
                        y: 40,
                        id: 63
                    }, {
                        x: 4,
                        y: 42,
                        id: 63
                    }, {
                        x: 4,
                        y: 43,
                        id: 63
                    }, {
                        x: 4,
                        y: 54,
                        id: 63
                    }, {
                        x: 4,
                        y: 57,
                        id: 63
                    }, {
                        x: 11,
                        y: 52,
                        id: 63
                    }, {
                        x: 11,
                        y: 54,
                        id: 63
                    }, {
                        x: 11,
                        y: 57,
                        id: 63
                    }, {
                        x: 4,
                        y: 56,
                        id: 62
                    }, {
                        x: 4,
                        y: 52,
                        id: 62
                    }, {
                        x: 4,
                        y: 44,
                        id: 62
                    }, {
                        x: 4,
                        y: 41,
                        id: 62
                    }, {
                        x: 11,
                        y: 41,
                        id: 62
                    }, {
                        x: 11,
                        y: 45,
                        id: 62
                    }, {
                        x: 18,
                        y: 43,
                        id: 62
                    }, {
                        x: 18,
                        y: 39,
                        id: 62
                    }, {
                        x: 25,
                        y: 36,
                        id: 62
                    }, {
                        x: 25,
                        y: 38,
                        id: 62
                    }, {
                        x: 25,
                        y: 44,
                        id: 62
                    }, {
                        x: 25,
                        y: 53,
                        id: 62
                    }, {
                        x: 25,
                        y: 56,
                        id: 62
                    }, {
                        x: 18,
                        y: 56,
                        id: 62
                    }, {
                        x: 18,
                        y: 53,
                        id: 62
                    }, {
                        x: 11,
                        y: 56,
                        id: 62
                    }, {
                        x: 11,
                        y: 51,
                        id: 62
                    }, {
                        x: 4,
                        y: 53,
                        id: 62
                    }, {
                        x: 4,
                        y: 55,
                        id: 62
                    }, {
                        x: 4,
                        y: 45,
                        id: 60
                    }, {
                        x: 4,
                        y: 39,
                        id: 60
                    }, {
                        x: 11,
                        y: 39,
                        id: 60
                    }, {
                        x: 11,
                        y: 43,
                        id: 60
                    }, {
                        x: 18,
                        y: 40,
                        id: 60
                    }, {
                        x: 18,
                        y: 42,
                        id: 60
                    }, {
                        x: 18,
                        y: 45,
                        id: 60
                    }, {
                        x: 25,
                        y: 33,
                        id: 60
                    }, {
                        x: 25,
                        y: 35,
                        id: 60
                    }, {
                        x: 25,
                        y: 39,
                        id: 60
                    }, {
                        x: 25,
                        y: 41,
                        id: 60
                    }, {
                        x: 25,
                        y: 42,
                        id: 60
                    }, {
                        x: 25,
                        y: 45,
                        id: 60
                    }, {
                        x: 25,
                        y: 51,
                        id: 60
                    }, {
                        x: 25,
                        y: 54,
                        id: 60
                    }, {
                        x: 25,
                        y: 58,
                        id: 60
                    }, {
                        x: 18,
                        y: 58,
                        id: 60
                    }, {
                        x: 18,
                        y: 54,
                        id: 60
                    }, {
                        x: 18,
                        y: 51,
                        id: 60
                    }, {
                        x: 11,
                        y: 53,
                        id: 60
                    }, {
                        x: 11,
                        y: 55,
                        id: 60
                    }, {
                        x: 11,
                        y: 58,
                        id: 60
                    }, {
                        x: 4,
                        y: 58,
                        id: 60
                    }, {
                        x: 4,
                        y: 51,
                        id: 60
                    }, {
                        x: 6,
                        y: 44,
                        id: 57
                    }, {
                        x: 6,
                        y: 41,
                        id: 57
                    }, {
                        x: 13,
                        y: 43,
                        id: 57
                    }, {
                        x: 13,
                        y: 41,
                        id: 57
                    }, {
                        x: 20,
                        y: 40,
                        id: 57
                    }, {
                        x: 20,
                        y: 42,
                        id: 57
                    }, {
                        x: 20,
                        y: 53,
                        id: 57
                    }, {
                        x: 13,
                        y: 55,
                        id: 57
                    }, {
                        x: 6,
                        y: 53,
                        id: 57
                    }, {
                        x: 6,
                        y: 57,
                        id: 57
                    }, {
                        x: 13,
                        y: 51,
                        id: 57
                    }, {
                        x: 20,
                        y: 51,
                        id: 57
                    }, {
                        x: 27,
                        y: 51,
                        id: 57
                    }, {
                        x: 27,
                        y: 44,
                        id: 57
                    }, {
                        x: 27,
                        y: 34,
                        id: 57
                    }, {
                        x: 27,
                        y: 38,
                        id: 57
                    }, {
                        x: 6,
                        y: 45,
                        id: 59
                    }, {
                        x: 6,
                        y: 39,
                        id: 59
                    }, {
                        x: 6,
                        y: 51,
                        id: 59
                    }, {
                        x: 6,
                        y: 55,
                        id: 59
                    }, {
                        x: 6,
                        y: 58,
                        id: 59
                    }, {
                        x: 13,
                        y: 57,
                        id: 59
                    }, {
                        x: 13,
                        y: 54,
                        id: 59
                    }, {
                        x: 13,
                        y: 52,
                        id: 59
                    }, {
                        x: 20,
                        y: 54,
                        id: 59
                    }, {
                        x: 20,
                        y: 56,
                        id: 59
                    }, {
                        x: 20,
                        y: 58,
                        id: 59
                    }, {
                        x: 27,
                        y: 58,
                        id: 59
                    }, {
                        x: 27,
                        y: 56,
                        id: 59
                    }, {
                        x: 27,
                        y: 54,
                        id: 59
                    }, {
                        x: 27,
                        y: 53,
                        id: 59
                    }, {
                        x: 27,
                        y: 43,
                        id: 59
                    }, {
                        x: 27,
                        y: 41,
                        id: 59
                    }, {
                        x: 27,
                        y: 39,
                        id: 59
                    }, {
                        x: 27,
                        y: 36,
                        id: 59
                    }, {
                        x: 27,
                        y: 33,
                        id: 59
                    }, {
                        x: 13,
                        y: 44,
                        id: 59
                    }, {
                        x: 13,
                        y: 39,
                        id: 59
                    }, {
                        x: 20,
                        y: 39,
                        id: 59
                    }, {
                        x: 20,
                        y: 44,
                        id: 59
                    }, {
                        x: 5,
                        y: 38,
                        id: 50
                    }, {
                        x: 12,
                        y: 38,
                        id: 50
                    }, {
                        x: 19,
                        y: 38,
                        id: 50
                    }, {
                        x: 26,
                        y: 32,
                        id: 50
                    }, {
                        x: 26,
                        y: 50,
                        id: 50
                    }, {
                        x: 19,
                        y: 50,
                        id: 50
                    }, {
                        x: 12,
                        y: 50,
                        id: 50
                    }, {
                        x: 5,
                        y: 50,
                        id: 50
                    }, {
                        x: 5,
                        y: 59,
                        id: 44
                    }, {
                        x: 12,
                        y: 59,
                        id: 44
                    }, {
                        x: 19,
                        y: 59,
                        id: 44
                    }, {
                        x: 26,
                        y: 59,
                        id: 44
                    }, {
                        x: 26,
                        y: 46,
                        id: 44
                    }, {
                        x: 19,
                        y: 46,
                        id: 44
                    }, {
                        x: 12,
                        y: 46,
                        id: 44
                    }, {
                        x: 5,
                        y: 46,
                        id: 44
                    }, {
                        x: 17,
                        y: 34,
                        id: 1
                    }, {
                        x: 18,
                        y: 34,
                        id: 1
                    }, {
                        x: 18,
                        y: 35,
                        id: 1
                    }, {
                        x: 18,
                        y: 36,
                        id: 1
                    }, {
                        x: 18,
                        y: 37,
                        id: 1
                    }, {
                        x: 23,
                        y: 49,
                        id: 1
                    }, {
                        x: 24,
                        y: 49,
                        id: 1
                    }, {
                        x: 14,
                        y: 41,
                        id: 1
                    }, {
                        x: 14,
                        y: 42,
                        id: 1
                    }, {
                        x: 14,
                        y: 43,
                        id: 1
                    }, {
                        x: 10,
                        y: 38,
                        id: 1
                    }, {
                        x: 10,
                        y: 40,
                        id: 1
                    }, {
                        x: 10,
                        y: 43,
                        id: 1
                    }, {
                        x: 0,
                        y: 52,
                        id: 1
                    }, {
                        x: 0,
                        y: 46,
                        id: 1
                    }, {
                        x: 0,
                        y: 36,
                        id: 1
                    }, {
                        x: 0,
                        y: 35,
                        id: 1
                    }, {
                        x: 1,
                        y: 35,
                        id: 1
                    }, {
                        x: 0,
                        y: 60,
                        id: 1
                    }, {
                        x: 3,
                        y: 62,
                        id: 1
                    }, {
                        x: 3,
                        y: 63,
                        id: 1
                    }, {
                        x: 8,
                        y: 55,
                        id: 1
                    }, {
                        x: 16,
                        y: 57,
                        id: 1
                    }, {
                        x: 16,
                        y: 39,
                        id: 1
                    }, {
                        x: 21,
                        y: 32,
                        id: 1
                    }, {
                        x: 22,
                        y: 32,
                        id: 1
                    }, {
                        x: 22,
                        y: 33,
                        id: 1
                    }, {
                        x: 21,
                        y: 33,
                        id: 1
                    }, {
                        x: 24,
                        y: 38,
                        id: 1
                    }, {
                        x: 21,
                        y: 44,
                        id: 1
                    }, {
                        x: 22,
                        y: 44,
                        id: 1
                    }, {
                        x: 21,
                        y: 56,
                        id: 1
                    }, {
                        x: 22,
                        y: 56,
                        id: 1
                    }, {
                        x: 7,
                        y: 49,
                        id: 1
                    }, {
                        x: 7,
                        y: 50,
                        id: 1
                    }, {
                        x: 8,
                        y: 50,
                        id: 1
                    }, {
                        x: 8,
                        y: 49,
                        id: 1
                    }, {
                        x: 7,
                        y: 51,
                        id: 1
                    }, {
                        x: 8,
                        y: 51,
                        id: 1
                    }, {
                        x: 3,
                        y: 42,
                        id: 1
                    }, {
                        x: 2,
                        y: 42,
                        id: 1
                    }, {
                        x: 28,
                        y: 41,
                        id: 1
                    }, {
                        x: 29,
                        y: 42,
                        id: 1
                    }, {
                        x: 30,
                        y: 43,
                        id: 1
                    }, {
                        x: 29,
                        y: 43,
                        id: 1
                    }, {
                        x: 28,
                        y: 43,
                        id: 1
                    }, {
                        x: 28,
                        y: 42,
                        id: 1
                    }, {
                        x: 17,
                        y: 62,
                        id: 1
                    }, {
                        x: 17,
                        y: 63,
                        id: 1
                    }, {
                        x: 27,
                        y: 60,
                        id: 1
                    }, {
                        x: 11,
                        y: 47,
                        id: 1
                    }, {
                        x: 11,
                        y: 48,
                        id: 1
                    }, {
                        x: 11,
                        y: 49,
                        id: 1
                    }, {
                        x: 34,
                        y: 2,
                        id: 31
                    }, {
                        x: 35,
                        y: 2,
                        id: 31
                    }, {
                        x: 36,
                        y: 2,
                        id: 31
                    }, {
                        x: 37,
                        y: 2,
                        id: 31
                    }, {
                        x: 40,
                        y: 2,
                        id: 31
                    }, {
                        x: 41,
                        y: 2,
                        id: 31
                    }, {
                        x: 58,
                        y: 0,
                        id: 31
                    }, {
                        x: 58,
                        y: 1,
                        id: 31
                    }, {
                        x: 58,
                        y: 3,
                        id: 31
                    }, {
                        x: 58,
                        y: 4,
                        id: 31
                    }, {
                        x: 59,
                        y: 5,
                        id: 31
                    }, {
                        x: 60,
                        y: 5,
                        id: 31
                    }, {
                        x: 61,
                        y: 5,
                        id: 31
                    }, {
                        x: 59,
                        y: 4,
                        id: 31
                    }, {
                        x: 63,
                        y: 0,
                        id: 31
                    }, {
                        x: 61,
                        y: 6,
                        id: 31
                    }, {
                        x: 18,
                        y: 15,
                        id: 31
                    }, {
                        x: 3,
                        y: 46,
                        id: 31
                    }, {
                        x: 3,
                        y: 45,
                        id: 31
                    }, {
                        x: 5,
                        y: 39,
                        id: 55
                    }, {
                        x: 5,
                        y: 40,
                        id: 55
                    }, {
                        x: 5,
                        y: 41,
                        id: 55
                    }, {
                        x: 5,
                        y: 42,
                        id: 55
                    }, {
                        x: 5,
                        y: 43,
                        id: 55
                    }, {
                        x: 5,
                        y: 44,
                        id: 55
                    }, {
                        x: 5,
                        y: 45,
                        id: 55
                    }, {
                        x: 5,
                        y: 51,
                        id: 55
                    }, {
                        x: 5,
                        y: 52,
                        id: 55
                    }, {
                        x: 5,
                        y: 53,
                        id: 55
                    }, {
                        x: 5,
                        y: 54,
                        id: 55
                    }, {
                        x: 5,
                        y: 55,
                        id: 55
                    }, {
                        x: 5,
                        y: 56,
                        id: 55
                    }, {
                        x: 5,
                        y: 57,
                        id: 55
                    }, {
                        x: 5,
                        y: 58,
                        id: 55
                    }, {
                        x: 12,
                        y: 39,
                        id: 55
                    }, {
                        x: 12,
                        y: 40,
                        id: 55
                    }, {
                        x: 12,
                        y: 41,
                        id: 55
                    }, {
                        x: 12,
                        y: 42,
                        id: 55
                    }, {
                        x: 12,
                        y: 43,
                        id: 55
                    }, {
                        x: 12,
                        y: 44,
                        id: 55
                    }, {
                        x: 12,
                        y: 45,
                        id: 55
                    }, {
                        x: 12,
                        y: 51,
                        id: 55
                    }, {
                        x: 12,
                        y: 52,
                        id: 55
                    }, {
                        x: 12,
                        y: 53,
                        id: 55
                    }, {
                        x: 12,
                        y: 54,
                        id: 55
                    }, {
                        x: 12,
                        y: 55,
                        id: 55
                    }, {
                        x: 12,
                        y: 56,
                        id: 55
                    }, {
                        x: 12,
                        y: 57,
                        id: 55
                    }, {
                        x: 12,
                        y: 58,
                        id: 55
                    }, {
                        x: 19,
                        y: 39,
                        id: 55
                    }, {
                        x: 19,
                        y: 40,
                        id: 55
                    }, {
                        x: 19,
                        y: 41,
                        id: 55
                    }, {
                        x: 19,
                        y: 42,
                        id: 55
                    }, {
                        x: 19,
                        y: 43,
                        id: 55
                    }, {
                        x: 19,
                        y: 44,
                        id: 55
                    }, {
                        x: 19,
                        y: 45,
                        id: 55
                    }, {
                        x: 19,
                        y: 51,
                        id: 55
                    }, {
                        x: 19,
                        y: 52,
                        id: 55
                    }, {
                        x: 19,
                        y: 53,
                        id: 55
                    }, {
                        x: 19,
                        y: 54,
                        id: 55
                    }, {
                        x: 19,
                        y: 55,
                        id: 55
                    }, {
                        x: 19,
                        y: 56,
                        id: 55
                    }, {
                        x: 19,
                        y: 57,
                        id: 55
                    }, {
                        x: 19,
                        y: 58,
                        id: 55
                    }, {
                        x: 26,
                        y: 51,
                        id: 55
                    }, {
                        x: 26,
                        y: 52,
                        id: 55
                    }, {
                        x: 26,
                        y: 53,
                        id: 55
                    }, {
                        x: 26,
                        y: 54,
                        id: 55
                    }, {
                        x: 26,
                        y: 55,
                        id: 55
                    }, {
                        x: 26,
                        y: 56,
                        id: 55
                    }, {
                        x: 26,
                        y: 57,
                        id: 55
                    }, {
                        x: 26,
                        y: 58,
                        id: 55
                    }, {
                        x: 26,
                        y: 33,
                        id: 55
                    }, {
                        x: 26,
                        y: 34,
                        id: 55
                    }, {
                        x: 26,
                        y: 35,
                        id: 55
                    }, {
                        x: 26,
                        y: 36,
                        id: 55
                    }, {
                        x: 26,
                        y: 37,
                        id: 55
                    }, {
                        x: 26,
                        y: 38,
                        id: 55
                    }, {
                        x: 26,
                        y: 39,
                        id: 55
                    }, {
                        x: 26,
                        y: 40,
                        id: 55
                    }, {
                        x: 26,
                        y: 41,
                        id: 55
                    }, {
                        x: 26,
                        y: 42,
                        id: 55
                    }, {
                        x: 26,
                        y: 43,
                        id: 55
                    }, {
                        x: 26,
                        y: 44,
                        id: 55
                    }, {
                        x: 26,
                        y: 45,
                        id: 55
                    }, {
                        x: 33,
                        y: 31,
                        id: 55
                    }, {
                        x: 33,
                        y: 32,
                        id: 55
                    }, {
                        x: 33,
                        y: 33,
                        id: 55
                    }, {
                        x: 33,
                        y: 34,
                        id: 55
                    }, {
                        x: 33,
                        y: 35,
                        id: 55
                    }, {
                        x: 33,
                        y: 36,
                        id: 55
                    }, {
                        x: 33,
                        y: 37,
                        id: 55
                    }, {
                        x: 33,
                        y: 38,
                        id: 55
                    }, {
                        x: 33,
                        y: 39,
                        id: 55
                    }, {
                        x: 33,
                        y: 40,
                        id: 55
                    }, {
                        x: 34,
                        y: 38,
                        id: 55
                    }, {
                        x: 34,
                        y: 39,
                        id: 55
                    }, {
                        x: 34,
                        y: 40,
                        id: 55
                    }, {
                        x: 34,
                        y: 41,
                        id: 55
                    }, {
                        x: 35,
                        y: 38,
                        id: 55
                    }, {
                        x: 35,
                        y: 39,
                        id: 55
                    }, {
                        x: 35,
                        y: 40,
                        id: 55
                    }, {
                        x: 35,
                        y: 41,
                        id: 55
                    }, {
                        x: 35,
                        y: 42,
                        id: 55
                    }, {
                        x: 36,
                        y: 38,
                        id: 55
                    }, {
                        x: 37,
                        y: 38,
                        id: 55
                    }, {
                        x: 36,
                        y: 39,
                        id: 55
                    }, {
                        x: 37,
                        y: 39,
                        id: 55
                    }, {
                        x: 36,
                        y: 40,
                        id: 55
                    }, {
                        x: 37,
                        y: 40,
                        id: 55
                    }, {
                        x: 36,
                        y: 41,
                        id: 55
                    }, {
                        x: 37,
                        y: 41,
                        id: 55
                    }, {
                        x: 36,
                        y: 42,
                        id: 55
                    }, {
                        x: 37,
                        y: 42,
                        id: 55
                    }, {
                        x: 36,
                        y: 43,
                        id: 55
                    }, {
                        x: 37,
                        y: 43,
                        id: 55
                    }, {
                        x: 36,
                        y: 44,
                        id: 55
                    }, {
                        x: 37,
                        y: 44,
                        id: 55
                    }, {
                        x: 36,
                        y: 45,
                        id: 55
                    }, {
                        x: 37,
                        y: 45,
                        id: 55
                    }, {
                        x: 36,
                        y: 46,
                        id: 55
                    }, {
                        x: 37,
                        y: 46,
                        id: 55
                    }, {
                        x: 36,
                        y: 47,
                        id: 55
                    }, {
                        x: 37,
                        y: 47,
                        id: 55
                    }, {
                        x: 36,
                        y: 49,
                        id: 55
                    }, {
                        x: 37,
                        y: 48,
                        id: 55
                    }, {
                        x: 36,
                        y: 48,
                        id: 55
                    }, {
                        x: 37,
                        y: 49,
                        id: 55
                    }, {
                        x: 36,
                        y: 50,
                        id: 55
                    }, {
                        x: 37,
                        y: 50,
                        id: 55
                    }, {
                        x: 36,
                        y: 51,
                        id: 55
                    }, {
                        x: 37,
                        y: 51,
                        id: 55
                    }, {
                        x: 36,
                        y: 52,
                        id: 55
                    }, {
                        x: 37,
                        y: 52,
                        id: 55
                    }, {
                        x: 36,
                        y: 53,
                        id: 55
                    }, {
                        x: 37,
                        y: 53,
                        id: 55
                    }, {
                        x: 36,
                        y: 59,
                        id: 55
                    }, {
                        x: 36,
                        y: 60,
                        id: 55
                    }, {
                        x: 36,
                        y: 61,
                        id: 55
                    }, {
                        x: 36,
                        y: 62,
                        id: 55
                    }, {
                        x: 36,
                        y: 63,
                        id: 55
                    }, {
                        x: 63,
                        y: 49,
                        id: 55
                    }, {
                        x: 62,
                        y: 49,
                        id: 55
                    }, {
                        x: 61,
                        y: 49,
                        id: 55
                    }, {
                        x: 60,
                        y: 49,
                        id: 55
                    }, {
                        x: 60,
                        y: 50,
                        id: 55
                    }, {
                        x: 60,
                        y: 51,
                        id: 55
                    }, {
                        x: 60,
                        y: 52,
                        id: 55
                    }, {
                        x: 60,
                        y: 53,
                        id: 55
                    }, {
                        x: 60,
                        y: 54,
                        id: 55
                    }, {
                        x: 60,
                        y: 55,
                        id: 55
                    }, {
                        x: 60,
                        y: 56,
                        id: 55
                    }, {
                        x: 60,
                        y: 57,
                        id: 55
                    }, {
                        x: 60,
                        y: 58,
                        id: 55
                    }, {
                        x: 60,
                        y: 59,
                        id: 55
                    }, {
                        x: 60,
                        y: 60,
                        id: 55
                    }, {
                        x: 57,
                        y: 27,
                        id: 55
                    }, {
                        x: 57,
                        y: 28,
                        id: 55
                    }, {
                        x: 57,
                        y: 29,
                        id: 55
                    }, {
                        x: 57,
                        y: 30,
                        id: 55
                    }, {
                        x: 57,
                        y: 31,
                        id: 55
                    }, {
                        x: 57,
                        y: 32,
                        id: 55
                    }, {
                        x: 57,
                        y: 33,
                        id: 55
                    }, {
                        x: 57,
                        y: 34,
                        id: 55
                    }, {
                        x: 57,
                        y: 35,
                        id: 55
                    }, {
                        x: 57,
                        y: 36,
                        id: 55
                    }, {
                        x: 57,
                        y: 37,
                        id: 55
                    }, {
                        x: 57,
                        y: 38,
                        id: 55
                    }, {
                        x: 57,
                        y: 39,
                        id: 55
                    }, {
                        x: 56,
                        y: 38,
                        id: 55
                    }, {
                        x: 56,
                        y: 39,
                        id: 55
                    }, {
                        x: 56,
                        y: 40,
                        id: 55
                    }, {
                        x: 55,
                        y: 38,
                        id: 55
                    }, {
                        x: 55,
                        y: 39,
                        id: 55
                    }, {
                        x: 55,
                        y: 40,
                        id: 55
                    }, {
                        x: 55,
                        y: 41,
                        id: 55
                    }, {
                        x: 54,
                        y: 38,
                        id: 55
                    }, {
                        x: 54,
                        y: 39,
                        id: 55
                    }, {
                        x: 54,
                        y: 40,
                        id: 55
                    }, {
                        x: 54,
                        y: 41,
                        id: 55
                    }, {
                        x: 54,
                        y: 42,
                        id: 55
                    }, {
                        x: 51,
                        y: 38,
                        id: 55
                    }, {
                        x: 52,
                        y: 38,
                        id: 55
                    }, {
                        x: 53,
                        y: 38,
                        id: 55
                    }, {
                        x: 53,
                        y: 39,
                        id: 55
                    }, {
                        x: 52,
                        y: 39,
                        id: 55
                    }, {
                        x: 51,
                        y: 39,
                        id: 55
                    }, {
                        x: 51,
                        y: 40,
                        id: 55
                    }, {
                        x: 52,
                        y: 40,
                        id: 55
                    }, {
                        x: 53,
                        y: 40,
                        id: 55
                    }, {
                        x: 52,
                        y: 41,
                        id: 55
                    }, {
                        x: 51,
                        y: 41,
                        id: 55
                    }, {
                        x: 53,
                        y: 41,
                        id: 55
                    }, {
                        x: 53,
                        y: 42,
                        id: 55
                    }, {
                        x: 52,
                        y: 42,
                        id: 55
                    }, {
                        x: 51,
                        y: 42,
                        id: 55
                    }, {
                        x: 51,
                        y: 43,
                        id: 55
                    }, {
                        x: 52,
                        y: 43,
                        id: 55
                    }, {
                        x: 53,
                        y: 43,
                        id: 55
                    }, {
                        x: 53,
                        y: 44,
                        id: 55
                    }, {
                        x: 52,
                        y: 44,
                        id: 55
                    }, {
                        x: 51,
                        y: 44,
                        id: 55
                    }, {
                        x: 51,
                        y: 45,
                        id: 55
                    }, {
                        x: 52,
                        y: 45,
                        id: 55
                    }, {
                        x: 53,
                        y: 45,
                        id: 55
                    }, {
                        x: 53,
                        y: 46,
                        id: 55
                    }, {
                        x: 52,
                        y: 46,
                        id: 55
                    }, {
                        x: 51,
                        y: 46,
                        id: 55
                    }, {
                        x: 51,
                        y: 47,
                        id: 55
                    }, {
                        x: 52,
                        y: 47,
                        id: 55
                    }, {
                        x: 53,
                        y: 47,
                        id: 55
                    }, {
                        x: 51,
                        y: 48,
                        id: 55
                    }, {
                        x: 52,
                        y: 48,
                        id: 55
                    }, {
                        x: 53,
                        y: 48,
                        id: 55
                    }, {
                        x: 53,
                        y: 49,
                        id: 55
                    }, {
                        x: 52,
                        y: 49,
                        id: 55
                    }, {
                        x: 51,
                        y: 49,
                        id: 55
                    }, {
                        x: 51,
                        y: 50,
                        id: 55
                    }, {
                        x: 52,
                        y: 50,
                        id: 55
                    }, {
                        x: 53,
                        y: 50,
                        id: 55
                    }, {
                        x: 53,
                        y: 51,
                        id: 55
                    }, {
                        x: 52,
                        y: 51,
                        id: 55
                    }, {
                        x: 51,
                        y: 51,
                        id: 55
                    }, {
                        x: 51,
                        y: 52,
                        id: 55
                    }, {
                        x: 52,
                        y: 52,
                        id: 55
                    }, {
                        x: 53,
                        y: 52,
                        id: 55
                    }, {
                        x: 53,
                        y: 53,
                        id: 55
                    }, {
                        x: 52,
                        y: 53,
                        id: 55
                    }, {
                        x: 51,
                        y: 53,
                        id: 55
                    }, {
                        x: 51,
                        y: 54,
                        id: 55
                    }, {
                        x: 52,
                        y: 54,
                        id: 55
                    }, {
                        x: 53,
                        y: 54,
                        id: 55
                    }, {
                        x: 53,
                        y: 55,
                        id: 55
                    }, {
                        x: 52,
                        y: 55,
                        id: 55
                    }, {
                        x: 51,
                        y: 55,
                        id: 55
                    }, {
                        x: 51,
                        y: 56,
                        id: 55
                    }, {
                        x: 52,
                        y: 56,
                        id: 55
                    }, {
                        x: 53,
                        y: 56,
                        id: 55
                    }, {
                        x: 5,
                        y: 0,
                        id: 66
                    }, {
                        x: 24,
                        y: 0,
                        id: 66
                    }, {
                        x: 33,
                        y: 0,
                        id: 66
                    }, {
                        x: 42,
                        y: 0,
                        id: 66
                    }, {
                        x: 51,
                        y: 0,
                        id: 66
                    }, {
                        x: 27,
                        y: 18,
                        id: 66
                    }, {
                        x: 33,
                        y: 18,
                        id: 66
                    }, {
                        x: 57,
                        y: 24,
                        id: 66
                    }, {
                        x: 5,
                        y: 25,
                        id: 66
                    }, {
                        x: 7,
                        y: 17,
                        id: 66
                    }, {
                        x: 7,
                        y: 12,
                        id: 66
                    }, {
                        x: 52,
                        y: 58,
                        id: 66
                    }, {
                        x: 12,
                        y: 47,
                        id: 66
                    }, {
                        x: 19,
                        y: 47,
                        id: 66
                    }, {
                        x: 26,
                        y: 47,
                        id: 66
                    }, {
                        x: 5,
                        y: 47,
                        id: 66
                    }, {
                        x: 5,
                        y: 60,
                        id: 66
                    }, {
                        x: 12,
                        y: 60,
                        id: 66
                    }, {
                        x: 19,
                        y: 60,
                        id: 66
                    }, {
                        x: 26,
                        y: 60,
                        id: 66
                    }, {
                        x: 21,
                        y: 30,
                        id: 66
                    }, {
                        x: 55,
                        y: 53,
                        id: 67
                    }, {
                        x: 55,
                        y: 46,
                        id: 67
                    }, {
                        x: 59,
                        y: 36,
                        id: 67
                    }, {
                        x: 59,
                        y: 29,
                        id: 67
                    }, {
                        x: 59,
                        y: 15,
                        id: 67
                    }, {
                        x: 16,
                        y: 7,
                        id: 67
                    }, {
                        x: 0,
                        y: 22,
                        id: 67
                    }, {
                        x: 0,
                        y: 55,
                        id: 67
                    }, {
                        x: 0,
                        y: 40,
                        id: 67
                    }, {
                        x: 14,
                        y: 17,
                        id: 67
                    }, {
                        x: 39,
                        y: 48,
                        id: 67
                    }, {
                        x: 38,
                        y: 59,
                        id: 67
                    }, {
                        x: 31,
                        y: 10,
                        id: 68
                    }, {
                        x: 55,
                        y: 18,
                        id: 68
                    }, {
                        x: 63,
                        y: 15,
                        id: 68
                    }, {
                        x: 63,
                        y: 56,
                        id: 68
                    }, {
                        x: 49,
                        y: 48,
                        id: 68
                    }, {
                        x: 34,
                        y: 47,
                        id: 68
                    }, {
                        x: 24,
                        y: 40,
                        id: 68
                    }, {
                        x: 24,
                        y: 55,
                        id: 68
                    }, {
                        x: 31,
                        y: 36,
                        id: 68
                    }, {
                        x: 37,
                        y: 13,
                        id: 70
                    }, {
                        x: 38,
                        y: 13,
                        id: 70
                    }, {
                        x: 39,
                        y: 13,
                        id: 70
                    }, {
                        x: 39,
                        y: 12,
                        id: 70
                    }, {
                        x: 38,
                        y: 12,
                        id: 70
                    }, {
                        x: 37,
                        y: 12,
                        id: 70
                    }, {
                        x: 47,
                        y: 12,
                        id: 70
                    }, {
                        x: 47,
                        y: 13,
                        id: 70
                    }, {
                        x: 47,
                        y: 14,
                        id: 70
                    }, {
                        x: 47,
                        y: 15,
                        id: 70
                    }, {
                        x: 48,
                        y: 15,
                        id: 70
                    }, {
                        x: 49,
                        y: 15,
                        id: 70
                    }, {
                        x: 50,
                        y: 15,
                        id: 70
                    }, {
                        x: 51,
                        y: 15,
                        id: 70
                    }, {
                        x: 51,
                        y: 14,
                        id: 70
                    }, {
                        x: 51,
                        y: 13,
                        id: 70
                    }, {
                        x: 51,
                        y: 12,
                        id: 70
                    }, {
                        x: 47,
                        y: 25,
                        id: 70
                    }, {
                        x: 46,
                        y: 25,
                        id: 70
                    }, {
                        x: 45,
                        y: 25,
                        id: 70
                    }, {
                        x: 46,
                        y: 14,
                        id: 31
                    }, {
                        x: 46,
                        y: 15,
                        id: 31
                    }, {
                        x: 45,
                        y: 15,
                        id: 31
                    }, {
                        x: 48,
                        y: 16,
                        id: 31
                    }, {
                        x: 55,
                        y: 14,
                        id: 31
                    }, {
                        x: 55,
                        y: 15,
                        id: 31
                    }, {
                        x: 38,
                        y: 11,
                        id: 31
                    }, {
                        x: 39,
                        y: 11,
                        id: 31
                    }, {
                        x: 38,
                        y: 31,
                        id: 48
                    }, {
                        x: 38,
                        y: 27,
                        id: 53
                    }, {
                        x: 40,
                        y: 31,
                        id: 47
                    }, {
                        x: 40,
                        y: 27,
                        id: 54
                    }, {
                        x: 39,
                        y: 31,
                        id: 45
                    }, {
                        x: 39,
                        y: 27,
                        id: 49
                    }, {
                        x: 40,
                        y: 29,
                        id: 56
                    }, {
                        x: 38,
                        y: 29,
                        id: 62
                    }, {
                        x: 38,
                        y: 28,
                        id: 63
                    }, {
                        x: 38,
                        y: 30,
                        id: 63
                    }, {
                        x: 40,
                        y: 28,
                        id: 57
                    }, {
                        x: 40,
                        y: 30,
                        id: 57
                    }, {
                        x: 39,
                        y: 30,
                        id: 55
                    }, {
                        x: 39,
                        y: 29,
                        id: 55
                    }, {
                        x: 39,
                        y: 28,
                        id: 55
                    }, {
                        x: 41,
                        y: 31,
                        id: 70
                    }, {
                        x: 42,
                        y: 31,
                        id: 70
                    }, {
                        x: 43,
                        y: 31,
                        id: 70
                    }, {
                        x: 41,
                        y: 30,
                        id: 70
                    }, {
                        x: 42,
                        y: 30,
                        id: 70
                    }, {
                        x: 41,
                        y: 29,
                        id: 70
                    }, {
                        x: 42,
                        y: 29,
                        id: 70
                    }, {
                        x: 41,
                        y: 28,
                        id: 70
                    }, {
                        x: 41,
                        y: 27,
                        id: 70
                    }, {
                        x: 42,
                        y: 28,
                        id: 70
                    }, {
                        x: 41,
                        y: 26,
                        id: 70
                    }, {
                        x: 42,
                        y: 27,
                        id: 70
                    }, {
                        x: 43,
                        y: 28,
                        id: 70
                    }, {
                        x: 44,
                        y: 28,
                        id: 70
                    }, {
                        x: 49,
                        y: 16,
                        id: 1
                    }, {
                        x: 50,
                        y: 16,
                        id: 1
                    }, {
                        x: 48,
                        y: 25,
                        id: 1
                    }, {
                        x: 49,
                        y: 25,
                        id: 1
                    }, {
                        x: 50,
                        y: 25,
                        id: 1
                    }, {
                        x: 48,
                        y: 26,
                        id: 1
                    }, {
                        x: 49,
                        y: 26,
                        id: 1
                    }, {
                        x: 50,
                        y: 26,
                        id: 1
                    }, {
                        x: 50,
                        y: 27,
                        id: 1
                    }, {
                        x: 55,
                        y: 36,
                        id: 1
                    }, {
                        x: 54,
                        y: 36,
                        id: 1
                    }, {
                        x: 55,
                        y: 35,
                        id: 1
                    }, {
                        x: 55,
                        y: 34,
                        id: 1
                    }, {
                        x: 42,
                        y: 16,
                        id: 70
                    }, {
                        x: 43,
                        y: 8,
                        id: 70
                    }, {
                        x: 42,
                        y: 8,
                        id: 70
                    }, {
                        x: 41,
                        y: 8,
                        id: 1
                    }, {
                        x: 40,
                        y: 8,
                        id: 1
                    }, {
                        x: 35,
                        y: 8,
                        id: 1
                    }, {
                        x: 55,
                        y: 10,
                        id: 1
                    }, {
                        x: 48,
                        y: 12,
                        id: 53
                    }, {
                        x: 50,
                        y: 12,
                        id: 54
                    }, {
                        x: 48,
                        y: 14,
                        id: 48
                    }, {
                        x: 50,
                        y: 14,
                        id: 47
                    }, {
                        x: 48,
                        y: 13,
                        id: 63
                    }, {
                        x: 50,
                        y: 13,
                        id: 57
                    }, {
                        x: 49,
                        y: 12,
                        id: 50
                    }, {
                        x: 49,
                        y: 14,
                        id: 45
                    }, {
                        x: 49,
                        y: 13,
                        id: 55
                    }, {
                        x: 47,
                        y: 11,
                        id: 70
                    }, {
                        x: 48,
                        y: 11,
                        id: 70
                    }, {
                        x: 49,
                        y: 11,
                        id: 70
                    }, {
                        x: 50,
                        y: 11,
                        id: 70
                    }, {
                        x: 51,
                        y: 11,
                        id: 70
                    }, {
                        x: 55,
                        y: 13,
                        id: 1
                    }, {
                        x: 55,
                        y: 16,
                        id: 1
                    }, {
                        x: 35,
                        y: 15,
                        id: 1
                    }, {
                        x: 35,
                        y: 16,
                        id: 1
                    }, {
                        x: 41,
                        y: 19,
                        id: 1
                    }, {
                        x: 42,
                        y: 19,
                        id: 1
                    }, {
                        x: 37,
                        y: 23,
                        id: 1
                    }, {
                        x: 28,
                        y: 50,
                        id: 70
                    }, {
                        x: 29,
                        y: 50,
                        id: 70
                    }, {
                        x: 29,
                        y: 51,
                        id: 70
                    }, {
                        x: 28,
                        y: 51,
                        id: 70
                    }, {
                        x: 28,
                        y: 52,
                        id: 70
                    }, {
                        x: 29,
                        y: 52,
                        id: 70
                    }, {
                        x: 28,
                        y: 53,
                        id: 70
                    }, {
                        x: 29,
                        y: 53,
                        id: 70
                    }, {
                        x: 17,
                        y: 18,
                        id: 70
                    }, {
                        x: 18,
                        y: 18,
                        id: 70
                    }, {
                        x: 61,
                        y: 36,
                        id: 70
                    }, {
                        x: 61,
                        y: 37,
                        id: 70
                    }],
                    groundTiles: [{
                        x: 27,
                        y: -5,
                        id: 22
                    }, {
                        x: 0,
                        y: 0,
                        id: 41
                    }, {
                        x: 0,
                        y: 1,
                        id: 41
                    }, {
                        x: 2,
                        y: 2,
                        id: 40
                    }, {
                        x: 1,
                        y: 3,
                        id: 40
                    }, {
                        x: 4,
                        y: 1,
                        id: 40
                    }, {
                        x: 1,
                        y: 1,
                        id: 39
                    }, {
                        x: 1,
                        y: 0,
                        id: 39
                    }, {
                        x: 0,
                        y: 2,
                        id: 39
                    }, {
                        x: 1,
                        y: 2,
                        id: 39
                    }, {
                        x: 2,
                        y: 1,
                        id: 39
                    }, {
                        x: 2,
                        y: 0,
                        id: 39
                    }, {
                        x: 4,
                        y: 0,
                        id: 39
                    }, {
                        x: 3,
                        y: 2,
                        id: 39
                    }, {
                        x: 0,
                        y: 3,
                        id: 39
                    }, {
                        x: 0,
                        y: 5,
                        id: 39
                    }, {
                        x: 2,
                        y: 4,
                        id: 39
                    }, {
                        x: 1,
                        y: 6,
                        id: 39
                    }, {
                        x: 0,
                        y: 6,
                        id: 39
                    }, {
                        x: 3,
                        y: 5,
                        id: 39
                    }, {
                        x: 4,
                        y: 4,
                        id: 39
                    }, {
                        x: 5,
                        y: 3,
                        id: 39
                    }, {
                        x: 4,
                        y: 3,
                        id: 39
                    }, {
                        x: 3,
                        y: 3,
                        id: 39
                    }, {
                        x: 5,
                        y: 2,
                        id: 39
                    }, {
                        x: 6,
                        y: 1,
                        id: 39
                    }, {
                        x: 6,
                        y: 0,
                        id: 39
                    }, {
                        x: 7,
                        y: 1,
                        id: 39
                    }, {
                        x: 7,
                        y: 3,
                        id: 39
                    }, {
                        x: 7,
                        y: 2,
                        id: 39
                    }, {
                        x: 7,
                        y: 4,
                        id: 39
                    }, {
                        x: 6,
                        y: 5,
                        id: 39
                    }, {
                        x: 5,
                        y: 5,
                        id: 39
                    }, {
                        x: 4,
                        y: 6,
                        id: 39
                    }, {
                        x: 6,
                        y: 6,
                        id: 39
                    }, {
                        x: 8,
                        y: 6,
                        id: 39
                    }, {
                        x: 8,
                        y: 5,
                        id: 39
                    }, {
                        x: 9,
                        y: 5,
                        id: 39
                    }, {
                        x: 9,
                        y: 4,
                        id: 39
                    }, {
                        x: 9,
                        y: 3,
                        id: 39
                    }, {
                        x: 8,
                        y: 2,
                        id: 39
                    }, {
                        x: 9,
                        y: 1,
                        id: 39
                    }, {
                        x: 10,
                        y: 2,
                        id: 39
                    }, {
                        x: 10,
                        y: 4,
                        id: 39
                    }, {
                        x: 10,
                        y: 5,
                        id: 39
                    }, {
                        x: 10,
                        y: 1,
                        id: 39
                    }, {
                        x: 9,
                        y: 0,
                        id: 39
                    }, {
                        x: 8,
                        y: 0,
                        id: 39
                    }, {
                        x: 11,
                        y: 0,
                        id: 39
                    }, {
                        x: 11,
                        y: 2,
                        id: 39
                    }, {
                        x: 11,
                        y: 4,
                        id: 39
                    }, {
                        x: 11,
                        y: 5,
                        id: 39
                    }, {
                        x: 10,
                        y: 6,
                        id: 39
                    }, {
                        x: 7,
                        y: 5,
                        id: 39
                    }, {
                        x: 6,
                        y: 4,
                        id: 39
                    }, {
                        x: 2,
                        y: 6,
                        id: 41
                    }, {
                        x: 1,
                        y: 5,
                        id: 41
                    }, {
                        x: 2,
                        y: 3,
                        id: 41
                    }, {
                        x: 3,
                        y: 4,
                        id: 41
                    }, {
                        x: 5,
                        y: 4,
                        id: 41
                    }, {
                        x: 6,
                        y: 2,
                        id: 41
                    }, {
                        x: 8,
                        y: 3,
                        id: 41
                    }, {
                        x: 8,
                        y: 1,
                        id: 41
                    }, {
                        x: 10,
                        y: 3,
                        id: 41
                    }, {
                        x: 4,
                        y: 5,
                        id: 40
                    }, {
                        x: 1,
                        y: 4,
                        id: 40
                    }, {
                        x: 0,
                        y: 4,
                        id: 40
                    }, {
                        x: 5,
                        y: 1,
                        id: 40
                    }, {
                        x: 7,
                        y: 0,
                        id: 40
                    }, {
                        x: 8,
                        y: 4,
                        id: 40
                    }, {
                        x: 5,
                        y: 6,
                        id: 40
                    }, {
                        x: 9,
                        y: 6,
                        id: 40
                    }, {
                        x: 11,
                        y: 6,
                        id: 40
                    }, {
                        x: 2,
                        y: 5,
                        id: 39
                    }, {
                        x: 3,
                        y: 6,
                        id: 38
                    }, {
                        x: 3,
                        y: 1,
                        id: 38
                    }, {
                        x: 3,
                        y: 0,
                        id: 38
                    }, {
                        x: 4,
                        y: 2,
                        id: 38
                    }, {
                        x: 5,
                        y: 0,
                        id: 38
                    }, {
                        x: 6,
                        y: 3,
                        id: 38
                    }, {
                        x: 9,
                        y: 2,
                        id: 38
                    }, {
                        x: 11,
                        y: 1,
                        id: 38
                    }, {
                        x: 10,
                        y: 0,
                        id: 38
                    }, {
                        x: 11,
                        y: 3,
                        id: 38
                    }, {
                        x: 7,
                        y: 6,
                        id: 38
                    }, {
                        x: 0,
                        y: 7,
                        id: 41
                    }, {
                        x: 1,
                        y: 7,
                        id: 41
                    }, {
                        x: 5,
                        y: 7,
                        id: 41
                    }, {
                        x: 6,
                        y: 7,
                        id: 41
                    }, {
                        x: 8,
                        y: 7,
                        id: 41
                    }, {
                        x: 10,
                        y: 7,
                        id: 41
                    }, {
                        x: 2,
                        y: 7,
                        id: 38
                    }, {
                        x: 3,
                        y: 7,
                        id: 38
                    }, {
                        x: 4,
                        y: 7,
                        id: 38
                    }, {
                        x: 7,
                        y: 7,
                        id: 38
                    }, {
                        x: 9,
                        y: 7,
                        id: 38
                    }, {
                        x: 11,
                        y: 7,
                        id: 38
                    }, {
                        x: 1,
                        y: 18,
                        id: 34
                    }, {
                        x: 2,
                        y: 18,
                        id: 34
                    }, {
                        x: 2,
                        y: 21,
                        id: 34
                    }, {
                        x: 4,
                        y: 23,
                        id: 34
                    }, {
                        x: 7,
                        y: 26,
                        id: 34
                    }, {
                        x: 4,
                        y: 26,
                        id: 34
                    }, {
                        x: 1,
                        y: 26,
                        id: 34
                    }, {
                        x: 1,
                        y: 29,
                        id: 34
                    }, {
                        x: 4,
                        y: 29,
                        id: 34
                    }, {
                        x: 7,
                        y: 29,
                        id: 34
                    }, {
                        x: 9,
                        y: 29,
                        id: 34
                    }, {
                        x: 9,
                        y: 26,
                        id: 34
                    }, {
                        x: 7,
                        y: 24,
                        id: 34
                    }, {
                        x: 9,
                        y: 24,
                        id: 34
                    }, {
                        x: 6,
                        y: 22,
                        id: 34
                    }, {
                        x: 9,
                        y: 20,
                        id: 34
                    }, {
                        x: 5,
                        y: 19,
                        id: 34
                    }, {
                        x: 7,
                        y: 19,
                        id: 34
                    }, {
                        x: 5,
                        y: 20,
                        id: 34
                    }, {
                        x: 4,
                        y: 21,
                        id: 34
                    }, {
                        x: 9,
                        y: 18,
                        id: 34
                    }, {
                        x: 6,
                        y: 18,
                        id: 34
                    }, {
                        x: 3,
                        y: 24,
                        id: 37
                    }, {
                        x: 3,
                        y: 28,
                        id: 37
                    }, {
                        x: 6,
                        y: 27,
                        id: 37
                    }, {
                        x: 8,
                        y: 22,
                        id: 37
                    }, {
                        x: 7,
                        y: 20,
                        id: 37
                    }, {
                        x: 3,
                        y: 19,
                        id: 37
                    }, {
                        x: 2,
                        y: 22,
                        id: 35
                    }, {
                        x: 1,
                        y: 20,
                        id: 35
                    }, {
                        x: 1,
                        y: 24,
                        id: 35
                    }, {
                        x: 1,
                        y: 27,
                        id: 35
                    }, {
                        x: 5,
                        y: 25,
                        id: 35
                    }, {
                        x: 6,
                        y: 24,
                        id: 35
                    }, {
                        x: 8,
                        y: 23,
                        id: 35
                    }, {
                        x: 9,
                        y: 21,
                        id: 35
                    }, {
                        x: 7,
                        y: 18,
                        id: 35
                    }, {
                        x: 4,
                        y: 18,
                        id: 35
                    }, {
                        x: 8,
                        y: 28,
                        id: 35
                    }, {
                        x: 16,
                        y: 30,
                        id: 33
                    }, {
                        x: 17,
                        y: 30,
                        id: 33
                    }, {
                        x: 18,
                        y: 30,
                        id: 33
                    }, {
                        x: 19,
                        y: 30,
                        id: 33
                    }, {
                        x: 21,
                        y: 30,
                        id: 32
                    }, {
                        x: 23,
                        y: 30,
                        id: 32
                    }, {
                        x: 25,
                        y: 30,
                        id: 32
                    }, {
                        x: 27,
                        y: 30,
                        id: 32
                    }, {
                        x: 29,
                        y: 30,
                        id: 32
                    }, {
                        x: 30,
                        y: 29,
                        id: 32
                    }, {
                        x: 29,
                        y: 28,
                        id: 32
                    }, {
                        x: 30,
                        y: 27,
                        id: 32
                    }, {
                        x: 31,
                        y: 25,
                        id: 32
                    }, {
                        x: 30,
                        y: 25,
                        id: 32
                    }, {
                        x: 29,
                        y: 24,
                        id: 32
                    }, {
                        x: 30,
                        y: 23,
                        id: 32
                    }, {
                        x: 30,
                        y: 22,
                        id: 32
                    }, {
                        x: 29,
                        y: 21,
                        id: 32
                    }, {
                        x: 30,
                        y: 20,
                        id: 32
                    }, {
                        x: 29,
                        y: 20,
                        id: 32
                    }, {
                        x: 31,
                        y: 21,
                        id: 32
                    }, {
                        x: 29,
                        y: 26,
                        id: 32
                    }, {
                        x: 31,
                        y: 30,
                        id: 32
                    }, {
                        x: 20,
                        y: 30,
                        id: 33
                    }, {
                        x: 22,
                        y: 30,
                        id: 33
                    }, {
                        x: 24,
                        y: 30,
                        id: 33
                    }, {
                        x: 26,
                        y: 30,
                        id: 33
                    }, {
                        x: 28,
                        y: 30,
                        id: 33
                    }, {
                        x: 29,
                        y: 29,
                        id: 33
                    }, {
                        x: 30,
                        y: 30,
                        id: 33
                    }, {
                        x: 31,
                        y: 29,
                        id: 33
                    }, {
                        x: 31,
                        y: 28,
                        id: 33
                    }, {
                        x: 30,
                        y: 28,
                        id: 33
                    }, {
                        x: 29,
                        y: 27,
                        id: 33
                    }, {
                        x: 31,
                        y: 27,
                        id: 33
                    }, {
                        x: 30,
                        y: 26,
                        id: 33
                    }, {
                        x: 31,
                        y: 26,
                        id: 33
                    }, {
                        x: 29,
                        y: 25,
                        id: 33
                    }, {
                        x: 30,
                        y: 24,
                        id: 33
                    }, {
                        x: 31,
                        y: 24,
                        id: 33
                    }, {
                        x: 29,
                        y: 23,
                        id: 33
                    }, {
                        x: 29,
                        y: 22,
                        id: 33
                    }, {
                        x: 31,
                        y: 23,
                        id: 33
                    }, {
                        x: 31,
                        y: 22,
                        id: 33
                    }, {
                        x: 30,
                        y: 21,
                        id: 33
                    }, {
                        x: 31,
                        y: 20,
                        id: 33
                    }, {
                        x: 31,
                        y: 17,
                        id: 33
                    }, {
                        x: 31,
                        y: 16,
                        id: 33
                    }, {
                        x: 31,
                        y: 15,
                        id: 33
                    }, {
                        x: 31,
                        y: 14,
                        id: 33
                    }, {
                        x: 31,
                        y: 13,
                        id: 33
                    }, {
                        x: 10,
                        y: 12,
                        id: 20
                    }, {
                        x: 4,
                        y: 12,
                        id: 20
                    }, {
                        x: 14,
                        y: 3,
                        id: 20
                    }, {
                        x: 23,
                        y: 0,
                        id: 20
                    }, {
                        x: 30,
                        y: 3,
                        id: 20
                    }, {
                        x: 29,
                        y: 8,
                        id: 20
                    }, {
                        x: 22,
                        y: 6,
                        id: 21
                    }, {
                        x: 22,
                        y: 7,
                        id: 21
                    }, {
                        x: 23,
                        y: 9,
                        id: 21
                    }, {
                        x: 24,
                        y: 10,
                        id: 21
                    }, {
                        x: 24,
                        y: 9,
                        id: 21
                    }, {
                        x: 25,
                        y: 8,
                        id: 21
                    }, {
                        x: 24,
                        y: 7,
                        id: 21
                    }, {
                        x: 24,
                        y: 6,
                        id: 21
                    }, {
                        x: 25,
                        y: 7,
                        id: 21
                    }, {
                        x: 25,
                        y: 6,
                        id: 21
                    }, {
                        x: 23,
                        y: 8,
                        id: 22
                    }, {
                        x: 24,
                        y: 8,
                        id: 22
                    }, {
                        x: 25,
                        y: 10,
                        id: 22
                    }, {
                        x: 22,
                        y: 8,
                        id: 21
                    }, {
                        x: 22,
                        y: 9,
                        id: 21
                    }, {
                        x: 22,
                        y: 10,
                        id: 21
                    }, {
                        x: 23,
                        y: 10,
                        id: 21
                    }, {
                        x: 23,
                        y: 7,
                        id: 21
                    }, {
                        x: 23,
                        y: 6,
                        id: 21
                    }, {
                        x: 25,
                        y: 9,
                        id: 21
                    }, {
                        x: 11,
                        y: 30,
                        id: 34
                    }, {
                        x: 12,
                        y: 30,
                        id: 34
                    }, {
                        x: 13,
                        y: 30,
                        id: 34
                    }, {
                        x: 14,
                        y: 30,
                        id: 34
                    }, {
                        x: 14,
                        y: 29,
                        id: 34
                    }, {
                        x: 14,
                        y: 28,
                        id: 34
                    }, {
                        x: 14,
                        y: 27,
                        id: 34
                    }, {
                        x: 14,
                        y: 26,
                        id: 34
                    }, {
                        x: 14,
                        y: 25,
                        id: 35
                    }, {
                        x: 14,
                        y: 23,
                        id: 35
                    }, {
                        x: 14,
                        y: 22,
                        id: 35
                    }, {
                        x: 14,
                        y: 19,
                        id: 35
                    }, {
                        x: 14,
                        y: 17,
                        id: 35
                    }, {
                        x: 14,
                        y: 15,
                        id: 35
                    }, {
                        x: 14,
                        y: 14,
                        id: 35
                    }, {
                        x: 14,
                        y: 13,
                        id: 35
                    }, {
                        x: 14,
                        y: 16,
                        id: 35
                    }, {
                        x: 14,
                        y: 18,
                        id: 35
                    }, {
                        x: 14,
                        y: 20,
                        id: 34
                    }, {
                        x: 14,
                        y: 21,
                        id: 34
                    }, {
                        x: 14,
                        y: 24,
                        id: 34
                    }, {
                        x: 10,
                        y: 30,
                        id: 34
                    }, {
                        x: 10,
                        y: 29,
                        id: 34
                    }, {
                        x: 10,
                        y: 28,
                        id: 34
                    }, {
                        x: 10,
                        y: 26,
                        id: 34
                    }, {
                        x: 10,
                        y: 24,
                        id: 34
                    }, {
                        x: 10,
                        y: 23,
                        id: 34
                    }, {
                        x: 10,
                        y: 21,
                        id: 34
                    }, {
                        x: 10,
                        y: 19,
                        id: 34
                    }, {
                        x: 10,
                        y: 18,
                        id: 34
                    }, {
                        x: 9,
                        y: 17,
                        id: 34
                    }, {
                        x: 8,
                        y: 17,
                        id: 34
                    }, {
                        x: 6,
                        y: 17,
                        id: 34
                    }, {
                        x: 4,
                        y: 17,
                        id: 34
                    }, {
                        x: 2,
                        y: 17,
                        id: 34
                    }, {
                        x: 1,
                        y: 17,
                        id: 34
                    }, {
                        x: 1,
                        y: 15,
                        id: 34
                    }, {
                        x: 1,
                        y: 15,
                        id: 34
                    }, {
                        x: 1,
                        y: 14,
                        id: 34
                    }, {
                        x: 1,
                        y: 13,
                        id: 34
                    }, {
                        x: 1,
                        y: 16,
                        id: 34
                    }, {
                        x: 3,
                        y: 17,
                        id: 37
                    }, {
                        x: 5,
                        y: 17,
                        id: 37
                    }, {
                        x: 7,
                        y: 17,
                        id: 37
                    }, {
                        x: 10,
                        y: 17,
                        id: 37
                    }, {
                        x: 10,
                        y: 20,
                        id: 37
                    }, {
                        x: 10,
                        y: 22,
                        id: 37
                    }, {
                        x: 10,
                        y: 25,
                        id: 37
                    }, {
                        x: 10,
                        y: 27,
                        id: 37
                    }, {
                        x: 5,
                        y: 18,
                        id: 37
                    }, {
                        x: 8,
                        y: 19,
                        id: 37
                    }, {
                        x: 8,
                        y: 18,
                        id: 37
                    }, {
                        x: 8,
                        y: 20,
                        id: 37
                    }, {
                        x: 8,
                        y: 21,
                        id: 36
                    }, {
                        x: 6,
                        y: 19,
                        id: 36
                    }, {
                        x: 6,
                        y: 21,
                        id: 36
                    }, {
                        x: 7,
                        y: 23,
                        id: 36
                    }, {
                        x: 9,
                        y: 22,
                        id: 36
                    }, {
                        x: 4,
                        y: 19,
                        id: 36
                    }, {
                        x: 4,
                        y: 20,
                        id: 36
                    }, {
                        x: 2,
                        y: 19,
                        id: 36
                    }, {
                        x: 5,
                        y: 22,
                        id: 36
                    }, {
                        x: 5,
                        y: 21,
                        id: 36
                    }, {
                        x: 6,
                        y: 23,
                        id: 36
                    }, {
                        x: 8,
                        y: 24,
                        id: 36
                    }, {
                        x: 8,
                        y: 25,
                        id: 36
                    }, {
                        x: 6,
                        y: 25,
                        id: 36
                    }, {
                        x: 9,
                        y: 27,
                        id: 36
                    }, {
                        x: 5,
                        y: 26,
                        id: 36
                    }, {
                        x: 4,
                        y: 24,
                        id: 36
                    }, {
                        x: 3,
                        y: 23,
                        id: 36
                    }, {
                        x: 3,
                        y: 21,
                        id: 36
                    }, {
                        x: 3,
                        y: 22,
                        id: 36
                    }, {
                        x: 4,
                        y: 22,
                        id: 36
                    }, {
                        x: 3,
                        y: 20,
                        id: 36
                    }, {
                        x: 3,
                        y: 26,
                        id: 36
                    }, {
                        x: 4,
                        y: 27,
                        id: 36
                    }, {
                        x: 15,
                        y: 17,
                        id: 36
                    }, {
                        x: 15,
                        y: 23,
                        id: 35
                    }, {
                        x: 16,
                        y: 24,
                        id: 35
                    }, {
                        x: 18,
                        y: 6,
                        id: 20
                    }, {
                        x: 20,
                        y: 12,
                        id: 19
                    }, {
                        x: 23,
                        y: 12,
                        id: 19
                    }, {
                        x: 30,
                        y: 10,
                        id: 19
                    }, {
                        x: 17,
                        y: 13,
                        id: 19
                    }, {
                        x: 6,
                        y: 20,
                        id: 19
                    }, {
                        x: 1,
                        y: 22,
                        id: 19
                    }, {
                        x: 2,
                        y: 27,
                        id: 19
                    }, {
                        x: 15,
                        y: 28,
                        id: 19
                    }, {
                        x: 17,
                        y: 31,
                        id: 33
                    }, {
                        x: 18,
                        y: 31,
                        id: 33
                    }, {
                        x: 20,
                        y: 31,
                        id: 33
                    }, {
                        x: 22,
                        y: 31,
                        id: 33
                    }, {
                        x: 24,
                        y: 31,
                        id: 33
                    }, {
                        x: 29,
                        y: 31,
                        id: 33
                    }, {
                        x: 19,
                        y: 31,
                        id: 32
                    }, {
                        x: 21,
                        y: 31,
                        id: 32
                    }, {
                        x: 23,
                        y: 31,
                        id: 32
                    }, {
                        x: 28,
                        y: 31,
                        id: 32
                    }, {
                        x: 30,
                        y: 31,
                        id: 32
                    }, {
                        x: 31,
                        y: 31,
                        id: 32
                    }, {
                        x: 30,
                        y: 32,
                        id: 32
                    }, {
                        x: 31,
                        y: 32,
                        id: 32
                    }, {
                        x: 31,
                        y: 33,
                        id: 32
                    }, {
                        x: 35,
                        y: 11,
                        id: 22
                    }, {
                        x: 35,
                        y: 10,
                        id: 22
                    }, {
                        x: 35,
                        y: 12,
                        id: 21
                    }, {
                        x: 36,
                        y: 12,
                        id: 21
                    }, {
                        x: 37,
                        y: 12,
                        id: 21
                    }, {
                        x: 38,
                        y: 12,
                        id: 21
                    }, {
                        x: 39,
                        y: 12,
                        id: 21
                    }, {
                        x: 41,
                        y: 11,
                        id: 21
                    }, {
                        x: 43,
                        y: 12,
                        id: 21
                    }, {
                        x: 44,
                        y: 11,
                        id: 21
                    }, {
                        x: 46,
                        y: 11,
                        id: 21
                    }, {
                        x: 46,
                        y: 12,
                        id: 21
                    }, {
                        x: 47,
                        y: 13,
                        id: 21
                    }, {
                        x: 48,
                        y: 12,
                        id: 21
                    }, {
                        x: 51,
                        y: 12,
                        id: 21
                    }, {
                        x: 52,
                        y: 11,
                        id: 21
                    }, {
                        x: 53,
                        y: 10,
                        id: 21
                    }, {
                        x: 52,
                        y: 9,
                        id: 21
                    }, {
                        x: 51,
                        y: 8,
                        id: 21
                    }, {
                        x: 50,
                        y: 9,
                        id: 21
                    }, {
                        x: 49,
                        y: 8,
                        id: 21
                    }, {
                        x: 48,
                        y: 9,
                        id: 21
                    }, {
                        x: 47,
                        y: 8,
                        id: 21
                    }, {
                        x: 46,
                        y: 9,
                        id: 21
                    }, {
                        x: 45,
                        y: 8,
                        id: 21
                    }, {
                        x: 46,
                        y: 7,
                        id: 21
                    }, {
                        x: 45,
                        y: 6,
                        id: 21
                    }, {
                        x: 46,
                        y: 5,
                        id: 21
                    }, {
                        x: 45,
                        y: 4,
                        id: 21
                    }, {
                        x: 46,
                        y: 3,
                        id: 21
                    }, {
                        x: 44,
                        y: 9,
                        id: 21
                    }, {
                        x: 43,
                        y: 8,
                        id: 21
                    }, {
                        x: 42,
                        y: 9,
                        id: 21
                    }, {
                        x: 40,
                        y: 9,
                        id: 21
                    }, {
                        x: 39,
                        y: 8,
                        id: 21
                    }, {
                        x: 38,
                        y: 9,
                        id: 21
                    }, {
                        x: 37,
                        y: 8,
                        id: 21
                    }, {
                        x: 36,
                        y: 9,
                        id: 21
                    }, {
                        x: 35,
                        y: 8,
                        id: 21
                    }, {
                        x: 37,
                        y: 11,
                        id: 21
                    }, {
                        x: 39,
                        y: 11,
                        id: 22
                    }, {
                        x: 41,
                        y: 8,
                        id: 22
                    }, {
                        x: 41,
                        y: 10,
                        id: 22
                    }, {
                        x: 41,
                        y: 12,
                        id: 22
                    }, {
                        x: 49,
                        y: 11,
                        id: 22
                    }, {
                        x: 53,
                        y: 12,
                        id: 22
                    }, {
                        x: 54,
                        y: 11,
                        id: 22
                    }, {
                        x: 54,
                        y: 9,
                        id: 22
                    }, {
                        x: 53,
                        y: 8,
                        id: 22
                    }, {
                        x: 55,
                        y: 12,
                        id: 22
                    }, {
                        x: 55,
                        y: 10,
                        id: 22
                    }, {
                        x: 47,
                        y: 11,
                        id: 22
                    }, {
                        x: 28,
                        y: 35,
                        id: 33
                    }, {
                        x: 29,
                        y: 36,
                        id: 33
                    }, {
                        x: 30,
                        y: 37,
                        id: 33
                    }, {
                        x: 31,
                        y: 38,
                        id: 33
                    }, {
                        x: 30,
                        y: 36,
                        id: 33
                    }, {
                        x: 30,
                        y: 35,
                        id: 33
                    }, {
                        x: 29,
                        y: 34,
                        id: 33
                    }, {
                        x: 30,
                        y: 33,
                        id: 33
                    }, {
                        x: 28,
                        y: 33,
                        id: 33
                    }, {
                        x: 29,
                        y: 33,
                        id: 33
                    }, {
                        x: 31,
                        y: 35,
                        id: 33
                    }, {
                        x: 31,
                        y: 36,
                        id: 33
                    }, {
                        x: 28,
                        y: 32,
                        id: 32
                    }, {
                        x: 29,
                        y: 32,
                        id: 32
                    }, {
                        x: 28,
                        y: 34,
                        id: 32
                    }, {
                        x: 29,
                        y: 35,
                        id: 32
                    }, {
                        x: 30,
                        y: 34,
                        id: 32
                    }, {
                        x: 31,
                        y: 34,
                        id: 32
                    }, {
                        x: 31,
                        y: 37,
                        id: 32
                    }, {
                        x: 24,
                        y: 32,
                        id: 32
                    }, {
                        x: 23,
                        y: 32,
                        id: 32
                    }, {
                        x: 24,
                        y: 33,
                        id: 32
                    }, {
                        x: 59,
                        y: 26,
                        id: 39
                    }, {
                        x: 60,
                        y: 26,
                        id: 39
                    }, {
                        x: 61,
                        y: 26,
                        id: 39
                    }, {
                        x: 62,
                        y: 26,
                        id: 39
                    }, {
                        x: 63,
                        y: 26,
                        id: 39
                    }, {
                        x: 63,
                        y: 27,
                        id: 39
                    }, {
                        x: 62,
                        y: 27,
                        id: 39
                    }, {
                        x: 61,
                        y: 27,
                        id: 39
                    }, {
                        x: 60,
                        y: 27,
                        id: 39
                    }, {
                        x: 59,
                        y: 28,
                        id: 39
                    }, {
                        x: 60,
                        y: 28,
                        id: 39
                    }, {
                        x: 60,
                        y: 29,
                        id: 39
                    }, {
                        x: 61,
                        y: 29,
                        id: 39
                    }, {
                        x: 61,
                        y: 28,
                        id: 39
                    }, {
                        x: 63,
                        y: 29,
                        id: 39
                    }, {
                        x: 63,
                        y: 30,
                        id: 39
                    }, {
                        x: 62,
                        y: 30,
                        id: 39
                    }, {
                        x: 60,
                        y: 30,
                        id: 39
                    }, {
                        x: 60,
                        y: 30,
                        id: 39
                    }, {
                        x: 61,
                        y: 31,
                        id: 39
                    }, {
                        x: 60,
                        y: 31,
                        id: 39
                    }, {
                        x: 60,
                        y: 32,
                        id: 39
                    }, {
                        x: 59,
                        y: 32,
                        id: 39
                    }, {
                        x: 59,
                        y: 31,
                        id: 39
                    }, {
                        x: 62,
                        y: 31,
                        id: 39
                    }, {
                        x: 63,
                        y: 32,
                        id: 39
                    }, {
                        x: 62,
                        y: 32,
                        id: 39
                    }, {
                        x: 62,
                        y: 33,
                        id: 39
                    }, {
                        x: 63,
                        y: 34,
                        id: 39
                    }, {
                        x: 60,
                        y: 34,
                        id: 39
                    }, {
                        x: 61,
                        y: 34,
                        id: 39
                    }, {
                        x: 61,
                        y: 35,
                        id: 39
                    }, {
                        x: 62,
                        y: 35,
                        id: 39
                    }, {
                        x: 63,
                        y: 35,
                        id: 39
                    }, {
                        x: 63,
                        y: 36,
                        id: 39
                    }, {
                        x: 62,
                        y: 36,
                        id: 39
                    }, {
                        x: 60,
                        y: 36,
                        id: 39
                    }, {
                        x: 60,
                        y: 37,
                        id: 39
                    }, {
                        x: 62,
                        y: 37,
                        id: 39
                    }, {
                        x: 63,
                        y: 37,
                        id: 39
                    }, {
                        x: 63,
                        y: 38,
                        id: 39
                    }, {
                        x: 62,
                        y: 38,
                        id: 39
                    }, {
                        x: 61,
                        y: 38,
                        id: 39
                    }, {
                        x: 60,
                        y: 38,
                        id: 39
                    }, {
                        x: 59,
                        y: 38,
                        id: 39
                    }, {
                        x: 59,
                        y: 36,
                        id: 39
                    }, {
                        x: 58,
                        y: 40,
                        id: 39
                    }, {
                        x: 59,
                        y: 41,
                        id: 39
                    }, {
                        x: 60,
                        y: 40,
                        id: 39
                    }, {
                        x: 61,
                        y: 41,
                        id: 39
                    }, {
                        x: 62,
                        y: 40,
                        id: 39
                    }, {
                        x: 61,
                        y: 40,
                        id: 39
                    }, {
                        x: 61,
                        y: 39,
                        id: 39
                    }, {
                        x: 60,
                        y: 39,
                        id: 39
                    }, {
                        x: 60,
                        y: 41,
                        id: 39
                    }, {
                        x: 61,
                        y: 42,
                        id: 39
                    }, {
                        x: 62,
                        y: 42,
                        id: 39
                    }, {
                        x: 63,
                        y: 41,
                        id: 39
                    }, {
                        x: 63,
                        y: 40,
                        id: 39
                    }, {
                        x: 63,
                        y: 43,
                        id: 39
                    }, {
                        x: 63,
                        y: 44,
                        id: 39
                    }, {
                        x: 62,
                        y: 44,
                        id: 39
                    }, {
                        x: 62,
                        y: 43,
                        id: 39
                    }, {
                        x: 61,
                        y: 43,
                        id: 39
                    }, {
                        x: 60,
                        y: 43,
                        id: 39
                    }, {
                        x: 59,
                        y: 43,
                        id: 39
                    }, {
                        x: 58,
                        y: 43,
                        id: 39
                    }, {
                        x: 57,
                        y: 43,
                        id: 39
                    }, {
                        x: 57,
                        y: 42,
                        id: 39
                    }, {
                        x: 58,
                        y: 42,
                        id: 39
                    }, {
                        x: 58,
                        y: 44,
                        id: 39
                    }, {
                        x: 59,
                        y: 45,
                        id: 39
                    }, {
                        x: 59,
                        y: 44,
                        id: 39
                    }, {
                        x: 62,
                        y: 45,
                        id: 39
                    }, {
                        x: 60,
                        y: 45,
                        id: 39
                    }, {
                        x: 58,
                        y: 45,
                        id: 39
                    }, {
                        x: 57,
                        y: 45,
                        id: 39
                    }, {
                        x: 56,
                        y: 45,
                        id: 39
                    }, {
                        x: 56,
                        y: 44,
                        id: 39
                    }, {
                        x: 56,
                        y: 43,
                        id: 39
                    }, {
                        x: 56,
                        y: 46,
                        id: 39
                    }, {
                        x: 56,
                        y: 47,
                        id: 39
                    }, {
                        x: 57,
                        y: 47,
                        id: 39
                    }, {
                        x: 57,
                        y: 48,
                        id: 39
                    }, {
                        x: 58,
                        y: 48,
                        id: 39
                    }, {
                        x: 58,
                        y: 47,
                        id: 39
                    }, {
                        x: 58,
                        y: 46,
                        id: 39
                    }, {
                        x: 59,
                        y: 46,
                        id: 39
                    }, {
                        x: 61,
                        y: 46,
                        id: 39
                    }, {
                        x: 62,
                        y: 46,
                        id: 39
                    }, {
                        x: 55,
                        y: 47,
                        id: 39
                    }, {
                        x: 55,
                        y: 45,
                        id: 39
                    }, {
                        x: 57,
                        y: 49,
                        id: 39
                    }, {
                        x: 57,
                        y: 50,
                        id: 39
                    }, {
                        x: 56,
                        y: 50,
                        id: 39
                    }, {
                        x: 56,
                        y: 51,
                        id: 39
                    }, {
                        x: 57,
                        y: 51,
                        id: 39
                    }, {
                        x: 58,
                        y: 52,
                        id: 39
                    }, {
                        x: 57,
                        y: 52,
                        id: 39
                    }, {
                        x: 56,
                        y: 52,
                        id: 39
                    }, {
                        x: 55,
                        y: 53,
                        id: 39
                    }, {
                        x: 56,
                        y: 53,
                        id: 39
                    }, {
                        x: 57,
                        y: 53,
                        id: 39
                    }, {
                        x: 58,
                        y: 53,
                        id: 39
                    }, {
                        x: 58,
                        y: 54,
                        id: 39
                    }, {
                        x: 57,
                        y: 54,
                        id: 39
                    }, {
                        x: 56,
                        y: 54,
                        id: 39
                    }, {
                        x: 56,
                        y: 55,
                        id: 39
                    }, {
                        x: 55,
                        y: 55,
                        id: 39
                    }, {
                        x: 57,
                        y: 55,
                        id: 39
                    }, {
                        x: 58,
                        y: 56,
                        id: 39
                    }, {
                        x: 57,
                        y: 56,
                        id: 39
                    }, {
                        x: 56,
                        y: 56,
                        id: 39
                    }, {
                        x: 55,
                        y: 56,
                        id: 39
                    }, {
                        x: 50,
                        y: 58,
                        id: 39
                    }, {
                        x: 50,
                        y: 60,
                        id: 39
                    }, {
                        x: 51,
                        y: 61,
                        id: 39
                    }, {
                        x: 50,
                        y: 61,
                        id: 39
                    }, {
                        x: 52,
                        y: 61,
                        id: 39
                    }, {
                        x: 52,
                        y: 60,
                        id: 39
                    }, {
                        x: 52,
                        y: 59,
                        id: 39
                    }, {
                        x: 53,
                        y: 59,
                        id: 39
                    }, {
                        x: 54,
                        y: 61,
                        id: 39
                    }, {
                        x: 56,
                        y: 61,
                        id: 39
                    }, {
                        x: 55,
                        y: 60,
                        id: 39
                    }, {
                        x: 55,
                        y: 59,
                        id: 39
                    }, {
                        x: 56,
                        y: 59,
                        id: 39
                    }, {
                        x: 56,
                        y: 60,
                        id: 39
                    }, {
                        x: 57,
                        y: 60,
                        id: 39
                    }, {
                        x: 57,
                        y: 59,
                        id: 39
                    }, {
                        x: 57,
                        y: 58,
                        id: 39
                    }, {
                        x: 56,
                        y: 58,
                        id: 39
                    }, {
                        x: 56,
                        y: 57,
                        id: 39
                    }, {
                        x: 56,
                        y: 48,
                        id: 39
                    }, {
                        x: 55,
                        y: 49,
                        id: 39
                    }, {
                        x: 56,
                        y: 49,
                        id: 39
                    }, {
                        x: 55,
                        y: 48,
                        id: 39
                    }, {
                        x: 61,
                        y: 45,
                        id: 39
                    }, {
                        x: 61,
                        y: 44,
                        id: 39
                    }, {
                        x: 53,
                        y: 62,
                        id: 39
                    }, {
                        x: 52,
                        y: 62,
                        id: 39
                    }, {
                        x: 50,
                        y: 62,
                        id: 39
                    }, {
                        x: 55,
                        y: 62,
                        id: 39
                    }, {
                        x: 56,
                        y: 62,
                        id: 39
                    }, {
                        x: 58,
                        y: 62,
                        id: 39
                    }, {
                        x: 59,
                        y: 62,
                        id: 39
                    }, {
                        x: 60,
                        y: 62,
                        id: 39
                    }, {
                        x: 62,
                        y: 62,
                        id: 39
                    }, {
                        x: 62,
                        y: 62,
                        id: 39
                    }, {
                        x: 63,
                        y: 61,
                        id: 39
                    }, {
                        x: 62,
                        y: 61,
                        id: 39
                    }, {
                        x: 62,
                        y: 59,
                        id: 39
                    }, {
                        x: 63,
                        y: 60,
                        id: 39
                    }, {
                        x: 63,
                        y: 58,
                        id: 39
                    }, {
                        x: 62,
                        y: 58,
                        id: 39
                    }, {
                        x: 62,
                        y: 57,
                        id: 39
                    }, {
                        x: 63,
                        y: 56,
                        id: 39
                    }, {
                        x: 62,
                        y: 55,
                        id: 39
                    }, {
                        x: 63,
                        y: 55,
                        id: 39
                    }, {
                        x: 62,
                        y: 54,
                        id: 39
                    }, {
                        x: 63,
                        y: 54,
                        id: 39
                    }, {
                        x: 62,
                        y: 53,
                        id: 39
                    }, {
                        x: 63,
                        y: 52,
                        id: 39
                    }, {
                        x: 62,
                        y: 51,
                        id: 39
                    }, {
                        x: 54,
                        y: 58,
                        id: 39
                    }, {
                        x: 54,
                        y: 58,
                        id: 39
                    }, {
                        x: 52,
                        y: 58,
                        id: 39
                    }, {
                        x: 52,
                        y: 58,
                        id: 39
                    }, {
                        x: 54,
                        y: 60,
                        id: 39
                    }, {
                        x: 53,
                        y: 60,
                        id: 39
                    }, {
                        x: 51,
                        y: 59,
                        id: 39
                    }, {
                        x: 58,
                        y: 58,
                        id: 39
                    }, {
                        x: 58,
                        y: 59,
                        id: 39
                    }, {
                        x: 58,
                        y: 60,
                        id: 39
                    }, {
                        x: 53,
                        y: 61,
                        id: 41
                    }, {
                        x: 54,
                        y: 59,
                        id: 41
                    }, {
                        x: 55,
                        y: 58,
                        id: 41
                    }, {
                        x: 55,
                        y: 54,
                        id: 41
                    }, {
                        x: 55,
                        y: 51,
                        id: 41
                    }, {
                        x: 58,
                        y: 50,
                        id: 41
                    }, {
                        x: 57,
                        y: 46,
                        id: 41
                    }, {
                        x: 57,
                        y: 44,
                        id: 41
                    }, {
                        x: 57,
                        y: 41,
                        id: 41
                    }, {
                        x: 59,
                        y: 40,
                        id: 41
                    }, {
                        x: 63,
                        y: 39,
                        id: 41
                    }, {
                        x: 63,
                        y: 31,
                        id: 41
                    }, {
                        x: 61,
                        y: 30,
                        id: 41
                    }, {
                        x: 59,
                        y: 27,
                        id: 41
                    }, {
                        x: 59,
                        y: 29,
                        id: 41
                    }, {
                        x: 61,
                        y: 36,
                        id: 41
                    }, {
                        x: 62,
                        y: 39,
                        id: 41
                    }, {
                        x: 58,
                        y: 51,
                        id: 39
                    }, {
                        x: 55,
                        y: 50,
                        id: 40
                    }, {
                        x: 58,
                        y: 49,
                        id: 40
                    }, {
                        x: 55,
                        y: 46,
                        id: 40
                    }, {
                        x: 55,
                        y: 44,
                        id: 40
                    }, {
                        x: 55,
                        y: 43,
                        id: 40
                    }, {
                        x: 60,
                        y: 42,
                        id: 40
                    }, {
                        x: 59,
                        y: 42,
                        id: 40
                    }, {
                        x: 60,
                        y: 44,
                        id: 40
                    }, {
                        x: 62,
                        y: 41,
                        id: 40
                    }, {
                        x: 51,
                        y: 60,
                        id: 40
                    }, {
                        x: 55,
                        y: 61,
                        id: 40
                    }, {
                        x: 57,
                        y: 61,
                        id: 40
                    }, {
                        x: 58,
                        y: 61,
                        id: 40
                    }, {
                        x: 62,
                        y: 56,
                        id: 40
                    }, {
                        x: 63,
                        y: 57,
                        id: 40
                    }, {
                        x: 63,
                        y: 53,
                        id: 40
                    }, {
                        x: 54,
                        y: 62,
                        id: 41
                    }, {
                        x: 51,
                        y: 62,
                        id: 41
                    }, {
                        x: 51,
                        y: 58,
                        id: 41
                    }, {
                        x: 53,
                        y: 58,
                        id: 41
                    }, {
                        x: 55,
                        y: 57,
                        id: 41
                    }, {
                        x: 57,
                        y: 57,
                        id: 41
                    }, {
                        x: 57,
                        y: 62,
                        id: 41
                    }, {
                        x: 61,
                        y: 62,
                        id: 41
                    }, {
                        x: 62,
                        y: 60,
                        id: 41
                    }, {
                        x: 63,
                        y: 62,
                        id: 41
                    }, {
                        x: 63,
                        y: 59,
                        id: 41
                    }, {
                        x: 62,
                        y: 52,
                        id: 41
                    }, {
                        x: 63,
                        y: 51,
                        id: 41
                    }, {
                        x: 58,
                        y: 55,
                        id: 41
                    }, {
                        x: 58,
                        y: 57,
                        id: 41
                    }, {
                        x: 63,
                        y: 45,
                        id: 41
                    }, {
                        x: 60,
                        y: 46,
                        id: 41
                    }, {
                        x: 63,
                        y: 46,
                        id: 41
                    }, {
                        x: 63,
                        y: 42,
                        id: 41
                    }, {
                        x: 56,
                        y: 42,
                        id: 41
                    }, {
                        x: 59,
                        y: 39,
                        id: 41
                    }, {
                        x: 59,
                        y: 37,
                        id: 41
                    }, {
                        x: 61,
                        y: 37,
                        id: 41
                    }, {
                        x: 62,
                        y: 34,
                        id: 41
                    }, {
                        x: 63,
                        y: 33,
                        id: 41
                    }, {
                        x: 61,
                        y: 32,
                        id: 41
                    }, {
                        x: 59,
                        y: 30,
                        id: 41
                    }, {
                        x: 62,
                        y: 28,
                        id: 41
                    }, {
                        x: 63,
                        y: 28,
                        id: 41
                    }, {
                        x: 62,
                        y: 30,
                        id: 41
                    }, {
                        x: 60,
                        y: 35,
                        id: 41
                    }, {
                        x: 59,
                        y: 35,
                        id: 41
                    }, {
                        x: 40,
                        y: 57,
                        id: 36
                    }, {
                        x: 41,
                        y: 57,
                        id: 36
                    }, {
                        x: 42,
                        y: 57,
                        id: 36
                    }, {
                        x: 43,
                        y: 57,
                        id: 36
                    }, {
                        x: 43,
                        y: 56,
                        id: 36
                    }, {
                        x: 43,
                        y: 55,
                        id: 36
                    }, {
                        x: 43,
                        y: 54,
                        id: 36
                    }, {
                        x: 42,
                        y: 54,
                        id: 36
                    }, {
                        x: 41,
                        y: 54,
                        id: 36
                    }, {
                        x: 40,
                        y: 54,
                        id: 36
                    }, {
                        x: 40,
                        y: 55,
                        id: 36
                    }, {
                        x: 40,
                        y: 56,
                        id: 36
                    }, {
                        x: 40,
                        y: 52,
                        id: 36
                    }, {
                        x: 41,
                        y: 52,
                        id: 36
                    }, {
                        x: 42,
                        y: 52,
                        id: 36
                    }, {
                        x: 43,
                        y: 52,
                        id: 36
                    }, {
                        x: 43,
                        y: 51,
                        id: 36
                    }, {
                        x: 43,
                        y: 50,
                        id: 36
                    }, {
                        x: 40,
                        y: 50,
                        id: 36
                    }, {
                        x: 40,
                        y: 49,
                        id: 36
                    }, {
                        x: 41,
                        y: 49,
                        id: 36
                    }, {
                        x: 42,
                        y: 49,
                        id: 36
                    }, {
                        x: 43,
                        y: 46,
                        id: 36
                    }, {
                        x: 43,
                        y: 47,
                        id: 36
                    }, {
                        x: 42,
                        y: 47,
                        id: 36
                    }, {
                        x: 41,
                        y: 47,
                        id: 36
                    }, {
                        x: 40,
                        y: 46,
                        id: 36
                    }, {
                        x: 40,
                        y: 45,
                        id: 36
                    }, {
                        x: 40,
                        y: 44,
                        id: 36
                    }, {
                        x: 41,
                        y: 44,
                        id: 36
                    }, {
                        x: 43,
                        y: 44,
                        id: 36
                    }, {
                        x: 43,
                        y: 41,
                        id: 36
                    }, {
                        x: 43,
                        y: 42,
                        id: 36
                    }, {
                        x: 42,
                        y: 42,
                        id: 36
                    }, {
                        x: 41,
                        y: 42,
                        id: 36
                    }, {
                        x: 40,
                        y: 41,
                        id: 36
                    }, {
                        x: 40,
                        y: 40,
                        id: 36
                    }, {
                        x: 40,
                        y: 39,
                        id: 36
                    }, {
                        x: 43,
                        y: 39,
                        id: 36
                    }, {
                        x: 43,
                        y: 40,
                        id: 36
                    }, {
                        x: 45,
                        y: 41,
                        id: 36
                    }, {
                        x: 45,
                        y: 42,
                        id: 36
                    }, {
                        x: 45,
                        y: 40,
                        id: 36
                    }, {
                        x: 46,
                        y: 39,
                        id: 36
                    }, {
                        x: 47,
                        y: 39,
                        id: 36
                    }, {
                        x: 48,
                        y: 40,
                        id: 36
                    }, {
                        x: 48,
                        y: 39,
                        id: 36
                    }, {
                        x: 48,
                        y: 41,
                        id: 36
                    }, {
                        x: 48,
                        y: 42,
                        id: 36
                    }, {
                        x: 47,
                        y: 42,
                        id: 36
                    }, {
                        x: 45,
                        y: 47,
                        id: 36
                    }, {
                        x: 46,
                        y: 47,
                        id: 36
                    }, {
                        x: 47,
                        y: 47,
                        id: 36
                    }, {
                        x: 48,
                        y: 47,
                        id: 36
                    }, {
                        x: 48,
                        y: 46,
                        id: 36
                    }, {
                        x: 45,
                        y: 45,
                        id: 36
                    }, {
                        x: 48,
                        y: 45,
                        id: 36
                    }, {
                        x: 48,
                        y: 44,
                        id: 36
                    }, {
                        x: 45,
                        y: 44,
                        id: 36
                    }, {
                        x: 45,
                        y: 49,
                        id: 36
                    }, {
                        x: 45,
                        y: 51,
                        id: 36
                    }, {
                        x: 45,
                        y: 52,
                        id: 36
                    }, {
                        x: 46,
                        y: 52,
                        id: 36
                    }, {
                        x: 47,
                        y: 52,
                        id: 36
                    }, {
                        x: 48,
                        y: 51,
                        id: 36
                    }, {
                        x: 48,
                        y: 50,
                        id: 36
                    }, {
                        x: 48,
                        y: 49,
                        id: 36
                    }, {
                        x: 45,
                        y: 54,
                        id: 36
                    }, {
                        x: 45,
                        y: 55,
                        id: 36
                    }, {
                        x: 45,
                        y: 56,
                        id: 36
                    }, {
                        x: 45,
                        y: 57,
                        id: 36
                    }, {
                        x: 47,
                        y: 57,
                        id: 36
                    }, {
                        x: 48,
                        y: 57,
                        id: 36
                    }, {
                        x: 48,
                        y: 56,
                        id: 36
                    }, {
                        x: 48,
                        y: 55,
                        id: 36
                    }, {
                        x: 48,
                        y: 54,
                        id: 36
                    }, {
                        x: 46,
                        y: 57,
                        id: 37
                    }, {
                        x: 48,
                        y: 52,
                        id: 37
                    }, {
                        x: 45,
                        y: 50,
                        id: 37
                    }, {
                        x: 40,
                        y: 51,
                        id: 37
                    }, {
                        x: 43,
                        y: 49,
                        id: 37
                    }, {
                        x: 40,
                        y: 47,
                        id: 37
                    }, {
                        x: 43,
                        y: 45,
                        id: 37
                    }, {
                        x: 45,
                        y: 46,
                        id: 37
                    }, {
                        x: 46,
                        y: 42,
                        id: 37
                    }, {
                        x: 45,
                        y: 39,
                        id: 37
                    }, {
                        x: 40,
                        y: 42,
                        id: 37
                    }, {
                        x: 40,
                        y: 62,
                        id: 35
                    }, {
                        x: 41,
                        y: 62,
                        id: 35
                    }, {
                        x: 41,
                        y: 61,
                        id: 35
                    }, {
                        x: 41,
                        y: 59,
                        id: 35
                    }, {
                        x: 40,
                        y: 60,
                        id: 35
                    }, {
                        x: 43,
                        y: 60,
                        id: 35
                    }, {
                        x: 43,
                        y: 61,
                        id: 35
                    }, {
                        x: 43,
                        y: 62,
                        id: 35
                    }, {
                        x: 42,
                        y: 62,
                        id: 35
                    }, {
                        x: 42,
                        y: 61,
                        id: 35
                    }, {
                        x: 45,
                        y: 62,
                        id: 35
                    }, {
                        x: 46,
                        y: 61,
                        id: 35
                    }, {
                        x: 47,
                        y: 61,
                        id: 35
                    }, {
                        x: 48,
                        y: 62,
                        id: 35
                    }, {
                        x: 46,
                        y: 62,
                        id: 37
                    }, {
                        x: 48,
                        y: 61,
                        id: 37
                    }, {
                        x: 47,
                        y: 60,
                        id: 37
                    }, {
                        x: 46,
                        y: 60,
                        id: 34
                    }, {
                        x: 48,
                        y: 59,
                        id: 34
                    }, {
                        x: 46,
                        y: 59,
                        id: 34
                    }, {
                        x: 3,
                        y: 43,
                        id: 20
                    }, {
                        x: 3,
                        y: 44,
                        id: 20
                    }, {
                        x: 3,
                        y: 46,
                        id: 20
                    }, {
                        x: 7,
                        y: 41,
                        id: 20
                    }, {
                        x: 15,
                        y: 37,
                        id: 20
                    }, {
                        x: 17,
                        y: 43,
                        id: 20
                    }, {
                        x: 16,
                        y: 49,
                        id: 20
                    }, {
                        x: 22,
                        y: 48,
                        id: 20
                    }, {
                        x: 23,
                        y: 39,
                        id: 20
                    }, {
                        x: 22,
                        y: 37,
                        id: 20
                    }, {
                        x: 23,
                        y: 35,
                        id: 20
                    }, {
                        x: 20,
                        y: 34,
                        id: 20
                    }, {
                        x: 2,
                        y: 38,
                        id: 20
                    }, {
                        x: 1,
                        y: 41,
                        id: 20
                    }, {
                        x: 1,
                        y: 45,
                        id: 20
                    }, {
                        x: 2,
                        y: 51,
                        id: 20
                    }, {
                        x: 2,
                        y: 55,
                        id: 20
                    }, {
                        x: 9,
                        y: 56,
                        id: 20
                    }, {
                        x: 9,
                        y: 52,
                        id: 20
                    }, {
                        x: 1,
                        y: 59,
                        id: 20
                    }, {
                        x: 14,
                        y: 60,
                        id: 20
                    }, {
                        x: 15,
                        y: 59,
                        id: 20
                    }, {
                        x: 15,
                        y: 52,
                        id: 20
                    }, {
                        x: 23,
                        y: 52,
                        id: 20
                    }, {
                        x: 23,
                        y: 55,
                        id: 20
                    }, {
                        x: 21,
                        y: 60,
                        id: 20
                    }, {
                        x: 24,
                        y: 61,
                        id: 20
                    }, {
                        x: 32,
                        y: 58,
                        id: 20
                    }, {
                        x: 30,
                        y: 56,
                        id: 20
                    }, {
                        x: 33,
                        y: 56,
                        id: 20
                    }, {
                        x: 29,
                        y: 50,
                        id: 20
                    }, {
                        x: 33,
                        y: 48,
                        id: 20
                    }, {
                        x: 33,
                        y: 45,
                        id: 20
                    }, {
                        x: 29,
                        y: 47,
                        id: 20
                    }, {
                        x: 22,
                        y: 47,
                        id: 20
                    }, {
                        x: 22,
                        y: 41,
                        id: 20
                    }, {
                        x: 39,
                        y: 17,
                        id: 20
                    }, {
                        x: 21,
                        y: 14,
                        id: 20
                    }, {
                        x: 17,
                        y: 19,
                        id: 20
                    }, {
                        x: 24,
                        y: 19,
                        id: 20
                    }, {
                        x: 19,
                        y: 8,
                        id: 20
                    }, {
                        x: 34,
                        y: 2,
                        id: 20
                    }, {
                        x: 39,
                        y: 2,
                        id: 20
                    }, {
                        x: 46,
                        y: 1,
                        id: 20
                    }, {
                        x: 50,
                        y: 2,
                        id: 20
                    }, {
                        x: 54,
                        y: 2,
                        id: 20
                    }, {
                        x: 56,
                        y: 2,
                        id: 20
                    }, {
                        x: 58,
                        y: 2,
                        id: 20
                    }, {
                        x: 59,
                        y: 4,
                        id: 20
                    }, {
                        x: 60,
                        y: 3,
                        id: 20
                    }, {
                        x: 62,
                        y: 9,
                        id: 20
                    }, {
                        x: 60,
                        y: 11,
                        id: 20
                    }, {
                        x: 35,
                        y: 32,
                        id: 22
                    }, {
                        x: 36,
                        y: 31,
                        id: 22
                    }, {
                        x: 35,
                        y: 30,
                        id: 22
                    }, {
                        x: 36,
                        y: 29,
                        id: 22
                    }, {
                        x: 35,
                        y: 28,
                        id: 22
                    }, {
                        x: 36,
                        y: 27,
                        id: 22
                    }, {
                        x: 35,
                        y: 26,
                        id: 22
                    }, {
                        x: 36,
                        y: 25,
                        id: 22
                    }, {
                        x: 35,
                        y: 24,
                        id: 22
                    }, {
                        x: 36,
                        y: 23,
                        id: 22
                    }, {
                        x: 37,
                        y: 24,
                        id: 22
                    }, {
                        x: 39,
                        y: 24,
                        id: 22
                    }, {
                        x: 41,
                        y: 24,
                        id: 22
                    }, {
                        x: 43,
                        y: 24,
                        id: 22
                    }, {
                        x: 45,
                        y: 24,
                        id: 22
                    }, {
                        x: 44,
                        y: 23,
                        id: 22
                    }, {
                        x: 46,
                        y: 23,
                        id: 22
                    }, {
                        x: 48,
                        y: 23,
                        id: 22
                    }, {
                        x: 49,
                        y: 23,
                        id: 22
                    }, {
                        x: 51,
                        y: 23,
                        id: 22
                    }, {
                        x: 51,
                        y: 25,
                        id: 22
                    }, {
                        x: 52,
                        y: 26,
                        id: 22
                    }, {
                        x: 52,
                        y: 28,
                        id: 22
                    }, {
                        x: 51,
                        y: 29,
                        id: 22
                    }, {
                        x: 52,
                        y: 30,
                        id: 22
                    }, {
                        x: 51,
                        y: 31,
                        id: 22
                    }, {
                        x: 52,
                        y: 32,
                        id: 22
                    }, {
                        x: 54,
                        y: 32,
                        id: 22
                    }, {
                        x: 55,
                        y: 31,
                        id: 22
                    }, {
                        x: 55,
                        y: 29,
                        id: 22
                    }, {
                        x: 55,
                        y: 27,
                        id: 22
                    }, {
                        x: 54,
                        y: 26,
                        id: 22
                    }, {
                        x: 54,
                        y: 24,
                        id: 22
                    }, {
                        x: 54,
                        y: 22,
                        id: 22
                    }, {
                        x: 55,
                        y: 21,
                        id: 22
                    }, {
                        x: 54,
                        y: 20,
                        id: 22
                    }, {
                        x: 55,
                        y: 19,
                        id: 22
                    }, {
                        x: 52,
                        y: 34,
                        id: 21
                    }, {
                        x: 51,
                        y: 33,
                        id: 21
                    }, {
                        x: 51,
                        y: 35,
                        id: 21
                    }, {
                        x: 54,
                        y: 34,
                        id: 21
                    }, {
                        x: 55,
                        y: 35,
                        id: 21
                    }, {
                        x: 55,
                        y: 33,
                        id: 21
                    }, {
                        x: 54,
                        y: 30,
                        id: 21
                    }, {
                        x: 54,
                        y: 28,
                        id: 21
                    }, {
                        x: 55,
                        y: 25,
                        id: 21
                    }, {
                        x: 55,
                        y: 23,
                        id: 21
                    }, {
                        x: 56,
                        y: 24,
                        id: 21
                    }, {
                        x: 58,
                        y: 24,
                        id: 21
                    }, {
                        x: 52,
                        y: 24,
                        id: 21
                    }, {
                        x: 50,
                        y: 24,
                        id: 21
                    }, {
                        x: 48,
                        y: 24,
                        id: 21
                    }, {
                        x: 47,
                        y: 24,
                        id: 21
                    }, {
                        x: 42,
                        y: 23,
                        id: 21
                    }, {
                        x: 40,
                        y: 23,
                        id: 21
                    }, {
                        x: 38,
                        y: 23,
                        id: 21
                    }, {
                        x: 36,
                        y: 33,
                        id: 21
                    }, {
                        x: 37,
                        y: 32,
                        id: 21
                    }, {
                        x: 38,
                        y: 32,
                        id: 21
                    }, {
                        x: 38,
                        y: 33,
                        id: 21
                    }, {
                        x: 45,
                        y: 22,
                        id: 21
                    }, {
                        x: 46,
                        y: 21,
                        id: 21
                    }, {
                        x: 47,
                        y: 20,
                        id: 21
                    }, {
                        x: 48,
                        y: 21,
                        id: 21
                    }, {
                        x: 49,
                        y: 20,
                        id: 21
                    }, {
                        x: 50,
                        y: 21,
                        id: 21
                    }, {
                        x: 51,
                        y: 20,
                        id: 21
                    }, {
                        x: 52,
                        y: 21,
                        id: 21
                    }, {
                        x: 53,
                        y: 33,
                        id: 21
                    }],
                    spawningPoints: [{
                        x: 1,
                        y: 1
                    }, {
                        x: 10,
                        y: 6
                    }, {
                        x: 30,
                        y: 1
                    }, {
                        x: 30,
                        y: 11
                    }, {
                        x: 1,
                        y: 29
                    }, {
                        x: 9,
                        y: 18
                    }, {
                        x: 62,
                        y: 45
                    }, {
                        x: 1,
                        y: 61
                    }, {
                        x: 2,
                        y: 37
                    }, {
                        x: 49,
                        y: 46
                    }, {
                        x: 30,
                        y: 30
                    }, {
                        x: 39,
                        y: 62
                    }, {
                        x: 62,
                        y: 12
                    }, {
                        x: 53,
                        y: 10
                    }, {
                        x: 48,
                        y: 27
                    }, {
                        x: 33,
                        y: 48
                    }, {
                        x: 57,
                        y: 61
                    }, {
                        x: 15,
                        y: 62
                    }, {
                        x: 24,
                        y: 24
                    }],
                    waypoints: [{
                        x: 5,
                        y: 1
                    }, {
                        x: 5,
                        y: 6
                    }, {
                        x: 10,
                        y: 1
                    }, {
                        x: 10,
                        y: 3
                    }, {
                        x: 19,
                        y: 3
                    }, {
                        x: 20,
                        y: 1
                    }, {
                        x: 26,
                        y: 0
                    }, {
                        x: 30,
                        y: 2
                    }, {
                        x: 30,
                        y: 9
                    }, {
                        x: 30,
                        y: 18
                    }, {
                        x: 30,
                        y: 30
                    }, {
                        x: 15,
                        y: 30
                    }, {
                        x: 15,
                        y: 24
                    }, {
                        x: 20,
                        y: 22
                    }, {
                        x: 20,
                        y: 18
                    }, {
                        x: 19,
                        y: 11
                    }, {
                        x: 16,
                        y: 12
                    }, {
                        x: 24,
                        y: 11
                    }, {
                        x: 24,
                        y: 7
                    }, {
                        x: 1,
                        y: 12
                    }, {
                        x: 1,
                        y: 18
                    }, {
                        x: 9,
                        y: 19
                    }, {
                        x: 2,
                        y: 25
                    }, {
                        x: 2,
                        y: 30
                    }, {
                        x: 8,
                        y: 27
                    }, {
                        x: 24,
                        y: 24
                    }, {
                        x: 46,
                        y: 8
                    }, {
                        x: 46,
                        y: 2
                    }, {
                        x: 38,
                        y: 0
                    }, {
                        x: 51,
                        y: 1
                    }, {
                        x: 56,
                        y: 1
                    }, {
                        x: 56,
                        y: 4
                    }, {
                        x: 60,
                        y: 8
                    }, {
                        x: 62,
                        y: 8
                    }, {
                        x: 60,
                        y: 14
                    }, {
                        x: 62,
                        y: 2
                    }, {
                        x: 60,
                        y: 21
                    }, {
                        x: 61,
                        y: 24
                    }, {
                        x: 61,
                        y: 31
                    }, {
                        x: 62,
                        y: 33
                    }, {
                        x: 61,
                        y: 38
                    }, {
                        x: 59,
                        y: 42
                    }, {
                        x: 62,
                        y: 43
                    }, {
                        x: 57,
                        y: 46
                    }, {
                        x: 51,
                        y: 28
                    }, {
                        x: 44,
                        y: 36
                    }, {
                        x: 44,
                        y: 43
                    }, {
                        x: 44,
                        y: 48
                    }, {
                        x: 44,
                        y: 53
                    }, {
                        x: 44,
                        y: 60
                    }, {
                        x: 40,
                        y: 43
                    }, {
                        x: 48,
                        y: 43
                    }, {
                        x: 48,
                        y: 48
                    }, {
                        x: 40,
                        y: 48
                    }, {
                        x: 40,
                        y: 53
                    }, {
                        x: 48,
                        y: 53
                    }, {
                        x: 48,
                        y: 60
                    }, {
                        x: 39,
                        y: 60
                    }, {
                        x: 39,
                        y: 55
                    }, {
                        x: 53,
                        y: 60
                    }, {
                        x: 56,
                        y: 62
                    }, {
                        x: 62,
                        y: 62
                    }, {
                        x: 63,
                        y: 57
                    }, {
                        x: 62,
                        y: 52
                    }, {
                        x: 56,
                        y: 57
                    }, {
                        x: 57,
                        y: 52
                    }, {
                        x: 33,
                        y: 56
                    }, {
                        x: 30,
                        y: 62
                    }, {
                        x: 23,
                        y: 62
                    }, {
                        x: 23,
                        y: 55
                    }, {
                        x: 17,
                        y: 60
                    }, {
                        x: 15,
                        y: 58
                    }, {
                        x: 15,
                        y: 52
                    }, {
                        x: 16,
                        y: 47
                    }, {
                        x: 22,
                        y: 48
                    }, {
                        x: 29,
                        y: 48
                    }, {
                        x: 31,
                        y: 51
                    }, {
                        x: 32,
                        y: 44
                    }, {
                        x: 30,
                        y: 39
                    }, {
                        x: 30,
                        y: 34
                    }, {
                        x: 23,
                        y: 44
                    }, {
                        x: 22,
                        y: 40
                    }, {
                        x: 22,
                        y: 36
                    }, {
                        x: 19,
                        y: 32
                    }, {
                        x: 24,
                        y: 31
                    }, {
                        x: 11,
                        y: 61
                    }, {
                        x: 8,
                        y: 61
                    }, {
                        x: 2,
                        y: 60
                    }, {
                        x: 1,
                        y: 56
                    }, {
                        x: 2,
                        y: 52
                    }, {
                        x: 1,
                        y: 47
                    }, {
                        x: 9,
                        y: 55
                    }, {
                        x: 9,
                        y: 50
                    }, {
                        x: 9,
                        y: 47
                    }, {
                        x: 8,
                        y: 42
                    }, {
                        x: 1,
                        y: 40
                    }, {
                        x: 2,
                        y: 36
                    }, {
                        x: 8,
                        y: 36
                    }, {
                        x: 15,
                        y: 36
                    }, {
                        x: 15,
                        y: 42
                    }, {
                        x: 30,
                        y: 25
                    }, {
                        x: 38,
                        y: 9
                    }, {
                        x: 43,
                        y: 12
                    }, {
                        x: 38,
                        y: 18
                    }, {
                        x: 44,
                        y: 17
                    }, {
                        x: 49,
                        y: 21
                    }, {
                        x: 42,
                        y: 24
                    }, {
                        x: 36,
                        y: 25
                    }, {
                        x: 36,
                        y: 34
                    }, {
                        x: 47,
                        y: 29
                    }, {
                        x: 54,
                        y: 21
                    }, {
                        x: 54,
                        y: 24
                    }, {
                        x: 54,
                        y: 32
                    }, {
                        x: 51,
                        y: 33
                    }],
                    ammo: [{
                        x: 5,
                        y: 1,
                        weapon: 1
                    }, {
                        x: 62,
                        y: 52,
                        weapon: 1
                    }, {
                        x: 24,
                        y: 7,
                        weapon: 1
                    }, {
                        x: 1,
                        y: 40,
                        weapon: 1
                    }, {
                        x: 9,
                        y: 19,
                        weapon: 3
                    }, {
                        x: 2,
                        y: 60,
                        weapon: 2
                    }, {
                        x: 44,
                        y: 60,
                        weapon: 3
                    }, {
                        x: 38,
                        y: 0,
                        weapon: 2
                    }, {
                        x: 40,
                        y: 43,
                        weapon: 2
                    }, {
                        x: 62,
                        y: 2,
                        weapon: 4
                    }, {
                        x: 36,
                        y: 34,
                        weapon: 4
                    }, {
                        x: 23,
                        y: 62,
                        weapon: 4
                    }, {
                        x: 38,
                        y: 9,
                        weapon: 5
                    }, {
                        x: 19,
                        y: 32,
                        weapon: 5
                    }, {
                        x: 62,
                        y: 43,
                        weapon: 5
                    }]
                }
            },
            6480: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.rankInGame_mapList = exports.rankInGame = void 0;
                var Data_1 = __webpack_require__(6313),
                    config_1 = __webpack_require__(5303),
                    functions_1 = __webpack_require__(7582),
                    NameColor_1 = __webpack_require__(3280),
                    Network_1 = __webpack_require__(367),
                    root_1 = __webpack_require__(17),
                    UI_1 = __webpack_require__(2664),
                    gameShare_1 = __webpack_require__(1747),
                    lang_1 = __webpack_require__(9655),
                    _playerStats = {},
                    _playerStatsArrays = [
                        [],
                        [],
                        []
                    ],
                    _mainDiv = document.getElementById("rankInGame"),
                    _redScoreField = _mainDiv.querySelector(".redTeamSummary .teamScore"),
                    _blueScoreField = _mainDiv.querySelector(".blueTeamSummary .teamScore"),
                    _redNameField = _mainDiv.querySelector(".redTeamSummary .teamName"),
                    _blueNameField = _mainDiv.querySelector(".blueTeamSummary .teamName"),
                    _timeToNextLabel = _mainDiv.querySelector(".vote .timeToNext"),
                    _victoryLabel = _mainDiv.querySelector(".victory"),
                    _voteTitle = _mainDiv.querySelector(".voteTitle"),
                    _rankArea = _mainDiv.querySelector(".rankArea"),
                    _rankInGame_mapList = document.getElementById("rankInGame_mapList"),
                    _rankInGame_normalList = _mainDiv.querySelector("#rankInGame_normalList"),
                    _rankInGame_redList = _mainDiv.querySelector("#rankInGame_redList"),
                    _rankInGame_blueList = _mainDiv.querySelector("#rankInGame_blueList"),
                    _rankInGame_lists = [_rankInGame_normalList, _rankInGame_redList, _rankInGame_blueList],
                    mapVotes = [];

                function toggleMute(event) {
                    var el = event.currentTarget,
                        isGuest = "1" === el.getAttribute("data-isGuest"),
                        id = el.getAttribute("data-playerId"),
                        p = null !== root_1.root.game ? root_1.root.game.getPlayerFromID(parseInt(id)) : null;
                    if (null !== p) {
                        var name = p.name.toLowerCase(),
                            index = config_1.options.ignoreList.indexOf(name);
                        if (index >= 0) return config_1.options.ignoreList.splice(index, 1), localStorage.ignoreList = config_1.options.ignoreList.join(";"), el.classList.remove("muted"), void root_1.root.game.interface_.addMsg(lang_1.lang.get("game.msg.ignore.off", {
                            playerName: name
                        }), "white");
                        if ((index = config_1.options.ignoreListTemp.indexOf(name)) >= 0) return config_1.options.ignoreListTemp.splice(index, 1), root_1.root.game.interface_.addMsg(lang_1.lang.get("game.msg.ignore.off", {
                            playerName: name
                        }), "white"), void el.classList.remove("muted");
                        (isGuest ? config_1.options.ignoreListTemp : config_1.options.ignoreList).push(name), localStorage.ignoreList = config_1.options.ignoreList.join(";"), el.classList.add("muted"), root_1.root.game.interface_.addMsg(lang_1.lang.get("game.msg.ignore.on", {
                            playerName: name
                        }), "white")
                    }
                }

                function joinTeam(team) {
                    if (-1 === team) return root_1.root.game.iAmSpec = !0, Network_1.Network.send("spectate"), void exports.rankInGame.hide();
                    root_1.root.game.iAmSpec = !1, Network_1.Network.send("joinTeam$" + team)
                }
                exports.rankInGame = {
                    timeToNext: function(v) {
                        _timeToNextLabel.innerHTML = v
                    },
                    hideRank: function() {
                        _rankArea.style.display = "none"
                    },
                    showRank: function() {
                        _rankArea.style.display = ""
                    },
                    showOrHideVoteTitle: function() {
                        mapVotes.length > 0 ? _voteTitle.style.display = "" : _voteTitle.style.display = "none"
                    },
                    show: function(hideRank) {
                        _mainDiv.style.display = "", exports.rankInGame.refreshPlaying(), hideRank ? exports.rankInGame.hideRank() : exports.rankInGame.showRank(), document.addEventListener("wheel", exports.rankInGame.scrollList)
                    },
                    scrollList: function(event) {
                        for (var _i = 0, _rankInGame_lists_1 = _rankInGame_lists; _i < _rankInGame_lists_1.length; _i++) {
                            var el = _rankInGame_lists_1[_i];
                            if ((0, functions_1.containsMouse)(el)) {
                                el.scrollTop += event.deltaY;
                                break
                            }
                        }
                    },
                    hide: function() {
                        root_1.root.game && root_1.root.game.ticksCounter >= -1 && exports.rankInGame.doHide()
                    },
                    doHide: function() {
                        document.removeEventListener("wheel", exports.rankInGame.scrollList), _mainDiv.style.display = "none"
                    },
                    setVictoryMessage: function(message) {
                        _victoryLabel.innerHTML = message
                    },
                    refreshTime: function(ongoing, time) {
                        ongoing ? (_mainDiv.classList.remove("waiting"), _mainDiv.classList.add("ongoing")) : (_mainDiv.classList.remove("ongoing"), _mainDiv.classList.add("waiting")), _timeToNextLabel && (_timeToNextLabel.innerHTML = time)
                    },
                    refreshTeamScore: function() {
                        _redScoreField.innerText = lang_1.lang.get("rankInGame.summary.score", {
                            score: root_1.root.game.scoreTeam1
                        }), _blueScoreField.innerText = lang_1.lang.get("rankInGame.summary.score", {
                            score: root_1.root.game.scoreTeam2
                        })
                    },
                    refreshPlaying: function() {
                        root_1.root.game.playingPlayerID > 0 || root_1.root.game.iAmSpec || root_1.root.game.replayMode ? (_mainDiv.classList.remove("start"), _mainDiv.classList.remove("spectate")) : (_mainDiv.classList.add("start"), "spectate" === root_1.root.joinGamePurpose ? _mainDiv.classList.add("spectate") : _mainDiv.classList.remove("spectate"))
                    },
                    getListFromTeam: function(team) {
                        return 1 === team ? _rankInGame_redList : 2 === team ? _rankInGame_blueList : _rankInGame_normalList
                    },
                    addPlayer: function(p) {
                        var tr = document.createElement("tr");
                        tr.className = "F-ItemRenderer", tr.id = "Rank_Player_" + p.id, exports.rankInGame.getListFromTeam(p.team).appendChild(tr);
                        var nameTD = document.createElement("td");
                        tr.appendChild(nameTD), nameTD.className = "name", nameTD.style.color = NameColor_1.NameColor.getColor(p.nameColor), nameTD.innerText = p.name, p.authLevel >= Data_1.AUTH_LEVEL.PLAYER ? (nameTD.setAttribute("data-playerId", p.db_id.toString()), nameTD.onclick = UI_1.UI.showPlayerInfoById0) : config_1.playerData.authLevel >= Data_1.AUTH_LEVEL.MOD2 && (nameTD.onclick = function() {
                            (0, functions_1.initBanGuest)(p.name)
                        });
                        var clanTD = document.createElement("td");
                        tr.appendChild(clanTD), clanTD.className = "clan", p.clan_tag.length > 0 && (clanTD.innerText = "[" + p.clan_tag + "]", clanTD.setAttribute("data-clanTag", p.clan_tag), clanTD.onclick = UI_1.UI.requestMyClanInfo0);
                        var scoreTD = document.createElement("td");
                        tr.appendChild(scoreTD), scoreTD.className = "score", scoreTD.innerText = p.elo.toString();
                        var soulsTD = document.createElement("td");
                        tr.appendChild(soulsTD), soulsTD.className = "souls", soulsTD.innerText = p.souls.toString();
                        var killsTD = document.createElement("td");
                        tr.appendChild(killsTD), killsTD.className = "kill", killsTD.innerText = p.kills.toString();
                        var deathsTD = document.createElement("td");
                        tr.appendChild(deathsTD), deathsTD.className = "death", deathsTD.innerText = p.deaths.toString();
                        var muteTD = document.createElement("td");
                        if (tr.appendChild(muteTD), muteTD.className = "muteCell", null !== root_1.root.game && p.id !== root_1.root.game.playingPlayerID && p.name !== config_1.playerData.name && p.authLevel >= Data_1.AUTH_LEVEL.GUEST) {
                            var div = document.createElement("div");
                            muteTD.appendChild(div), div.className = "F-Button mute withClickSound", div.setAttribute("data-playerId", p.id.toString()), div.setAttribute("data-isGuest", p.authLevel < Data_1.AUTH_LEVEL.PLAYER ? "1" : "0"), div.onclick = toggleMute;
                            var hoverDiv = document.createElement("div");
                            div.appendChild(hoverDiv), hoverDiv.className = "hover lite";
                            var span = document.createElement("div");
                            div.appendChild(span), span.className = "label", (0, functions_1.playerIsBeeingIgnored)(p.name) ? div.classList.add("muted") : div.classList.remove("muted")
                        }
                        var stat = _playerStats[p.id] = {
                            id: p.id,
                            tr,
                            kills: p.kills,
                            killsTD,
                            deaths: p.deaths,
                            deathsTD,
                            elo: p.elo,
                            scoreTD,
                            souls: p.souls,
                            soulsTD,
                            team: p.team
                        };
                        return _playerStatsArrays[p.team].push(stat), exports.rankInGame.sortPlayers(), stat
                    },
                    setPlayingPlayer: function(p) {
                        var stat = _playerStats[p.id];
                        void 0 !== stat && stat.tr.classList.add("me")
                    },
                    sortPlayers: function() {
                        var sortField = root_1.root.game.type.winningCondition;
                        if (void 0 !== sortField) {
                            for (var i = 0; i < _playerStatsArrays.length; i++) {
                                var arr = _playerStatsArrays[i];
                                if (arr.length > 0) {
                                    arr.sort((function(a, b) {
                                        return b[sortField] - a[sortField]
                                    }));
                                    for (var _i = 0, arr_1 = arr; _i < arr_1.length; _i++) {
                                        (el = arr_1[_i]).tr.parentNode.removeChild(el.tr)
                                    }
                                    for (var _a = 0, arr_2 = arr; _a < arr_2.length; _a++) {
                                        var el = arr_2[_a];
                                        _rankInGame_lists[i].appendChild(el.tr)
                                    }
                                }
                            }
                            root_1.root.game.miniMap.refreshTop3()
                        }
                    },
                    refreshPlayer: function(p) {
                        var _a, stat = _playerStats[p.id] || exports.rankInGame.addPlayer(p);
                        stat.kills !== p.kills && (stat.kills = p.kills, stat.killsTD.innerText = p.kills.toString()), stat.deaths !== p.deaths && (stat.deaths = p.deaths, stat.deathsTD.innerText = p.deaths.toString()), stat.souls !== p.souls && (stat.souls = p.souls, stat.soulsTD.innerText = p.souls.toString()), stat.elo !== p.elo && (stat.elo = p.elo, stat.scoreTD.innerText = p.elo.toString()), stat.team !== p.team && (stat.team = p.team, null === (_a = stat.tr.parentNode) || void 0 === _a || _a.removeChild(stat.tr), exports.rankInGame.getListFromTeam(p.team).appendChild(stat.tr)), exports.rankInGame.sortPlayers()
                    },
                    removePlayer: function(p) {
                        var stat = _playerStats[p.id];
                        if (void 0 !== stat) {
                            delete _playerStats[p.id], stat.tr.parentNode.removeChild(stat.tr);
                            for (var i = 0; i < _playerStatsArrays[p.team].length; i++) _playerStatsArrays[p.team][i] === stat && (_playerStatsArrays[p.team].splice(i, 1), i = _playerStatsArrays[p.team].length)
                        }
                        root_1.root.game.miniMap.refreshTop3()
                    },
                    init: function() {
                        for (var id in _playerStats) _playerStats[id].tr.parentNode.removeChild(_playerStats[id].tr), delete _playerStats[id];
                        _playerStatsArrays[0].length = 0, _playerStatsArrays[1].length = 0, _playerStatsArrays[2].length = 0, root_1.root.game.type.team || root_1.root.game.type.showZombiesAndHumans ? (_mainDiv.classList.add("team"), _redNameField.innerText = root_1.root.game.type.showZombiesAndHumans ? lang_1.lang.get("rankInGame.team.humans") : lang_1.lang.get("rankInGame.team.red"), _blueNameField.innerText = root_1.root.game.type.showZombiesAndHumans ? lang_1.lang.get("rankInGame.team.zombies") : lang_1.lang.get("rankInGame.team.red"), _redScoreField.innerText = root_1.root.game.scoreTeam1.toString(), _blueScoreField.innerText = root_1.root.game.scoreTeam2.toString(), root_1.root.game.type.showZombiesAndHumans && (_redScoreField.innerHTML = "", _blueScoreField.innerHTML = "")) : _mainDiv.classList.remove("team"), !root_1.root.game.type.team && root_1.root.game.type.zombies || root_1.root.game.type.coopZombieMode ? _mainDiv.classList.add("zombies") : _mainDiv.classList.remove("zombies"), root_1.root.game.type.ingameElo ? _mainDiv.classList.add("ingameElo") : _mainDiv.classList.remove("ingameElo"), root_1.root.game.type.lives ? (_mainDiv.querySelector(".kill").style.display = "none", _mainDiv.querySelector(".score").style.display = "none", _mainDiv.querySelector(".death").innerHTML = "Lives") : (_mainDiv.querySelector(".kill").style.display = "", _mainDiv.querySelector(".score").style.display = "", _mainDiv.querySelector(".death").innerHTML = lang_1.lang.get("rankInGame.thead.death")), exports.rankInGame.sortPlayers()
                    }
                }, exports.rankInGame_mapList = {
                    setMaps: function(m) {
                        mapVotes = m, _rankInGame_mapList.innerHTML = "";
                        for (var _i = 0, m_1 = m; _i < m_1.length; _i++) {
                            var map = m_1[_i],
                                li = document.createElement("li");
                            li.className = "rankInGame_mapListElement F-ItemRenderer" + (map.voted ? " voted" : ""), li.id = "rankInGame_mapListElement_" + map.id, li.setAttribute("data-tooltip-renderer", "tooltipMap"), li.setAttribute("data-mapId", map.id.toString()), li.onclick = function(e) {
                                var el = e.currentTarget;
                                el.classList.contains("voted") || Network_1.Network.send("map-vote$" + el.getAttribute("data-mapId"))
                            }, _rankInGame_mapList.appendChild(li);
                            var divHover = document.createElement("div");
                            divHover.className = "hover", li.appendChild(divHover);
                            var divCB = document.createElement("div");
                            divCB.className = "checkbox", li.appendChild(divCB);
                            var divName = document.createElement("div");
                            divName.className = "name", divName.innerText = map.name, li.appendChild(divName);
                            var divLabel = document.createElement("div");
                            divLabel.className = "voteLabel", divLabel.innerText = lang_1.lang.get("rankInGame.title.voteLabel"), li.appendChild(divLabel);
                            var divValue = document.createElement("div");
                            divValue.className = "voteValue", divValue.innerText = map.votes.toString(), li.appendChild(divValue);
                            var tooltipDiv = document.createElement("div");
                            tooltipDiv.className = "F-Tooltip tooltipMap", tooltipDiv.setAttribute("data-modal", "false"), li.appendChild(tooltipDiv);
                            var h2 = document.createElement("h2");
                            tooltipDiv.appendChild(h2), h2.innerText = map.name;
                            var innerDiv = document.createElement("div");
                            innerDiv.className = "summary", tooltipDiv.appendChild(innerDiv);
                            var innerDivInner = document.createElement("div");
                            innerDivInner.className = "size", innerDivInner.innerText = map.w + "x" + map.h, innerDiv.appendChild(innerDivInner)
                        }
                    },
                    setVoted: function(m) {
                        var el = document.getElementById("rankInGame_mapListElement_" + m.id);
                        null !== el && (el.querySelector(".voteValue").innerText = m.votes.toString(), m.voted && el.classList.add("voted"))
                    },
                    getVoted: function() {
                        return _rankInGame_mapList.classList.contains("voted")
                    }
                }, exports.rankInGame.showOrHideVoteTitle(), _mainDiv.querySelector(".F-Button.spectate").onclick = joinTeam.bind(null, -1), _mainDiv.querySelector(".F-Button.play").onclick = joinTeam.bind(null, 1), _mainDiv.querySelector(".F-Button.red").onclick = joinTeam.bind(null, 1), _mainDiv.querySelector(".F-Button.blue").onclick = joinTeam.bind(null, 2), _mainDiv.querySelector(".F-Button.invite").onclick = gameShare_1.gameShare.show, _mainDiv.querySelector(".F-Button.close").onclick = exports.rankInGame.hide
            },
            17: (__unused_webpack_module, exports) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.root = void 0, exports.root = {
                    game: null,
                    leavingGame: !1,
                    startLeavingGameTicksCounter: -1,
                    searchingLadder: !1,
                    currentClan: null,
                    preStore: {
                        newPlayers: [],
                        newZombies: [],
                        pid: {
                            time: -999,
                            value: -999
                        }
                    },
                    joinGamePurpose: "",
                    langAndImgsLoaded: !1,
                    gameHasBeenInited: !1
                }
            },
            1749: (__unused_webpack_module, exports) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.SERVERS = void 0, exports.SERVERS = window.location && window.location.href && window.location.href.indexOf("slay.ts") >= 0 ? [{
                    name: "local",
                    adress: "ws://localhost:62203",
                    flagImg: "imgs/flags/eu.png"
                }] : [{
                    name: "EU",
                    adress: "wss://eu.slay.one:62203",
                    flagImg: "imgs/flags/eu.png"
                }, {
                    name: "NA",
                    adress: "wss://na.slay.one:62203",
                    flagImg: "imgs/flags/eu.png"
                }]
            },
            6133: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.bottomBar = void 0;
                var UI_1 = __webpack_require__(2664),
                    _mainDiv = document.getElementById("bottomBar");
                exports.bottomBar = {
                    show: function() {
                        _mainDiv.style.display = ""
                    },
                    hide: function() {
                        _mainDiv.style.display = "none"
                    }
                }, document.getElementById("imprintLink").onclick = UI_1.UI.toggleImprint, document.getElementById("termsLink").onclick = UI_1.UI.toggleAGB, document.getElementById("privacyLink").onclick = UI_1.UI.toggleDSE
            },
            5352: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.changeNick = void 0;
                var Data_1 = __webpack_require__(6313),
                    config_1 = __webpack_require__(5303),
                    Network_1 = __webpack_require__(367),
                    UI_1 = __webpack_require__(2664),
                    floatTip_1 = __webpack_require__(9177),
                    _mainBG = document.getElementById("chaneNickBG"),
                    _input = _mainBG.querySelector("input"),
                    _dateLimit = _mainBG.querySelector(".dateLimit");
                _input.maxLength = 15, _input.onkeydown = function(e) {
                    13 === e.keyCode && exports.changeNick.submit()
                }, exports.changeNick = {
                    open: function() {
                        _input.value = UI_1.currentProfile.displayName;
                        var day = exports.changeNick.changeLimitDays(),
                            hours = day % 1 * 24 | 0,
                            minutes = day < 1 && 0 == hours ? day % 1 * 24 % 1 * 60 | 0 : -1;
                        day ? (_dateLimit.innerText = "You can change your name after " + (day >= 1 ? (0 | day) + " days and " : "") + (hours >= 1 || day >= 1 ? hours + " hours." : minutes + " minutes."), _dateLimit.style.display = "block") : _dateLimit.style.display = "none", _mainBG.style.display = ""
                    },
                    changeLimitDays: function() {
                        return Math.max(6 - (Date.now() / 1e3 - UI_1.currentProfile.tsNick) / 86400, 0)
                    },
                    submit: function() {
                        if (!exports.changeNick.changeLimitDays()) {
                            var nick = _input.value,
                                val = (0, Data_1.checkName)(nick);
                            "OK" === val ? (Network_1.Network.send("changeNick$" + nick), config_1.playerData.name = nick, UI_1.currentProfile.displayName = nick, UI_1.currentProfile.tsNick = Date.now() / 1e3 | 0, document.getElementById("homeUIContent").querySelector(".nick").innerText = nick, document.getElementById("playerProfileScreen").querySelector(".playerNick").innerText = nick, exports.changeNick.close()) : (0, floatTip_1.floatTip)("error", val, 6e3)
                        }
                    },
                    close: function() {
                        _mainBG.style.display = "none"
                    }
                }, _mainBG.querySelector(".yes").onclick = exports.changeNick.submit, _mainBG.querySelector(".no").onclick = exports.changeNick.close
            },
            5689: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.clanJoin = void 0;
                var Network_1 = __webpack_require__(367),
                    root_1 = __webpack_require__(17),
                    _mainDiv = document.getElementById("clanJoin"),
                    _tagField = _mainDiv.querySelector(".clanTag"),
                    _nameField = _mainDiv.querySelector(".clanName"),
                    _currentTag = "";
                exports.clanJoin = {
                    open: function() {
                        _mainDiv.style.display = ""
                    },
                    apply4Clan: function() {
                        Network_1.Network.send("apply4Clan$" + _currentTag + "$" + _mainDiv.querySelector("#clanAppTextField textarea").innerHTML), exports.clanJoin.close()
                    },
                    showClan: function(tag, name) {
                        _currentTag = tag || root_1.root.currentClan.tag, _tagField.innerHTML = _currentTag, _nameField.innerHTML = name || root_1.root.currentClan.name, exports.clanJoin.open()
                    },
                    close: function() {
                        _mainDiv.style.display = "none"
                    }
                }, _mainDiv.querySelector(".cancel").onclick = exports.clanJoin.close, _mainDiv.querySelector(".send").onclick = exports.clanJoin.apply4Clan
            },
            429: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.clanMain_mine = exports.clanMain_info = exports.clanMain_create = exports.clanMain = void 0;
                var Data_1 = __webpack_require__(6313),
                    config_1 = __webpack_require__(5303),
                    DomHelper_1 = __webpack_require__(5560),
                    functions_1 = __webpack_require__(7582),
                    Network_1 = __webpack_require__(367),
                    root_1 = __webpack_require__(17),
                    UI_1 = __webpack_require__(2664),
                    floatTip_1 = __webpack_require__(9177),
                    lang_1 = __webpack_require__(9655),
                    clanJoin_1 = __webpack_require__(5689),
                    confirm_1 = __webpack_require__(9110),
                    homeScreen_1 = __webpack_require__(1292),
                    resourceBar_1 = __webpack_require__(4542),
                    _mainDiv = document.getElementById("clanMain"),
                    _mainDivCreate = document.getElementById("clanMainCreate"),
                    _mainDivBG = document.getElementById("clanBG"),
                    _clanCreateBG = document.getElementById("clanCreateBG"),
                    _clanTag = _mainDiv.querySelector(".clanTag"),
                    _clanName = _mainDiv.querySelector(".clanName"),
                    _clanElo = _mainDiv.querySelector(".elo"),
                    _clanMembersCount = _mainDiv.querySelector(".membersCount"),
                    _clanDescription = _mainDiv.querySelector(".clanDescription"),
                    _leaveButton = document.getElementById("leaveButton"),
                    _joinButton = document.getElementById("joinButton"),
                    _settingsButton = document.getElementById("clanSettingsButton"),
                    _clanCloseButton = _mainDiv.querySelector(".close"),
                    _infoButton = document.getElementById("clanInfoButton"),
                    _membersButton = document.getElementById("clanMembersButton"),
                    _appsButton = document.getElementById("clanAppsButton"),
                    _clanMainContent = document.getElementById("clanMainContent"),
                    _clanMembersContent = document.getElementById("myClan"),
                    _myClan_memberList = document.getElementById("myClan_memberList"),
                    appliedClans = {},
                    _currentClanTag = "";
                exports.clanMain = {
                    show0: function() {
                        exports.clanMain.show(_currentClanTag)
                    },
                    show: function(tag) {
                        config_1.playerData.clanTag || tag ? Network_1.Network.send("myClanInfo" + (tag ? "$" + tag : "")) : exports.clanMain.showCreate()
                    },
                    show1: function(clan) {
                        void 0 !== clan && (_currentClanTag = clan.tag, _clanCreateBG.style.display = "none", _clanMembersContent.style.display = "none", _editClanUL.style.display = "none", _clanMainContent.style.display = "", _mainDivBG.style.display = "", _clanTag.innerText = clan.tag, _clanName.innerText = clan.name, _clanElo.innerText = clan.elo.toString(), _clanMembersCount.innerText = clan.countMembers.toString(), _clanDescription.innerText = clan.description, _settingsButton.style.visibility = config_1.playerData.clanTag === clan.tag && config_1.playerData.clanRole >= Data_1.AUTH_LEVEL.ADMIN ? "visible" : "hidden", _leaveButton.style.display = config_1.playerData.clanTag == clan.tag ? "" : "none", _joinButton.style.display = config_1.playerData.clanTag || appliedClans[clan.id] ? "none" : "", _appsButton.style.visibility = config_1.playerData.clanTag === clan.tag && config_1.playerData.clanRole >= Data_1.AUTH_LEVEL.MOD ? "visible" : "hidden")
                    },
                    showMembers: function() {
                        Network_1.Network.send("getMemberList$" + _currentClanTag)
                    },
                    showApps: function() {
                        Network_1.Network.send("getClanAppsOfPlayer")
                    },
                    renderClanMembers: function(clanMembers) {
                        _clanMembersContent.style.display = "", _clanMainContent.style.display = "none", _editClanUL.style.display = "none", _myClan_memberList.innerHTML = "";
                        for (var _i = 0, clanMembers_1 = clanMembers; _i < clanMembers_1.length; _i++) {
                            var member = clanMembers_1[_i],
                                li = document.createElement("li");
                            li.className = "F-ItemRenderer";
                            var div = document.createElement("div");
                            li.appendChild(div);
                            var h4 = document.createElement("h4");
                            h4.innerText = member.name, h4.className = "name", div.appendChild(h4);
                            var roleDiv = document.createElement("div");
                            if (roleDiv.innerText = member.role, roleDiv.className = "role", div.appendChild(roleDiv), _currentClanTag === config_1.playerData.clanTag && member.id !== config_1.playerData.db_id && config_1.playerData.clanRole >= member.roleNumber && config_1.playerData.clanRole >= Data_1.AUTH_LEVEL.MOD) {
                                var div_1 = document.createElement("div");
                                div_1.className = "F-Button remove newBorder", div_1.setAttribute("data-tooltip-data", lang_1.lang.get("myClan.tooltip.remove")), div_1.setAttribute("data-playerId", member.id.toString()), div_1.setAttribute("data-playerName", member.name), div_1.onclick = UI_1.UI.kickMember0, li.appendChild(div_1)
                            }
                            if (_currentClanTag === config_1.playerData.clanTag && member.id !== config_1.playerData.db_id && config_1.playerData.clanRole >= member.roleNumber && member.roleNumber >= Data_1.AUTH_LEVEL.MOD) {
                                var div_2 = document.createElement("div");
                                div_2.className = "F-Button demote newBorder", div_2.setAttribute("data-tooltip-data", lang_1.lang.get("myClan.tooltip.demote")), div_2.setAttribute("data-playerId", member.id.toString()), div_2.onclick = UI_1.UI.demoteMember0, li.appendChild(div_2)
                            }
                            if (_currentClanTag === config_1.playerData.clanTag && member.id !== config_1.playerData.db_id && config_1.playerData.clanRole > member.roleNumber && member.roleNumber < Data_1.AUTH_LEVEL.ADMIN) {
                                var div_3 = document.createElement("div");
                                div_3.className = "F-Button promote newBorder", div_3.setAttribute("data-tooltip-data", lang_1.lang.get("myClan.tooltip.promote")), div_3.setAttribute("data-playerId", member.id.toString()), div_3.onclick = UI_1.UI.promoteMember0, li.appendChild(div_3)
                            }
                            var infoDiv = document.createElement("div");
                            infoDiv.className = "F-Button info newBorder", infoDiv.setAttribute("data-tooltip-data", lang_1.lang.get("myClan.tooltip.profile")), infoDiv.setAttribute("data-playerId", member.id.toString()), infoDiv.onclick = functions_1.showPlayerInfo0, li.appendChild(infoDiv), _myClan_memberList.appendChild(li)
                        }
                    },
                    renderClanApps: function(clanApps) {
                        _clanMembersContent.style.display = "", _clanMainContent.style.display = "none", _editClanUL.style.display = "none", _myClan_memberList.innerHTML = "";
                        for (var _i = 0, clanApps_1 = clanApps; _i < clanApps_1.length; _i++) {
                            var app = clanApps_1[_i],
                                li = DomHelper_1.Dom.createElement("li", _myClan_memberList, void 0, "F-ItemRenderer");
                            DomHelper_1.Dom.createElement("h4", li, void 0, "name", app.name), DomHelper_1.Dom.createElement("div", li, void 0, "F-Button reject newBorder", void 0, UI_1.UI.rejectMember).setAttribute("data-playerId", app.id.toString()), DomHelper_1.Dom.createElement("div", li, void 0, "F-Button accept newBorder", void 0, UI_1.UI.acceptMember).setAttribute("data-playerId", app.id.toString()), DomHelper_1.Dom.createElement("div", li, void 0, "F-Button info newBorder", void 0, UI_1.UI.showPlayerInfoById0).setAttribute("data-playerId", app.id.toString())
                        }
                    },
                    showCreate: function() {
                        _clanCreateBG.style.display = ""
                    },
                    hideCreate: function() {
                        _clanCreateBG.style.display = "none"
                    },
                    close: function() {
                        _mainDivBG.style.display = "none"
                    }
                }, _clanCloseButton.onclick = exports.clanMain.close, _infoButton.onclick = exports.clanMain.show0, _membersButton.onclick = exports.clanMain.showMembers, _appsButton.onclick = exports.clanMain.showApps;
                var _createBG = document.getElementById("clanCreateBG"),
                    _nameInput = document.getElementById("createClanNameInput"),
                    _tagInput = document.getElementById("createClanTagInput"),
                    _descInput = document.getElementById("createClanDescTextarea");
                document.getElementById("clanCreateGold").innerText = Data_1.CONST.CLAN_CREATION_GOLD_COST.toString(), exports.clanMain_create = {
                    create: function() {
                        confirm_1.confirmPrompt.show("CREATE CLAN", lang_1.lang.get("clanMain.create.confirm.content", {
                            gold: Data_1.CONST.CLAN_CREATION_GOLD_COST,
                            clanName: _tagInput.value
                        }), exports.clanMain_create._create)
                    },
                    _create: function() {
                        confirm_1.confirmPrompt.hide(), config_1.playerData.gold < Data_1.CONST.CLAN_CREATION_GOLD_COST ? (0, floatTip_1.floatTip)("error", lang_1.lang.get("clanMain.create.error.insufficient")) : Network_1.Network.send("createClan$" + _tagInput.value + "$" + _nameInput.value + "$" + _descInput.value)
                    },
                    onCreate: function() {
                        config_1.playerData.gold -= Data_1.CONST.CLAN_CREATION_GOLD_COST, resourceBar_1.resourceBar.refresh()
                    }
                }, _mainDivCreate.querySelector(".F-Button.create").onclick = exports.clanMain_create.create, _createBG.querySelector(".close").onclick = exports.clanMain.hideCreate, exports.clanMain_info = Object.assign({
                    showJoin: function() {
                        clanJoin_1.clanJoin.showClan()
                    }
                }), _joinButton.onclick = exports.clanMain_info.showJoin;
                var _editClanUL = document.getElementById("editClanUL"),
                    _editClanTag = document.getElementById("editClanTag"),
                    _editClanName = document.getElementById("editClanName"),
                    _editClanText = document.getElementById("clanDescTextArea");
                exports.clanMain_mine = {
                    back: function() {
                        _clanMainContent.style.display = "", _clanMembersContent.style.display = "none", _editClanUL.style.display = "none"
                    },
                    showEdit: function() {
                        _clanMainContent.style.display = "none", _clanMembersContent.style.display = "none", _editClanUL.style.display = "", _editClanName.value = root_1.root.currentClan.name, _editClanTag.innerText = "[" + root_1.root.currentClan.tag + "]", _editClanText.innerText = (0, functions_1.escapeHtml)(root_1.root.currentClan.description)
                    },
                    update: function() {
                        Network_1.Network.send("update-clan$" + _editClanName.value + "$" + _editClanText.value), root_1.root.currentClan.name = _editClanName.value, root_1.root.currentClan.description = _editClanText.value, _clanDescription.innerText = _editClanText.value, _clanName.innerText = _editClanName.value, exports.clanMain_mine.back()
                    },
                    leave: function() {
                        confirm_1.confirmPrompt.show("LEAVE CLAN", lang_1.lang.get("clanMain.leave.confirm.content"), exports.clanMain_mine.doLeave)
                    },
                    doLeave: function() {
                        confirm_1.confirmPrompt.hide(), Network_1.Network.send("leaveClan"), root_1.root.currentClan = null, config_1.playerData.clanTag = "", config_1.playerData.clanRole = 0, _clanCreateBG.style.display = "none", _mainDivBG.style.display = "none", document.getElementById("popUpMainDiv").style.display = "none", homeScreen_1.homeScreen.render()
                    }
                }, _editClanUL.querySelector(".back").onclick = exports.clanMain_mine.back, document.getElementById("editClanSave").onclick = exports.clanMain_mine.update, document.getElementById("clanSettingsButton").onclick = exports.clanMain_mine.showEdit, document.getElementById("leaveButton").onclick = exports.clanMain_mine.leave
            },
            9110: (__unused_webpack_module, exports) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.confirmPrompt = void 0;
                var _mainBG = document.getElementById("confirmBG"),
                    _title = document.getElementById("confirmTitle"),
                    _content = document.getElementById("confirmContent"),
                    _yesButton = document.getElementById("yesButton"),
                    _noButton = document.getElementById("noButton");
                exports.confirmPrompt = {
                    show: function(title, text, onYes) {
                        _yesButton.onclick = onYes, _title.innerText = title, _content.innerText = text, _mainBG.style.display = ""
                    },
                    hide: function() {
                        _mainBG.style.display = "none"
                    }
                }, _noButton.onclick = exports.confirmPrompt.hide
            },
            5165: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.emotesWindow = void 0;
                var __1 = __webpack_require__(2174),
                    Emotes_1 = __webpack_require__(4933),
                    functions_1 = __webpack_require__(8394),
                    config_1 = __webpack_require__(5303),
                    Network_1 = __webpack_require__(367),
                    Sound_1 = __webpack_require__(3754),
                    UI_1 = __webpack_require__(2664),
                    resourceBar_1 = __webpack_require__(4542),
                    _mainDiv = document.getElementById("emotes"),
                    _content = _mainDiv.querySelector(".content"),
                    _buyEmoteDiv = document.getElementById("buyEmote"),
                    _buyTitle = _buyEmoteDiv.querySelector("p"),
                    _buyButton = _buyEmoteDiv.querySelector("button"),
                    _buyCanvas = _buyEmoteDiv.querySelector("canvas"),
                    _buyCtx = _buyCanvas.getContext("2d"),
                    _emote2Buy = -1;
                exports.emotesWindow = {
                    show: function() {
                        exports.emotesWindow.init(), _mainDiv.style.display = "block"
                    },
                    hide: function() {
                        _mainDiv.style.display = "none", Sound_1.Sound.playSound("click")
                    },
                    buyEmote0: function(e) {
                        var emoteId = _emote2Buy = parseInt(e.currentTarget.getAttribute("data-emote-id")),
                            emote = Emotes_1.emotes[emoteId];
                        _buyCanvas.width = _buyCanvas.width, _buyCtx.mozImageSmoothingEnabled = !1, _buyCtx.msImageSmoothingEnabled = !1, _buyCtx.imageSmoothingEnabled = !1;
                        _buyCtx.drawImage(__1.imgs.miscSheet, emote.img.x, emote.img.y, emote.img.w, emote.img.h, .5 * _buyCanvas.width - .5 * emote.img.w * 4, .5 * _buyCanvas.height - .5 * emote.img.h * 4, 4 * emote.img.w, 4 * emote.img.h), _buyTitle.innerHTML = emote.name, void 0 !== emote.gold && (_buyButton.innerHTML = "Buy for <span>" + emote.gold + "</span> <img src='imgs/gold2.png' />", _buyButton.onclick = exports.emotesWindow.buyEmote), Sound_1.Sound.playSound("click"), _buyEmoteDiv.style.display = ""
                    },
                    buyEmote: function(e) {
                        Network_1.Network.send("buyEmote$" + _emote2Buy), config_1.playerData.emotes.push(_emote2Buy), config_1.playerData.gold -= Emotes_1.emotes[_emote2Buy].gold, resourceBar_1.resourceBar.refresh(), exports.emotesWindow.init(), UI_1.unlocks2Show.push({
                            type: UI_1.UnlockType.Emote,
                            emote: Emotes_1.emotes[_emote2Buy]
                        }), UI_1.UI.showAchivement(), Sound_1.Sound.playSound("click"), _buyEmoteDiv.style.display = "none"
                    },
                    init: function() {
                        _content.innerHTML = "";
                        for (var i = 0; i < Emotes_1.emotes.length; i++) {
                            var emote = Emotes_1.emotes[i],
                                el = document.createElement("div");
                            _content.appendChild(el);
                            var canvas = document.createElement("canvas"),
                                ctx = canvas.getContext("2d");
                            canvas.width = 100, canvas.height = 100, ctx.mozImageSmoothingEnabled = !1, ctx.msImageSmoothingEnabled = !1, ctx.imageSmoothingEnabled = !1, el.appendChild(canvas);
                            ctx.drawImage(__1.imgs.miscSheet, emote.img.x, emote.img.y, emote.img.w, emote.img.h, .5 * canvas.width - .5 * emote.img.w * 4, .5 * canvas.height - .5 * emote.img.h * 4, 4 * emote.img.w, 4 * emote.img.h);
                            var name_1 = document.createElement("div");
                            if (name_1.innerText = emote.name, name_1.className = "emoteName", el.appendChild(name_1), (0, functions_1.arrayContains)(config_1.playerData.emotes, i)) {
                                var img = document.createElement("img");
                                img.src = "imgs/main_ui/icon_checked.png", img.className = "emoteBought", el.appendChild(img)
                            } else {
                                var cost = document.createElement("div");
                                cost.innerHTML = emote.gold.toString() + " <img src='imgs/gold2.png' />", cost.className = "emoteCost", el.appendChild(cost);
                                var bb = document.createElement("button");
                                bb.innerText = "Buy", bb.setAttribute("data-emote-id", i.toString()), bb.onclick = exports.emotesWindow.buyEmote0, el.appendChild(bb)
                            }
                        }
                        console.log(_mainDiv)
                    }
                }, _mainDiv.querySelector(".close").onclick = exports.emotesWindow.hide, _buyEmoteDiv.querySelector(".close").onclick = function() {
                    _buyEmoteDiv.style.display = "none", Sound_1.Sound.playSound("click")
                }
            },
            1747: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.gameShare = void 0;
                var functions_1 = __webpack_require__(7582),
                    _mainDiv = document.getElementById("gameShare"),
                    _linkInput = _mainDiv.querySelector(".inviteLink");
                exports.gameShare = {
                    show: function() {
                        _mainDiv.style.display = "", _linkInput.value = (0, functions_1.getCurrentGameLink)()
                    },
                    hide: function() {
                        _mainDiv.style.display = "none"
                    }
                }, _mainDiv.querySelector(".F-Button.link").onclick = function() {
                    (0, functions_1.copyInput)(_linkInput)
                }, _mainDiv.querySelector(".F-Button.close").onclick = exports.gameShare.hide
            },
            1292: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.homeScreen = void 0;
                var Data_1 = __webpack_require__(6313),
                    config_1 = __webpack_require__(5303),
                    CustomBuild_1 = __webpack_require__(9800),
                    functions_1 = __webpack_require__(7582),
                    map1_1 = __webpack_require__(9620),
                    NameColor_1 = __webpack_require__(3280),
                    root_1 = __webpack_require__(17),
                    Skin_1 = __webpack_require__(192),
                    UI_1 = __webpack_require__(2664),
                    clickable_1 = __webpack_require__(2513),
                    hoverLight_1 = __webpack_require__(2068),
                    labelButton_1 = __webpack_require__(3329),
                    lang_1 = __webpack_require__(9655),
                    standardTextInput_1 = __webpack_require__(5085),
                    toolTip_1 = __webpack_require__(5847),
                    loginScreen_1 = __webpack_require__(3459),
                    newGame_1 = __webpack_require__(9794),
                    domMainContent = document.getElementById("homeUIContent"),
                    domMain = document.getElementById("homeUI"),
                    domAbilities = null,
                    _hideHomeWindowForever = !1,
                    _showHomeWindow = !1;
                exports.homeScreen = {
                    renderButtonChangeSkins_: function(parentNode) {
                        var button = document.createElement("button");
                        button.onclick = function() {
                            config_1.playerData.authLevel >= 6 && Skin_1.Skin_.show()
                        }, button.id = "button_change_skins", button.className = "hatButton standardWell pixelated", button.style.position = "relative";
                        var canvas = document.createElement("canvas");
                        return canvas.style.width = "100%", canvas.style.height = "100%", button.appendChild(canvas), parentNode.appendChild(button), (0, hoverLight_1.hoverLight)(button, {
                            width: "120px",
                            height: "118px",
                            left: "-6px",
                            top: "-6px"
                        }), (0, toolTip_1.tooltip)(button, {
                            tip: config_1.playerData.authLevel >= 6 ? "Change skin" : "Register to change your skin",
                            align: "center"
                        }), (0, clickable_1.clickable)(button), UI_1.UI.canvasChangeSkinsButton = canvas, button
                    },
                    renderButtonAbilities_: function(parentNode) {
                        var button = document.createElement("button");
                        domAbilities = button, button.onclick = function() {
                            config_1.playerData.authLevel >= 6 && CustomBuild_1.CustomBuild.show()
                        }, button.id = "ability_button_main", button.className = "standardWell pixelated", button.style.position = "relative", button.refreshView = Skin_1.Skin_.refreshAbilitiesButton, button.refreshView(button), parentNode.appendChild(button)
                    },
                    cachedSocialButtons: null,
                    collectSocialButtons: function() {
                        exports.homeScreen.cachedSocialButtons.container.removeChild(exports.homeScreen.cachedSocialButtons.disc), exports.homeScreen.cachedSocialButtons.container.removeChild(exports.homeScreen.cachedSocialButtons.fb), exports.homeScreen.cachedSocialButtons.container.removeChild(exports.homeScreen.cachedSocialButtons.wiki), exports.homeScreen.cachedSocialButtons.container.removeChild(exports.homeScreen.cachedSocialButtons.rd), exports.homeScreen.cachedSocialButtons.container.removeChild(exports.homeScreen.cachedSocialButtons.fbw), exports.homeScreen.cachedSocialButtons.container = null
                    },
                    renderSocialButton_: function(buttonClassName, openURL, tipLabel) {
                        var domButton = document.createElement("div");
                        return domButton.className = "socialMediaBtn " + buttonClassName, domButton.onclick = function() {
                            window.open(openURL, "_blank")
                        }, (0, hoverLight_1.hoverLight)(domButton, {
                            width: "46px",
                            height: "50px"
                        }), tipLabel && tipLabel.length > 0 && (0, toolTip_1.tooltip)(domButton, {
                            tip: tipLabel,
                            align: "center"
                        }), (0, clickable_1.clickable)(domButton), domButton
                    },
                    renderSocialMedia_: function(parentNode) {
                        var domContainer = document.createElement("div");
                        if (domContainer.className = "socialMediaContainer", !exports.homeScreen.cachedSocialButtons) {
                            var domFacebookWidget = document.createElement("div");
                            domFacebookWidget.innerHTML = '<div class="fb-like" data-href="https://www.facebook.com/slay.one.game/" data-layout="button" data-action="like" data-size="small" data-show-faces="false" data-share="true"></div>', exports.homeScreen.cachedSocialButtons = {
                                yt: exports.homeScreen.renderSocialButton_("socialMediaYt", "https://www.youtube.com/channel/UCvfm6BNJ8tLJy2lZkaZTAFg?sub_confirmation=1", "Youtube"),
                                fb: exports.homeScreen.renderSocialButton_("socialMediaFb", "https://www.facebook.com/slay.one.game/", "Facebook"),
                                twttr: exports.homeScreen.renderSocialButton_("socialMediaTw", "https://twitter.com/slayoneofficial", "Twitter"),
                                rd: exports.homeScreen.renderSocialButton_("socialMediaRd", "https://www.reddit.com/r/slayone", "Reddit"),
                                disc: exports.homeScreen.renderSocialButton_("socialMediaDisc", "https://discordapp.com/invite/DTvcu44", "Discord"),
                                wiki: exports.homeScreen.renderSocialButton_("socialMediaWiki", "https://slayone.gamepedia.com/Slay.one_Wiki", "Wiki"),
                                fbw: domFacebookWidget
                            }
                        }
                        exports.homeScreen.cachedSocialButtons.container = domContainer, domContainer.appendChild(exports.homeScreen.cachedSocialButtons.fb), domContainer.appendChild(exports.homeScreen.cachedSocialButtons.wiki), domContainer.appendChild(exports.homeScreen.cachedSocialButtons.rd), domContainer.appendChild(exports.homeScreen.cachedSocialButtons.disc), domContainer.appendChild(exports.homeScreen.cachedSocialButtons.fbw), parentNode.appendChild(domContainer)
                    },
                    levelBar: null,
                    renderLevelInfo_: function(parentNode) {
                        exports.homeScreen.levelBar = document.createElement("div"), exports.homeScreen.levelBar.className = "levelInfo", parentNode.appendChild(exports.homeScreen.levelBar), exports.homeScreen.refreshExp()
                    },
                    refreshExp: function() {
                        config_1.playerData.lvl = (0, Data_1.getLvlFromXp)(config_1.playerData.xp);
                        var xp1 = config_1.playerData.xp - (0, Data_1.getTotalXPRequiredForLvl)(config_1.playerData.lvl),
                            xp2 = (0, Data_1.getXPRequiredForLvl)(config_1.playerData.lvl + 1),
                            perc = Math.floor(100 * xp1 / xp2);
                        exports.homeScreen.levelBar.innerHTML = '<div class="levelHeader">Level ' + config_1.playerData.lvl + '</div><div class="levelProgressBar"><div class="progressIndicator" style="width: ' + perc + '%;"></div></div><div class="standardTooltip">EXP: ' + xp1 + " / " + xp2 + "<br /><br />" + lang_1.lang.get("home.tooltip.exp") + "</div>"
                    },
                    renderWelcomeMessage_: function(parentNode) {
                        var domWelcomeMsg = document.createElement("div");
                        domWelcomeMsg.className = "homeWelcomeMsgWrapper", domWelcomeMsg.innerHTML = '<div class="msgHead">' + lang_1.lang.get("home.welcome.prefix") + "</div>", parentNode.appendChild(domWelcomeMsg);
                        var domWelcomeBody = document.createElement("div");
                        domWelcomeBody.className = "msgBody", domWelcomeMsg.appendChild(domWelcomeBody), exports.homeScreen.refreshWelcomeMessage(domWelcomeBody)
                    },
                    refreshWelcomeMessage: function(parentNode) {
                        var domMsgBody = parentNode || document.querySelector(".homeWelcomeMsgWrapper .msgBody");
                        domMsgBody.innerHTML = "", exports.homeScreen.generatePlayerProfileBody(domMsgBody)
                    },
                    generatePlayerProfileBody: function(parentNode) {
                        var div = document.createElement("div");
                        if (config_1.playerData.clanTag.length > 0) {
                            var span_1 = document.createElement("span");
                            span_1.innerText = "[", div.appendChild(span_1), (span_1 = document.createElement("span")).className = "pseudoLink withClickSound", span_1.innerText = config_1.playerData.clanTag, span_1.id = "homeScreenClanTag", span_1.setAttribute("data-clanTag", config_1.playerData.clanTag), span_1.onclick = UI_1.UI.requestMyClanInfo0, span_1.style.color = "white", div.appendChild(span_1), (span_1 = document.createElement("span")).innerText = "] ", div.appendChild(span_1)
                        }
                        var span = document.createElement("span");
                        span.className = "nick pseudoLink withClickSound", span.innerText = (0, functions_1.escapeHtml)(config_1.playerData.name), span.setAttribute("data-playerId", config_1.playerData.db_id.toString()), span.onclick = UI_1.UI.showPlayerInfoById0, span.style.color = NameColor_1.NameColor.getColor(), div.appendChild(span), parentNode.appendChild(div)
                    },
                    renderNickNameTextInput_: function(parentNode) {
                        (0, standardTextInput_1.standardTextInput)(parentNode, {
                            size: 10,
                            placeholder: lang_1.lang.get("home.input.nickname.placeholder"),
                            cssId: "inputNickname",
                            skin: "shadowed"
                        })
                    },
                    renderBottomButtons_: function(parentNode) {
                        var prevNode = parentNode.querySelector("#homeBottomButtons");
                        null != prevNode && parentNode.removeChild(prevNode);
                        var domContainer = document.createElement("div");
                        domContainer.id = "homeBottomButtons";
                        var divPlay = document.createElement("div");
                        if (divPlay.className = "homeBottomButton", (0, labelButton_1.labelButton)(divPlay, {
                                label: lang_1.lang.get("home.buttons.play.label"),
                                theme: "StandardYellow",
                                tip: lang_1.lang.get("home.buttons.play.tooltip"),
                                onClick: function() {
                                    var inputNickname = document.getElementById("inputNickname"),
                                        nickname = "";
                                    inputNickname && (nickname = inputNickname.value.trim().replace(/ /g, "_"), inputNickname.value = nickname), newGame_1.newGame.show()
                                }
                            }), domContainer.appendChild(divPlay), config_1.playerData.authLevel >= Data_1.AUTH_LEVEL.PLAYER) {
                            domContainer.classList.add("loggedIn");
                            var divListRooms = document.createElement("div");
                            divListRooms.className = "homeBottomButton buttonLobby", (0, labelButton_1.labelButton)(divListRooms, {
                                label: lang_1.lang.get("home.buttons.lobby.label"),
                                theme: "StandardGreen",
                                tip: lang_1.lang.get("home.buttons.lobby.tooltip"),
                                tipAlign: "center",
                                onClick: function() {
                                    UI_1.UI.showLobby()
                                }
                            }), domContainer.appendChild(divListRooms);
                            var divLogOut = document.createElement("div");
                            divLogOut.className = "homeBottomButton", (0, labelButton_1.labelButton)(divLogOut, {
                                label: lang_1.lang.get("home.buttons.logout.label"),
                                tip: lang_1.lang.get("home.buttons.logout.tooltip"),
                                tipAlign: "right",
                                theme: "StandardGreen",
                                onClick: functions_1.logout
                            }), domContainer.appendChild(divLogOut)
                        } else {
                            domContainer.classList.remove("loggedIn");
                            var divLogin = document.createElement("div");
                            divLogin.className = "homeBottomButton", (0, labelButton_1.labelButton)(divLogin, {
                                label: lang_1.lang.get("home.buttons.login.label"),
                                tip: lang_1.lang.get("home.buttons.login.tooltip"),
                                tipAlign: "center",
                                theme: "StandardGreen",
                                onClick: function() {
                                    exports.homeScreen.hideWindow(), loginScreen_1.loginScreen.showLogin()
                                }
                            }), domContainer.appendChild(divLogin);
                            var divSignup = document.createElement("div");
                            divSignup.className = "homeBottomButton";
                            (0, labelButton_1.labelButton)(divSignup, {
                                label: lang_1.lang.get("home.buttons.signup.label"),
                                tip: lang_1.lang.get("home.buttons.signup.tooltip"),
                                tipAlign: "right",
                                theme: "StandardGreen",
                                onClick: function() {
                                    exports.homeScreen.hideWindow(), loginScreen_1.loginScreen.showReg()
                                }
                            });
                            domContainer.appendChild(divSignup)
                        }
                        parentNode.appendChild(domContainer)
                    },
                    hideWindow: function(forever) {
                        _hideHomeWindowForever = !!forever, _showHomeWindow = !1, domMain.style.display = "none"
                    },
                    showWindow: function() {
                        _showHomeWindow = !_hideHomeWindowForever
                    },
                    refreshAbilitiesPanel: function() {
                        domAbilities.refreshView()
                    },
                    render: function() {
                        domMainContent.innerHTML && domMainContent.innerHTML.length > 0 && exports.homeScreen.collectSocialButtons(), domMainContent.innerHTML = "";
                        for (var aRows = [
                                [{
                                    renderMethod: exports.homeScreen.renderButtonChangeSkins_
                                }, {
                                    renderMethod: exports.homeScreen.renderButtonAbilities_
                                }, {
                                    renderMethod: exports.homeScreen.renderSocialMedia_
                                }],
                                [{
                                    renderMethod: config_1.playerData.authLevel >= Data_1.AUTH_LEVEL.PLAYER ? exports.homeScreen.renderWelcomeMessage_ : exports.homeScreen.renderNickNameTextInput_
                                }, {
                                    renderMethod: exports.homeScreen.renderLevelInfo_
                                }]
                            ], i = 0; i < aRows.length; i++) {
                            var aCells = aRows[i],
                                domTable = document.createElement("div"),
                                domRow = document.createElement("div");
                            domTable.className = 0 == i ? "mainLayoutTable" : "profile", domRow.style.display = "table-row";
                            for (var _i = 0, aCells_1 = aCells; _i < aCells_1.length; _i++) {
                                var layoutCell = aCells_1[_i],
                                    domCell = document.createElement("div"),
                                    renderMethod = layoutCell.renderMethod ? layoutCell.renderMethod.bind(this) : null;
                                domCell.className = "mainLayoutCell", renderMethod(domCell), domRow.appendChild(domCell)
                            }
                            domTable.appendChild(domRow), domMainContent.appendChild(domTable)
                        }
                        exports.homeScreen.renderBottomButtons_(domMain), exports.homeScreen.showWindow()
                    }
                }, setInterval((function() {
                    !_showHomeWindow || null !== root_1.root.game && root_1.root.game.map !== map1_1.map1 ? null !== domMain && "block" === domMain.style.display && (domMain.style.display = "none") : null === domMain || "none" !== domMain.style.display && domMain.style.display || (domMain.style.display = "block")
                }), 50)
            },
            6183: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.hotkeyScreen = exports.commandNameLabels = void 0;
                var i, Weapons_1 = __webpack_require__(2007),
                    Input_1 = __webpack_require__(5860),
                    UI_1 = __webpack_require__(2664),
                    lang_1 = __webpack_require__(9655),
                    viewHelpers_1 = __webpack_require__(7174);
                exports.commandNameLabels = [], exports.commandNameLabels[Input_1.COMMAND.UP] = "config.keyname.up", exports.commandNameLabels[Input_1.COMMAND.DOWN] = "config.keyname.down", exports.commandNameLabels[Input_1.COMMAND.LEFT] = "config.keyname.left", exports.commandNameLabels[Input_1.COMMAND.RIGHT] = "config.keyname.right", exports.commandNameLabels[Input_1.COMMAND.RELOAD] = "config.keyname.reload", exports.commandNameLabels[Input_1.COMMAND.STAND] = "config.keyname.stand", exports.commandNameLabels[Input_1.COMMAND.ABILITY1] = "config.keyname.ability1", exports.commandNameLabels[Input_1.COMMAND.ABILITY2] = "config.keyname.ability2", exports.commandNameLabels[Input_1.COMMAND.JUMP] = "config.keyname.jump", exports.commandNameLabels[Input_1.COMMAND.PICK_UPGRADE] = "config.keyname.pickupgrade", exports.commandNameLabels[Input_1.COMMAND.FIRE_2] = "config.keyname.fire2";
                for (var _i = 0, weapons_1 = Weapons_1.weapons; _i < weapons_1.length; _i++) {
                    var weapon = weapons_1[_i];
                    if (!weapon.noWeapon) {
                        var cmd = Input_1.COMMAND["WPN" + (weapon.id + 1)];
                        Input_1.commandNames[cmd] = (i = weapon.id, "Select " + Weapons_1.weapons[i].name), exports.commandNameLabels[cmd] = "weapons." + weapon.id + ".name"
                    }
                }
                exports.hotkeyScreen = {
                    showWindow: function(options) {
                        var domContent = document.createElement("div");
                        domContent.className = "hotkeyView";
                        var domHeader = document.createElement("div");
                        domHeader.className = "screenTitle", domHeader.innerHTML = lang_1.lang.get("hotkey.title"), domContent.appendChild(domHeader);
                        var domKeysContainer = document.createElement("div");
                        for (var cmd in domKeysContainer.className = "hotkeysWrapper", Input_1.commandNames) {
                            var div1 = document.createElement("div");
                            div1.className = "hotkeySubDiv", domKeysContainer.appendChild(div1), div1.innerText = lang_1.lang.get(exports.commandNameLabels[cmd]);
                            var b = document.createElement("button");
                            b.setAttribute("data-key", cmd), b.className = "hotkey_button withClickSound", b.id = "hotkey_" + cmd, b.innerText = (0, Input_1.getKeyName)(Input_1.commandKeys[cmd]), b.onclick = UI_1.UI.changeHotkey1, div1.appendChild(b)
                        }
                        domContent.appendChild(domKeysContainer), (0, viewHelpers_1.showPopup)("hotkeyScreen", {
                            theme: "light",
                            content: domContent,
                            onClose: options.onClose
                        })
                    },
                    hideWindow: function() {
                        (0, viewHelpers_1.hidePopup)("hotkeyScreen")
                    }
                }
            },
            5661: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.infoScreen = void 0;
                var viewHelpers_1 = __webpack_require__(7174);
                exports.infoScreen = {
                    render: function(screenTitle, screenContent) {
                        var domContainer = document.createElement("div");
                        domContainer.className = "infoScreen pixelated";
                        var domWindowTitle = document.createElement("div");
                        domWindowTitle.className = "infoScreenTitle", domWindowTitle.innerHTML = screenTitle, domContainer.appendChild(domWindowTitle);
                        var domContentWrap = document.createElement("div");
                        domContentWrap.className = "infoScreenContentWrap";
                        var domContent = document.createElement("div");
                        domContent.className = "infoScreenContent", domContent.innerHTML = screenContent, domContentWrap.appendChild(domContent), domContainer.appendChild(domContentWrap), (0, viewHelpers_1.showPopup)("infoScreen", {
                            theme: "light",
                            content: domContainer
                        })
                    }
                }
            },
            3519: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.levelUp = void 0;
                var GameTypes_1 = __webpack_require__(3963),
                    Skins_1 = __webpack_require__(3346),
                    functions_1 = __webpack_require__(7582),
                    Sound_1 = __webpack_require__(3754),
                    lang_1 = __webpack_require__(9655),
                    _mainBG = document.getElementById("levelUpBG"),
                    _mainDiv = document.getElementById("levelUp"),
                    _badge = _mainDiv.querySelector(".badge"),
                    _rewardTitle = _mainDiv.querySelector(".rewardArea legend"),
                    _levelUp_rewardList = document.getElementById("levelUp_rewardList");
                exports.levelUp = {
                    show: function(level, rewards) {
                        _mainBG.style.display = "", _badge.innerHTML = level.toString(), _rewardTitle.innerHTML = lang_1.lang.get("levelUp.reward.title", {
                            level
                        }), Sound_1.Sound.playSound("lvlup"), _levelUp_rewardList.innerHTML = "";
                        for (var _i = 0, rewards_1 = rewards; _i < rewards_1.length; _i++) {
                            var reward = rewards_1[_i],
                                li = document.createElement("li");
                            li.className = "F-ItemRenderer", _levelUp_rewardList.appendChild(li);
                            var div = document.createElement("div");
                            div.className = "icon_unlock", li.appendChild(div);
                            var h3 = document.createElement("h3");
                            li.appendChild(h3);
                            var canvas = document.createElement("canvas");
                            canvas.width = 100, canvas.height = 100, li.appendChild(canvas);
                            var ctx = canvas.getContext("2d");
                            ctx.mozImageSmoothingEnabled = !1, ctx.msImageSmoothingEnabled = !1, ctx.imageSmoothingEnabled = !1;
                            var img = document.createElement("img");
                            if (img.className = "center", img.width = 80, li.appendChild(img), ctx.fillStyle = "rgba(0, 0, 0, 0)", "gold" === reward.type) h3.innerHTML = lang_1.lang.get("levelUp.title.gold", {
                                gold: "x" + reward.value
                            }), canvas.style.display = "none", img.src = "imgs/icons/icon_gold02.png", img.style.display = "", div.style.display = "none";
                            else if ("chest" === reward.type) h3.innerHTML = lang_1.lang.get("levelUp.title.chest", {
                                name: (0, functions_1.getChestName)(reward.id),
                                count: "x" + reward.value
                            }), canvas.style.display = "none", img.src = "imgs/chest/chest_" + reward.id + ".png", img.style.display = "", div.style.display = "none";
                            else if ("mode" === reward.type) {
                                var mode = GameTypes_1.MAP_TYPE_SETTINGS[parseInt(reward.value)];
                                h3.innerHTML = lang_1.lang.get(mode.langLabel), canvas.style.display = "none", img.src = "imgs/icons/" + mode.icon, img.style.display = "", div.style.display = ""
                            } else if ("gem" === reward.type) h3.innerHTML = lang_1.lang.get("levelUp.title.gem", {
                                gem: "x" + reward.value
                            }), canvas.style.display = "none", img.src = "imgs/icons/gem.png", img.style.display = "", div.style.display = "none";
                            else if ("hat" === reward.type) {
                                var hat = Skins_1.hats[parseInt(reward.value)];
                                h3.innerHTML = hat.name, img.style.display = "none", canvas.style.display = "", div.style.display = "", (0, functions_1.drawHat)(ctx, hat, 3.5, 2, canvas.width, canvas.height)
                            }
                        }
                    },
                    hide: function() {
                        _mainBG.style.display = "none"
                    }
                }, _mainDiv.querySelector(".F-Button.ok").onclick = exports.levelUp.hide
            },
            3459: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.loginScreen = void 0;
                var Data_1 = __webpack_require__(6313),
                    Network_1 = __webpack_require__(367),
                    floatTip_1 = __webpack_require__(9177),
                    lang_1 = __webpack_require__(9655),
                    homeScreen_1 = __webpack_require__(1292),
                    _loginBG = document.getElementById("popupWndContainer"),
                    _nameInputLogin = document.getElementById("inputUserName"),
                    _pwInputLogin = document.getElementById("inputUserPass"),
                    _loginSubmit = document.getElementById("loginSubmit"),
                    _stayLoggedInCB = document.getElementById("stayLoggedIn"),
                    _nameInputReg = document.getElementById("inputUserNameReg"),
                    _pwInputReg = document.getElementById("inputUserPassReg"),
                    _emailInputReg = document.getElementById("inputUserEmail"),
                    _regSubmit = document.getElementById("regSubmit"),
                    _legacyInputLogin = document.getElementById("inputLegacyName"),
                    _legacyPwInputLogin = document.getElementById("inputLegacyPass"),
                    _legacyNewNameInputLogin = document.getElementById("inputLegacyNewName"),
                    _legacySubmit = document.getElementById("legacySubmit"),
                    _switchLogin = document.getElementById("switchLogin"),
                    _switchReg = document.getElementById("switchReg"),
                    _switchLegacy = document.getElementById("switchLegacy"),
                    _tabLogin = document.getElementById("tabLogin"),
                    _tabReg = document.getElementById("tabReg"),
                    _tabLegacy = document.getElementById("tabLegacy"),
                    _legacyStatus = document.getElementById("legacyServerMsg");
                exports.loginScreen = {
                    showLogin: function() {
                        _loginBG.style.display = "", _tabLogin.style.display = "", _tabLegacy.style.display = "none", _tabReg.style.display = "none", _switchLogin.classList.add("labelButtonStandardTabActivated"), _switchLogin.classList.remove("labelButtonStandardTab"), _switchReg.classList.add("labelButtonStandardTab"), _switchReg.classList.remove("labelButtonStandardTabActivated"), _switchLegacy.classList.add("labelButtonStandardTab"), _switchLegacy.classList.remove("labelButtonStandardTabActivated")
                    },
                    showReg: function() {
                        _loginBG.style.display = "", _tabReg.style.display = "", _tabLegacy.style.display = "none", _tabLogin.style.display = "none", _switchReg.classList.add("labelButtonStandardTabActivated"), _switchReg.classList.remove("labelButtonStandardTab"), _switchLogin.classList.add("labelButtonStandardTab"), _switchLogin.classList.remove("labelButtonStandardTabActivated"), _switchLegacy.classList.add("labelButtonStandardTab"), _switchLegacy.classList.remove("labelButtonStandardTabActivated"), document.getElementById("agreementTips").innerHTML = lang_1.lang.get("account.views.signup.agreement.template", {
                            termName: '<a class="pseudoLink withClickSound" onclick="UI.toggleAGB();">' + lang_1.lang.get("account.views.signup.agreement.termname") + "</a>"
                        })
                    },
                    showLegacy: function() {
                        _loginBG.style.display = "", _tabReg.style.display = "none", _tabLegacy.style.display = "", _tabLogin.style.display = "none", _switchLegacy.classList.add("labelButtonStandardTabActivated"), _switchLegacy.classList.remove("labelButtonStandardTab"), _switchReg.classList.add("labelButtonStandardTab"), _switchReg.classList.remove("labelButtonStandardTabActivated"), _switchLogin.classList.add("labelButtonStandardTab"), _switchLogin.classList.remove("labelButtonStandardTabActivated"), _legacySubmit.classList.remove("disabled"), _legacyStatus.innerText = ""
                    },
                    hide: function() {
                        _loginBG.style.display = "none", homeScreen_1.homeScreen.render()
                    },
                    commitLegacyLogin: function() {
                        if (!_legacySubmit.classList.contains("disabled")) {
                            var name = _legacyInputLogin.value,
                                pw = _legacyPwInputLogin.value,
                                newName = _legacyNewNameInputLogin.value;
                            if (name.length <= 0) return (0, floatTip_1.floatTip)("error", lang_1.lang.get("account.views.login.name.warning")), null;
                            if (pw.length <= 0) return (0, floatTip_1.floatTip)("error", lang_1.lang.get("account.views.login.password.warning")), null;
                            _legacySubmit.classList.add("disabled"), _legacyStatus.innerText = "";
                            for (var i = 0; i < 36; i++) {
                                var span = document.createElement("span");
                                span.innerText = ".", _legacyStatus.appendChild(span), updateWaitingAnimation()
                            }
                            return Network_1.Network.send("legacyLogin$" + name + "$" + pw + "$" + newName), null
                        }
                    },
                    commitLogin: function() {
                        var name = _nameInputLogin.value,
                            pw = _pwInputLogin.value;
                        return name.length <= 0 ? ((0, floatTip_1.floatTip)("error", lang_1.lang.get("account.views.login.name.warning")), null) : pw.length <= 0 ? ((0, floatTip_1.floatTip)("error", lang_1.lang.get("account.views.login.password.warning")), null) : (Network_1.Network.send("login$" + name + "$" + pw), _stayLoggedInCB.checked ? localStorage.setItem("autologin", name + "$" + pw) : localStorage.setItem("autologin", ""), null)
                    },
                    commitReg: function() {
                        var valUserName = _nameInputReg.value.trim().replace(/ /g, "_"),
                            valUserPass = _pwInputReg.value,
                            valUserEmail = _emailInputReg.value;
                        return "OK" !== (0, Data_1.checkName)(valUserName) ? ((0, floatTip_1.floatTip)("error", lang_1.lang.get("account.views.signup.name.warning")), null) : (0, Data_1.validatePW)(valUserPass) ? (0, Data_1.validateMail)(valUserEmail) ? (Network_1.Network.send("register$" + valUserName + "$" + valUserPass + "$" + valUserEmail), null) : ((0, floatTip_1.floatTip)("error", lang_1.lang.get("account.views.signup.email.warning")), null) : ((0, floatTip_1.floatTip)("error", lang_1.lang.get("account.views.signup.password.warning")), null)
                    }
                }, _nameInputLogin.onkeydown = _pwInputLogin.onkeydown = function(e) {
                    13 === e.keyCode && exports.loginScreen.commitLogin()
                }, _legacyInputLogin.onsubmit = exports.loginScreen.commitLegacyLogin, _legacyPwInputLogin.onsubmit = exports.loginScreen.commitLegacyLogin, _legacyNewNameInputLogin.onsubmit = exports.loginScreen.commitLegacyLogin, _legacySubmit.onclick = exports.loginScreen.commitLegacyLogin, _nameInputLogin.onsubmit = exports.loginScreen.commitLogin, _pwInputLogin.onsubmit = exports.loginScreen.commitLogin, _loginSubmit.onclick = exports.loginScreen.commitLogin, _nameInputReg.onsubmit = exports.loginScreen.commitReg, _pwInputReg.onsubmit = exports.loginScreen.commitReg, _emailInputReg.onsubmit = exports.loginScreen.commitReg, _regSubmit.onclick = exports.loginScreen.commitReg, _switchLogin.onclick = exports.loginScreen.showLogin, _switchReg.onclick = exports.loginScreen.showReg, _switchLegacy.onclick = exports.loginScreen.showLegacy, document.getElementById("loginCloseBtn").onclick = exports.loginScreen.hide;
                var updateWaitingAnimation = function() {
                    var spans = _legacyStatus.childNodes;
                    if (!(spans.length < 5 || null === _legacyStatus.offsetParent)) {
                        for (var now = Date.now(), i = 0; i < spans.length; i++) spans[i].style.opacity = Math.pow(.5 * Math.sin(.004 * -now + .33 * i) + .5, 2).toString();
                        setTimeout(updateWaitingAnimation, 100)
                    }
                }
            },
            9794: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.newGame = void 0;
                var GameTypes_1 = __webpack_require__(3963),
                    config_1 = __webpack_require__(5303),
                    Network_1 = __webpack_require__(367),
                    root_1 = __webpack_require__(17),
                    UI_1 = __webpack_require__(2664),
                    lang_1 = __webpack_require__(9655),
                    _mainDiv = document.getElementById("newGame"),
                    _customDiv = document.getElementById("customDiv"),
                    _buttons = _mainDiv.querySelectorAll(".row.fourth .F-Button"),
                    _modes = ["ranked", "ffa", "zombie", "team"];

                function fourthOnClick(event) {
                    var button = event.currentTarget,
                        gameMode = parseInt(button.getAttribute("data-game-mode"));
                    if (!button.classList.contains("disabled")) {
                        if (GameTypes_1.MAP_TYPE_SETTINGS[gameMode] && GameTypes_1.MAP_TYPE_SETTINGS[gameMode].queue) return _mainDiv.style.display = "none", Network_1.Network.send("enterQueue$" + gameMode), document.getElementById("ladderDiv").style.display = "", void(root_1.root.searchingLadder = !0);
                        if (GameTypes_1.MAP_TYPE_SETTINGS[gameMode] && GameTypes_1.MAP_TYPE_SETTINGS[gameMode].customBuild) return _mainDiv.style.display = "none", void Network_1.Network.send("joinRandomGame$" + this._nickName + "$" + GameTypes_1.MAP_TYPE.TOURNAMENT_UNRANKED);
                        root_1.root.joinGamePurpose = "", Network_1.Network.send("joinRandomGame$" + this._nickName + "$" + gameMode), _mainDiv.style.display = "none"
                    }
                }

                function itemOnClick(event) {
                    for (var target = event.currentTarget, i = 0; i < _modes.length; i++)
                        if (target.classList.contains(_modes[i])) {
                            for (var j = 0; j < _modes.length; j++) _modes[i] != _modes[j] && _mainDiv.classList.remove(_modes[j]);
                            _mainDiv.classList.add(_modes[i]);
                            break
                        }
                }
                exports.newGame = {
                    show: function() {
                        _mainDiv.style.display = "", exports.newGame.renderLock()
                    },
                    renderLock: function() {
                        _customDiv.disabled = !config_1.playerData.db_id, _buttons.forEach((function(button) {
                            var setting = GameTypes_1.MAP_TYPE_SETTINGS[parseInt(button.getAttribute("data-game-mode"))],
                                tooltipContainer = button.querySelector(".standardTooltipContainer"),
                                tooltipContainerSpan = button.querySelector(".standardTooltipContainer span");
                            void 0 !== setting.unlockLevel && setting.unlockLevel > config_1.playerData.lvl ? (button.classList.add("disabled"), tooltipContainer.classList.add("active"), tooltipContainerSpan.innerText = lang_1.lang.get("config.mode.tooltip.lock", {
                                mode: setting.name,
                                level: setting.unlockLevel
                            })) : (button.classList.remove("disabled"), tooltipContainer.classList.remove("active"))
                        }))
                    }
                }, _mainDiv.querySelectorAll(".row.fourth .F-Button").forEach((function(el) {
                    return el.onclick = fourthOnClick
                })), _mainDiv.querySelectorAll(".row.second .item").forEach((function(el) {
                    return el.onclick = itemOnClick
                })), _customDiv.onclick = function() {
                    config_1.playerData.db_id && (UI_1.UI.showLobby(), _mainDiv.style.display = "none")
                }, _mainDiv.querySelector(".close").onclick = function() {
                    _mainDiv.style.display = "none"
                }
            },
            6584: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.openChest = void 0;
                var Data_1 = __webpack_require__(6313),
                    TreasureChests_1 = __webpack_require__(5927),
                    config_1 = __webpack_require__(5303),
                    Skin_1 = __webpack_require__(192),
                    Sound_1 = __webpack_require__(3754),
                    _mainBG = document.getElementById("openChestBG"),
                    _mainDiv = document.getElementById("openChest"),
                    _goldTitle = _mainDiv.querySelector(".rewards .summary h3"),
                    _goldAmountField = _mainDiv.querySelector(".rewards .reward.gold .amount"),
                    _goldYoursLabel = _mainDiv.querySelector(".rewards .reward.gold .yoursLabel"),
                    _goldYoursAmountField = _mainDiv.querySelector(".rewards .reward.gold .yoursAmount"),
                    _goldIcon = _mainDiv.querySelector(".rewards .icon"),
                    _goldLabel = _mainDiv.querySelector(".rewards .frame .label"),
                    _showTime = 0,
                    _rewardQue = [];
                exports.openChest = {
                    show0: function(chestId, gold, loot) {
                        _rewardQue.push({
                            chestId,
                            gold,
                            loot
                        }), exports.openChest.show()
                    },
                    show: function() {
                        if (!("none" !== _mainBG.style.display || _rewardQue.length <= 0)) {
                            var reward = _rewardQue.splice(0, 1)[0];
                            if (Skin_1.Skin_.close(), Sound_1.Sound.playSound("open_chest"), _mainBG.style.display = "", _mainDiv.className = _mainDiv.className.replace(/chest_\d+/g, ""), _mainDiv.classList.add("chest_" + reward.chestId), void 0 !== reward.gold) _goldAmountField.innerHTML = "+" + reward.gold.toString(), _goldYoursAmountField.innerHTML = config_1.playerData.gold.toString(), _goldTitle.style.display = "", _goldYoursLabel.style.display = "", _goldIcon.className = "icon", _goldIcon.innerHTML = "", _goldLabel.innerText = "Gold";
                            else if (void 0 !== reward.loot && reward.loot.type === TreasureChests_1.ChestLootType.NameColor) {
                                var nameColor = Data_1.NAME_COLOR[reward.loot.colorIndex];
                                _goldAmountField.innerHTML = "Special name color reward", _goldYoursAmountField.innerHTML = "", _goldTitle.style.display = "none", _goldYoursLabel.style.display = "none", _goldIcon.className = "icon2", _goldIcon.innerHTML = nameColor.name, _goldIcon.style.color = nameColor.code, _goldLabel.innerText = "Name Color", config_1.playerData.name_color.push(reward.loot.colorIndex)
                            }
                            _showTime = Date.now()
                        }
                    },
                    hide: function() {
                        Date.now() - _showTime >= 1e3 && (_mainBG.style.display = "none", exports.openChest.show())
                    }
                }, _mainBG.onclick = exports.openChest.hide
            },
            613: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.optionsScreen = void 0;
                var servers_1 = __webpack_require__(1749),
                    config_1 = __webpack_require__(5303),
                    functions_1 = __webpack_require__(7582),
                    Network_1 = __webpack_require__(367),
                    Skin_1 = __webpack_require__(192),
                    floatTip_1 = __webpack_require__(9177),
                    lang_1 = __webpack_require__(9655),
                    hotkeyScreen_1 = __webpack_require__(6183),
                    viewHelpers_1 = __webpack_require__(7174),
                    root_1 = __webpack_require__(17),
                    map1_1 = __webpack_require__(9620),
                    _mainDiv = document.getElementById("popupBG"),
                    _langDD = document.getElementById("langDropdown"),
                    _serverDD = document.getElementById("serverDropdown"),
                    _lowEffectsCB = document.getElementById("lowEffectsCheckbox"),
                    _noChatCB = document.getElementById("noChatCheckbox"),
                    _wpnBarNotClickableCB = document.getElementById("wpnBarNotClickableCheckbox"),
                    _hideMinimapCB = document.getElementById("hideMinimapCheckbox"),
                    _yellowNamesCB = document.getElementById("yellowNamesCheckbox"),
                    _showPingCB = document.getElementById("showPingCheckbox"),
                    _showFPSCB = document.getElementById("showFPSCheckbox"),
                    _soundRange = document.getElementById("soundRange"),
                    _mapSize = document.getElementById("mapSize");
                document.getElementById("lowEffectLb").onclick = function() {
                    _lowEffectsCB.style.display = "block" === _lowEffectsCB.style.display ? "none" : "block", config_1.options.graphicSettings = "block" === _lowEffectsCB.style.display ? 0 : 10, window.localStorage.setItem("graphicSettings", config_1.options.graphicSettings.toString())
                }, document.getElementById("noChatLb").onclick = function() {
                    _noChatCB.style.display = "block" === _noChatCB.style.display ? "none" : "block", config_1.options.hideChat = "block" === _noChatCB.style.display, window.localStorage.setItem("hideChat", "block" === _noChatCB.style.display ? "1" : "0"), document.getElementById("chatDisplayDiv").style.display = "block" === _noChatCB.style.display ? "none" : "block"
                }, document.getElementById("wpnBarNotClickableLb").onclick = function() {
                    _wpnBarNotClickableCB.style.display = "block" === _wpnBarNotClickableCB.style.display ? "none" : "block", config_1.options.weaponsUnclickable = "block" === _wpnBarNotClickableCB.style.display, window.localStorage.setItem("weaponsUnclickable", config_1.options.weaponsUnclickable ? "1" : "0")
                }, document.getElementById("hideMinimapLb").onclick = function() {
                    _hideMinimapCB.style.display = "block" === _hideMinimapCB.style.display ? "none" : "block", config_1.options.hideMinimap = "block" === _hideMinimapCB.style.display, window.localStorage.setItem("hideMinimap", config_1.options.hideMinimap ? "1" : "0"), null !== root_1.root.game && root_1.root.game.map !== map1_1.map1 && (document.getElementById("minimap").style.display = config_1.options.hideMinimap ? "none" : "block")
                }, document.getElementById("yellowNamesLb").onclick = function() {
                    _yellowNamesCB.style.display = "block" === _yellowNamesCB.style.display ? "none" : "block", config_1.options.forcePlayerNameColor = "block" === _yellowNamesCB.style.display, window.localStorage.setItem("forcePlayerNameColor", config_1.options.forcePlayerNameColor ? "1" : "0")
                }, document.getElementById("showPingLb").onclick = function() {
                    _showPingCB.style.display = "block" === _showPingCB.style.display ? "none" : "block", config_1.options.showPing = "block" === _showPingCB.style.display, window.localStorage.setItem("showPing", config_1.options.showPing ? "1" : "0")
                }, document.getElementById("showFPSLb").onclick = function() {
                    _showFPSCB.style.display = "block" === _showFPSCB.style.display ? "none" : "block", config_1.options.showFPS = "block" === _showFPSCB.style.display, window.localStorage.setItem("showFPS", config_1.options.showFPS ? "1" : "0")
                }, _soundRange.onchange = function() {
                    config_1.options.sound_volume = parseFloat(this.value), window.localStorage.setItem("sound_volume", config_1.options.sound_volume.toString())
                }, _mapSize.onchange = function() {
                    config_1.options.minimapSizeFactor = parseFloat(this.value), window.localStorage.setItem("minimapSizeFactor", config_1.options.minimapSizeFactor.toString())
                }, exports.optionsScreen = {
                    renderLanguageSwitch: function() {
                        for (; null !== _langDD.firstChild;) _langDD.removeChild(_langDD.firstChild);
                        for (var key in lang_1.lang.supportedLocales) {
                            var option = document.createElement("option");
                            option.innerText = lang_1.lang.supportedLocales[key], option.value = key, _langDD.appendChild(option), lang_1.lang.locale === key && (_langDD.value = key)
                        }
                    },
                    renderServerSwitch: function() {
                        for (; null !== _serverDD.firstChild;) _serverDD.removeChild(_serverDD.firstChild);
                        for (var i = 0; i < servers_1.SERVERS.length; i++) {
                            var option = document.createElement("option");
                            option.innerText = servers_1.SERVERS[i].name, option.value = i.toString(), _serverDD.appendChild(option), Network_1.Network.connectedServerIndex === i && (_serverDD.value = i.toString())
                        }
                    },
                    showWindow: function() {
                        Skin_1.Skin_.close(), exports.optionsScreen.renderServerSwitch(), exports.optionsScreen.renderLanguageSwitch(), _lowEffectsCB.style.display = 0 === config_1.options.graphicSettings ? "block" : "none", _noChatCB.style.display = "true" === window.localStorage.getItem("hideChat") ? "block" : "none", _wpnBarNotClickableCB.style.display = config_1.options.weaponsUnclickable ? "block" : "none", _hideMinimapCB.style.display = config_1.options.hideMinimap ? "block" : "none", _yellowNamesCB.style.display = config_1.options.forcePlayerNameColor ? "block" : "none", _showPingCB.style.display = config_1.options.showPing ? "block" : "none", _showFPSCB.style.display = config_1.options.showFPS ? "block" : "none", _soundRange.value = config_1.options.sound_volume.toString(), _mapSize.value = config_1.options.minimapSizeFactor.toString(), _mainDiv.style.display = ""
                    },
                    hideWindow: function() {
                        _mainDiv.style.display = "none"
                    }
                }, document.getElementById("optionsFullScreenButton").onclick = function() {
                    (0, functions_1.toggleFullscreen)(document.documentElement)
                }, document.getElementById("optionsReplayButton").onclick = function() {
                    (0, functions_1.isInGame)() ? (0, floatTip_1.floatTip)("error", lang_1.lang.get("options.msg.operation_forbidden")) : (0, functions_1.loadReplay)()
                }, document.getElementById("optionsHotkeysButton").onclick = function() {
                    hotkeyScreen_1.hotkeyScreen.showWindow({})
                }, _serverDD.onchange = function() {
                    if ((0, functions_1.isInGame)())(0, floatTip_1.floatTip)("error", lang_1.lang.get("options.msg.operation_forbidden"));
                    else var promptWnd = (0, viewHelpers_1.showPrompt)({
                        title: lang_1.lang.get("options.server.prompt.title"),
                        content: lang_1.lang.get("options.server.prompt.content"),
                        buttons: ["cancel", "ok"],
                        onClick: function(btnName) {
                            if ("ok" === btnName) {
                                var val = document.getElementById("serverDropdown").value;
                                window.localStorage.setItem("chooseServerOnStart", val), setTimeout((function() {
                                    window.location.reload()
                                }), 250)
                            }
                            promptWnd.close()
                        }
                    })
                }, _langDD.onchange = function() {
                    if ((0, functions_1.isInGame)())(0, floatTip_1.floatTip)("error", lang_1.lang.get("options.msg.operation_forbidden"));
                    else var promptWnd = (0, viewHelpers_1.showPrompt)({
                        title: lang_1.lang.get("options.language.prompt.title"),
                        content: lang_1.lang.get("options.language.prompt.content"),
                        buttons: ["cancel", "ok"],
                        onClick: function(btnName) {
                            if ("ok" === btnName) {
                                var val = document.getElementById("langDropdown").value;
                                lang_1.lang.setPreferredLocale(val), setTimeout((function() {
                                    window.location.reload()
                                }), 250)
                            }
                            promptWnd.close()
                        }
                    })
                }, document.getElementById("optionsCloseButton").onclick = function() {
                    exports.optionsScreen.hideWindow()
                }
            },
            3550: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.playerProfileScreen = void 0;
                var Data_1 = __webpack_require__(6313),
                    config_1 = __webpack_require__(5303),
                    DomHelper_1 = __webpack_require__(5560),
                    functions_1 = __webpack_require__(7582),
                    NameColor_1 = __webpack_require__(3280),
                    Network_1 = __webpack_require__(367),
                    labelButton_1 = __webpack_require__(3329),
                    lang_1 = __webpack_require__(9655),
                    changeNick_1 = __webpack_require__(5352),
                    clanMain_1 = __webpack_require__(429),
                    viewHelpers_1 = __webpack_require__(7174);
                exports.playerProfileScreen = {
                    renderPlayerMeta_: function(parentNode, profile) {
                        var self = !(profile.pid !== config_1.playerData.db_id);
                        profile.color in Data_1.NAME_COLOR || (profile.color = 200);
                        var nick = DomHelper_1.Dom.createElement("div", parentNode, void 0, "fullLine", 'Nickname: <span class="playerNick" style="color: ' + NameColor_1.NameColor.getColor(profile.color) + '">' + (0, functions_1.escapeHtml)(profile.displayName) + "</span> ");
                        self && DomHelper_1.Dom.createElement("div", nick, void 0, "F-Button changeNick info withClickSound", '<div class="label"></div><div class="hover"></div>');
                        var pId = DomHelper_1.Dom.createElement("div", parentNode, void 0, "fullLine", 'Player ID: <span class="highlightedNum">' + profile.pid + "</span>");
                        config_1.playerData.authLevel >= Data_1.AUTH_LEVEL.MOD2 && (DomHelper_1.Dom.createElement("button", pId, void 0, "modButton", "/plinfo", functions_1.modPlInfo).setAttribute("data-playerId", profile.pid.toString()), DomHelper_1.Dom.createElement("button", pId, void 0, "modButton", "/ban", functions_1.initBan).setAttribute("data-playerId", profile.pid.toString()));
                        profile.clanName.length > 0 && DomHelper_1.Dom.createElement("div", parentNode, void 0, "fullLine", lang_1.lang.get("profile.clan.label", {
                            clanName: "[<a class='playerClanName pseudoLink yellow withClickSound'>" + profile.clanName + "</a>]"
                        })), DomHelper_1.Dom.createElement("div", parentNode, void 0, "smallHalf", lang_1.lang.get("profile.level.label", {
                            level: "<span class='highlightedNum'>" + (0, Data_1.getLvlFromXp)(profile.exp) + "</span>"
                        }));
                        var elo = DomHelper_1.Dom.createElement("div", parentNode, void 0, "largeHalf", lang_1.lang.get("profile.elo.label", {
                            elo: "<span class='highlightedNum'>" + profile.elo + "</span>"
                        }));
                        DomHelper_1.Dom.createElement("span", elo, void 0, void 0, " ("), DomHelper_1.Dom.createElement("a", elo, void 0, "pseudoLink yellow withClickSound", "Ranked games list", (function() {
                            Network_1.Network.send("getLaddergames$" + profile.pid)
                        })), DomHelper_1.Dom.createElement("span", elo, void 0, void 0, ")"), DomHelper_1.Dom.createElement("div", parentNode, void 0, "smallHalf", lang_1.lang.get("profile.num_kills.label", {
                            numKills: "<span class='boldText green'>" + profile.numKills + "</span>"
                        }));
                        var kdRateStr = "";
                        profile.numDeaths > 0 && (kdRateStr = " " + lang_1.lang.get("profile.kdrate.label", {
                            rate: "<span class=''>" + Math.floor(profile.numKills / profile.numDeaths * 10) / 10 + "</span>"
                        })), DomHelper_1.Dom.createElement("div", parentNode, void 0, "largeHalf", lang_1.lang.get("profile.num_death.label", {
                            numDeaths: "<span class='boldText red'>" + profile.numDeaths + "</span>"
                        }) + kdRateStr);
                        var dateCreated = new Date(parseInt(profile.tsCreated)),
                            spawnTimeStr = dateCreated.getDate() + "/" + (dateCreated.getMonth() + 1) + "/" + dateCreated.getFullYear();
                        DomHelper_1.Dom.createElement("div", parentNode, void 0, "largeHalf", lang_1.lang.get("profile.spawn_time.label", {
                            spawnTime: "<span class='highlightedNum'>" + spawnTimeStr + "</span>"
                        })), self && parentNode.querySelector(".changeNick").addEventListener("click", (function() {
                            changeNick_1.changeNick.open()
                        }));
                        var clanLink = parentNode.querySelector(".playerClanName");
                        (clanLink && clanLink.addEventListener("click", (function() {
                            clanMain_1.clanMain.show(profile.clanName), exports.playerProfileScreen.hide()
                        })), profile.isLegacy) && (DomHelper_1.Dom.createElement("div", parentNode, void 0, "legacyIndicator", "<span>â˜…</span><span>L</span>").title = "Legacy account")
                    },
                    renderChangeNameColor_: function(parentNode, viewModel) {
                        if (!(viewModel.profile.pid !== config_1.playerData.db_id || config_1.playerData.name_color.length < 2)) {
                            var domBtnContainer = document.createElement("div");
                            domBtnContainer.className = "nameColorContainer", viewModel.btnChangeColor = (0, labelButton_1.labelButton)(domBtnContainer, {
                                label: "change name color",
                                theme: "LightGreen",
                                customClassName: "changeNameColor",
                                onClick: function() {
                                    NameColor_1.NameColor.show()
                                }
                            }), parentNode.appendChild(domBtnContainer)
                        }
                    },
                    renderPlayerDescription_: function(parentNode, viewModel) {
                        var profile = viewModel.profile,
                            domDesc = document.createElement("div"),
                            str = "";
                        str += "<textarea spellcheck='false' class='playerDesc'", str += " maxlength='255' readonly id='personal_text'>" + (0, functions_1.escapeHtml)(profile.desc) + "</textarea>", domDesc.innerHTML = str, viewModel.taDesc = domDesc.querySelector(".playerDesc"), parentNode.appendChild(domDesc)
                    },
                    renderOperationsButtons_: function(parentNode, viewModel) {
                        var domBtnContainer = document.createElement("div");
                        domBtnContainer.className = "buttonsContainer", viewModel.btnEditDesc = (0, labelButton_1.labelButton)(domBtnContainer, {
                            label: lang_1.lang.get("profile.btn_desc_edit.label"),
                            theme: "LightGreen",
                            customClassName: "editDescButton",
                            onClick: function() {
                                exports.playerProfileScreen.setDescEditEnabled_(viewModel, !0), exports.playerProfileScreen.refreshButtonStatus_(viewModel)
                            }
                        }), viewModel.btnSaveDesc = (0, labelButton_1.labelButton)(domBtnContainer, {
                            label: lang_1.lang.get("profile.btn_desc_save.label"),
                            theme: "LightGreen",
                            customClassName: "editDescButton",
                            onClick: function() {
                                exports.playerProfileScreen.setDescEditEnabled_(viewModel, !1), exports.playerProfileScreen.refreshButtonStatus_(viewModel), Network_1.Network.send("update-profile-text$" + viewModel.taDesc.value)
                            }
                        }), parentNode.appendChild(domBtnContainer), exports.playerProfileScreen.setDescEditEnabled_(viewModel, !1), exports.playerProfileScreen.refreshButtonStatus_(viewModel)
                    },
                    setDescEditEnabled_: function(viewModel, enabled) {
                        viewModel.editingDesc = enabled, enabled ? (viewModel.taDesc.readOnly = !1, viewModel.taDesc.classList.add("editableDesc"), viewModel.taDesc.focus()) : (viewModel.taDesc.readOnly = !0, viewModel.taDesc.classList.remove("editableDesc"))
                    },
                    refreshButtonStatus_: function(viewModel) {
                        if (viewModel.btnEditDesc.style.display = "none", viewModel.btnSaveDesc.style.display = "none", "self" === viewModel.perspective) viewModel.btnEditDesc.style.display = viewModel.editingDesc ? "none" : "block", viewModel.btnSaveDesc.style.display = viewModel.editingDesc ? "block" : "none"
                    },
                    show: function(options) {
                        for (var oldPlayerProfileScreen = document.getElementById("playerProfileScreen"); null !== oldPlayerProfileScreen && null !== oldPlayerProfileScreen.parentNode;) oldPlayerProfileScreen.parentNode.removeChild(oldPlayerProfileScreen), oldPlayerProfileScreen = document.getElementById("playerProfileScreen");
                        var domContent = document.createElement("div");
                        domContent.className = "playerProfileView";
                        var viewModel = {
                                btnEditDesc: null,
                                btnSaveDesc: null,
                                taDesc: null,
                                editingDesc: !1,
                                perspective: options && options.perspective ? options.perspective : "guest",
                                profile: options.profile
                            },
                            domPlayerMeta = document.createElement("div");
                        domPlayerMeta.className = "playerMeta", domContent.appendChild(domPlayerMeta), exports.playerProfileScreen.renderPlayerMeta_(domPlayerMeta, options.profile), exports.playerProfileScreen.renderChangeNameColor_(domContent, viewModel);
                        var domPlayerDescWrapper = document.createElement("div");
                        domPlayerDescWrapper.className = "playerDescWrapper", exports.playerProfileScreen.renderPlayerDescription_(domPlayerDescWrapper, viewModel), exports.playerProfileScreen.renderOperationsButtons_(domPlayerDescWrapper, viewModel), domContent.appendChild(domPlayerDescWrapper), (0, viewHelpers_1.showPopup)("playerProfileScreen", {
                            theme: "light",
                            content: domContent,
                            onClose: function() {
                                NameColor_1.NameColor.hide()
                            }
                        })
                    },
                    hide: function() {
                        (0, viewHelpers_1.hidePopup)("playerProfileScreen")
                    }
                }
            },
            4542: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.resourceBar = void 0;
                var config_1 = __webpack_require__(5303),
                    functions_1 = __webpack_require__(7582),
                    Network_1 = __webpack_require__(367),
                    lang_1 = __webpack_require__(9655),
                    _mainDiv = document.getElementById("resourceBar"),
                    _goldField = _mainDiv.querySelector(".resource.gold .value"),
                    _gemField = _mainDiv.querySelector(".resource.gem .value"),
                    _resourceBar_chestsList = document.getElementById("resourceBar_chestsList"),
                    _chests = [];
                exports.resourceBar = {
                    refresh: function() {
                        _goldField.innerHTML = config_1.playerData.gold.toString(), _gemField.innerHTML = config_1.playerData.gems.toString(), _chests.length = 0, _resourceBar_chestsList.innerHTML = "";
                        var _loop_1 = function(id) {
                            var chest = config_1.playerData.chests[id],
                                openable = 1e3 * chest.openTime < Date.now() && chest.count > 0,
                                li = document.createElement("li");
                            li.className = "F-ItemRenderer " + (openable ? "openable" : "") + " chest_" + id, _resourceBar_chestsList.appendChild(li);
                            var iconDiv = document.createElement("div");
                            iconDiv.className = "icon", li.appendChild(iconDiv);
                            var amountDiv = document.createElement("div");
                            amountDiv.className = "amount", amountDiv.innerText = chest.count.toString(), li.appendChild(amountDiv);
                            var countdownDiv = document.createElement("div");
                            countdownDiv.className = "countdown", li.appendChild(countdownDiv);
                            var labelSpan = document.createElement("span");
                            labelSpan.className = "label", countdownDiv.appendChild(labelSpan);
                            var openButton = document.createElement("div");
                            openButton.className = "F-Button open withClickSound", openButton.onclick = function() {
                                Network_1.Network.send("openTreasureChest$" + id)
                            }, li.appendChild(openButton);
                            var openSpan = document.createElement("span");
                            openSpan.className = "label", openSpan.innerText = lang_1.lang.get("chests.open"), openButton.appendChild(openSpan);
                            var hoverDiv = document.createElement("div");
                            hoverDiv.className = "hover", openButton.appendChild(hoverDiv), _chests.push({
                                li,
                                countdownLabel: labelSpan,
                                chestInfo: chest
                            })
                        };
                        for (var id in config_1.playerData.chests) _loop_1(id)
                    },
                    countdown: function() {
                        for (var _i = 0, _chests_1 = _chests; _i < _chests_1.length; _i++) {
                            var chest = _chests_1[_i];
                            if (0 !== chest.chestInfo.count) {
                                var openTime = 1e3 * chest.chestInfo.openTime;
                                openTime >= Date.now() ? (chest.countdownLabel.innerText = (deadline = openTime, seconds = void 0, seconds = Math.round((deadline - Date.now()) / 1e3), (0, functions_1.humanizeSeconds)(seconds)), chest.li.classList.remove("openable")) : chest.li.classList.add("openable")
                            }
                        }
                        var deadline, seconds
                    },
                    show: function() {
                        _mainDiv.style.display = "", exports.resourceBar.refresh()
                    },
                    hide: function() {
                        _mainDiv.style.display = "none"
                    }
                }, setInterval(exports.resourceBar.countdown, 1e3)
            },
            6749: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.sendRespawn = exports.respawn = void 0;
                var functions_1 = __webpack_require__(7582),
                    Network_1 = __webpack_require__(367),
                    UI_1 = __webpack_require__(2664),
                    viewHelpers_1 = __webpack_require__(7174),
                    _mainDiv = document.getElementById("respawn"),
                    _linkInput = _mainDiv.querySelector(".inviteLink"),
                    _killerNameLabel = _mainDiv.querySelector(".killer>.name"),
                    _buttonRespawn = _mainDiv.querySelector(".F-Button.respawn"),
                    _counterLabel = _mainDiv.querySelector(".counter"),
                    _timeTillRespawn = null;

                function sendRespawn() {
                    null !== _timeTillRespawn && _timeTillRespawn <= 0 && (Network_1.Network.send("respawn"), UI_1.UI.hideDeathScreen(), (0, viewHelpers_1.hideAd)())
                }
                exports.respawn = {
                    show: function(killerName) {
                        _linkInput.value = (0, functions_1.getCurrentGameLink)(), killerName || (killerName = "zombie"), _killerNameLabel.innerHTML = killerName, _mainDiv.style.display = ""
                    },
                    copyLink: function() {
                        (0, functions_1.copyInput)(_linkInput)
                    },
                    progress: function(timeTillRespawn) {
                        if (_timeTillRespawn = timeTillRespawn, _mainDiv.parentNode)
                            if (timeTillRespawn > 0) {
                                _buttonRespawn.disabled || (_mainDiv.classList.add("waiting"), _mainDiv.classList.remove("ready"), _buttonRespawn.disabled = !0, _buttonRespawn.classList.add("disabled"), _buttonRespawn.removeAttribute("onclick"));
                                var respawnTimeStr = timeTillRespawn.toString();
                                respawnTimeStr.indexOf(".") < 0 && (respawnTimeStr += ".0"), _counterLabel.innerHTML = respawnTimeStr
                            } else 0 == timeTillRespawn && (_mainDiv.classList.add("ready"), _mainDiv.classList.remove("waiting"), _buttonRespawn.disabled = !1, _buttonRespawn.classList.remove("disabled"), _buttonRespawn.onclick = sendRespawn)
                    },
                    hide: function() {
                        _mainDiv.style.display = "none"
                    }
                }, exports.sendRespawn = sendRespawn, _mainDiv.querySelector(".F-Button.link").onclick = exports.respawn.copyLink
            },
            542: function(__unused_webpack_module, exports, __webpack_require__) {
                "use strict";
                var __importDefault = this && this.__importDefault || function(mod) {
                    return mod && mod.__esModule ? mod : {
                        default: mod
                    }
                };
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.result = void 0;
                var Data_1 = __webpack_require__(6313),
                    config_1 = __webpack_require__(5303),
                    FileSaver_1 = __importDefault(__webpack_require__(9217)),
                    functions_1 = __webpack_require__(7582),
                    rankInGame_1 = __webpack_require__(6480),
                    root_1 = __webpack_require__(17),
                    UI_1 = __webpack_require__(2664),
                    lang_1 = __webpack_require__(9655),
                    _mainBG = document.getElementById("resultBG"),
                    _mainDiv = document.getElementById("result"),
                    _rankField = _mainBG.querySelector(".rankInfo"),
                    _title = _mainBG.querySelector("h2"),
                    _wholeArea = _mainBG.querySelector(".gameInfo, .reward"),
                    _scoreArea = _mainBG.querySelector(".gameInfo .score"),
                    _scoreField = _mainBG.querySelector(".gameInfo .score .value"),
                    _soulsArea = _mainBG.querySelector(".gameInfo .souls"),
                    _soulsField = _mainBG.querySelector(".gameInfo .souls .value"),
                    _killsField = _mainBG.querySelector(".gameInfo .kills .value"),
                    _deathsField = _mainBG.querySelector(".gameInfo .deaths .value"),
                    _currentLevelField = _mainBG.querySelector(".levelInfo .current"),
                    _nextLevelField = _mainBG.querySelector(".levelInfo .next"),
                    _increasedExpField = _mainBG.querySelector(".increasedExp"),
                    _goldField = _mainBG.querySelector(".gameInfo>.gold>.value"),
                    _keepButton = _mainBG.querySelector(".F-Button.keep"),
                    _closeButton = _mainBG.querySelector(".F-Button.close"),
                    _chestArea = _mainBG.querySelector(".chest.reward"),
                    _chestNameField = _chestArea.querySelector(".name"),
                    _chestIcon = _chestArea.querySelector("img"),
                    _indicators = _mainDiv.querySelectorAll(".indicator");
                _mainBG.querySelector(".F-Button.save").onclick = function() {
                    var blob = new Blob([JSON.stringify(["replay-version=4"].concat(root_1.root.game.replayFile))], {
                            type: "text/plain;charset=utf-8"
                        }),
                        d = new Date;
                    (0, FileSaver_1.default)(blob, "replay-" + d.getFullYear() + "-" + (d.getMonth() + 1) + "-" + d.getDate() + ".json")
                }, exports.result = {
                    data: null,
                    show: function(data) {
                        _mainBG.style.display = "", root_1.root.game.type.lives ? (_scoreArea.style.display = "none", _soulsArea.style.display = "none", _chestArea.style.display = "none", _wholeArea.style.display = "none", _title.style.display = "none", _mainDiv.classList.add("ladder")) : (_chestArea.style.display = "", _wholeArea.style.display = "", _title.style.display = "", _mainDiv.classList.remove("ladder"), root_1.root.game.ticksCounter < 0 ? root_1.root.game.type.showTop3 && root_1.root.game.type.winningCondition ? _rankField.innerHTML = lang_1.lang.get("result.desc.rank", {
                            rank: root_1.root.game.myRank
                        }) : _rankField.innerHTML = root_1.root.game.victoryMsg : _rankField.innerHTML = lang_1.lang.get("result.desc.noEnd"), root_1.root.game.type.souls ? (_scoreArea.style.display = "none", _soulsArea.style.display = "", _soulsField.innerHTML = data.souls) : (_scoreArea.style.display = "", _soulsArea.style.display = "none", _scoreField.innerHTML = data.elo), _killsField.innerHTML = data.kills, _deathsField.innerHTML = data.deaths, data.chestId < 0 ? _chestArea.classList.add("noChest") : (_chestArea.classList.remove("noChest"), _chestIcon.src = "imgs/chest/chest_" + data.chestId + ".png", _chestNameField.innerHTML = (0, functions_1.getChestName)(data.chestId))), _goldField.innerHTML = data.goldGained, _currentLevelField.innerHTML = "Lv" + config_1.playerData.lvl, _nextLevelField.innerHTML = "Lv" + (config_1.playerData.lvl + 1);
                        var xp1 = config_1.playerData.xp - (0, Data_1.getTotalXPRequiredForLvl)(config_1.playerData.lvl),
                            xp2 = (0, Data_1.getXPRequiredForLvl)(config_1.playerData.lvl + 1);
                        _increasedExpField.innerHTML = data.xpGained, _indicators[0].style.width = Math.floor(100 * xp1 / xp2) + "%", _indicators[1].style.width = Math.floor(100 * (xp1 - data.xpGained) / xp2) + "%", exports.result.data = data, data.exit ? _keepButton.style.display = "none" : _keepButton.style.display = ""
                    },
                    hide: function() {
                        _mainBG.style.display = "none"
                    }
                }, _keepButton.onclick = function() {
                    rankInGame_1.rankInGame.showRank(), exports.result.hide()
                }, _closeButton.onclick = function() {
                    exports.result.hide(), exports.result.data.exit ? (0, functions_1.exitGame)() : (0, UI_1.attemptExitGame)()
                }
            },
            562: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.roomCreateScreen = void 0;
                var Data_1 = __webpack_require__(6313),
                    GameTypes_1 = __webpack_require__(3963),
                    config_1 = __webpack_require__(5303),
                    functions_1 = __webpack_require__(7582),
                    Network_1 = __webpack_require__(367),
                    checkbox_1 = __webpack_require__(1913),
                    clickable_1 = __webpack_require__(2513),
                    dropDownMenu_1 = __webpack_require__(7849),
                    floatTip_1 = __webpack_require__(9177),
                    hoverLight_1 = __webpack_require__(2068),
                    lang_1 = __webpack_require__(9655),
                    loadingIndicator_1 = __webpack_require__(9658),
                    standardTextInput_1 = __webpack_require__(5085),
                    toolTip_1 = __webpack_require__(5847),
                    confirm_1 = __webpack_require__(9110),
                    viewHelpers_1 = __webpack_require__(7174),
                    _filterMapType = null,
                    _selectedMapId = -1,
                    _currentMaps = [],
                    _currentMapNodes = [];
                exports.roomCreateScreen = {
                    renderGameModeSwitcher_: function(parentNode) {
                        var domContainer = document.createElement("div");
                        domContainer.className = "gameModeSwitcherDdlWrapper";
                        for (var gameModeFilterOptions = [], _i = 0, MAP_TYPE_SETTINGS_1 = GameTypes_1.MAP_TYPE_SETTINGS; _i < MAP_TYPE_SETTINGS_1.length; _i++) {
                            var setting = MAP_TYPE_SETTINGS_1[_i];
                            setting.hidden || gameModeFilterOptions.push({
                                label: lang_1.lang.get(setting.langLabel),
                                value: setting.id.toString()
                            })
                        }
                        for (var initIndex = 0, i = 0; i < gameModeFilterOptions.length; i++)
                            if (gameModeFilterOptions[i].value === (null == _filterMapType ? void 0 : _filterMapType.toString())) {
                                initIndex = i;
                                break
                            }(0, dropDownMenu_1.dropdownMenu)(domContainer, {
                                customClassName: "gameModeSwitcherDdl",
                                customButtonClassName: "gameModeSwitcherBtn",
                                customButtonWidth: "262px",
                                customButtonHeight: "44px",
                                cssId: "gameModeSwitch",
                                selectOptions: gameModeFilterOptions,
                                initIndex,
                                mainButtonTip: lang_1.lang.get("lobby.views.create.mode_filter.tooltip"),
                                onSwitch: function(gameModeOption) {
                                    _filterMapType = gameModeOption.value, exports.roomCreateScreen.listClear_(), localStorage.setItem("defaultCreateMode", _filterMapType.toString()), exports.roomCreateScreen.getNumBots(), exports.roomCreateScreen.refreshList_()
                                }
                            }), parentNode.appendChild(domContainer)
                    },
                    renderMapsList_: function(parentNode) {
                        var domList = document.createElement("div");
                        domList.className = "mapListWrapper";
                        var domLoading = document.createElement("div");
                        domLoading.className = "mapListLoading", domLoading.id = "mapListLoading", (0, loadingIndicator_1.loadingIndicator)(domLoading, {
                            width: "100%",
                            height: "100%"
                        }).id = "domLoadingIndicator", domList.appendChild(domLoading);
                        var domTableBody = document.createElement("div");
                        domTableBody.className = "mapListBody", domTableBody.id = "domTableMapListBody", domList.appendChild(domTableBody), parentNode.appendChild(domList)
                    },
                    renderParamFields_: function(parentNode) {
                        exports.roomCreateScreen.renderBotsInput_(parentNode), exports.roomCreateScreen.renderRoundTimeInput_(parentNode)
                    },
                    renderBotsInput_: function(parentNode) {
                        var domContent = document.createElement("div");
                        domContent.className = "roomCreateParamInput";
                        var domLabel = document.createElement("span");
                        domLabel.className = "fieldLabel", domLabel.innerText = lang_1.lang.get("lobby.views.create.bots_num.prefix"), domContent.appendChild(domLabel);
                        var staticNum = document.createElement("div");
                        staticNum.className = "staticNum", staticNum.innerText = "18", staticNum.style.display = "none", domContent.appendChild(staticNum);
                        var tiNumBots = (0, standardTextInput_1.standardTextInput)(domContent, {
                            size: 10,
                            placeholder: "",
                            cssId: "inputNumBots",
                            skin: "standard",
                            customClassName: "botNumTextInput"
                        });
                        tiNumBots.type = "number", tiNumBots.min = 0, tiNumBots.max = 8, (0, toolTip_1.tooltip)(domContent, {
                            tip: lang_1.lang.get("lobby.views.create.bots_num.tooltip"),
                            align: "left",
                            multiline: !0,
                            width: "450px",
                            verticalAlign: "top"
                        }), parentNode.appendChild(domContent), exports.roomCreateScreen.getNumBots()
                    },
                    getRoundTime: function() {
                        return _filterMapType === GameTypes_1.MAP_TYPE.ZOMBIE_COOP ? "10" : "15"
                    },
                    getNumBots: function() {
                        var input = document.getElementById("inputNumBots"),
                            staticNum = input.parentNode.parentNode.querySelector("div.staticNum");
                        _filterMapType === GameTypes_1.MAP_TYPE.ZOMBIE_COOP ? (input.parentNode.style.display = "none", staticNum.style.display = "", input.value = "18") : (input.parentNode.style.display = "", staticNum.style.display = "none", input.value = "4")
                    },
                    renderRoundTimeInput_: function(parentNode) {
                        var domContent = document.createElement("div");
                        domContent.className = "roomCreateParamInput";
                        var domLabel = document.createElement("span");
                        domLabel.className = "fieldLabel", domLabel.innerText = lang_1.lang.get("lobby.views.create.round_time.prefix"), domContent.appendChild(domLabel);
                        var tiRoundTime = (0, standardTextInput_1.standardTextInput)(domContent, {
                            size: 10,
                            placeholder: "",
                            cssId: "inputRoundTime",
                            skin: "standard",
                            customClassName: "roundTimeTextInput"
                        });
                        tiRoundTime.type = "number", tiRoundTime.min = 10, (0, toolTip_1.tooltip)(domContent, {
                            tip: lang_1.lang.get("lobby.views.create.round_time.tooltip"),
                            align: "left"
                        }), tiRoundTime.value = exports.roomCreateScreen.getRoundTime(), parentNode.appendChild(domContent)
                    },
                    renderPrivateGameCheckbox_: function(parentNode) {
                        var domCheckBox = (0, checkbox_1.checkbox)(parentNode, {
                            selected: !1,
                            label: lang_1.lang.get("lobby.views.create.private_game.checkbox"),
                            customClassName: "roomCreatePrivateCheckbox",
                            cssId: "checkBoxbPrivateGame",
                            onChange: function(selected) {}
                        });
                        (0, toolTip_1.tooltip)(domCheckBox, {
                            tip: lang_1.lang.get("lobby.views.create.private_game.tooltip"),
                            align: "left"
                        })
                    },
                    isFreeMap: function() {
                        for (var _i = 0, CREATION_FREE_MAPS_1 = Data_1.CREATION_FREE_MAPS; _i < CREATION_FREE_MAPS_1.length; _i++) {
                            var map = CREATION_FREE_MAPS_1[_i];
                            if (_selectedMapId === map) return !0
                        }
                        return !1
                    },
                    renderStartButton_: function(parentNode) {
                        var button = document.createElement("div");
                        button.className = "F-Button gold", button.innerHTML = '<div class="label"> <span>' + lang_1.lang.get("lobby.views.create.start_btn.label") + '</span><div class="icon x16 gold" id="roomCreationPrice1"></div><span class="goldNumber" id="roomCreationPrice2">' + Data_1.CONST.GAME_CREATION_GOLD_COST + '</span> </div><div class="hover"></div>', button.onclick = function() {
                            exports.roomCreateScreen.createGame()
                        }, parentNode.appendChild(button)
                    },
                    listInit_: function() {
                        _currentMapNodes.length = 0;
                        for (var mapRow = null, i = 0; i < _currentMaps.length; i++) {
                            i % 3 == 0 && ((mapRow = document.createElement("div")).className = "mapListRow");
                            var mapCell = document.createElement("div");
                            mapCell.className = "mapListCell";
                            var addedNode = exports.roomCreateScreen.listCreateOne_(mapCell, _currentMaps[i]);
                            _currentMapNodes.push(addedNode), mapRow.appendChild(mapCell), i % 3 == 2 && (document.getElementById("domTableMapListBody").appendChild(mapRow), mapRow = null)
                        }
                        null !== mapRow && document.getElementById("domTableMapListBody").appendChild(mapRow), _currentMaps.length > 0 && exports.roomCreateScreen.selectMap_(_currentMaps[0].mapId, !0)
                    },
                    listClear_: function() {
                        document.getElementById("domTableMapListBody").innerHTML = "", _currentMapNodes.length = 0
                    },
                    listCreateOne_: function(parentNode, mapData) {
                        var _a, domMap = document.createElement("div");
                        domMap.className = "mapNode";
                        var mapHTML = "";
                        mapHTML += '<div class="mapTitle">' + mapData.mapName + "</div>", mapHTML += '<div class="mapThumbail">', mapHTML += '<img src="' + (mapData.thumbnail.length > 100 ? mapData.thumbnail : "imgs/main_ui/map_placeholder.png") + '">', mapHTML += '<div class="mapSize">' + mapData.mapW + "x" + mapData.mapH + "</div>", mapHTML += "</div>", mapHTML += '<div class="mapCapacity">' + lang_1.lang.get("lobby.views.create.list.row.tooltip.player.header") + ": <span>" + mapData.maxPlayers + "</span></div>", mapHTML += '<div class="mapMode">' + lang_1.lang.get(GameTypes_1.MAP_TYPE_SETTINGS[null !== (_a = mapData.mode) && void 0 !== _a ? _a : GameTypes_1.MAP_TYPE.TOURNAMENT_UNRANKED].langLabel) + "</div>", domMap.innerHTML = mapHTML;
                        var domHighlight = document.createElement("div");
                        if (domHighlight.className = "mapNodeHighlight", domHighlight.style.display = "none", domMap.appendChild(domHighlight), domMap.setSelected = function(val) {
                                val ? (domHighlight.style.display = "block", domMap.classList.add("selectedNode")) : (domHighlight.style.display = "none", domMap.classList.remove("selectedNode"))
                            }, domMap.dataset.slayOneMapId = mapData.mapId.toString(), mapData.mapDesc && mapData.mapDesc.length > 0) {
                            var escapedDesc = (0, functions_1.escapeHtml)(mapData.mapDesc);
                            if (escapedDesc.length > 0) {
                                var domRoomTip_1 = document.createElement("div");
                                domRoomTip_1.className = "mapListTip", domRoomTip_1.style.display = "none";
                                var roomTipHTML = '<div class="mapTipWrapper">';
                                roomTipHTML += '<div class="mapMetaDetail">' + escapedDesc + "</div>", roomTipHTML += "</div>", domRoomTip_1.innerHTML = roomTipHTML, domMap.appendChild(domRoomTip_1), domMap.addEventListener("mouseover", (function() {
                                    domRoomTip_1.style.display = "flex"
                                })), domMap.addEventListener("mouseout", (function() {
                                    domRoomTip_1.style.display = "none"
                                }))
                            }
                        }
                        return (0, hoverLight_1.hoverLight)(domMap, {
                            width: "166px",
                            height: "198px"
                        }), domMap.addEventListener("click", (function(evt) {
                            exports.roomCreateScreen.selectMap_(mapData.mapId)
                        })), (0, clickable_1.clickable)(domMap), parentNode.appendChild(domMap), domMap
                    },
                    refreshList_: function() {
                        exports.roomCreateScreen.listClear_(), document.getElementById("domTableMapListBody").style.display = "none", document.getElementById("domLoadingIndicator").startAnimation(), document.getElementById("mapListLoading").style.display = "block", Network_1.Network.send("req-map-list-4-create$" + _filterMapType)
                    },
                    setNewMaps: function(maps) {
                        _currentMaps = maps, document.getElementById("domTableMapListBody").style.display = "block", document.getElementById("mapListLoading").style.display = "none", document.getElementById("domLoadingIndicator").stopAnimation(), _currentMaps.forEach((function(map) {
                            map.mode = _filterMapType
                        })), exports.roomCreateScreen.listInit_()
                    },
                    selectMap_: function(mapId, force) {
                        if (force || mapId !== _selectedMapId) {
                            if (null !== _selectedMapId) {
                                var oldMapNode = exports.roomCreateScreen.getMapNodeById_(_selectedMapId);
                                oldMapNode && oldMapNode.setSelected(!1)
                            }
                            _selectedMapId = mapId;
                            var isFree = exports.roomCreateScreen.isFreeMap();
                            document.getElementById("roomCreationPrice1").style.display = isFree ? "none" : "", document.getElementById("roomCreationPrice2").style.display = isFree ? "none" : "";
                            var newMapNode = exports.roomCreateScreen.getMapNodeById_(mapId);
                            newMapNode && newMapNode.setSelected(!0)
                        }
                    },
                    getMapNodeById_: function(mapId) {
                        for (var _i = 0, _currentMapNodes_1 = _currentMapNodes; _i < _currentMapNodes_1.length; _i++) {
                            var node = _currentMapNodes_1[_i];
                            if (node.dataset.slayOneMapId == mapId.toString()) return node
                        }
                        return null
                    },
                    createGame: function() {
                        exports.roomCreateScreen.isFreeMap() ? exports.roomCreateScreen.createGame_() : config_1.playerData.gold < Data_1.CONST.GAME_CREATION_GOLD_COST ? (0, floatTip_1.floatTip)("error", lang_1.lang.get("room.create.error.insufficient")) : confirm_1.confirmPrompt.show("", lang_1.lang.get("room.create.confirm", {
                            gold: Data_1.CONST.GAME_CREATION_GOLD_COST
                        }), exports.roomCreateScreen.createGame_)
                    },
                    createGame_: function() {
                        Network_1.Network.send("create-game$" + _selectedMapId + "$" + document.getElementById("inputRoundTime").value + "$" + document.getElementById("inputNumBots").value + "$" + _filterMapType + "$" + (document.getElementById("checkBoxbPrivateGame").getSelected() ? "1" : "0")), confirm_1.confirmPrompt.hide(), (0, viewHelpers_1.hidePopup)("lobby")
                    },
                    render: function(parentNode) {
                        parentNode.innerHTML = "";
                        var domContent = document.createElement("div");
                        parentNode.appendChild(domContent), domContent.className = "roomTabView roomCreateView";
                        var storedCreateMode = localStorage.getItem("defaultCreateMode");
                        storedCreateMode && storedCreateMode.length > 0 && (_filterMapType = parseInt(storedCreateMode));
                        for (var aRows = [
                                [{
                                    renderMethod: exports.roomCreateScreen.renderGameModeSwitcher_
                                }, {
                                    renderMethod: exports.roomCreateScreen.renderPrivateGameCheckbox_
                                }],
                                [{
                                    renderMethod: exports.roomCreateScreen.renderMapsList_
                                }],
                                [{
                                    renderMethod: exports.roomCreateScreen.renderParamFields_
                                }, {
                                    renderMethod: exports.roomCreateScreen.renderStartButton_
                                }]
                            ], i = 0; i < aRows.length; i++) {
                            var aCells = aRows[i],
                                domTable = document.createElement("div"),
                                domRow = document.createElement("div");
                            domTable.appendChild(domRow), domContent.appendChild(domTable), domTable.className = "mainLayoutTable", domRow.style.display = "table-row", domTable.style.marginBottom = 0 == i ? "15px" : "8px";
                            for (var _i = 0, aCells_1 = aCells; _i < aCells_1.length; _i++) {
                                var layoutCell = aCells_1[_i],
                                    domCell = document.createElement("div");
                                domRow.appendChild(domCell);
                                var renderMethod = layoutCell.renderMethod ? layoutCell.renderMethod.bind(this) : null;
                                domCell.className = "mainLayoutCell roomCreateLayoutCell", renderMethod(domCell)
                            }
                        }
                        return exports.roomCreateScreen.refreshList_(), domContent
                    }
                }
            },
            7524: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.roomsListScreen = void 0;
                var GameTypes_1 = __webpack_require__(3963),
                    config_1 = __webpack_require__(5303),
                    Network_1 = __webpack_require__(367),
                    root_1 = __webpack_require__(17),
                    dropDownMenu_1 = __webpack_require__(7849),
                    iconButton_1 = __webpack_require__(3831),
                    labelButton_1 = __webpack_require__(3329),
                    lang_1 = __webpack_require__(9655),
                    standardTextInput_1 = __webpack_require__(5085),
                    toolTip_1 = __webpack_require__(5847),
                    roomCreateScreen_1 = __webpack_require__(562),
                    viewHelpers_1 = __webpack_require__(7174),
                    _roomListViewModel = {
                        filterGameMode: null,
                        tiFilterName: null,
                        filterName: "",
                        domList: null,
                        domEmpty: null,
                        domContent: null,
                        domTableHeader: null,
                        domTableBody: null,
                        rooms: {},
                        roomWatching: !1,
                        networkInitCb: null
                    };
                exports.roomsListScreen = {
                    renderGameModeSwitcher_: function(parentNode) {
                        for (var gameModeFilterOptions = [{
                                label: lang_1.lang.get("config.mode.all.label"),
                                value: "-1"
                            }], _i = 0, MAP_TYPE_SETTINGS_1 = GameTypes_1.MAP_TYPE_SETTINGS; _i < MAP_TYPE_SETTINGS_1.length; _i++) {
                            var setting = MAP_TYPE_SETTINGS_1[_i];
                            setting.hidden || gameModeFilterOptions.push({
                                label: lang_1.lang.get(setting.langLabel),
                                value: setting.id.toString()
                            })
                        }(0, dropDownMenu_1.dropdownMenu)(parentNode, {
                            customClassName: "gameModeSwitcherDdl",
                            customButtonClassName: "gameModeSwitcherBtn",
                            customButtonWidth: "262px",
                            customButtonHeight: "44px",
                            selectOptions: gameModeFilterOptions,
                            initIndex: 0,
                            mainButtonTip: lang_1.lang.get("lobby.views.browse.mode_filter.tooltip"),
                            onSwitch: function(gameModeOption) {
                                _roomListViewModel.filterGameMode = gameModeOption.value, exports.roomsListScreen.listFilterUpdate_()
                            }
                        })
                    },
                    renderNameFilter_: function(parentNode) {
                        _roomListViewModel.tiFilterName = (0, standardTextInput_1.standardTextInput)(parentNode, {
                            size: 10,
                            placeholder: lang_1.lang.get("lobby.views.browse.name_filter.placeholder"),
                            cssId: "inputGameNameMap",
                            skin: "standard",
                            customClassName: "gameNameTextInput",
                            onSubmit: function(val) {
                                _roomListViewModel.filterName = val, exports.roomsListScreen.listFilterUpdate_()
                            }
                        }), (0, iconButton_1.iconButton)(parentNode, {
                            customClassName: "nameFilterSearchBtn",
                            iconClassName: "nameFilterSearchBtnIcon",
                            theme: "small",
                            onClick: function() {
                                _roomListViewModel.filterName = _roomListViewModel.tiFilterName.value, exports.roomsListScreen.listFilterUpdate_()
                            }
                        })
                    },
                    renderRoomList_: function(parentNode) {
                        var domList = document.createElement("div");
                        domList.className = "roomListWrapper";
                        var domListEmpty = document.createElement("div");
                        domListEmpty.className = "roomListEmpty";
                        var listEmptyHTML = "";
                        listEmptyHTML += "<p>" + lang_1.lang.get("lobby.views.browse.error.no_games.no_game_found") + "</p>", listEmptyHTML += '<img src="imgs/windows/room/icon_no_room.png">', listEmptyHTML += "<p>" + lang_1.lang.get("lobby.views.browse.error.no_games.be_first_to_create") + "</p>", domListEmpty.innerHTML = listEmptyHTML;
                        var domListEmptyCreateBtnWrapper = document.createElement("div");
                        (0, labelButton_1.labelButton)(domListEmptyCreateBtnWrapper, {
                            label: lang_1.lang.get("lobby.views.browse.error.no_games.create_btn.label"),
                            theme: "HugeNormal",
                            onClick: function() {
                                (0, viewHelpers_1.getPopup)("lobby").selectTab(1);
                                var el = (0, viewHelpers_1.getPopup)("lobby").querySelector(".popupWndTabbedViewContainer");
                                null !== el && roomCreateScreen_1.roomCreateScreen.render(el)
                            }
                        }), domListEmpty.appendChild(domListEmptyCreateBtnWrapper), domList.appendChild(domListEmpty);
                        var domContent = document.createElement("div");
                        domContent.className = "roomListContent";
                        var domTableHeader = document.createElement("div");
                        domTableHeader.className = "roomListHeader";
                        var domHeaderMap = document.createElement("div");
                        domHeaderMap.className = "roomListHeaderField roomFieldMapName", domHeaderMap.innerText = lang_1.lang.get("lobby.views.browse.list.header.map.label"), domTableHeader.appendChild(domHeaderMap);
                        var domHeaderPlayers = document.createElement("div");
                        domHeaderPlayers.className = "roomListHeaderField roomFieldPlayers", domHeaderPlayers.innerText = lang_1.lang.get("lobby.views.browse.list.header.players.label"), domTableHeader.appendChild(domHeaderPlayers);
                        var domHeaderMode = document.createElement("div");
                        domHeaderMode.className = "roomListHeaderField roomFieldMode", domHeaderMode.innerText = lang_1.lang.get("lobby.views.browse.list.header.mode.label"), domTableHeader.appendChild(domHeaderMode);
                        var domHeaderOperations = document.createElement("div");
                        domHeaderOperations.className = "roomListHeaderField roomFieldOperations", domTableHeader.appendChild(domHeaderOperations), domContent.appendChild(domTableHeader);
                        var domTableBody = document.createElement("div");
                        domTableBody.className = "roomListBody", domContent.appendChild(domTableBody), domList.appendChild(domContent), (0, toolTip_1.tooltip)(domHeaderMap, {
                            tip: lang_1.lang.get("lobby.views.browse.list.header.map.tooltip")
                        }), (0, toolTip_1.tooltip)(domHeaderPlayers, {
                            tip: lang_1.lang.get("lobby.views.browse.list.header.players.tooltip")
                        }), (0, toolTip_1.tooltip)(domHeaderMode, {
                            tip: lang_1.lang.get("lobby.views.browse.list.header.mode.tooltip")
                        }), _roomListViewModel.domList = domList, _roomListViewModel.domEmpty = domListEmpty, _roomListViewModel.domContent = domContent, _roomListViewModel.domTableHeader = domTableHeader, _roomListViewModel.domTableBody = domTableBody, parentNode.appendChild(domList)
                    },
                    listInit_: function(roomsList) {
                        exports.roomsListScreen.listClear_();
                        for (var _i = 0, roomsList_1 = roomsList; _i < roomsList_1.length; _i++) {
                            var el = roomsList_1[_i];
                            _roomListViewModel.rooms[el.roomId] = el, exports.roomsListScreen.listInsertOne_(el)
                        }
                        exports.roomsListScreen.listFilterUpdate_()
                    },
                    listInsertOne_: function(roomData) {
                        var domRow = document.createElement("div");
                        domRow.className = "roomListRow", domRow.dataset.slayOneRoomId = roomData.roomId.toString();
                        var rowHTML = "";
                        rowHTML += '<span class="roomListField roomFieldMapName">' + roomData.mapName + "</span>", rowHTML += '<span class="roomListField roomFieldPlayers"><object class="roomFieldPlayersCurrent">' + roomData.numPlayers + "</object>/" + roomData.numPlayersMax + "</span>", rowHTML += '<span class="roomListField roomFieldMode">' + lang_1.lang.get(GameTypes_1.MAP_TYPE_SETTINGS[roomData.mode].langLabel) + "</span>", domRow.innerHTML = rowHTML;
                        var domOperations = document.createElement("span");
                        domOperations.className = "roomListField roomFieldOperations", (0, labelButton_1.labelButton)(domOperations, {
                            label: lang_1.lang.get(3 == roomData.mode || (GameTypes_1.MAP_TYPE_SETTINGS[roomData.mode].unlockLevel || 0) > config_1.playerData.lvl ? "lobby.views.browse.list.row.watch_btn.label" : "lobby.views.browse.list.row.join_btn.label"),
                            theme: "SmallNormal",
                            onClick: function() {
                                exports.roomsListScreen.listClickHandler_(roomData)
                            }
                        }), domRow.appendChild(domOperations), _roomListViewModel.domTableBody.appendChild(domRow);
                        var domRoomTip = document.createElement("div");
                        domRoomTip.className = "roomListTip", domRoomTip.style.display = "none";
                        var roomTipHTML = '<div class="mapMetaThumbnail">';
                        roomTipHTML += '<div class="mapMetaTitle">' + roomData.mapName + "</div>", roomTipHTML += '<img src="' + (roomData.mapThumbnail.length > 100 ? roomData.mapThumbnail : "imgs/main_ui/map_placeholder.png") + '">', roomTipHTML += '<div class="mapMetaSize">' + roomData.mapW + "x" + roomData.mapH + "</div>", roomTipHTML += "</div>", domRoomTip.innerHTML = roomTipHTML, domRow.appendChild(domRoomTip), domRow.addEventListener("mouseover", (function() {
                            domRoomTip.style.display = "flex"
                        })), domRow.addEventListener("mouseout", (function() {
                            domRoomTip.style.display = "none"
                        })), exports.roomsListScreen.shouldHideRoom_(roomData) ? domRow.style.display = "none" : domRow.style.display = "block"
                    },
                    listClickHandler_: function(roomData) {
                        root_1.root.joinGamePurpose = 3 === roomData.mode || (GameTypes_1.MAP_TYPE_SETTINGS[roomData.mode].unlockLevel || 0) > config_1.playerData.lvl ? "spectate" : "", Network_1.Network.send("join-game$" + roomData.roomId), (0, viewHelpers_1.hidePopup)("lobby")
                    },
                    listUpdateOne_: function(roomData) {
                        var roomDom = exports.roomsListScreen.getDomByRoomId_(roomData.roomId);
                        null === roomDom ? (exports.roomsListScreen.listInsertOne_(roomData), _roomListViewModel.rooms[roomData.roomId] = roomData, exports.roomsListScreen.listFilterUpdate_()) : (roomDom.querySelector(".roomFieldPlayersCurrent").innerText = roomData.numPlayers.toString(), roomDom.querySelector(".mapMetaPlayersCurrent").innerText = roomData.numPlayers.toString(), _roomListViewModel.rooms[roomData.roomId].numPlayers = roomData.numPlayers)
                    },
                    listDeleteOne_: function(roomId) {
                        var roomDom = exports.roomsListScreen.getDomByRoomId_(roomId);
                        null !== roomDom && (_roomListViewModel.domTableBody.removeChild(roomDom), delete _roomListViewModel.rooms[roomId], exports.roomsListScreen.listFilterUpdate_())
                    },
                    getDomByRoomId_: function(roomId) {
                        for (var doms = _roomListViewModel.domTableBody.children, i = 0; i < doms.length; i++)
                            if (doms[i].dataset.slayOneRoomId === roomId.toString()) return doms[i];
                        return null
                    },
                    listFilterUpdate_: function() {
                        for (var hasVisibleRooms = !1, doms = _roomListViewModel.domTableBody.children, i = 0; i < doms.length; i++) {
                            var roomData = _roomListViewModel.rooms[doms[i].dataset.slayOneRoomId];
                            exports.roomsListScreen.shouldHideRoom_(roomData) ? doms[i].style.display = "none" : (hasVisibleRooms = !0, doms[i].style.display = "block")
                        }
                        hasVisibleRooms ? (_roomListViewModel.domContent.style.display = "block", _roomListViewModel.domEmpty.style.display = "none") : (_roomListViewModel.domContent.style.display = "none", _roomListViewModel.domEmpty.style.display = "block")
                    },
                    shouldHideRoom_: function(roomData) {
                        return _roomListViewModel.filterGameMode >= 0 && roomData.mode != _roomListViewModel.filterGameMode || !!(_roomListViewModel.filterName && _roomListViewModel.filterName.length > 0) && !(roomData.mapName.toLowerCase().indexOf(_roomListViewModel.filterName.toLowerCase()) >= 0)
                    },
                    listClear_: function() {
                        _roomListViewModel.rooms = {}, _roomListViewModel.domTableBody.innerHTML = ""
                    },
                    getRoomsList_: function() {
                        Network_1.Network.send("req-games-list"), _roomListViewModel.roomWatching && setTimeout(exports.roomsListScreen.getRoomsList_, 1e4, _roomListViewModel)
                    },
                    render: function(parentNode) {
                        parentNode.innerHTML = "";
                        var domContent = document.createElement("div");
                        domContent.className = "roomTabView roomsListView", _roomListViewModel = {
                            filterGameMode: -1,
                            filterName: "",
                            rooms: {},
                            domList: null,
                            domEmpty: null,
                            domContent: null,
                            domTableHeader: null,
                            domTableBody: null,
                            tiFilterName: null,
                            networkInitCb: null,
                            roomWatching: !1
                        };
                        for (var _i = 0, aRows_1 = [
                                [{
                                    renderMethod: exports.roomsListScreen.renderGameModeSwitcher_
                                }],
                                [{
                                    renderMethod: exports.roomsListScreen.renderRoomList_,
                                    margin: !0
                                }]
                            ]; _i < aRows_1.length; _i++) {
                            var aCells = aRows_1[_i],
                                domTable = document.createElement("div"),
                                domRow = document.createElement("div");
                            domTable.className = "mainLayoutTable", domRow.style.display = "table-row";
                            for (var _a = 0, aCells_1 = aCells; _a < aCells_1.length; _a++) {
                                var layoutCell = aCells_1[_a],
                                    domCell = document.createElement("div"),
                                    renderMethod = layoutCell.renderMethod ? layoutCell.renderMethod.bind(this) : null;
                                domCell.className = "mainLayoutCell roomListLayoutCell", renderMethod(domCell), domRow.appendChild(domCell)
                            }
                            domTable.appendChild(domRow), domContent.appendChild(domTable)
                        }
                        return _roomListViewModel.domContent.style.display = "none", _roomListViewModel.domEmpty.style.display = "none", exports.roomsListScreen.getRoomsList_(), domContent.onHide = function() {
                            _roomListViewModel.roomWatching = !1, _roomListViewModel.networkInitCb = null
                        }, parentNode.appendChild(domContent), domContent
                    }
                }
            },
            7174: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.showInfoScreen = exports.hideAd = exports.showAd = exports.showPrompt = exports.showWindow = exports.hidePopup = exports.getPopup = exports.showPopup = exports.hideWindow = void 0;
                var root_1 = __webpack_require__(17),
                    Skin_1 = __webpack_require__(192),
                    popupWindow_1 = __webpack_require__(3894),
                    prompt_1 = __webpack_require__(1208),
                    infoScreen_1 = __webpack_require__(5661),
                    roomsListScreen_1 = __webpack_require__(7524),
                    domMain = document.getElementById("mainUI"),
                    cellTypeToClass = {
                        label: "labelCell"
                    },
                    cellTypeToMethod = {
                        activeButton: function(parentNode, cellSettings) {
                            var _a, button = document.createElement("div"),
                                cellType = cellSettings.cellType;
                            button.innerHTML = null !== (_a = cellSettings.buttonLabel) && void 0 !== _a ? _a : "", "activeButton" === cellType && (button.className = "buttonActive");
                            parentNode.appendChild(button)
                        }
                    };

                function renderLayoutGrid_(parentNode, options) {
                    var domGrid = document.createElement("div"),
                        layoutRows = options.layoutRows,
                        beforeAddCell = options.beforeAddCell;
                    domGrid.className = "mainLayoutTable";
                    for (var _i = 0, layoutRows_1 = layoutRows; _i < layoutRows_1.length; _i++) {
                        var layoutCells = layoutRows_1[_i],
                            domRow = document.createElement("div");
                        domRow.className = "layoutRow";
                        for (var _a = 0, layoutCells_1 = layoutCells; _a < layoutCells_1.length; _a++) {
                            var cellSettings = layoutCells_1[_a],
                                domCell = document.createElement("div"),
                                cellContent = cellSettings.cellContent,
                                cellType = cellSettings.cellType;
                            domCell.className = "mainLayoutCell", void 0 !== cellType && cellType in cellTypeToClass && (domCell.className += " " + cellTypeToClass[cellType]), void 0 !== cellType && cellType in cellTypeToMethod && cellTypeToMethod[cellType](domCell, cellSettings), beforeAddCell && beforeAddCell(cellSettings, domCell), cellContent && ("string" == typeof cellContent ? domCell.innerHTML = cellContent : domCell.appendChild(cellContent)), domRow.appendChild(domCell)
                        }
                        domGrid.appendChild(domRow)
                    }
                    parentNode.appendChild(domGrid)
                }

                function renderHeader_(parentNode, viewSettings) {
                    for (var domHeader = document.createElement("div"), buttonClose = document.createElement("button"), oCellByKey = {}, _i = 0, layoutCells_3 = [{
                            cellKey: "topLeft",
                            cssClass: "regularViewTopLeft"
                        }, {
                            cellKey: "topMiddle",
                            cssClass: "regularViewTopCenter"
                        }, {
                            cellKey: "topRight",
                            cssClass: "regularViewTopRight"
                        }]; _i < layoutCells_3.length; _i++) {
                        var layoutCell = layoutCells_3[_i],
                            domCell = document.createElement("div");
                        domCell.className = layoutCell.cssClass, domHeader.appendChild(domCell), oCellByKey[layoutCell.cellKey] = domCell
                    }! function(parentNode, viewSettings) {
                        var domContainer = document.createElement("div"),
                            imgLabel = document.createElement("img"),
                            imgName = viewSettings.labelImage,
                            oCellByKey = {};
                        domContainer.className = "regularHeaderLabelContainer";
                        for (var _i = 0, layoutCells_2 = [{
                                cellKey: "borderLeft",
                                cssClass: "regularHeaderLabelLeft"
                            }, {
                                cellKey: "label",
                                cssClass: "regularHeaderLabelLeftCenter"
                            }, {
                                cellKey: "borderRight",
                                cssClass: "regularHeaderLabelRight"
                            }]; _i < layoutCells_2.length; _i++) {
                            var layoutCell = layoutCells_2[_i],
                                domCell = document.createElement("div");
                            domCell.className = layoutCell.cssClass, domContainer.appendChild(domCell), oCellByKey[layoutCell.cellKey] = domCell
                        }
                        imgName && (imgLabel.src = "imgs/main_ui/" + imgName + ".png", imgLabel.className = "headerLabelImage"), viewSettings.headerLabel ? oCellByKey.label.innerHTML = viewSettings.headerLabel : oCellByKey.label.appendChild(imgLabel), parentNode.appendChild(domContainer)
                    }(parentNode, viewSettings), buttonClose.className = "regularViewCloseWindow", buttonClose.onclick = function() {
                        viewSettings.onClose()
                    }, domHeader.appendChild(buttonClose), parentNode.appendChild(domHeader)
                }
                exports.hideWindow = function() {
                    FunUI.managers.PopUpManager.removePopUp(domMain)
                };
                var domPopUps = null;

                function showPopup(windowName, options) {
                    hidePopup(windowName), domPopUps || ((domPopUps = document.createElement("div")).id = "popupWndContainer");
                    var themeOption = options && options.theme ? options.theme : "light";
                    switch (themeOption) {
                        case "light":
                            var wnd_1 = (0, popupWindow_1.popupWindow)(domPopUps, {
                                windowName,
                                theme: themeOption,
                                content: options.content,
                                onClose: function() {
                                    document.getElementById("popUpMainDiv").innerHTML = "", domPopUps.removeChild(wnd_1), options.onClose && options.onClose()
                                }
                            });
                            break;
                        case "standard":
                            var wnd_2 = (0, popupWindow_1.popupWindow)(domPopUps, {
                                windowName,
                                theme: themeOption,
                                title: options.title,
                                content: options.content,
                                onClose: function() {
                                    document.getElementById("popUpMainDiv").innerHTML = "", domPopUps.removeChild(wnd_2), options.onClose && options.onClose()
                                }
                            });
                            break;
                        case "tabbed":
                            var wnd_3 = (0, popupWindow_1.popupWindow)(domPopUps, {
                                windowName,
                                theme: themeOption,
                                title: options.title,
                                tabs: options.tabs,
                                initTabIndex: options.initTabIndex,
                                onClose: function() {
                                    document.getElementById("popUpMainDiv").innerHTML = "", domPopUps.removeChild(wnd_3), options.onClose && options.onClose()
                                }
                            });
                            break;
                        case "prompt":
                            var wnd_4 = (0, popupWindow_1.popupWindow)(domPopUps, {
                                windowName,
                                theme: themeOption,
                                content: options.content,
                                hideCloseBtn: !0,
                                onClose: function() {
                                    document.getElementById("popUpMainDiv").innerHTML = "", domPopUps.removeChild(wnd_4), options.onClose && options.onClose()
                                }
                            })
                    }
                    var div = document.getElementById("popUpMainDiv");
                    if (div.appendChild(domPopUps), div.style.display = "", "tabbed" === themeOption) {
                        var el = domPopUps.querySelector(".popupWndTabbedViewContainer");
                        null !== el && roomsListScreen_1.roomsListScreen.render(el)
                    }
                }

                function hidePopup(windowName) {
                    var domPopup = document.getElementById(windowName);
                    domPopup && domPopup.closePopUp()
                }
                exports.showPopup = showPopup, exports.getPopup = function(windowName) {
                    return document.getElementById(windowName)
                }, exports.hidePopup = hidePopup, exports.showWindow = function(viewSettings) {
                    Skin_1.Skin_.close(), domMain.innerHTML = "", domMain.className = "regularView", renderHeader_(domMain, viewSettings),
                        function(parentNode, viewSettings) {
                            var domContainer = document.createElement("div");
                            if (domContainer.className = "regularViewContent", viewSettings.layoutGrids)
                                for (var i = 0; i < viewSettings.layoutGrids.length; i++) renderLayoutGrid_(domContainer, viewSettings.layoutGrids[i]);
                            viewSettings.domContent && domContainer.appendChild(viewSettings.domContent), parentNode.appendChild(domContainer)
                        }(domMain, viewSettings),
                        function(parentNode) {
                            for (var domContainer = document.createElement("div"), oCellByKey = {}, _i = 0, layoutCells_4 = [{
                                    cellKey: "topLeft",
                                    cssClass: "regularViewBottomLeft"
                                }, {
                                    cellKey: "topMiddle",
                                    cssClass: "regularViewBottomCenter"
                                }, {
                                    cellKey: "topRight",
                                    cssClass: "regularViewBottomRight"
                                }]; _i < layoutCells_4.length; _i++) {
                                var layoutCell = layoutCells_4[_i],
                                    domCell = document.createElement("div");
                                domCell.className = layoutCell.cssClass, domContainer.appendChild(domCell), oCellByKey[layoutCell.cellKey] = domCell
                            }
                            parentNode.appendChild(domContainer)
                        }(domMain), FunUI.managers.PopUpManager.addPopUp(domMain)
                };
                var promptId = 0;
                exports.showPrompt = function(promptOptions) {
                    var promptWndName = "promptWnd" + (promptId += 1).toString();
                    return showPopup(promptWndName, {
                        theme: "prompt",
                        content: (0, prompt_1.promptWindow)(promptOptions)
                    }), {
                        close: function() {
                            hidePopup(promptWndName)
                        }
                    }
                }, exports.showAd = function() {
                    document.getElementById("adContainer").style.display = "block", null === root_1.root.game || root_1.root.game.playingPlayer
                }, exports.hideAd = function() {
                    document.getElementById("adContainer").style.display = "none"
                }, exports.showInfoScreen = function(options) {
                    infoScreen_1.infoScreen.render(options.title, options.content)
                }
            },
            1913: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.checkbox = void 0;
                var clickable_1 = __webpack_require__(2513),
                    toolTip_1 = __webpack_require__(5847);
                exports.checkbox = function(parentNode, options) {
                    var domContainer = document.createElement("div"),
                        finalClassName = "checkboxWrapper";
                    options && options.customClassName && (finalClassName += " " + options.customClassName), domContainer.className = finalClassName, options && options.cssId && (domContainer.id = options.cssId);
                    var initSelected = !1;
                    options && options.selected && (initSelected = options.selected);
                    var widgetModel = {
                        selected: initSelected,
                        onChange: null
                    };
                    options && options.onChange && (widgetModel.onChange = options.onChange);
                    var domWidget = document.createElement("div");
                    domWidget.className = "checkboxIconWrapper";
                    var domWidgetSelected = document.createElement("div");
                    domWidgetSelected.className = "checkboxIconSelected", domWidgetSelected.style.display = initSelected ? "block" : "none", domWidget.appendChild(domWidgetSelected), domContainer.appendChild(domWidget);
                    var domLabel = document.createElement("div"),
                        labelClassName = "checkboxLabel";
                    if (options && options.labelClassName && (labelClassName += " " + options.labelClassName), domLabel.className = labelClassName, domLabel.innerHTML = options.label, domContainer.appendChild(domLabel), domContainer.toggleSelected = function() {
                            domContainer.setSelected(!domContainer.getSelected())
                        }, domContainer.setSelected = function(val) {
                            widgetModel.selected !== val && (widgetModel.selected = val, domWidgetSelected.style.display = val ? "block" : "none", widgetModel.onChange && widgetModel.onChange(widgetModel.selected))
                        }, domContainer.getSelected = function() {
                            return widgetModel.selected
                        }, domContainer.addEventListener("click", (function() {
                            domContainer.toggleSelected()
                        })), (0, clickable_1.clickable)(domContainer), options && options.tip) {
                        var tipAlignOption = options && options.tipAlign ? options.tipAlign : "center";
                        if (options && options.tipMultiline) {
                            var tipWidthOption = options && options.tipWidth ? options.tipWidth : "200px";
                            (0, toolTip_1.tooltip)(domContainer, {
                                tip: options.tip,
                                align: tipAlignOption,
                                multiline: !0,
                                width: tipWidthOption
                            })
                        } else(0, toolTip_1.tooltip)(domContainer, {
                            tip: options.tip,
                            align: tipAlignOption
                        })
                    }
                    return parentNode.appendChild(domContainer), domContainer
                }
            },
            2513: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.clickable = void 0;
                var Sound_1 = __webpack_require__(3754);
                exports.clickable = function(targetNode) {
                    targetNode.classList.add("withClickSound")
                }, window.document.addEventListener("click", (function(e) {
                    for (var node = e.target, hasClickableClass = !1, depth = 0; depth < 5 && null != node;) {
                        if (depth += 1, node.className && node.className.indexOf("withClickSound") >= 0) {
                            hasClickableClass = !0;
                            break
                        }
                        node = node.parentNode
                    }
                    hasClickableClass && Sound_1.Sound.playSound("click")
                }))
            },
            7849: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.dropdownMenu = void 0;
                var clickable_1 = __webpack_require__(2513),
                    hoverLight_1 = __webpack_require__(2068),
                    standardText_1 = __webpack_require__(7169),
                    toolTip_1 = __webpack_require__(5847);
                exports.dropdownMenu = function(parentNode, options) {
                    var domMenu = document.createElement("div"),
                        domToggle = document.createElement("div");
                    domToggle.className = "dropdownToggleButton", domMenu.appendChild(domToggle);
                    var finalClassName = "dropdownMenu";
                    options && options.customClassName && (finalClassName += " " + options.customClassName), domMenu.className = finalClassName, options && options.cssId && (domMenu.id = options.cssId);
                    var initIndexOption = 0;
                    options && options.initIndex && (initIndexOption = options.initIndex), domMenu.selectedIndex = initIndexOption;
                    var domMainButton = (0, standardText_1.standardText)(domMenu, options.selectOptions[initIndexOption].label, {
                        textAlign: "left",
                        customClassName: options.customButtonClassName
                    });
                    domMenu.optionsData = options.selectOptions;
                    var tipWidth = options && options.customButtonWidth ? options.customButtonWidth : "202px",
                        tipHeight = options && options.customButtonHeight ? options.customButtonHeight : "40px",
                        domList = document.createElement("div");
                    domList.className = "dropdownMenuList";
                    for (var optionsCount = options.selectOptions.length, optionIndex = 0; optionIndex < optionsCount; optionIndex++) {
                        var dataOption = options.selectOptions[optionIndex],
                            domOption = (0, standardText_1.standardText)(domList, dataOption.label, {
                                textAlign: "left",
                                skin: domMenu.selectedIndex === optionIndex ? "light" : "dark",
                                customContainerClassName: "dropdownMenuListItem",
                                customClassName: options.customButtonClassName
                            });
                        domOption.dataset.optionIndex = optionIndex.toString(), domOption.onclick = function(idx) {
                            return function() {
                                domMenu.selectOption(idx) && options.onSwitch(domMenu.optionsData[idx])
                            }
                        }(optionIndex), (0, hoverLight_1.hoverLight)(domOption, {
                            theme: "lite",
                            width: tipWidth,
                            height: tipHeight,
                            top: "-5px",
                            left: "-5px"
                        }), (0, clickable_1.clickable)(domOption)
                    }
                    return domMainButton.onclick = function(domMainButton, domList, domToggle) {
                        return function() {
                            if ("none" === domList.style.display) {
                                domList.style.display = "block", domToggle.className = "dropdownToggleButtonActive", domMainButton.tipEffect && domMainButton.tipEffect.hide();
                                var hideDropDownList_1 = function() {
                                    domList.style.display = "none", domToggle.className = "dropdownToggleButton", document.removeEventListener("click", hideDropDownList_1)
                                };
                                setTimeout((function() {
                                    document.addEventListener("click", hideDropDownList_1)
                                }), 0)
                            } else domList.style.display = "none", domToggle.className = "dropdownToggleButton", domMainButton.tipEffect && domMainButton.tipEffect.show()
                        }
                    }(domMainButton, domList, domToggle), (0, clickable_1.clickable)(domMainButton), domList.style.display = "none", domMenu.appendChild(domList), domMenu.selectOption = function(optionIndex) {
                        if (optionIndex === domMenu.selectedIndex) return !1;
                        domList.children[domMenu.selectedIndex].setSkin("dark"), domMenu.selectedIndex = optionIndex, domList.children[domMenu.selectedIndex].setSkin("light");
                        var selectedOption = domMenu.optionsData[optionIndex];
                        return domMainButton.setText(selectedOption.label), !0
                    }, options && options.mainButtonTip && options.mainButtonTip.length > 0 && (0, toolTip_1.tooltip)(domMainButton, {
                        tip: options.mainButtonTip
                    }), parentNode.appendChild(domMenu), domMenu
                }
            },
            9177: (__unused_webpack_module, exports) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.floatTip = void 0;
                var _mainDiv = document.getElementById("floatTipContainer"),
                    _content = document.getElementById("floatTipContent"),
                    _timeout = null;
                exports.floatTip = function(type, content, duration) {
                    return null !== _timeout && clearTimeout(_timeout), _mainDiv.className = "floatTipContainer floatTipType" + ("success" === type ? "Success" : "Error"), _mainDiv.classList.add("floatTipShowing"), _timeout = setTimeout((function() {
                        _mainDiv.classList.remove("floatTipShowing"), _mainDiv.classList.add("floatTipHiding")
                    }), void 0 !== duration && duration > 0 ? duration : 5e3), _content.innerHTML = content, _mainDiv
                }
            },
            2068: (__unused_webpack_module, exports) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.hoverLight = void 0;
                var themeBorderSizes = {
                    normal: {
                        w: "32px",
                        h: "32px"
                    },
                    lite: {
                        w: "24px",
                        h: "24px"
                    }
                };
                exports.hoverLight = function(parentNode, options) {
                    var themeOption = options && options.theme ? options.theme : "normal",
                        domHover = parentNode.querySelector(".hoverLight");
                    return domHover || ((domHover = document.createElement("div")).className = "hoverLight hoverLight" + themeOption, parentNode.appendChild(domHover), parentNode.addEventListener("mouseover", (function() {
                        domHover.style.display = "block"
                    })), parentNode.addEventListener("mouseout", (function() {
                        domHover.style.display = "none"
                    }))), domHover.style.width = "calc(" + options.width + " - " + themeBorderSizes[themeOption].w + ")", domHover.style.height = "calc(" + options.height + " - " + themeBorderSizes[themeOption].h + ")", options.left && (domHover.style.left = options.left), options.top && (domHover.style.top = options.top), domHover.style.display = "none", domHover
                }
            },
            3831: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.iconButton = void 0;
                var clickable_1 = __webpack_require__(2513),
                    hoverLight_1 = __webpack_require__(2068),
                    toolTip_1 = __webpack_require__(5847),
                    iconButtonSizes = {
                        standard: {
                            w: "62px",
                            h: "66px"
                        },
                        small: {
                            w: "44px",
                            h: "48px"
                        }
                    };
                exports.iconButton = function(parentNode, options) {
                    var btn = document.createElement("div"),
                        themeOption = options && options.theme ? options.theme : "standard";
                    options && options.cssId && (btn.id = options.cssId);
                    var finalClassName = "pixelated iconButton";
                    options && options.customClassName && (finalClassName += " " + options.customClassName), btn.className = finalClassName;
                    var domBackground = document.createElement("div");
                    domBackground.className = "iconButtonBackground" + themeOption, btn.appendChild(domBackground);
                    var domContent = document.createElement("div");
                    return domContent.className = "iconButtonIcon iconButtonIcon" + themeOption + " " + options.iconClassName, btn.appendChild(domContent), (0, clickable_1.clickable)(btn), btn.onclick = function() {
                        options.onClick()
                    }, parentNode.appendChild(btn), (0, hoverLight_1.hoverLight)(btn, {
                        width: iconButtonSizes[themeOption].w,
                        height: iconButtonSizes[themeOption].h
                    }), options.tip && options.tip.length > 0 && (btn.tipEffect = (0, toolTip_1.tooltip)(btn, {
                        tip: options.tip
                    })), btn
                }
            },
            3329: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.labelButton = void 0;
                var clickable_1 = __webpack_require__(2513),
                    toolTip_1 = __webpack_require__(5847);
                exports.labelButton = function(parentNode, options) {
                    var _a, btn = document.createElement("div"),
                        finalClassName = "pixelated labelButton labelButton" + (options && options.theme ? options.theme : "StandardYellow");
                    options && options.customClassName && (finalClassName += " " + options.customClassName);
                    var multiline = !(!options || !options.multiline) && options.multiline;
                    if (btn.innerHTML = multiline ? '<div class="labelMultiline">' + options.label + "</div>" : '<div class="label">' + options.label + "</div>", btn.className = finalClassName, (0, clickable_1.clickable)(btn), btn.onclick = options.onClick, !options || !options.noHoverLight) {
                        var div = document.createElement("div");
                        div.className = "hover", btn.appendChild(div)
                    }
                    return options && options.tip && options.tip.length > 0 && (btn.tipEffect = (0, toolTip_1.tooltip)(btn, {
                        tip: options.tip,
                        align: null !== (_a = options.tipAlign) && void 0 !== _a ? _a : "center"
                    })), parentNode.appendChild(btn), btn.setTheme = function(val) {
                        var finalClassName = "pixelated labelButton labelButton" + val;
                        options && options.customClassName && (finalClassName += " " + options.customClassName), btn.className = finalClassName, (0, clickable_1.clickable)(btn)
                    }, btn
                }
            },
            9655: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.lang = void 0;
                var functions_1 = __webpack_require__(7582);

                function replaceInText(element) {
                    for (var id in element.childNodes) {
                        var node = element.childNodes[id];
                        switch (node.nodeType) {
                            case Node.ELEMENT_NODE:
                                replaceInText(node);
                                break;
                            case Node.TEXT_NODE:
                                node.textContent = exports.lang.applyToStr(node.textContent);
                                break;
                            case Node.DOCUMENT_NODE:
                                replaceInText(node)
                        }
                    }
                    document.getElementById("inputUserName").placeholder = exports.lang.get("account.views.signup.name.placeholder"), document.getElementById("inputUserPass").placeholder = exports.lang.get("account.views.signup.password.placeholder"), document.getElementById("inputUserNameReg").placeholder = exports.lang.get("account.views.signup.name.placeholder"), document.getElementById("inputUserPassReg").placeholder = exports.lang.get("account.views.signup.password.placeholder"), document.getElementById("inputUserEmail").placeholder = exports.lang.get("account.views.signup.email.placeholder")
                }
                exports.lang = {
                    locale: null,
                    supportedLocales: {
                        "ar-SA": "Ø§Ù„Ø¹Ø±Ø¨ÙŠØ©",
                        "de-DE": "Deutsch",
                        "en-US": "English",
                        "es-ES": "espaÃ±ol",
                        "fr-FR": "franÃ§ais",
                        "id-ID": "Bahasa Indonesia",
                        "it-IT": "italiano",
                        "ja-JP": "æ—¥æœ¬èªž",
                        "ko-KR": "í•œêµ­ì–´",
                        "pl-PL": "polski",
                        "pt-BR": "portuguÃªs(Brazil)",
                        "ru-RU": "Ñ€ÑƒÑÑÐºÐ¸Ð¹",
                        "th-TH": "à¹„à¸—à¸¢",
                        "tr-TR": "TÃ¼rkÃ§e",
                        "zh-TW": "ä¸­æ–‡(ç¹é«”)",
                        "zh-CN": "ä¸­æ–‡(ç®€ä½“)"
                    },
                    defaultLocale: "en-US",
                    data: {},
                    get: function(key, params) {
                        var result = this.data[this.locale][key];
                        return !result || result.length <= 0 ? "" : (params && (result = result.replace(/\[\[([^\]]+)]]/g, (function(pattern, key) {
                            return params[key]
                        }))), result)
                    },
                    initialize: function(callback) {
                        var self = this;
                        this.locale = this.getClosestLocale(this.getPreferredLocale() || this.getSystemLocale()), document.documentElement.setAttribute("lang", this.locale), (0, functions_1.ajax)("locales/" + this.locale + ".json", (function(data) {
                            self.data[self.locale] = JSON.parse(data), callback()
                        }))
                    },
                    getPreferredLocale: function() {
                        var result = null;
                        try {
                            result = window.localStorage.getItem("langChosen")
                        } catch (e) {
                            result = null
                        }
                        return result
                    },
                    setPreferredLocale: function(val) {
                        try {
                            window.localStorage.setItem("langChosen", val)
                        } catch (e) {
                            console.error(e)
                        }
                    },
                    getSystemLocale: function() {
                        return window.navigator.languages && 0 != window.navigator.languages.length ? window.navigator.languages : window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage
                    },
                    getClosestLocale: function(locale) {
                        Array.isArray(locale) || (locale = [locale]), locale.map((function(lang) {
                            return "string" != typeof lang ? "none" : lang.replace("_", "-")
                        }));
                        for (var _i = 0, locale_1 = locale; _i < locale_1.length; _i++) {
                            var lang = locale_1[_i];
                            if (this.supportedLocales[lang]) return lang
                        }
                        for (var i = 0; i < locale.length; i++) {
                            lang = locale[i];
                            for (var itrLang in this.supportedLocales)
                                if (this.supportedLocales.hasOwnProperty(itrLang)) {
                                    var strikeIndex = lang.indexOf("-"),
                                        main = strikeIndex >= 0 ? lang.substr(0, strikeIndex) : lang;
                                    if (0 == itrLang.indexOf(main)) return itrLang
                                }
                        }
                        return this.defaultLocale
                    },
                    applyLocale: function() {
                        replaceInText(document.body)
                    },
                    applyToStr: function(str) {
                        for (; str.includes("_(");) {
                            var arr1 = str.split("_("),
                                arr2 = arr1[1].split(")");
                            str = arr1[0] + exports.lang.get(arr2[0]) + arr2[1]
                        }
                        return str
                    }
                }
            },
            9658: (__unused_webpack_module, exports) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.loadingIndicator = void 0, exports.loadingIndicator = function(parentNode, options) {
                    var domContainer = document.createElement("div");
                    domContainer.className = "loadingIndicator", options && options.width && (domContainer.style.width = options.width), options && options.height && (domContainer.style.height = options.height);
                    var domDotsWrapper = document.createElement("div");
                    domDotsWrapper.className = "dotsWrapper", domContainer.appendChild(domDotsWrapper);
                    for (var domDots = [], i = 0; i < 4; i++) {
                        var domDot = document.createElement("div");
                        domDot.className = "dot", domDots.push(domDot), domDotsWrapper.appendChild(domDot)
                    }
                    return parentNode.appendChild(domContainer), domContainer.animationInterval = -1, domContainer.startAnimation = function() {
                        domContainer.stopAnimation(), domContainer.setDotOffset(0), domContainer.animationInterval = setInterval((function() {
                            domContainer.setDotOffset((domContainer.dotOffset + 1) % 4)
                        }), 125)
                    }, domContainer.stopAnimation = function() {
                        -1 !== domContainer.animationInterval && (clearInterval(domContainer.animationInterval), domContainer.animationInterval = -1)
                    }, domContainer.setDotOffset = function(dotOffset) {
                        domContainer.dotOffset = dotOffset, domContainer.updateDotClasses()
                    }, domContainer.updateDotClasses = function() {
                        for (var i_1 = 0; i_1 < 4; i_1++) domDots[i_1].className = "dot dot" + ((4 - domContainer.dotOffset + i_1) % 4).toString()
                    }, domContainer
                }
            },
            3894: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.popupWindow = void 0;
                var roomCreateScreen_1 = __webpack_require__(562),
                    roomsListScreen_1 = __webpack_require__(7524),
                    clickable_1 = __webpack_require__(2513),
                    hoverLight_1 = __webpack_require__(2068),
                    labelButton_1 = __webpack_require__(3329),
                    factoryMethods = {
                        light: lightPopupWindow,
                        tabbed: function(parentNode, options) {
                            var _a, domWindow = document.createElement("div");
                            domWindow.id = null !== (_a = options.windowName) && void 0 !== _a ? _a : "", domWindow.className = "popupWndWrapper";
                            var domMask = document.createElement("div");
                            domMask.className = "popupWndMask", domWindow.appendChild(domMask);
                            var domContentWindow = document.createElement("div");
                            domContentWindow.className = "popupWndContent popupWndFrameTabbed";
                            var domWindowBg = document.createElement("div");
                            if (domWindowBg.className = "popupWndStandardBg", domContentWindow.appendChild(domWindowBg), options && options.title) {
                                var domTitle = document.createElement("div");
                                domTitle.className = "popupWndTitleWrapper", domTitle.innerHTML = '<div class="popupWndTitle"><div class="popupWndTitleBg"></div><div class="popupWndTitleContent">' + options.title + "</div></div>", domContentWindow.appendChild(domTitle)
                            }
                            var domTabButtons = document.createElement("div");
                            domTabButtons.className = "popupWndTabbedButtonContainer", domWindow.tabButtons = [];
                            for (var tabButtonsCount = options.tabs.length, tabButtonIndex = 0; tabButtonIndex < tabButtonsCount; tabButtonIndex += 1) {
                                var tabButton = (0, labelButton_1.labelButton)(domTabButtons, {
                                    theme: "StandardTab",
                                    label: options.tabs[tabButtonIndex].label,
                                    onClick: function(btnIndex) {
                                        return function() {
                                            if (domWindow.selectTab(btnIndex), 1 === btnIndex) null !== (el = domWindow.querySelector(".popupWndTabbedViewContainer")) && roomCreateScreen_1.roomCreateScreen.render(el);
                                            else if (0 === btnIndex) {
                                                var el;
                                                null !== (el = domWindow.querySelector(".popupWndTabbedViewContainer")) && roomsListScreen_1.roomsListScreen.render(el)
                                            }
                                        }
                                    }(tabButtonIndex),
                                    tip: options.tabs[tabButtonIndex].tip,
                                    tipAlign: "center"
                                });
                                domWindow.tabButtons.push(tabButton)
                            }
                            var domTabContent = document.createElement("div");
                            domTabContent.className = "popupWndTabbedViewContainer", domContentWindow.appendChild(domTabContent), domContentWindow.appendChild(domTabButtons), domWindow.closePopUp = function() {
                                domTabContent.firstChild && "onHide" in domTabContent.firstChild && domTabContent.firstChild.onHide(), options.onClose && options.onClose()
                            };
                            var domCloseBtn = document.createElement("div");
                            domCloseBtn.className = "popupWndCloseBtn pixelated", domCloseBtn.innerHTML = '<img src="imgs/main_ui/icon_close_tabbed.png">', domCloseBtn.onclick = domWindow.closePopUp, (0, clickable_1.clickable)(domCloseBtn), domContentWindow.appendChild(domCloseBtn), (0, hoverLight_1.hoverLight)(domCloseBtn, {
                                width: "58px",
                                height: "60px"
                            }), domWindow.currentTabIndex = -1, domWindow.cachedViews = {}, domWindow.tabsData = options.tabs, domWindow.selectTab = function(selectedTabIndex, tabData) {
                                if (selectedTabIndex !== domWindow.currentTabIndex) {
                                    domTabContent.firstChild && (domTabContent.firstChild.onHide && domTabContent.firstChild.onHide(), domTabContent.removeChild(domTabContent.firstChild)), domWindow.currentTabIndex >= 0 && domWindow.tabButtons[domWindow.currentTabIndex].setTheme("StandardTab"), domWindow.currentTabIndex = selectedTabIndex;
                                    var nextTabData = domWindow.tabsData[selectedTabIndex],
                                        nextView = domWindow.cachedViews[nextTabData.view];
                                    nextView && domTabContent.appendChild(nextView), domWindow.tabButtons[domWindow.currentTabIndex].setTheme("StandardTabActivated")
                                }
                            }, domWindow.appendChild(domContentWindow), parentNode.appendChild(domWindow);
                            var initTabIndex = 0;
                            options && options.initTabIndex && (initTabIndex = options.initTabIndex);
                            return domWindow.selectTab(initTabIndex), domWindow
                        },
                        standard: function(parentNode, options) {
                            var _a, domWindow = document.createElement("div");
                            domWindow.id = null !== (_a = options.windowName) && void 0 !== _a ? _a : "", domWindow.className = "popupWndWrapper";
                            var domMask = document.createElement("div");
                            domMask.className = "popupWndMask", domWindow.appendChild(domMask);
                            var domContentWindow = document.createElement("div");
                            domContentWindow.className = "popupWndContent popupWndFrameStandard";
                            var domWindowBg = document.createElement("div");
                            if (domWindowBg.className = "popupWndStandardBg", domContentWindow.appendChild(domWindowBg), options && options.title) {
                                var domTitle = document.createElement("div");
                                domTitle.className = "popupWndTitleWrapper", domTitle.innerHTML = '<div class="popupWndTitle"><div class="popupWndTitleBg"></div><div class="popupWndTitleContent">' + options.title + "</div></div>", domContentWindow.appendChild(domTitle)
                            }
                            var domTabContent = document.createElement("div");
                            domTabContent.className = "popupWndViewContainer", domTabContent.appendChild(options.content), domContentWindow.appendChild(domTabContent), domWindow.closePopUp = function() {
                                options.onClose && options.onClose()
                            };
                            var domCloseBtn = document.createElement("div");
                            return domCloseBtn.className = "popupWndCloseBtn pixelated", domCloseBtn.innerHTML = '<img src="imgs/main_ui/icon_close_tabbed.png">', domCloseBtn.onclick = domWindow.closePopUp, (0, clickable_1.clickable)(domCloseBtn), domContentWindow.appendChild(domCloseBtn), (0, hoverLight_1.hoverLight)(domCloseBtn, {
                                width: "58px",
                                height: "60px"
                            }), domWindow.appendChild(domContentWindow), parentNode.appendChild(domWindow), domWindow
                        },
                        prompt: lightPopupWindow
                    };

                function lightPopupWindow(parentNode, options) {
                    var _a, domWindow = document.createElement("div");
                    domWindow.id = null !== (_a = options.windowName) && void 0 !== _a ? _a : "", domWindow.className = "popupWndWrapper", domWindow.closePopUp = function() {
                        options.onClose && options.onClose()
                    };
                    var domMask = document.createElement("div");
                    domMask.className = "popupWndMask", domWindow.appendChild(domMask);
                    var domContentWindow = document.createElement("div");
                    if (domContentWindow.className = "popupWndContent popupWndFrameLight", domContentWindow.appendChild(options.content), !options || !options.hideCloseBtn) {
                        var domCloseBtn = document.createElement("div");
                        domCloseBtn.className = "popupWndCloseBtn", domCloseBtn.innerHTML = '<img src="imgs/main_ui/icon_close.png">', domCloseBtn.onclick = domWindow.closePopUp, (0, clickable_1.clickable)(domCloseBtn), domContentWindow.appendChild(domCloseBtn)
                    }
                    return domWindow.appendChild(domContentWindow), parentNode.appendChild(domWindow), domWindow
                }
                exports.popupWindow = function(parentNode, options) {
                    var themeOption = options && options.theme ? options.theme : "light";
                    return factoryMethods[themeOption](parentNode, options)
                }
            },
            1208: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.promptWindow = void 0;
                var labelButton_1 = __webpack_require__(3329),
                    lang_1 = __webpack_require__(9655);
                exports.promptWindow = function(options) {
                    var domContainer = document.createElement("div");
                    domContainer.className = "promptContainer";
                    var titleOption = options && options.title ? options.title : "";
                    if (titleOption && titleOption.length > 0) {
                        var domTitle = document.createElement("div");
                        domTitle.className = "promptTitle", domTitle.innerHTML = titleOption, domContainer.appendChild(domTitle)
                    }
                    var domContent = document.createElement("div");
                    domContent.className = "promptContent", domContent.innerHTML = options.content, domContainer.appendChild(domContent);
                    var domBtnContainer = document.createElement("div");
                    return domBtnContainer.className = "promptBtnContainer", options.buttons.forEach((function(btnOption) {
                        if ("string" == typeof btnOption && (btnOption = function(buttonLabel) {
                                switch (buttonLabel) {
                                    case "ok":
                                        return {
                                            btnName: "ok", label: lang_1.lang.get("prompt.btn_ok.label"), theme: "TinyGreen"
                                        };
                                    case "cancel":
                                        return {
                                            btnName: "cancel", label: lang_1.lang.get("prompt.btn_cancel.label"), theme: "TinyRed"
                                        }
                                }
                                return null
                            }(btnOption)), btnOption) {
                            var lastClick = btnOption.onClick;
                            btnOption.onClick = function() {
                                options.onClick && options.onClick(btnOption.btnName), lastClick && lastClick()
                            }, (0, labelButton_1.labelButton)(domBtnContainer, btnOption)
                        }
                    })), domContainer.appendChild(domBtnContainer), domContainer
                }
            },
            3204: (__unused_webpack_module, exports) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.standardField = void 0, exports.standardField = function(parentNode, domContent, options) {
                    var domField = document.createElement("div"),
                        finalClassName = "standardField",
                        skinOption = "standard";
                    return options && options.skin && (skinOption = options.skin), finalClassName += " standardFieldSkin" + skinOption, options && options.customClassName && (finalClassName += " " + options.customClassName), domField.className = finalClassName, domField.appendChild(domContent), parentNode.appendChild(domField), domField.setSkin = function(val) {
                        var finalClassName = "standardField standardFieldSkin" + val;
                        options && options.customClassName && (finalClassName += " " + options.customClassName), this.className = finalClassName
                    }.bind(domField), domField
                }
            },
            7169: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.standardText = void 0;
                var standardField_1 = __webpack_require__(3204);
                exports.standardText = function(parentNode, text, options) {
                    var txt = document.createElement("span"),
                        finalClassName = "standardText";
                    options && options.customClassName && (finalClassName += " " + options.customClassName), txt.className = finalClassName;
                    var domLabel = document.createElement("span");
                    domLabel.innerText = text, txt.appendChild(domLabel), options && options.maxWidth && (txt.style.maxWidth = options.maxWidth + "px"), options && options.textAlign ? txt.style.textAlign = options.textAlign : txt.style.textAlign = "center", options && options.letterSpacing && (txt.style.letterSpacing = options.letterSpacing + "px");
                    var field = (0, standardField_1.standardField)(parentNode, txt, {
                        skin: options.skin,
                        customClassName: options.customContainerClassName
                    });
                    return txt.setText = function(val) {
                        domLabel.innerText = val
                    }, txt.setSkin = function(val) {
                        field.setSkin(val)
                    }, txt
                }
            },
            5085: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.standardTextInput = void 0;
                var Sound_1 = __webpack_require__(3754),
                    standardField_1 = __webpack_require__(3204);
                exports.standardTextInput = function(parentNode, options) {
                    var inputText = document.createElement("input");
                    inputText.className = "standardTextInput";
                    var typeOption = options && options.inputType ? options.inputType : "text";
                    if (inputText.type = typeOption, options.cssId && (inputText.id = options.cssId), options.size && (inputText.size = options.size), options.fontSize ? inputText.style.fontSize = options.fontSize + "px" : inputText.style.fontSize = "17px", options.placeholder && (inputText.placeholder = options.placeholder), options && options.iconClassName) {
                        var domIcon = document.createElement("div");
                        domIcon.className = "standardTextInputIcon " + options.iconClassName, parentNode.appendChild(domIcon)
                    }
                    return inputText.addEventListener("keypress", (function(e) {
                        10 != e.which && 13 != e.which || options.onSubmit && (Sound_1.Sound.playSound("click"), options.onSubmit(inputText.value))
                    })), (0, standardField_1.standardField)(parentNode, inputText, {
                        skin: options.skin
                    }), inputText
                }
            },
            5847: (__unused_webpack_module, exports) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.tooltip = void 0, exports.tooltip = function(parentNode, options) {
                    var domTip = parentNode.querySelector(".standardTooltipContainer");
                    if (!domTip) {
                        domTip = document.createElement("div");
                        var finalClassName = "standardTooltipContainer";
                        "top" == (options && options.verticalAlign ? options.verticalAlign : "bottom") && (finalClassName += " standardTooltipContainerOnTop"), domTip.className = finalClassName, domTip.style.display = "none", parentNode.appendChild(domTip), parentNode.addEventListener("mouseover", (function() {
                            domTip.style.display = "block"
                        })), parentNode.addEventListener("mouseout", (function() {
                            domTip.style.display = "none"
                        }))
                    }
                    var tooltipClassName = "standardTooltip";
                    if (!(!options || !options.multiline) && options.multiline) {
                        tooltipClassName = "standardTooltipMultiline";
                        var tipWidth = options && options.width ? options.width : "200px";
                        domTip.style.width = tipWidth, domTip.innerHTML = '<div class="' + tooltipClassName + '"><span>' + options.tip + "</span></div>"
                    } else domTip.innerHTML = '<div class="' + tooltipClassName + '"><span>' + options.tip + "</span></div>";
                    var alignment = "left";
                    switch (options && options.align && (alignment = options.align), alignment) {
                        case "left":
                            domTip.style.left = "2px", domTip.style.right = "auto", domTip.style.display = "none", domTip.querySelector("." + tooltipClassName).style.left = "0";
                            break;
                        case "center":
                            domTip.style.left = "50%", domTip.style.right = "auto", domTip.style.display = "none", domTip.querySelector("." + tooltipClassName).style.left = "-50%";
                            break;
                        case "right":
                            domTip.style.right = "2px", domTip.style.left = "auto", domTip.style.display = "none", domTip.querySelector("." + tooltipClassName).style.right = "0"
                    }
                    return domTip.hide = function() {
                        domTip.style.display = "none"
                    }, domTip.show = function() {
                        domTip.style.display = "block"
                    }, parentNode.tipEffect = domTip, domTip
                }
            },
            1196: (__unused_webpack_module, exports) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.VisionWorkerRequestType = void 0;
                var VisionWorkerRequestType, _worker = self;
                ! function(VisionWorkerRequestType) {
                    VisionWorkerRequestType[VisionWorkerRequestType.Run = 0] = "Run", VisionWorkerRequestType[VisionWorkerRequestType.GridUpdate = 1] = "GridUpdate"
                }(VisionWorkerRequestType = exports.VisionWorkerRequestType || (exports.VisionWorkerRequestType = {}));
                var _grid = null,
                    _running = !1;
                _worker.onmessage = function(e) {
                    var msg = e.data;
                    if (msg.w === VisionWorkerRequestType.Run && null !== _grid)
                        if (_running) console.log("vision thread limit reached");
                        else {
                            _running = !0;
                            for (var result = {
                                    paths: [],
                                    id: msg.id
                                }, _i = 0, _a = msg.units; _i < _a.length; _i++) {
                                for (var u = _a[_i], visionPath = {
                                        fields: [],
                                        unit: u
                                    }, angle = 0; angle < 2 * Math.PI; angle += 2 * Math.PI / 200) {
                                    var visionPathLen, targetX = u.x + Math.cos(angle) * u.v,
                                        targetY = u.y + Math.sin(angle) * u.v,
                                        result_1 = raycast(u.x, u.y, targetX, targetY);
                                    if (result_1.x === targetX && result_1.y === targetY) result_1.m = !0, result_1.a = angle, (visionPathLen = visionPath.fields.length) >= 2 && visionPath.fields[visionPathLen - 1].m && visionPath.fields[visionPathLen - 2].m && visionPath.fields.pop();
                                    else if ((visionPathLen = visionPath.fields.length) >= 2) {
                                        var p1 = visionPath.fields[visionPathLen - 1],
                                            p2 = visionPath.fields[visionPathLen - 2];
                                        Math.abs((p1.x - p2.x) / (p1.y - p2.y) - (p1.x - result_1.x) / (p1.y - result_1.y)) < .01 && visionPath.fields.pop()
                                    }
                                    visionPath.fields.push(result_1)
                                }
                                result.paths.push(visionPath), console.log(visionPath.fields.length)
                            }
                            self.postMessage(result), _running = !1
                        }
                    else msg.w === VisionWorkerRequestType.GridUpdate && (_grid = msg.grid)
                };
                var getHeight = function(x, y) {
                    return x in _grid && y in _grid[x] ? _grid[x][y] : 0
                };

                function raycast(x, y, toX, toY) {
                    var xGrid = Math.floor(x),
                        yGrid = Math.floor(y);
                    if (getHeight(xGrid, yGrid) < 6) return {
                        x,
                        y
                    };
                    for (var rateX = toX - x, rateY = toY !== y ? toY - y : 1e-6, rate = rateX / rateY, rateAbs = Math.abs(rate), xGoesUp = rateX > 0, yGoesUp = rateY > 0;;) {
                        var xDist = xGoesUp ? 1 - x % 1 : x % 1;
                        0 === xDist && (xDist = 1);
                        var yDist = yGoesUp ? 1 - y % 1 : y % 1;
                        if (0 === yDist && (yDist = 1), xDist / yDist > rateAbs) {
                            var yDelta = yGoesUp ? yDist : -yDist;
                            y += yDelta, x += yDelta * rate, yGrid += yGoesUp ? 1 : -1
                        } else if (xDist / yDist < rateAbs) {
                            x += xDelta = xGoesUp ? xDist : -xDist, y += xDelta / rate, xGrid += xGoesUp ? 1 : -1
                        } else {
                            var xDelta;
                            if (x += xDelta = xGoesUp ? xDist : -xDist, y += xDelta / rate, xGoesUp && x >= toX || !xGoesUp && x <= toX) return {
                                x: toX,
                                y: toY
                            };
                            if (getHeight(xGrid += xGoesUp ? 1 : -1, yGrid) < 6) return {
                                x,
                                y
                            };
                            yGrid += yGoesUp ? 1 : -1
                        }
                        if (xGoesUp && x >= toX || !xGoesUp && x <= toX) return {
                            x: toX,
                            y: toY
                        };
                        if (getHeight(xGrid, yGrid) < 6) return {
                            x,
                            y
                        }
                    }
                }
            },
            6489: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.cleanAbilityObj = exports.abilities2Str = exports.str2Abilities = exports.getDefaultZombieAbilityObj = exports.getDefaultAbilityObj = exports.abilities = exports.AbilityType = exports.ZombieSpecialType = void 0;
                var ZombieSpecialType, AbilityType, Data_1 = __webpack_require__(6313);
                ! function(ZombieSpecialType) {
                    ZombieSpecialType[ZombieSpecialType.Dark = 0] = "Dark", ZombieSpecialType[ZombieSpecialType.Crawler = 1] = "Crawler", ZombieSpecialType[ZombieSpecialType.Ranged = 2] = "Ranged", ZombieSpecialType[ZombieSpecialType.None = 3] = "None"
                }(ZombieSpecialType = exports.ZombieSpecialType || (exports.ZombieSpecialType = {})),
                function(AbilityType) {
                    AbilityType[AbilityType.Place = 0] = "Place", AbilityType[AbilityType.Blink = 1] = "Blink", AbilityType[AbilityType.Invis = 2] = "Invis", AbilityType[AbilityType.Throw = 3] = "Throw", AbilityType[AbilityType.Scan = 4] = "Scan", AbilityType[AbilityType.Passive = 5] = "Passive", AbilityType[AbilityType.Shield = 6] = "Shield", AbilityType[AbilityType.Playdead = 7] = "Playdead", AbilityType[AbilityType.Summon = 8] = "Summon"
                }(AbilityType = exports.AbilityType || (exports.AbilityType = {})), exports.abilities = [{
                    name: "Heal Aura",
                    object: "healaura",
                    cooldown: 0,
                    energy: 45,
                    range: 5,
                    icon: "healWard",
                    humanOnly: !0,
                    type: AbilityType.Place,
                    description: "Create an aura that heals nearby players.",
                    activeMsg: "Left click to place",
                    levelUpFields: ["hpPerTick", "lifetime", "aoe"],
                    levelUpFieldsName: ["Heal Rate", "Lifetime", "Radius"],
                    displayScale: [20, .05, 1],
                    levelUpValues: [.15, 600, .9],
                    levelUpCost: [100, 100, 100],
                    levelUpMaxLvl: [3, 3, 3],
                    cost: 100,
                    maxLvl: 1,
                    defaultLvl: 1,
                    isFree: !0
                }, {
                    name: "Laser Turret",
                    object: "laserturret",
                    cooldown: 0,
                    energy: 55,
                    range: 5,
                    icon: "laserTurretIcon",
                    humanOnly: !0,
                    type: AbilityType.Place,
                    description: "Create a laser turret that shoots enemies.",
                    activeMsg: "Left click to place",
                    levelUpFields: ["aoe", "weaponCooldown", "maxCount"],
                    levelUpFieldsName: ["Range", "Fire Rate", "Max Active"],
                    levelUpValues: [1.5, -2, 1],
                    displayScale: [1, .05, 1],
                    levelUpCost: [100, 100, 100],
                    levelUpMaxLvl: [3, 3, 3],
                    levelUpMaxUpgLvl: [3, 3, 3],
                    cost: 100,
                    maxLvl: 1,
                    defaultLvl: 1,
                    tutorialLvl: 1,
                    isFree: !0,
                    maxCount: 2
                }, {
                    name: "Wall",
                    object: "wall",
                    cooldown: 0,
                    energy: 13,
                    range: 5,
                    icon: "block",
                    humanOnly: !0,
                    type: AbilityType.Place,
                    description: "Create a wall, that blocks pathing and projectiles. Grenades can be shot over it, though.",
                    activeMsg: "Left click to place",
                    levelUpFields: ["hp"],
                    levelUpFieldsName: ["Health"],
                    levelUpValues: [40],
                    levelUpCost: [100],
                    levelUpMaxLvl: [3],
                    cost: 100,
                    maxLvl: 1,
                    isFree: !0
                }, {
                    name: "Teleport",
                    cooldown: 160,
                    energy: 45,
                    range: 4,
                    type: AbilityType.Blink,
                    icon: "blink",
                    humanOnly: !0,
                    description: "Teleport over a short distance. After using teleport, you can not shoot for 2 sec.",
                    activeMsg: "Left click to teleport",
                    levelUpFields: ["range"],
                    levelUpFieldsName: ["Range"],
                    levelUpValues: [1.5],
                    levelUpCost: [100],
                    levelUpMaxLvl: [3],
                    cost: 100,
                    maxLvl: 1
                }, {
                    name: "Invisibility",
                    cooldown: 0,
                    energy: 5,
                    type: AbilityType.Invis,
                    icon: "invis",
                    humanOnly: !0,
                    description: "Makes you invisible.",
                    invisEnergyRate: -.21,
                    isInstant: !0,
                    levelUpFields: ["invisEnergyRate"],
                    levelUpFieldsName: ["Energy Cost"],
                    levelUpValues: [.016],
                    displayScale: [20],
                    levelUpCost: [100],
                    levelUpMaxLvl: [3],
                    cost: 100,
                    maxLvl: 1,
                    isFree: !0
                }, {
                    name: "Acid Grenade",
                    object: "poisongrenade",
                    cooldown: 0,
                    energy: 30,
                    range: 12,
                    icon: "grenadeBlue1",
                    humanOnly: !0,
                    type: AbilityType.Throw,
                    description: "Throw an acid grenade, that causes damage to players and objects over time.",
                    activeMsg: "Left click to throw",
                    levelUpFields: ["range", "aoe", "flameDPS"],
                    levelUpFieldsName: ["Range", "Radius", "Damage"],
                    levelUpValues: [2, .5, 5],
                    levelUpCost: [100, 100, 100],
                    levelUpMaxLvl: [3, 3, 3],
                    cost: 100,
                    maxLvl: 1,
                    isFree: !0
                }, {
                    name: "HE Grenade",
                    object: "hegrenade",
                    energy: 20,
                    range: 10,
                    cooldown: 20,
                    icon: "grenade1",
                    humanOnly: !0,
                    type: AbilityType.Throw,
                    description: "Throw a grenade that explodes and does damage.",
                    activeMsg: "Left click to throw",
                    levelUpFields: ["dmg", "range"],
                    levelUpFieldsName: ["Damage", "Range"],
                    levelUpValues: [10, 2],
                    levelUpCost: [100, 100],
                    levelUpMaxLvl: [3, 3],
                    cost: 100,
                    maxLvl: 1,
                    isFree: !0
                }, {
                    name: "Laser Grenade",
                    object: "lasergrenade",
                    cooldown: 120,
                    energy: 35,
                    range: 12,
                    icon: "grenadeYellow1",
                    humanOnly: !0,
                    type: AbilityType.Throw,
                    description: "Throw a grenade that shoots lasers in all directions when detonating.",
                    activeMsg: "Left click to throw",
                    levelUpFields: ["countLasers"],
                    levelUpFieldsName: ["Lasers"],
                    levelUpValues: [2],
                    levelUpCost: [100],
                    levelUpMaxLvl: [3],
                    cost: 100,
                    maxLvl: 1
                }, {
                    name: "Missile Turret",
                    object: "missileturret",
                    cooldown: 0,
                    energy: 80,
                    range: 5,
                    icon: "missileTurretIcon",
                    humanOnly: !0,
                    type: AbilityType.Place,
                    description: "Create a turret that shoots enemies.",
                    activeMsg: "Left click to place",
                    levelUpFields: ["dmg", "radius", "maxCount"],
                    levelUpFieldsName: ["Damage", "Radius", "Max Number"],
                    levelUpValues: [14, .25, 1],
                    levelUpCost: [100, 100, 100],
                    levelUpMaxLvl: [3, 3, 3],
                    cost: 100,
                    maxLvl: 1,
                    maxCount: 2
                }, {
                    name: "Grenade Turret",
                    object: "grenadeturret",
                    cooldown: 0,
                    energy: 75,
                    range: 5,
                    icon: "grenadeTurretIcon",
                    humanOnly: !0,
                    type: AbilityType.Place,
                    description: "Create a turret that shoots enemies.",
                    activeMsg: "Left click to place",
                    levelUpFields: ["dmg", "radius", "maxCount"],
                    levelUpFieldsName: ["Damage", "Radius", "Max Number"],
                    levelUpValues: [12, .22, 1],
                    levelUpCost: [100, 100, 100],
                    levelUpMaxLvl: [3, 3, 3],
                    cost: 100,
                    maxLvl: 1,
                    maxCount: 2
                }, {
                    name: "Scan",
                    cooldown: 200,
                    duration: 320,
                    energy: 15,
                    type: AbilityType.Scan,
                    icon: "scan",
                    humanOnly: !0,
                    description: "Show enemy players on the minimap for a while. Also increases the visibility of invisible players.",
                    isInstant: !0,
                    levelUpFields: ["duration"],
                    levelUpFieldsName: ["Duration"],
                    levelUpValues: [120],
                    displayScale: [.05],
                    levelUpCost: [100],
                    levelUpMaxLvl: [3],
                    cost: 100,
                    maxLvl: 1
                }, {
                    name: "Strength",
                    type: AbilityType.Passive,
                    field: "maxHP",
                    mod: 7,
                    zombieMod: 7,
                    defaultLvl: 3,
                    tutorialLvl: 6,
                    icon: "strength",
                    description: "Increases your max HP by 7",
                    cost: 100,
                    maxLvl: 10,
                    isFree: !0,
                    causesFieldUpdate: !0
                }, {
                    name: "Agility",
                    type: AbilityType.Passive,
                    field: "movementSpeed",
                    mod: .0038,
                    zombieMod: .0045,
                    icon: "agility",
                    description: "Increases your movement Speed",
                    cost: 100,
                    defaultLvl: 3,
                    tutorialLvl: 3,
                    maxLvl: 10,
                    isFree: !0
                }, {
                    name: "Regeneration",
                    type: AbilityType.Passive,
                    field: "hpRegeneration",
                    mod: .0155,
                    zombieMod: .03,
                    icon: "regeneration",
                    description: "Increases your HP regeneration rate",
                    cost: 100,
                    maxLvl: 10,
                    causesFieldUpdate: !0
                }, {
                    name: "Intelligence",
                    type: AbilityType.Passive,
                    field: "energyRegeneration",
                    mod: .01,
                    zombieMod: .018,
                    tutorialLvl: 10,
                    icon: "intelligence",
                    description: "Increases your energy regeneration rate",
                    cost: 100,
                    maxLvl: 10,
                    causesFieldUpdate: !0
                }, {
                    name: "Lifesteal",
                    type: AbilityType.Passive,
                    field: "lifesteal",
                    mod: .045,
                    zombieMod: .1,
                    icon: "lifesteal",
                    description: "Makes you gain life when dealing damage",
                    cost: 100,
                    maxLvl: 10
                }, {
                    name: "Shield",
                    type: AbilityType.Shield,
                    reduceDmgTo: 10,
                    cooldown: 200,
                    duration: 20,
                    energy: 33,
                    icon: "shieldIcon",
                    humanOnly: !0,
                    description: "Reduces incoming damage to 10. Only lasts 1 sec.",
                    isInstant: !0,
                    cost: 100,
                    maxLvl: 1
                }, {
                    name: "Play Dead",
                    type: AbilityType.Playdead,
                    cooldown: 200,
                    duration: 20,
                    duration2: 6,
                    energy: 5,
                    icon: "playDead",
                    description: "Play dead.",
                    isInstant: !0,
                    zombieOnly: !0,
                    maxLvl: 1,
                    cost: 100,
                    causesAbilityUpdate: !0
                }, {
                    name: "Summon Zombie",
                    type: AbilityType.Summon,
                    energy: 40,
                    range: 5,
                    icon: "summonZombie",
                    cooldown: 1,
                    description: "Summon a zombie.",
                    zombieOnly: !0,
                    maxLvl: 5,
                    cost: 100,
                    causesAbilityUpdate: !0
                }, {
                    name: "Summon Stronger Zombie",
                    type: AbilityType.Summon,
                    energy: 50,
                    range: 5,
                    icon: "summonZombie2",
                    cooldown: 1,
                    description: "Summon a stronger zombie.",
                    rangedZombie: !0,
                    zombieOnly: !0,
                    maxLvl: 5,
                    cost: 100,
                    causesAbilityUpdate: !0
                }, {
                    name: "Zombie Sense",
                    type: AbilityType.Passive,
                    range: 5,
                    field: "zombieSense",
                    mod: 5,
                    zombieMod: 5,
                    icon: "zombieSenseIcon",
                    description: "Show invisible players near you.",
                    zombieOnly: !0,
                    maxLvl: 3,
                    cost: 100,
                    causesFieldUpdate: !0
                }, {
                    name: "Summon Dark Zombie",
                    type: AbilityType.Summon,
                    energy: 80,
                    range: 4,
                    icon: "summonZombie3",
                    cooldown: 1,
                    description: "Summon a dark zombie.",
                    zombieOnly: !0,
                    maxLvl: 5,
                    cost: 100,
                    special: ZombieSpecialType.Dark,
                    requiredLvl: 8,
                    causesAbilityUpdate: !0
                }, {
                    name: "Damage",
                    type: AbilityType.Passive,
                    field: "dmg",
                    mod: 0,
                    zombieMod: 10,
                    icon: "zombie_weapon",
                    zombieOnly: !0,
                    description: "Increases your damage",
                    cost: 100,
                    maxLvl: 10
                }, {
                    name: "Summon Crawler",
                    type: AbilityType.Summon,
                    energy: 30,
                    range: 4,
                    icon: "crawler",
                    cooldown: 1,
                    description: "Summon a crawler.",
                    zombieOnly: !0,
                    maxLvl: 5,
                    cost: 100,
                    special: ZombieSpecialType.Crawler,
                    requiredLvl: 4,
                    causesAbilityUpdate: !0
                }, {
                    name: "Reflection Shield",
                    type: AbilityType.Shield,
                    reflects: !0,
                    cooldown: 200,
                    duration: 20,
                    energy: 33,
                    icon: "refShieldIcon",
                    humanOnly: !0,
                    description: "Reflects incoming projectiles.",
                    isInstant: !0,
                    cost: 100,
                    maxLvl: 1
                }];
                for (var i = 0; i < exports.abilities.length; i++) exports.abilities[i].id = i;

                function getDefaultAbilityObj(abs) {
                    for (var build = [], i = 0; i < abs.length; i++) {
                        var a = abs[i],
                            abDef = {
                                lvl: void 0 !== a.defaultLvl ? a.defaultLvl : 0
                            };
                        if (build.push(abDef), void 0 !== a.levelUpFields) {
                            abDef.attributes = [];
                            for (var k = 0; k < a.levelUpFields.length; k++) abDef.attributes.push(0)
                        }
                    }
                    return build
                }
                exports.getDefaultAbilityObj = getDefaultAbilityObj, exports.getDefaultZombieAbilityObj = function(abs, config) {
                    for (var build = [], _i = 0, config_1 = config; _i < config_1.length; _i++) {
                        var c = config_1[_i],
                            o = {
                                lvl: c.humanOnly ? 0 : abs[c.id].lvl
                            };
                        c.levelUpFields && (o.attributes = new Array(c.levelUpFields.length).fill(0)), build.push(o)
                    }
                    return build
                }, exports.str2Abilities = function(abilities) {
                    if (abilities && !(abilities.length <= 2)) {
                        if ("1" === abilities[0]) {
                            for (var ret = [], a1 = abilities.split(";"), i = 1; i < a1.length; i++)
                                if (a1[i].length > 0) {
                                    var a2 = a1[i].split(","),
                                        o1 = {
                                            lvl: Number(a2[0])
                                        };
                                    if (a2.length > 1) {
                                        o1.attributes = [];
                                        for (var j = 1; j < a2.length; j++) o1.attributes.push(Number(a2[j]))
                                    }
                                    ret.push(o1)
                                } return ret
                        }
                        try {
                            return JSON.parse(abilities)
                        } catch (err) {
                            return
                        }
                    }
                }, exports.abilities2Str = function(abilities) {
                    if (!abilities || !abilities.length) return "1";
                    for (var ability, str = "1", i = 0; i < abilities.length; i++)
                        if (str += ";", ability = abilities[i], str += Number(ability.lvl), ability.attributes && ability.attributes.length)
                            for (var j = 0; j < ability.attributes.length; j++) str += "," + Number(ability.attributes[j]);
                    return str
                }, exports.cleanAbilityObj = function(obj1) {
                    if (!obj1 || "[object Array]" !== Object.prototype.toString.call(obj1)) return getDefaultAbilityObj(exports.abilities);
                    for (var obj = [], pts = 0, i = 0; i < exports.abilities.length; i++) {
                        var a = exports.abilities[i],
                            ob1 = obj1[i];
                        if (ob1) {
                            var lvl = ob1.lvl ? Math.floor(ob1.lvl) : 0;
                            (isNaN(lvl) || lvl < 0) && (lvl = 0), a.maxLvl && lvl > a.maxLvl && (lvl = a.maxLvl), pts += a.cost * lvl;
                            var o = {
                                lvl
                            };
                            if (obj.push(o), a.levelUpFields) {
                                o.attributes = [];
                                for (var k = 0; k < a.levelUpFields.length; k++) {
                                    var attLvl = ob1.attributes && ob1.attributes[k] ? Math.floor(ob1.attributes[k]) : 0;
                                    (isNaN(attLvl) || attLvl < 0) && (attLvl = 0), a.levelUpMaxLvl && attLvl > a.levelUpMaxLvl[k] && (attLvl = a.levelUpMaxLvl[k]), a.levelUpCost && (pts += attLvl * a.levelUpCost[k]), o.attributes.push(attLvl)
                                }
                            }
                        }
                    }
                    return pts <= Data_1.CONST.MAX_CRYSTALS ? obj : getDefaultAbilityObj(exports.abilities)
                }
            },
            6313: (__unused_webpack_module, exports) => {
                "use strict";

                function getCrystalsRequiredForLvl(lvl) {
                    return lvl <= 1 ? 0 : Math.floor(50 * Math.pow(lvl - 1, 1.56) + 50)
                }
                Object.defineProperty(exports, "__esModule", {
                        value: !0
                    }), exports.soundLinks = exports.validateMail = exports.validatePW = exports.validateClanText = exports.validateClanName = exports.checkName = exports.validateClanTag = exports.getFlagXPFromPlayerCount = exports.getLvlFromSouls = exports.getCrystalsRequiredForLvl = exports.getLvlFromXp = exports.getXPRequiredForLvl = exports.getTotalXPRequiredForLvl = exports.playerLevelXpTotal = exports.playerLevelXp = exports.NAME_COLOR = exports.multiKills = exports.killStreaks = exports.nbs = exports.AUTH_LEVEL = exports.CREATION_FREE_MAPS = exports.CONST = void 0, exports.CONST = {
                        ITEM_RESPAWN_TIME: 900,
                        PLAYER_RADIUS: .55,
                        WPN_SWITCH_TICKS: 20,
                        TRANSMUL: 100,
                        MAX_ARMOR: 65,
                        MOV_SPEED: .2035,
                        MAX_JUMP_VEC_LEN: .21,
                        ENERGY_REG_RATE: .05,
                        GRAVITY: .066,
                        MAX_HP_BASE: 86,
                        MIN_MAP_SIZE: 8,
                        MAX_MAP_SIZE: 128,
                        SPAWN_INVINCIBILITY: 100,
                        NO_SHOOT_AFTER_BLINK_TICKS: 40,
                        XP_FLAG_RETURN: 30,
                        START_ENERGY: 10,
                        PERC_CRYSTALS_TRANSFER_ON_ZOMBIE_DEATH: .1,
                        PERC_CRYSTALS_TRANSFER_ON_HUMAN_DEATH: .4,
                        ZOMBIE_CRYSTAL_BASE: 25,
                        ZOMBIE_BASE_DMG: 25,
                        ZOMBIE_BASE_HP: 70,
                        ZOMBIE_BASE_MOV_SPEED: .125,
                        ZOMBIE_BASE_HP_REG: .035,
                        CRYSTALS_PER_SOULS_LVL: 100,
                        UPG_OPTIONS_PRESENTED: 5,
                        HP_SEPERATOR_AMOUNT: 50,
                        MAX_CRYSTALS: 1200,
                        FLAME_DMG_PERIOD: 5,
                        PLAYER_RESPAWN_DELAY: 150,
                        CLAN_CREATION_GOLD_COST: 1e3,
                        GAME_CREATION_GOLD_COST: 100,
                        EMOTE_DURATION: 100,
                        BUSH_VISION_RANGE: 3,
                        ENABLE_EMOTES: !1,
                        ENABLE_LIGHTMAP: !1
                    }, exports.CREATION_FREE_MAPS = [1, 76],
                    function(AUTH_LEVEL) {
                        AUTH_LEVEL[AUTH_LEVEL.NONE = 0] = "NONE", AUTH_LEVEL[AUTH_LEVEL.BOT = 2] = "BOT", AUTH_LEVEL[AUTH_LEVEL.GUEST = 4] = "GUEST", AUTH_LEVEL[AUTH_LEVEL.PLAYER = 6] = "PLAYER", AUTH_LEVEL[AUTH_LEVEL.MOD = 8] = "MOD", AUTH_LEVEL[AUTH_LEVEL.MOD2 = 9] = "MOD2", AUTH_LEVEL[AUTH_LEVEL.ADMIN = 10] = "ADMIN"
                    }(exports.AUTH_LEVEL || (exports.AUTH_LEVEL = {})), exports.nbs = [{
                        x: 0,
                        y: 0
                    }, {
                        x: 1,
                        y: 0
                    }, {
                        x: 0,
                        y: 1
                    }, {
                        x: 0,
                        y: -1
                    }, {
                        x: -1,
                        y: 0
                    }, {
                        x: 1,
                        y: 1
                    }, {
                        x: 1,
                        y: -1
                    }, {
                        x: -1,
                        y: 1
                    }, {
                        x: -1,
                        y: -1
                    }, {
                        x: 0,
                        y: 2
                    }, {
                        x: 2,
                        y: 0
                    }, {
                        x: 0,
                        y: -2
                    }, {
                        x: -2,
                        y: 0
                    }, {
                        x: 1,
                        y: 2
                    }, {
                        x: -1,
                        y: -2
                    }, {
                        x: -1,
                        y: 2
                    }, {
                        x: -2,
                        y: 1
                    }, {
                        x: -2,
                        y: -1
                    }, {
                        x: 1,
                        y: -2
                    }, {
                        x: 2,
                        y: 1
                    }, {
                        x: 2,
                        y: -1
                    }, {
                        x: -2,
                        y: 2
                    }, {
                        x: -2,
                        y: -2
                    }, {
                        x: 2,
                        y: -2
                    }, {
                        x: 2,
                        y: 2
                    }, {
                        x: -3,
                        y: 0
                    }, {
                        x: 0,
                        y: 3
                    }, {
                        x: 3,
                        y: 0
                    }, {
                        x: 0,
                        y: -3
                    }, {
                        x: 1,
                        y: 3
                    }, {
                        x: -3,
                        y: -1
                    }, {
                        x: 3,
                        y: -1
                    }, {
                        x: -3,
                        y: 1
                    }, {
                        x: 1,
                        y: -3
                    }, {
                        x: 3,
                        y: 1
                    }, {
                        x: -1,
                        y: -3
                    }, {
                        x: -1,
                        y: 3
                    }, {
                        x: 3,
                        y: 2
                    }, {
                        x: -3,
                        y: 2
                    }, {
                        x: 2,
                        y: -3
                    }, {
                        x: 2,
                        y: 3
                    }, {
                        x: 3,
                        y: -2
                    }, {
                        x: -2,
                        y: 3
                    }, {
                        x: -3,
                        y: -2
                    }, {
                        x: -2,
                        y: -3
                    }, {
                        x: -4,
                        y: 0
                    }, {
                        x: 4,
                        y: 0
                    }, {
                        x: 0,
                        y: -4
                    }, {
                        x: 0,
                        y: 4
                    }, {
                        x: -4,
                        y: -1
                    }, {
                        x: -1,
                        y: -4
                    }, {
                        x: -4,
                        y: 1
                    }, {
                        x: 1,
                        y: -4
                    }, {
                        x: 4,
                        y: 1
                    }, {
                        x: 1,
                        y: 4
                    }, {
                        x: 4,
                        y: -1
                    }, {
                        x: -1,
                        y: 4
                    }, {
                        x: -3,
                        y: -3
                    }, {
                        x: 3,
                        y: -3
                    }, {
                        x: -3,
                        y: 3
                    }, {
                        x: 3,
                        y: 3
                    }, {
                        x: -2,
                        y: 4
                    }, {
                        x: -2,
                        y: -4
                    }, {
                        x: 2,
                        y: 4
                    }, {
                        x: 4,
                        y: -2
                    }, {
                        x: -4,
                        y: 2
                    }, {
                        x: -4,
                        y: -2
                    }, {
                        x: 4,
                        y: 2
                    }, {
                        x: 2,
                        y: -4
                    }, {
                        x: 3,
                        y: 4
                    }, {
                        x: -4,
                        y: -3
                    }, {
                        x: -4,
                        y: 3
                    }, {
                        x: 5,
                        y: 0
                    }, {
                        x: -5,
                        y: 0
                    }, {
                        x: 0,
                        y: 5
                    }, {
                        x: 4,
                        y: -3
                    }, {
                        x: 0,
                        y: -5
                    }, {
                        x: -3,
                        y: 4
                    }, {
                        x: 4,
                        y: 3
                    }, {
                        x: -3,
                        y: -4
                    }, {
                        x: 3,
                        y: -4
                    }, {
                        x: -1,
                        y: -5
                    }, {
                        x: -1,
                        y: 5
                    }, {
                        x: 5,
                        y: 1
                    }, {
                        x: 5,
                        y: -1
                    }, {
                        x: 1,
                        y: -5
                    }, {
                        x: 1,
                        y: 5
                    }, {
                        x: -5,
                        y: -1
                    }, {
                        x: -5,
                        y: 1
                    }, {
                        x: -5,
                        y: 2
                    }, {
                        x: 5,
                        y: -2
                    }, {
                        x: -2,
                        y: 5
                    }, {
                        x: 2,
                        y: -5
                    }, {
                        x: -5,
                        y: -2
                    }, {
                        x: 5,
                        y: 2
                    }, {
                        x: 2,
                        y: 5
                    }, {
                        x: -2,
                        y: -5
                    }, {
                        x: 4,
                        y: -4
                    }, {
                        x: -4,
                        y: -4
                    }, {
                        x: -4,
                        y: 4
                    }, {
                        x: 4,
                        y: 4
                    }, {
                        x: -5,
                        y: -3
                    }, {
                        x: 5,
                        y: -3
                    }, {
                        x: -5,
                        y: 3
                    }, {
                        x: -3,
                        y: -5
                    }, {
                        x: -3,
                        y: 5
                    }, {
                        x: 3,
                        y: 5
                    }, {
                        x: 5,
                        y: 3
                    }, {
                        x: 3,
                        y: -5
                    }, {
                        x: 0,
                        y: -6
                    }, {
                        x: -6,
                        y: 0
                    }, {
                        x: 6,
                        y: 0
                    }, {
                        x: 0,
                        y: 6
                    }, {
                        x: -1,
                        y: 6
                    }, {
                        x: -6,
                        y: 1
                    }, {
                        x: 6,
                        y: 1
                    }, {
                        x: 6,
                        y: -1
                    }, {
                        x: 1,
                        y: 6
                    }, {
                        x: 1,
                        y: -6
                    }, {
                        x: -1,
                        y: -6
                    }, {
                        x: -6,
                        y: -1
                    }, {
                        x: 6,
                        y: 2
                    }, {
                        x: 2,
                        y: -6
                    }, {
                        x: 2,
                        y: 6
                    }, {
                        x: -6,
                        y: -2
                    }, {
                        x: -6,
                        y: 2
                    }, {
                        x: -2,
                        y: 6
                    }, {
                        x: -2,
                        y: -6
                    }, {
                        x: 6,
                        y: -2
                    }, {
                        x: -5,
                        y: 4
                    }, {
                        x: 5,
                        y: 4
                    }, {
                        x: -4,
                        y: -5
                    }, {
                        x: 4,
                        y: 5
                    }, {
                        x: -4,
                        y: 5
                    }, {
                        x: -5,
                        y: -4
                    }, {
                        x: 5,
                        y: -4
                    }, {
                        x: 4,
                        y: -5
                    }, {
                        x: 6,
                        y: 3
                    }, {
                        x: -6,
                        y: 3
                    }, {
                        x: -3,
                        y: 6
                    }, {
                        x: 3,
                        y: 6
                    }, {
                        x: 3,
                        y: -6
                    }, {
                        x: -3,
                        y: -6
                    }, {
                        x: 6,
                        y: -3
                    }, {
                        x: -6,
                        y: -3
                    }, {
                        x: -7,
                        y: 0
                    }, {
                        x: 7,
                        y: 0
                    }, {
                        x: 0,
                        y: -7
                    }, {
                        x: 0,
                        y: 7
                    }, {
                        x: -7,
                        y: -1
                    }, {
                        x: -1,
                        y: -7
                    }, {
                        x: 1,
                        y: -7
                    }, {
                        x: 7,
                        y: 1
                    }, {
                        x: 5,
                        y: 5
                    }, {
                        x: 5,
                        y: -5
                    }, {
                        x: 1,
                        y: 7
                    }, {
                        x: -1,
                        y: 7
                    }, {
                        x: -5,
                        y: -5
                    }, {
                        x: -7,
                        y: 1
                    }, {
                        x: -5,
                        y: 5
                    }, {
                        x: 7,
                        y: -1
                    }, {
                        x: -4,
                        y: -6
                    }, {
                        x: 4,
                        y: 6
                    }, {
                        x: 6,
                        y: 4
                    }, {
                        x: 4,
                        y: -6
                    }, {
                        x: -6,
                        y: -4
                    }, {
                        x: 6,
                        y: -4
                    }, {
                        x: -4,
                        y: 6
                    }, {
                        x: -6,
                        y: 4
                    }, {
                        x: -2,
                        y: -7
                    }, {
                        x: 7,
                        y: -2
                    }, {
                        x: -7,
                        y: 2
                    }, {
                        x: 7,
                        y: 2
                    }, {
                        x: 2,
                        y: 7
                    }, {
                        x: 2,
                        y: -7
                    }, {
                        x: -2,
                        y: 7
                    }, {
                        x: -7,
                        y: -2
                    }, {
                        x: 3,
                        y: 7
                    }, {
                        x: 7,
                        y: 3
                    }, {
                        x: -7,
                        y: 3
                    }, {
                        x: -3,
                        y: 7
                    }, {
                        x: -3,
                        y: -7
                    }, {
                        x: 3,
                        y: -7
                    }, {
                        x: 7,
                        y: -3
                    }, {
                        x: -7,
                        y: -3
                    }, {
                        x: -5,
                        y: 6
                    }, {
                        x: -6,
                        y: 5
                    }, {
                        x: 5,
                        y: -6
                    }, {
                        x: 6,
                        y: 5
                    }, {
                        x: -6,
                        y: -5
                    }, {
                        x: -5,
                        y: -6
                    }, {
                        x: 6,
                        y: -5
                    }, {
                        x: 5,
                        y: 6
                    }, {
                        x: 4,
                        y: 7
                    }, {
                        x: -7,
                        y: 4
                    }, {
                        x: 4,
                        y: -7
                    }, {
                        x: 7,
                        y: -4
                    }, {
                        x: -4,
                        y: -7
                    }, {
                        x: 7,
                        y: 4
                    }, {
                        x: -4,
                        y: 7
                    }, {
                        x: -7,
                        y: -4
                    }, {
                        x: 6,
                        y: 6
                    }, {
                        x: 6,
                        y: -6
                    }, {
                        x: -6,
                        y: 6
                    }, {
                        x: -6,
                        y: -6
                    }, {
                        x: 7,
                        y: 5
                    }, {
                        x: -5,
                        y: -7
                    }, {
                        x: 5,
                        y: 7
                    }, {
                        x: -7,
                        y: 5
                    }, {
                        x: 7,
                        y: -5
                    }, {
                        x: 5,
                        y: -7
                    }, {
                        x: -5,
                        y: 7
                    }, {
                        x: -7,
                        y: -5
                    }, {
                        x: -6,
                        y: 7
                    }, {
                        x: 6,
                        y: 7
                    }, {
                        x: 7,
                        y: -6
                    }, {
                        x: -7,
                        y: 6
                    }, {
                        x: 6,
                        y: -7
                    }, {
                        x: -6,
                        y: -7
                    }, {
                        x: 7,
                        y: 6
                    }, {
                        x: -7,
                        y: -6
                    }, {
                        x: -7,
                        y: -7
                    }, {
                        x: 7,
                        y: -7
                    }, {
                        x: -7,
                        y: 7
                    }, {
                        x: 7,
                        y: 7
                    }], exports.killStreaks = [], exports.killStreaks[5] = {
                        msg_start_self: "game.msg.streak5.self",
                        msg_start_others: "game.msg.streak5.others",
                        msg_ended_self: "game.msg.streak5.ended_self",
                        msg_ended_others: "game.msg.streak5.ended_others",
                        sound: "killing_spree",
                        xp: 15
                    }, exports.killStreaks[10] = {
                        msg_start_self: "game.msg.streak10.self",
                        msg_start_others: "game.msg.streak10.others",
                        msg_ended_self: "game.msg.streak10.ended_self",
                        msg_ended_others: "game.msg.streak10.ended_others",
                        sound: "rampage",
                        xp: 30
                    }, exports.killStreaks[15] = {
                        msg_start_self: "game.msg.streak15.self",
                        msg_start_others: "game.msg.streak15.others",
                        msg_ended_self: "game.msg.streak15.ended_self",
                        msg_ended_others: "game.msg.streak15.ended_others",
                        sound: "dominating",
                        xp: 50
                    }, exports.killStreaks[20] = {
                        msg_start_self: "game.msg.streak20.self",
                        msg_start_others: "game.msg.streak20.others",
                        msg_ended_self: "game.msg.streak20.ended_self",
                        msg_ended_others: "game.msg.streak20.ended_others",
                        sound: "unstoppable",
                        xp: 75
                    }, exports.killStreaks[25] = {
                        msg_start_self: "game.msg.streak25.self",
                        msg_start_others: "game.msg.streak25.others",
                        msg_ended_self: "game.msg.streak25.ended_self",
                        msg_ended_others: "game.msg.streak25.ended_others",
                        sound: "godlike",
                        xp: 120
                    }, exports.multiKills = [], exports.multiKills[2] = {
                        name: "Double Kill",
                        sound: "double_kill",
                        xp: 12
                    }, exports.multiKills[3] = {
                        name: "Multi Kill",
                        sound: "multi_kill",
                        xp: 18
                    }, exports.multiKills[4] = {
                        name: "Ultra Kill",
                        sound: "ultra_kill",
                        xp: 25
                    }, exports.multiKills[5] = {
                        name: "MONSTER Kill",
                        sound: "monster_kill",
                        xp: 35
                    }, exports.NAME_COLOR = {
                        50: {
                            name: "Bot",
                            code: "#d2d2d2"
                        },
                        100: {
                            name: "Guest",
                            code: "#fff"
                        },
                        200: {
                            name: "Player",
                            code: "rgb(255, 255, 120)"
                        },
                        210: {
                            name: "Veteran",
                            code: "#ea9",
                            description: "Unlock at level 50"
                        },
                        300: {
                            name: "Elite",
                            code: "#cae",
                            description: "Unlock at level 100"
                        },
                        400: {
                            name: "Steam",
                            code: "#a4d007"
                        },
                        501: {
                            name: "Warden",
                            code: "#82d1ff",
                            showOnlyWhenHave: !0
                        },
                        800: {
                            name: "Mod",
                            code: "#e6a",
                            description: "Only for moderators"
                        },
                        1e3: {
                            name: "Admin",
                            code: "#fc9440",
                            description: "Only for admins",
                            showOnlyWhenHave: !0
                        }
                    }, exports.playerLevelXp = [40, 60, 80, 100, 120, 140, 160, 180, 200, 235, 270, 290, 310, 330, 350, 370, 390, 410, 430, 450, 470, 490, 520, 580, 640, 740, 840, 940, 1140, 1340, 1540, 1740, 1940, 2140, 2300, 2460, 2620, 2780, 2940, 3020, 3100, 3180, 3260, 3340, 3420, 3440, 3460, 3480, 3500, 3520], exports.playerLevelXpTotal = [40, 100, 180, 280, 400, 540, 700, 880, 1080, 1315, 1585, 1875, 2185, 2515, 2865, 3235, 3625, 4035, 4465, 4915, 5385, 5875, 6395, 6975, 7615, 8355, 9195, 10135, 11275, 12615, 14155, 15895, 17835, 19975, 22275, 24735, 27355, 30135, 33075, 36095, 39195, 42375, 45635, 48975, 52395, 55835, 59295, 62775, 66275, 69795], exports.getTotalXPRequiredForLvl = function(lvl) {
                        var len = exports.playerLevelXpTotal.length,
                            idx = lvl - 2;
                        return idx < 0 ? 0 : idx < len ? exports.playerLevelXpTotal[idx] : exports.playerLevelXpTotal[len - 1] + (idx - len + 1) * exports.playerLevelXp[len - 1]
                    }, exports.getXPRequiredForLvl = function(lvl) {
                        var len = exports.playerLevelXp.length,
                            idx = lvl - 2;
                        return idx < 0 ? 0 : idx < len ? exports.playerLevelXp[idx] : exports.playerLevelXp[len - 1]
                    }, exports.getLvlFromXp = function(xp) {
                        var len = exports.playerLevelXpTotal.length,
                            xpTotal = exports.playerLevelXpTotal[len - 1],
                            lvl = 1;
                        if (xp <= xpTotal)
                            for (var i = 0; i < len && xp >= exports.playerLevelXpTotal[i]; i++) lvl = i + 2;
                        else lvl = len + 1 + Math.floor((xp - xpTotal) / exports.playerLevelXp[len - 1]);
                        return lvl
                    }, exports.getCrystalsRequiredForLvl = getCrystalsRequiredForLvl, exports.getLvlFromSouls = function(xp) {
                        for (var lvl = 1; getCrystalsRequiredForLvl(lvl + 1) <= xp;) lvl++;
                        return lvl
                    }, exports.getFlagXPFromPlayerCount = function(playerCount) {
                        return playerCount <= 1 ? 0 : 2 === playerCount ? 10 : 3 === playerCount ? 15 : 4 === playerCount ? 20 : 5 === playerCount ? 25 : exports.CONST.XP_FLAG_RETURN
                    }, exports.validateClanTag = function(str) {
                        if (!str) return !1;
                        if (str.length < 1 || str.length > 6) return !1;
                        for (var i = 0; i < str.length; i++) {
                            var match = str.charAt(i).match(/[\w-+*]/g);
                            if (null === match || match[0] !== str.charAt(i)) return !1
                        }
                        return !0
                    }, exports.checkName = function(str) {
                        if (!str) return "";
                        if (str.length < 3 || str.length > 15) return "3 - 15 chars.";
                        if (" " === str.charAt(0) || " " === str.charAt(str.length - 1)) return "1st / last char cant be space.";
                        for (var i = 1; i < str.length - 1; i++) {
                            var match = str.charAt(i).match(/[\u4e00-\u9fa5-\w\u0430-\u044f ]/g);
                            if (null === match || match[0] !== str.charAt(i)) return "Only use letters, numbers, space, - and _"
                        }
                        return "OK"
                    }, exports.validateClanName = function(str) {
                        if (!str) return !1;
                        if (str.length < 1 || str.length > 15) return !1;
                        var match = str.charAt(0).match(/[\w]/g);
                        if (null === match || match[0] !== str.charAt(0)) return !1;
                        if (null === (match = str.charAt(str.length - 1).match(/[\w]/g)) || match[0] !== str.charAt(str.length - 1)) return !1;
                        for (var i = 1; i < str.length - 1; i++)
                            if (null === (match = str.charAt(i).match(/[\w ]/g)) || match[0] !== str.charAt(i)) return !1;
                        return !0
                    }, exports.validateClanText = function(str) {
                        return void 0 !== str && str.length < 500
                    }, exports.validatePW = function(str) {
                        return !!str && !(str.length < 3 || str.length > 20)
                    }, exports.validateMail = function(email) {
                        return /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(String(email).toLowerCase())
                    }, exports.soundLinks = {
                        grenade_launch: ["sounds/grenade_launch_1.ogg", "sounds/grenade_launch_2.ogg", "sounds/grenade_launch_3.ogg"],
                        explo: ["sounds/explo1.ogg", "sounds/explo2.ogg"],
                        laser: ["sounds/laser1.ogg", "sounds/laser1.ogg", "sounds/laser2.ogg", "sounds/laser2.ogg"],
                        switch_weapon: ["sounds/switch_weapon.ogg", "sounds/switch_weapon.ogg"],
                        cock: ["sounds/cock1.ogg", "sounds/cock1.ogg"],
                        empty_clip: ["sounds/empty-clip.ogg", "sounds/empty-clip.ogg"],
                        sizzle: ["sounds/sizzle1.ogg", "sounds/sizzle2.ogg", "sounds/sizzle2.ogg"],
                        sizzle2: ["sounds/sizzle3.ogg", "sounds/sizzle3.ogg", "sounds/sizzle3.ogg"],
                        gun_impact: ["sounds/gun_hit_wall.ogg", "sounds/gun_hit_wall.ogg", "sounds/gun_hit_wall.ogg", "sounds/gun_hit_wall.ogg"],
                        gun_impact_2: ["sounds/gun_impact_x.ogg", "sounds/gun_impact_x.ogg", "sounds/gun_impact_x.ogg", "sounds/gun_impact_x.ogg"],
                        punch: ["sounds/punch1.ogg", "sounds/punch2.ogg", "sounds/punch1.ogg", "sounds/punch2.ogg", "sounds/punch1.ogg", "sounds/punch2.ogg"],
                        kick: ["sounds/kick1.ogg", "sounds/kick2.ogg", "sounds/kick3.ogg", "sounds/kick4.ogg"],
                        click: ["sounds/click1.ogg", "sounds/click1.ogg"],
                        rocket_launch: ["sounds/rocket-launch.ogg", "sounds/rocket-launch.ogg", "sounds/rocket-launch.ogg"],
                        rocket_fly: ["sounds/rocket-fly.ogg", "sounds/rocket-fly.ogg", "sounds/rocket-fly.ogg"],
                        frag1: ["sounds/kill1.ogg"],
                        frag2: ["sounds/kill2.ogg"],
                        frag3: ["sounds/kill3.ogg"],
                        frag4: ["sounds/kill4.ogg"],
                        frag5: ["sounds/kill5.ogg"],
                        reload_mg: ["sounds/reload_mg.ogg"],
                        reload_gl: ["sounds/reload_gl.ogg"],
                        reload_rl: ["sounds/reload_rl.ogg"],
                        reload_rl2: ["sounds/reload_rl_2.ogg"],
                        laser_recharge: ["sounds/laser-recharge.ogg"],
                        reload_flame: ["sounds/reload_flame.ogg"],
                        ladder_win: ["sounds/ladder_win.ogg"],
                        ladder_loss: ["sounds/ladder_loss.ogg"],
                        ladder_start: ["sounds/ladder-start.ogg"],
                        ladder_gong: ["sounds/ladder-gong.ogg"],
                        tick: ["sounds/tick1.ogg", "sounds/tick2.ogg", "sounds/tick3.ogg"],
                        heal_wpn: ["sounds/heal_wpn.ogg", "sounds/heal_wpn.ogg", "sounds/heal_wpn.ogg"],
                        shotgun: ["sounds/shotgun.ogg", "sounds/shotgun2.ogg"],
                        shotgun_reload: ["sounds/shotgun_reload_2.ogg"],
                        shotgun_reload_long: ["sounds/shotgun_reload_long.ogg"],
                        zip: ["sounds/zip.ogg"],
                        lvlup: ["sounds/archivement3.ogg"],
                        upg_item: ["sounds/archivement2.ogg"],
                        open_chest: ["sounds/archivement3.ogg"],
                        unlock: ["sounds/archivement2.ogg"],
                        zoom: ["sounds/zoom.ogg"],
                        bing: ["sounds/bing.ogg", "sounds/bing.ogg"],
                        flame_burn: ["sounds/flame.ogg", "sounds/flame.ogg", "sounds/flame.ogg", "sounds/flame.ogg"],
                        flame_explode: ["sounds/flame_explo.ogg", "sounds/flame_explo.ogg"],
                        sniper: ["sounds/sniper3.ogg", "sounds/sniper4.ogg"],
                        rocket_beep: ["sounds/rocket-beep.ogg", "sounds/rocket-beep.ogg"],
                        heal: ["sounds/heal.ogg", "sounds/heal.ogg"],
                        armor: ["sounds/armor.ogg", "sounds/armor.ogg"],
                        ammo_spawn: ["sounds/ammo-spawn.ogg", "sounds/ammo-spawn.ogg", "sounds/ammo-spawn.ogg"],
                        player_respawn: ["sounds/warp-in.ogg", "sounds/warp-in.ogg", "sounds/warp-in.ogg"],
                        reflect: ["sounds/plasma-shield.ogg", "sounds/plasma-shield2.ogg", "sounds/plasma-shield3.ogg", "sounds/plasma-shield.ogg", "sounds/plasma-shield2.ogg", "sounds/plasma-shield3.ogg"],
                        flamethrower: ["sounds/flamethrower.ogg", "sounds/flamethrower.ogg"],
                        grenade_bounce: ["sounds/grenade-bounce.ogg", "sounds/grenade-bounce.ogg", "sounds/grenade-bounce.ogg"],
                        place: ["sounds/clic02.ogg", "sounds/clic02.ogg"],
                        switch: ["sounds/switch.ogg", "sounds/switch.ogg", "sounds/switch.ogg", "sounds/switch.ogg"],
                        chat: ["sounds/chat-1.ogg", "sounds/chat-1.ogg", "sounds/chat-1.ogg", "sounds/chat-1.ogg"],
                        invis: ["sounds/invis1.ogg", "sounds/invis1.ogg"],
                        step: ["sounds/step1.ogg", "sounds/step2.ogg", "sounds/step3.ogg", "sounds/step4.ogg", "sounds/step1.ogg", "sounds/step2.ogg", "sounds/step3.ogg", "sounds/step4.ogg"],
                        throw: ["sounds/throw-1.ogg", "sounds/throw-2.ogg"],
                        flash: ["sounds/flash.ogg", "sounds/flash.ogg"],
                        flash_start: ["sounds/flash_start.ogg", "sounds/flash_start.ogg"],
                        smoke_start: ["sounds/smoke_start.ogg", "sounds/smoke_start.ogg"],
                        smoke_loop: ["sounds/smoke_loop.ogg", "sounds/smoke_loop.ogg", "sounds/smoke_loop.ogg", "sounds/smoke_loop.ogg"],
                        spell: ["sounds/spell.ogg", "sounds/spell.ogg"],
                        invis2: ["sounds/invis2.ogg", "sounds/invis2.ogg"],
                        negative: ["sounds/negative.ogg", "sounds/negative.ogg", "sounds/negative.ogg", "sounds/negative.ogg"],
                        blink: ["sounds/blink.ogg", "sounds/blink.ogg"],
                        turret_init: ["sounds/turret-init.ogg", "sounds/turret-init.ogg"],
                        heal_aura: ["sounds/heal-aura.ogg", "sounds/heal-aura.ogg", "sounds/heal-aura.ogg", "sounds/heal-aura.ogg"],
                        click2: ["sounds/click1.ogg"],
                        mg: ["sounds/mg4.ogg", "sounds/mg4.ogg", "sounds/mg4.ogg", "sounds/mg4.ogg", "sounds/mg5.ogg", "sounds/mg5.ogg", "sounds/mg5.ogg", "sounds/mg5.ogg", "sounds/mg4.ogg", "sounds/mg4.ogg", "sounds/mg4.ogg", "sounds/mg5.ogg", "sounds/mg5.ogg", "sounds/mg5.ogg", "sounds/mg5.ogg"],
                        cartridge1: ["sounds/cartridge1.ogg", "sounds/cartridge2.ogg", "sounds/cartridge4.ogg", "sounds/cartridge1.ogg", "sounds/cartridge2.ogg", "sounds/cartridge4.ogg", "sounds/cartridge1.ogg", "sounds/cartridge2.ogg"],
                        cartridge2: ["sounds/cartridge3.ogg", "sounds/cartridge5.ogg", "sounds/cartridge3.ogg", "sounds/cartridge5.ogg", "sounds/cartridge3.ogg", "sounds/cartridge5.ogg", "sounds/cartridge3.ogg", "sounds/cartridge5.ogg"],
                        double_kill: ["sounds/kills/doublekill.ogg"],
                        multi_kill: ["sounds/kills/multikill.ogg"],
                        ultra_kill: ["sounds/kills/ultrakill.ogg"],
                        monster_kill: ["sounds/kills/monsterkill.ogg"],
                        killing_spree: ["sounds/kills/killingspree.ogg"],
                        rampage: ["sounds/kills/rampage.ogg"],
                        dominating: ["sounds/kills/dominating.ogg"],
                        unstoppable: ["sounds/kills/unstoppable.ogg"],
                        godlike: ["sounds/kills/godlike.ogg"],
                        scan: ["sounds/scan.ogg"],
                        start: ["sounds/game_start.ogg"],
                        end: ["sounds/end.ogg", "sounds/end2.ogg"],
                        win: ["sounds/win.ogg"],
                        lose: ["sounds/lose.ogg"],
                        teamkill: ["sounds/teamkill.ogg"],
                        zombie_bite: ["sounds/zombie_bite.ogg", "sounds/zombie_bite.ogg", "sounds/zombie_bite_3.ogg", "sounds/zombie_bite_3.ogg"],
                        zombie_death: ["sounds/zombie-21.ogg", "sounds/zombie-8.ogg"],
                        zombie_att: ["sounds/zombie-1.ogg", "sounds/zombie-11.ogg", "sounds/zombie-9.ogg"],
                        lvl_up: ["sounds/lvlUp.ogg", "sounds/lvlUp.ogg"],
                        att_up: ["sounds/att_up.ogg"],
                        beebeep: ["sounds/beebeep.ogg"],
                        splash: ["sounds/splash.ogg"],
                        shield: ["sounds/shield.ogg", "sounds/shield.ogg"],
                        shield_hit: ["sounds/shield_hit.ogg", "sounds/shield_hit.ogg"],
                        woodcrack: ["sounds/woodcrack1.ogg", "sounds/woodcrack2.ogg", "sounds/woodcrack3.ogg"],
                        mech_impact: ["sounds/mech-impact-1.ogg", "sounds/mech-impact-2.ogg"],
                        crawler_impact: ["sounds/crawler-impact.ogg", "sounds/crawler-impact.ogg"],
                        zombie_boss_hit: ["sounds/zombie_boss_hit.ogg", "sounds/zombie_boss_hit.ogg"],
                        zombie_transform: ["sounds/zombietransform.ogg", "sounds/zombietransform.ogg"],
                        human_transform: ["sounds/humantransform.ogg", "sounds/humantransform.ogg"],
                        asmd1: ["sounds/asmd1.ogg", "sounds/asmd2.ogg", "sounds/asmd1.ogg", "sounds/asmd2.ogg"],
                        asmd2: ["sounds/humantransform.ogg", "sounds/humantransform.ogg"],
                        asmd_reload: ["sounds/asmd_reload.ogg"],
                        asmd_fly: ["sounds/asmd_fly.ogg", "sounds/asmd_fly.ogg", "sounds/asmd_fly.ogg", "sounds/asmd_fly.ogg"],
                        asmd_ball_launch: ["sounds/asmd_2.ogg", "sounds/asmd_2.ogg"],
                        asmd_explo_1: ["sounds/asmd_explo_1.ogg", "sounds/asmd_explo_1.ogg"],
                        asmd_explo_2: ["sounds/asmd_explo_2.ogg", "sounds/asmd_explo_2.ogg"]
                    }
            },
            4933: (__unused_webpack_module, exports) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.emotes = void 0, exports.emotes = [{
                    name: "Blink",
                    img: {
                        x: 548,
                        y: 1246,
                        w: 14,
                        h: 15
                    },
                    gold: 3e3,
                    code: "/blink"
                }, {
                    name: "Cry",
                    img: {
                        x: 572,
                        y: 1246,
                        w: 14,
                        h: 15
                    },
                    gold: 3e3,
                    code: "/cry"
                }, {
                    name: "Devil",
                    img: {
                        x: 596,
                        y: 1246,
                        w: 14,
                        h: 15
                    },
                    gold: 3e3,
                    code: "/devil"
                }, {
                    name: "Heart",
                    img: {
                        x: 620,
                        y: 1246,
                        w: 14,
                        h: 15
                    },
                    gold: 3e3,
                    code: "/heart"
                }, {
                    name: "Dislike",
                    img: {
                        x: 644,
                        y: 1245,
                        w: 16,
                        h: 16
                    },
                    gold: 3e3,
                    code: "/dislike"
                }, {
                    name: "Smile",
                    img: {
                        x: 537,
                        y: 1268,
                        w: 14,
                        h: 15
                    },
                    gold: 3e3,
                    code: "/smile"
                }, {
                    name: "Grin",
                    img: {
                        x: 561,
                        y: 1268,
                        w: 14,
                        h: 15
                    },
                    gold: 3e3,
                    code: "/grin"
                }, {
                    name: "O",
                    img: {
                        x: 585,
                        y: 1268,
                        w: 14,
                        h: 15
                    },
                    gold: 3e3,
                    code: "/o"
                }, {
                    name: "Like",
                    img: {
                        x: 609,
                        y: 1268,
                        w: 15,
                        h: 15
                    },
                    gold: 3e3,
                    code: "/like"
                }, {
                    name: "Smirk",
                    img: {
                        x: 633,
                        y: 1268,
                        w: 14,
                        h: 15
                    },
                    gold: 3e3,
                    code: "/smirk"
                }, {
                    name: "Pokerface",
                    img: {
                        x: 657,
                        y: 1268,
                        w: 14,
                        h: 15
                    },
                    gold: 3e3,
                    code: "/poker"
                }, {
                    name: "Hold",
                    img: {
                        x: 539,
                        y: 1286,
                        w: 10,
                        h: 14
                    },
                    gold: 3e3,
                    code: "/hold"
                }, {
                    name: "Go",
                    img: {
                        x: 561,
                        y: 1290,
                        w: 14,
                        h: 10
                    },
                    gold: 3e3,
                    code: "/go"
                }, {
                    name: "Fire",
                    img: {
                        x: 584,
                        y: 1288,
                        w: 16,
                        h: 12
                    },
                    gold: 3e3,
                    code: "/fire"
                }, {
                    name: "Back",
                    img: {
                        x: 609,
                        y: 1289,
                        w: 15,
                        h: 11
                    },
                    gold: 3e3,
                    code: "/back"
                }, {
                    name: "OK",
                    img: {
                        x: 635,
                        y: 1285,
                        w: 10,
                        h: 15
                    },
                    gold: 3e3,
                    code: "/ok"
                }, {
                    name: "Fist",
                    img: {
                        x: 658,
                        y: 1288,
                        w: 11,
                        h: 12
                    },
                    gold: 3e3,
                    code: "/first"
                }, {
                    name: "FlagWhite",
                    img: {
                        x: 569,
                        y: 1317,
                        w: 12,
                        h: 13
                    },
                    gold: 3e3,
                    code: "/white"
                }, {
                    name: "FlagRed",
                    img: {
                        x: 598,
                        y: 1317,
                        w: 12,
                        h: 13
                    },
                    gold: 3e3,
                    code: "/red"
                }, {
                    name: "Sniper",
                    img: {
                        x: 624,
                        y: 1315,
                        w: 15,
                        h: 15
                    },
                    gold: 3e3,
                    code: "/sniper"
                }, {
                    name: "Infected",
                    img: {
                        x: 655,
                        y: 1317,
                        w: 12,
                        h: 15
                    },
                    gold: 3e3,
                    code: "/infected"
                }, {
                    name: "Punch",
                    img: {
                        x: 543,
                        y: 1350,
                        w: 14,
                        h: 12
                    },
                    gold: 3e3,
                    code: "/punch"
                }, {
                    name: "Peace",
                    img: {
                        x: 568,
                        y: 1348,
                        w: 11,
                        h: 14
                    },
                    gold: 3e3,
                    code: "/peace"
                }, {
                    name: "Cool",
                    img: {
                        x: 600,
                        y: 1349,
                        w: 14,
                        h: 15
                    },
                    gold: 3e3,
                    code: "/cool"
                }, {
                    name: "Troll",
                    img: {
                        x: 628,
                        y: 1348,
                        w: 14,
                        h: 15
                    },
                    gold: 3e3,
                    code: "/troll"
                }, {
                    name: "Elvis",
                    img: {
                        x: 655,
                        y: 1345,
                        w: 15,
                        h: 18
                    },
                    gold: 3e3,
                    code: "/elvis"
                }, {
                    name: "Facepalm",
                    img: {
                        x: 541,
                        y: 1372,
                        w: 16,
                        h: 20
                    },
                    gold: 3e3,
                    code: "/facepalm"
                }, {
                    name: "Hype",
                    img: {
                        x: 569,
                        y: 1371,
                        w: 22,
                        h: 20
                    },
                    gold: 3e3,
                    code: "/hype"
                }, {
                    name: "GG",
                    img: {
                        x: 604,
                        y: 1370,
                        w: 14,
                        h: 21
                    },
                    gold: 3e3,
                    code: "/gg"
                }]
            },
            3963: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.MAP_TYPE_SETTINGS = exports.MAP_TYPE = void 0;
                var MAP_TYPE, Data_1 = __webpack_require__(6313);
                ! function(MAP_TYPE) {
                    MAP_TYPE[MAP_TYPE.DEATHMATCH = 0] = "DEATHMATCH", MAP_TYPE[MAP_TYPE.TEAM_DEATHMATCH = 1] = "TEAM_DEATHMATCH", MAP_TYPE[MAP_TYPE.CTF = 2] = "CTF", MAP_TYPE[MAP_TYPE.TOURNAMENT = 3] = "TOURNAMENT", MAP_TYPE[MAP_TYPE.TOURNAMENT_UNRANKED = 4] = "TOURNAMENT_UNRANKED", MAP_TYPE[MAP_TYPE.ZOMBIE_COOP = 5] = "ZOMBIE_COOP"
                }(MAP_TYPE = exports.MAP_TYPE || (exports.MAP_TYPE = {})), exports.MAP_TYPE_SETTINGS = [], exports.MAP_TYPE_SETTINGS[MAP_TYPE.DEATHMATCH] = {
                    id: MAP_TYPE.DEATHMATCH,
                    zombies: !0,
                    souls: !0,
                    team: !1,
                    name: "Zombie Deathmatch",
                    winningCondition: "souls",
                    winningConditionLabel: "config.resource.soul.name",
                    startMsg: "Don't team please. This is all vs all mode.",
                    showTop3: !0,
                    ressourceIconName: "souls",
                    langLabel: "config.mode.zdm.label",
                    hidden: !0,
                    defaultBotCount: 4
                }, exports.MAP_TYPE_SETTINGS[MAP_TYPE.TEAM_DEATHMATCH] = {
                    id: MAP_TYPE.TEAM_DEATHMATCH,
                    zombies: !0,
                    spawnZombiesUntil: 1200,
                    extraSoulsOnKill: 30,
                    souls: !0,
                    team: !0,
                    name: "Team Deathmatch",
                    winningConditionLabel: "config.resource.soul.name",
                    langLabel: "config.mode.tdm.label",
                    icon: "mode_team.png",
                    unlockLevel: 6,
                    defaultBotCount: 4
                }, exports.MAP_TYPE_SETTINGS[MAP_TYPE.CTF] = {
                    id: MAP_TYPE.CTF,
                    zombies: !1,
                    team: !0,
                    name: "Capture The Flag",
                    flag: !0,
                    langLabel: "config.mode.ctf.label",
                    icon: "mode_flag.png",
                    unlockLevel: 3,
                    defaultBotCount: 4
                }, exports.MAP_TYPE_SETTINGS[MAP_TYPE.TOURNAMENT] = {
                    id: MAP_TYPE.TOURNAMENT,
                    zombies: !1,
                    team: !1,
                    name: "Ranked 1v1",
                    lives: 5,
                    winningConditionLabel: "config.resource.score.name",
                    ingameElo: !1,
                    ressourceIconName: "star",
                    startMsg: "1 versus 1. First player who dies 5 times loses the game.",
                    langLabel: "config.mode.dm1.label",
                    icon: "mode_ranked.png",
                    inactive: !0,
                    hidden: !0,
                    queue: !0,
                    unlockLevel: 2,
                    defaultBotCount: 0
                }, exports.MAP_TYPE_SETTINGS[MAP_TYPE.TOURNAMENT_UNRANKED] = {
                    id: MAP_TYPE.TOURNAMENT_UNRANKED,
                    zombies: !1,
                    team: !1,
                    customBuild: !0,
                    startMsg: "Don't team please. This is all vs all mode.",
                    name: "Normal Deathmatch",
                    winningCondition: "elo",
                    winningConditionLabel: "config.resource.score.name",
                    ingameElo: !0,
                    showTop3: !0,
                    ressourceIconName: "star",
                    langLabel: "config.mode.dm2.label",
                    defaultBotCount: 4
                }, exports.MAP_TYPE_SETTINGS[MAP_TYPE.ZOMBIE_COOP] = {
                    id: MAP_TYPE.ZOMBIE_COOP,
                    showTop3: !0,
                    showZombiesAndHumans: !0,
                    zombies: !1,
                    souls: !0,
                    team: !1,
                    coopZombieMode: !0,
                    convertTime: 400,
                    preConvertTime: 200,
                    convertPercentage: .2,
                    name: "Zombie Coop",
                    winningConditionLabel: "config.resource.soul.name",
                    ressourceIconName: "souls",
                    langLabel: "config.mode.zc.label",
                    zombieBaseHP: 140,
                    zombieHpRegeneration: .1,
                    zombieMovSpeed: 1.1 * Data_1.CONST.MOV_SPEED,
                    zombieLifesteal: .2,
                    zombieEnergyReg: .06,
                    humans_souls_per_sec: 2,
                    zombies_souls_per_sec: 2,
                    global_ammo_mod: .5,
                    humanBossThreshold: .35,
                    zombieBossThreshold: .5,
                    zombieBossTime: 6e3,
                    defaultBotCount: 18
                }
            },
            2705: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.itemTypes = void 0;
                var Data_1 = __webpack_require__(6313);
                exports.itemTypes = [{
                    id: 0,
                    name: "Medikit",
                    pickupMsg: "Picked up a medikit",
                    hpRestored: 50,
                    pickupSound: "heal",
                    img: "medikit",
                    scale: .55,
                    shine: !0
                }, {
                    id: 1,
                    name: "Armor",
                    pickupMsg: "Picked up armor",
                    armorRestored: Data_1.CONST.MAX_ARMOR,
                    pickupSound: "armor",
                    img: "armor",
                    scale: .55,
                    shine: !0
                }, {
                    id: 2,
                    name: "Red Flag",
                    pickupSound: "armor",
                    img: "redFlag",
                    special: "redFlag",
                    respawnPeriod: -1
                }, {
                    id: 3,
                    name: "Blue Flag",
                    pickupSound: "armor",
                    img: "blueFlag",
                    special: "blueFlag",
                    respawnPeriod: -1
                }]
            },
            5583: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.animationData = exports.objects = exports.Animation = void 0;
                var Animation, Img_1 = __webpack_require__(360),
                    Weapons_1 = __webpack_require__(2007);
                for (var id in function(Animation) {
                        Animation[Animation.Auto = 0] = "Auto", Animation[Animation.Dmg = 1] = "Dmg"
                    }(Animation = exports.Animation || (exports.Animation = {})), exports.objects = {
                        healaura: {
                            name: "Heal Aura",
                            img: ["healWard", "healWard2"],
                            animationType: Animation.Auto,
                            hpPerTick: .3,
                            aoe: 3.5,
                            hp: 100,
                            lifetime: 900,
                            pathing: 5,
                            turretsDontShootMe: !0,
                            showLifeTimeBar: !0,
                            barYOffset: 2
                        },
                        wall: {
                            name: "Wall",
                            img: ["block", "block2", "block3"],
                            animationType: Animation.Dmg,
                            lifetime: 3600,
                            noTeamLifetime: 1800,
                            hp: 80,
                            pathing: 5,
                            yOffset: 4,
                            noBars: !0,
                            turretsDontShootMe: !0,
                            healthBarW: 16
                        },
                        autoturret: {
                            name: "Auto Turret",
                            lifetime: 2400,
                            hp: 115,
                            aoe: 9,
                            weapon: Weapons_1.weapons[3],
                            img: ["autoTurretBase"],
                            animation: "autoturret",
                            weaponCooldown: 2,
                            pathing: 5,
                            dmg: 2.25,
                            spawnSound: "turret_init",
                            volume: .5,
                            initTicks: 40,
                            rotateSpeed: .1,
                            imgScale: 1.1
                        },
                        laserturret: {
                            name: "Laser Turret",
                            lifetime: 2400,
                            hp: 115,
                            aoe: 9,
                            bounce: .01,
                            weapon: Weapons_1.weapons[0],
                            img: ["autoTurretBase"],
                            animation: "laserturret",
                            weaponCooldown: 19,
                            pathing: 5,
                            dmg: 28,
                            spawnSound: "turret_init",
                            volume: .5,
                            initTicks: 40,
                            rotateSpeed: .1,
                            imgScale: 1.1
                        },
                        missileturret: {
                            name: "Missile Turret",
                            lifetime: 2400,
                            hp: 115,
                            weapon: Weapons_1.weapons[4],
                            aoe: 8.5,
                            radius: 2.3,
                            img: ["autoTurretBase"],
                            animation: "missileturret",
                            weaponCooldown: 57,
                            pathing: 5,
                            dmg: 55,
                            spawnSound: "turret_init",
                            volume: .5,
                            initTicks: 40,
                            rotateSpeed: .09,
                            imgScale: 1.1
                        },
                        grenadeturret: {
                            name: "Grenade Turret",
                            radius: 2.2,
                            maxRangeBonus: 1.5,
                            lifetime: 2400,
                            hp: 90,
                            weapon: Weapons_1.weapons[1],
                            aoe: 7.5,
                            img: ["autoTurretBase"],
                            animation: "grenadeturret",
                            weaponCooldown: 65,
                            pathing: 5,
                            dmg: 50,
                            spawnSound: "turret_init",
                            volume: .5,
                            initTicks: 40,
                            raytraceBlock: 4,
                            rotateSpeed: .077,
                            imgScale: 1.1
                        },
                        hegrenade: {
                            name: "HE Grenade",
                            lifetime: 1,
                            img: ["grenade8", "grenade7", "grenade6", "grenade5", "grenade4", "grenade3", "grenade2", "grenade1"],
                            pathing: 10,
                            yOffset: 4,
                            noBars: !0,
                            aoe: 2.75,
                            dmg: 70,
                            turretsDontShootMe: !0
                        },
                        smokegrenade: {
                            name: "Smoke Grenade",
                            lifetime: 300,
                            img: ["grenadeBlue8", "grenadeBlue7", "grenadeBlue6", "grenadeBlue5", "grenadeBlue4", "grenadeBlue3", "grenadeBlue2", "grenadeBlue1"],
                            pathing: 10,
                            yOffset: 4,
                            noBars: !0,
                            aoe: 2.85,
                            emitsSmoke: !0,
                            turretsDontShootMe: !0
                        },
                        flashgrenade: {
                            name: "Flash Grenade",
                            lifetime: 4,
                            img: ["grenadeYellow8", "grenadeYellow7", "grenadeYellow6", "grenadeYellow5", "grenadeYellow4", "grenadeYellow3", "grenadeYellow2", "grenadeYellow1"],
                            pathing: 10,
                            yOffset: 4,
                            noBars: !0,
                            aoe: 2.85,
                            flash: !0,
                            turretsDontShootMe: !0
                        },
                        lasergrenade: {
                            name: "Laser Grenade",
                            lifetime: 4,
                            img: ["grenadeYellow8", "grenadeYellow7", "grenadeYellow6", "grenadeYellow5", "grenadeYellow4", "grenadeYellow3", "grenadeYellow2", "grenadeYellow1"],
                            pathing: 10,
                            yOffset: 4,
                            noBars: !0,
                            dmg: 24,
                            countLasers: 5,
                            createdProjectilesWeaponId: 5,
                            turretsDontShootMe: !0
                        },
                        poisongrenade: {
                            name: "Acid Gas Grenade",
                            lifetime: 200,
                            img: ["grenadeBlue8", "grenadeBlue7", "grenadeBlue6", "grenadeBlue5", "grenadeBlue4", "grenadeBlue3", "grenadeBlue2", "grenadeBlue1"],
                            pathing: 10,
                            yOffset: 4,
                            noBars: !0,
                            aoe: 3.5,
                            emitsPoison: !0,
                            flameDPS: 25,
                            turretsDontShootMe: !0,
                            noBounce: !0
                        },
                        rocketgrenade: {
                            name: "Rocket Grenade",
                            lifetime: 4,
                            img: ["grenadeYellow8", "grenadeYellow7", "grenadeYellow6", "grenadeYellow5", "grenadeYellow4", "grenadeYellow3", "grenadeYellow2", "grenadeYellow1"],
                            pathing: 10,
                            yOffset: 4,
                            noBars: !0,
                            dmg: 24,
                            countLasers: 5,
                            createdProjectilesWeaponId: 6,
                            turretsDontShootMe: !0
                        }
                    }, exports.objects) exports.objects[id].id = id;
                exports.animationData = {
                    autoturret: {
                        imgTurret00: Img_1.imgCoords.autoTurretGun00,
                        imgTurret01: Img_1.imgCoords.autoTurretGun01,
                        imgTurret02: Img_1.imgCoords.autoTurretGun02,
                        imgTurret03: Img_1.imgCoords.autoTurretGun03,
                        imgTurret04: Img_1.imgCoords.autoTurretGun04,
                        imgTurret05: Img_1.imgCoords.autoTurretGun05,
                        imgTurret06: Img_1.imgCoords.autoTurretGun06,
                        imgTurret07: Img_1.imgCoords.autoTurretGun07,
                        imgTurret10: Img_1.imgCoords.autoTurretGun10,
                        imgTurret11: Img_1.imgCoords.autoTurretGun11,
                        imgTurret12: Img_1.imgCoords.autoTurretGun12,
                        imgTurret13: Img_1.imgCoords.autoTurretGun13,
                        imgTurret14: Img_1.imgCoords.autoTurretGun14,
                        imgTurret15: Img_1.imgCoords.autoTurretGun15,
                        imgTurret16: Img_1.imgCoords.autoTurretGun16,
                        imgTurret17: Img_1.imgCoords.autoTurretGun17,
                        countFrames: 2,
                        muzzleFlash: Img_1.imgCoords.muzzleFlashMGTurret
                    },
                    missileturret: {
                        imgTurret00: Img_1.imgCoords.missileTurretGun0,
                        imgTurret01: Img_1.imgCoords.missileTurretGun1,
                        imgTurret02: Img_1.imgCoords.missileTurretGun2,
                        imgTurret03: Img_1.imgCoords.missileTurretGun3,
                        imgTurret04: Img_1.imgCoords.missileTurretGun4,
                        imgTurret05: Img_1.imgCoords.missileTurretGun5,
                        imgTurret06: Img_1.imgCoords.missileTurretGun6,
                        imgTurret07: Img_1.imgCoords.missileTurretGun7
                    },
                    grenadeturret: {
                        imgTurret00: Img_1.imgCoords.grenadeTurretGun0,
                        imgTurret01: Img_1.imgCoords.grenadeTurretGun1,
                        imgTurret02: Img_1.imgCoords.grenadeTurretGun2,
                        imgTurret03: Img_1.imgCoords.grenadeTurretGun3,
                        imgTurret04: Img_1.imgCoords.grenadeTurretGun4,
                        imgTurret05: Img_1.imgCoords.grenadeTurretGun5,
                        imgTurret06: Img_1.imgCoords.grenadeTurretGun6,
                        imgTurret07: Img_1.imgCoords.grenadeTurretGun7
                    },
                    laserturret: {
                        imgTurret00: Img_1.imgCoords.laserTurretGun0,
                        imgTurret01: Img_1.imgCoords.laserTurretGun1,
                        imgTurret02: Img_1.imgCoords.laserTurretGun2,
                        imgTurret03: Img_1.imgCoords.laserTurretGun3,
                        imgTurret04: Img_1.imgCoords.laserTurretGun4,
                        imgTurret05: Img_1.imgCoords.laserTurretGun5,
                        imgTurret06: Img_1.imgCoords.laserTurretGun6,
                        imgTurret07: Img_1.imgCoords.laserTurretGun7
                    }
                }
            },
            9832: (__unused_webpack_module, exports) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                        value: !0
                    }), exports.NetworkCmd = void 0,
                    function(NetworkCmd) {
                        NetworkCmd.KEY_DOWN = "kd", NetworkCmd.KEY_UP = "ku"
                    }(exports.NetworkCmd || (exports.NetworkCmd = {}))
            },
            3346: (__unused_webpack_module, exports) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.goldCostBySkinQuality = exports.hats = exports.hatQualityColor = exports.hatQualityPlus = void 0, exports.hatQualityPlus = {
                    Common: .4,
                    Rare: .4,
                    Epic: .8,
                    Legendary: 1
                }, exports.hatQualityColor = {
                    Common: "",
                    Rare: "#97b1ff",
                    Epic: "#d98bff",
                    Legendary: "#fd963a"
                }, exports.hats = [{
                    name: "Basic skin",
                    offset: 0,
                    legs: 0,
                    noItem: !0,
                    isFree: !0,
                    quality: "Common"
                }, {
                    name: "Hat",
                    offset: 1,
                    legs: 0,
                    quality: "Common"
                }, {
                    name: "Sun Glasses",
                    offset: 3,
                    legs: 0,
                    gold: 100,
                    quality: "Common"
                }, {
                    name: "Soldier",
                    offset: 5,
                    legs: 1,
                    quality: "Common"
                }, {
                    name: "Soldier 2",
                    offset: 9,
                    legs: 1,
                    lvl: 3,
                    quality: "Common"
                }, {
                    name: "Space",
                    offset: 6,
                    legs: 3,
                    lvl: 8,
                    quality: "Common"
                }, {
                    name: "Skeleton",
                    offset: 4,
                    legs: 2,
                    quality: "Rare"
                }, {
                    name: "Grampa",
                    offset: 7,
                    legs: 0,
                    quality: "Common"
                }, {
                    name: "Mage",
                    offset: 8,
                    legs: 0,
                    quality: "Rare"
                }, {
                    name: "Zombie",
                    offset: 10,
                    legs: 0,
                    gold: 500,
                    quality: "Rare"
                }, {
                    name: "Soldier 3",
                    offset: 13,
                    legs: 5,
                    quality: "Common"
                }, {
                    name: "Lundmar",
                    offset: 14,
                    legs: 0,
                    quality: "Rare"
                }, {
                    name: "Pleasure",
                    offset: 16,
                    legs: 6,
                    quality: "Rare"
                }, {
                    name: "Rabbit",
                    offset: 12,
                    legs: 8,
                    quality: "Epic"
                }, {
                    name: "Eye",
                    offset: 18,
                    legs: 7,
                    lvl: 17,
                    quality: "Rare"
                }, {
                    name: "Gentleman",
                    offset: 2,
                    legs: 0,
                    quality: "Epic"
                }, {
                    name: "Dark",
                    offset: 17,
                    legs: 9,
                    quality: "Rare",
                    gems: 2
                }, {
                    name: "Police",
                    offset: 25,
                    legs: 11,
                    gold: 1500,
                    hatOnly: !0,
                    quality: "Epic"
                }, {
                    name: "Cowboy",
                    offset: 27,
                    legs: 12,
                    lvl: 25,
                    hatOnly: !0,
                    quality: "Common"
                }, {
                    name: "Cowboy 2",
                    offset: 29,
                    legs: 13,
                    hatOnly: !0,
                    quality: "Common"
                }, {
                    name: "Snowcoat",
                    offset: 30,
                    legs: 14,
                    hatOnly: !0,
                    quality: "Common"
                }, {
                    name: "Snowcoat 2",
                    offset: 31,
                    legs: 15,
                    gold: 1650,
                    hatOnly: !0,
                    quality: "Common"
                }, {
                    name: "Santa",
                    offset: 32,
                    legs: 16,
                    lvl: 32,
                    hatOnly: !0,
                    quality: "Epic"
                }, {
                    name: "Girl 2",
                    offset: 33,
                    legs: 8,
                    quality: "Common"
                }, {
                    name: "Princess",
                    offset: 34,
                    legs: 17,
                    quality: "Epic",
                    gems: 3
                }, {
                    name: "Girl 3",
                    offset: 39,
                    legs: 8,
                    isFree: !0,
                    quality: "Common"
                }, {
                    name: "Painter",
                    offset: 19,
                    legs: 9,
                    lvl: 38,
                    quality: "Rare"
                }, {
                    name: "Rambo",
                    offset: 40,
                    legs: 9,
                    quality: "Epic"
                }, {
                    name: "Grim Reaper",
                    offset: 41,
                    legs: 18,
                    lvl: 45,
                    quality: "Epic"
                }, {
                    name: "Phonecats",
                    offset: 42,
                    legs: 19,
                    quality: "Legendary"
                }, {
                    name: "Godenot",
                    offset: 43,
                    legs: 20,
                    hatOnly: !0,
                    quality: "Legendary"
                }, {
                    name: "Elf",
                    offset: 44,
                    legs: 14,
                    hatOnly: !0,
                    quality: "Epic"
                }, {
                    name: "Cat",
                    offset: 45,
                    legs: 21,
                    quality: "Epic"
                }, {
                    name: "Wolf",
                    offset: 46,
                    legs: 23,
                    quality: "Epic",
                    gems: 3
                }, {
                    name: "Heaven Bul",
                    offset: 47,
                    legs: 9,
                    quality: "Epic"
                }, {
                    name: "iRaphael",
                    offset: 48,
                    legs: 7,
                    lvl: 55,
                    quality: "Epic"
                }, {
                    name: "Dido D",
                    offset: 49,
                    legs: 22,
                    quality: "Rare"
                }, {
                    name: "Wu Kong",
                    offset: 50,
                    legs: 24,
                    quality: "Common"
                }, {
                    name: "Terror Bionic",
                    offset: 51,
                    legs: 25,
                    quality: "Rare",
                    gems: 2
                }, {
                    name: "RobleisUTU",
                    offset: 53,
                    legs: 27,
                    quality: "Legendary"
                }, {
                    name: "Hippie",
                    offset: 54,
                    legs: 28,
                    lvl: 60,
                    quality: "Rare"
                }, {
                    name: "cazum8",
                    offset: 55,
                    legs: 29,
                    quality: "Legendary"
                }, {
                    name: "Pozzitifon",
                    offset: 56,
                    legs: 30,
                    quality: "Rare"
                }, {
                    name: "EeOneGuy",
                    offset: 58,
                    legs: 32,
                    lvl: 65,
                    quality: "Rare"
                }, {
                    name: "Girl 4",
                    offset: 35,
                    hatOnly: !0,
                    legs: 9,
                    quality: "Epic"
                }, {
                    name: "USA",
                    offset: 64,
                    hatOnly: !1,
                    legs: 34,
                    quality: "Common",
                    isCountry: !0
                }, {
                    name: "China",
                    offset: 65,
                    hatOnly: !1,
                    legs: 34,
                    quality: "Common",
                    isCountry: !0
                }, {
                    name: "Switzerland",
                    offset: 66,
                    hatOnly: !1,
                    legs: 34,
                    quality: "Common",
                    isCountry: !0
                }, {
                    name: "Vietnam",
                    offset: 67,
                    hatOnly: !1,
                    legs: 34,
                    Intelligence: 2,
                    Agility: 1,
                    quality: "Common",
                    isCountry: !0
                }, {
                    name: "Turkey",
                    offset: 68,
                    hatOnly: !1,
                    legs: 34,
                    quality: "Common",
                    isCountry: !0
                }, {
                    name: "Taiwan",
                    offset: 69,
                    hatOnly: !1,
                    legs: 34,
                    quality: "Common",
                    isCountry: !0
                }, {
                    name: "Denmark",
                    offset: 70,
                    hatOnly: !1,
                    legs: 34,
                    quality: "Common",
                    isCountry: !0
                }, {
                    name: "Indonesia",
                    offset: 71,
                    hatOnly: !1,
                    legs: 34,
                    quality: "Common",
                    isCountry: !0
                }, {
                    name: "Singapore",
                    offset: 72,
                    hatOnly: !1,
                    legs: 34,
                    quality: "Common",
                    isCountry: !0
                }, {
                    name: "Poland",
                    offset: 73,
                    hatOnly: !1,
                    legs: 34,
                    quality: "Common",
                    isCountry: !0
                }, {
                    name: "Canada",
                    offset: 74,
                    hatOnly: !1,
                    legs: 34,
                    quality: "Common",
                    isCountry: !0
                }, {
                    name: "Russia",
                    offset: 75,
                    hatOnly: !1,
                    legs: 34,
                    quality: "Common",
                    isCountry: !0
                }, {
                    name: "Philippines",
                    offset: 76,
                    hatOnly: !1,
                    legs: 34,
                    quality: "Common",
                    isCountry: !0
                }, {
                    name: "Ukraine",
                    offset: 77,
                    hatOnly: !1,
                    legs: 34,
                    quality: "Common",
                    isCountry: !0
                }, {
                    name: "Germany",
                    offset: 78,
                    hatOnly: !1,
                    legs: 34,
                    quality: "Common",
                    isCountry: !0
                }, {
                    name: "France",
                    offset: 79,
                    hatOnly: !1,
                    legs: 34,
                    quality: "Common",
                    isCountry: !0
                }, {
                    name: "UK",
                    offset: 80,
                    hatOnly: !1,
                    legs: 34,
                    quality: "Common",
                    isCountry: !0
                }, {
                    name: "Argentina",
                    offset: 81,
                    hatOnly: !1,
                    legs: 34,
                    quality: "Common",
                    isCountry: !0
                }, {
                    name: "Brazil",
                    offset: 82,
                    hatOnly: !1,
                    legs: 34,
                    quality: "Common",
                    isCountry: !0
                }, {
                    name: "Headphones",
                    offset: 83,
                    hatOnly: !1,
                    legs: 14,
                    lvl: 71,
                    quality: "Rare"
                }, {
                    name: "Foxy",
                    offset: 84,
                    hatOnly: !1,
                    legs: 35,
                    quality: "Epic"
                }, {
                    name: "Blue Helmet",
                    offset: 85,
                    hatOnly: !1,
                    legs: 12,
                    quality: "Epic"
                }, {
                    name: "Lion",
                    offset: 86,
                    hatOnly: !1,
                    legs: 35,
                    lvl: 85,
                    quality: "Legendary"
                }, {
                    name: "Dark5",
                    offset: 87,
                    hatOnly: !1,
                    legs: 1,
                    quality: "Rare"
                }, {
                    name: "Inuit",
                    offset: 88,
                    hatOnly: !1,
                    legs: 12,
                    quality: "Common",
                    gems: 1
                }, {
                    name: "Bubblegum",
                    offset: 89,
                    hatOnly: !1,
                    legs: 6,
                    quality: "Epic"
                }, {
                    name: "Katydid",
                    offset: 93,
                    hatOnly: !1,
                    legs: 36,
                    by: "Katydid",
                    quality: "Rare"
                }, {
                    name: "Witch",
                    offset: 97,
                    hatOnly: !1,
                    legs: 37,
                    by: "Katydid",
                    quality: "Rare"
                }, {
                    name: "Hedgehog",
                    offset: 98,
                    hatOnly: !1,
                    legs: 7,
                    by: "Bubbles",
                    quality: "Common"
                }, {
                    name: "Gem",
                    offset: 99,
                    hatOnly: !1,
                    legs: 38,
                    lvl: 95,
                    by: "Bubbles",
                    quality: "Epic",
                    gems: 3
                }, {
                    name: "Sungod",
                    offset: 100,
                    hatOnly: !1,
                    legs: 39,
                    by: "Bubbles",
                    quality: "Epic"
                }, {
                    name: "Tempest",
                    offset: 101,
                    hatOnly: !1,
                    legs: 40,
                    by: "Demoness",
                    quality: "Epic"
                }, {
                    name: "Miku",
                    offset: 102,
                    hatOnly: !1,
                    legs: 41,
                    by: "Iris Isotheis",
                    quality: "Epic"
                }, {
                    name: "Robot",
                    offset: 103,
                    hatOnly: !1,
                    legs: 1,
                    lvl: 105,
                    quality: "Rare",
                    by: "FLUFFY"
                }, {
                    name: "Demoness",
                    offset: 104,
                    hatOnly: !1,
                    legs: 6,
                    quality: "Rare",
                    by: "Demoness"
                }, {
                    name: "Demon",
                    offset: 105,
                    hatOnly: !1,
                    legs: 42,
                    quality: "Rare",
                    by: "Demoness"
                }, {
                    name: "Doggo",
                    offset: 106,
                    hatOnly: !1,
                    legs: 43,
                    quality: "Rare",
                    by: "Katydid"
                }, {
                    name: "Mohawk",
                    offset: 107,
                    hatOnly: !1,
                    legs: 44,
                    quality: "Common",
                    by: "Katydid"
                }, {
                    name: "Dragon",
                    offset: 110,
                    hatOnly: !1,
                    legs: 45,
                    lvl: 115,
                    Intelligence: 2,
                    Strength: 1,
                    quality: "Epic",
                    by: "Katydid"
                }, {
                    name: "Bob",
                    offset: 112,
                    hatOnly: !1,
                    legs: 7,
                    quality: "Common",
                    by: "Roscoe"
                }, {
                    name: "Dwarf",
                    offset: 113,
                    hatOnly: !1,
                    legs: 7,
                    quality: "Epic",
                    by: "Katydid",
                    gems: 3
                }, {
                    name: "Sad Pepo",
                    offset: 114,
                    hatOnly: !1,
                    legs: 14,
                    quality: "Rare",
                    by: "FabioJRTV"
                }, {
                    name: "Hunter",
                    offset: 115,
                    hatOnly: !1,
                    legs: 9,
                    lvl: 125,
                    quality: "Rare",
                    by: "SabertoothFang"
                }, {
                    name: "Egyptian",
                    offset: 116,
                    hatOnly: !1,
                    legs: 46,
                    quality: "Epic",
                    by: "Coffee"
                }, {
                    name: "Cyber Ninja",
                    offset: 117,
                    hatOnly: !1,
                    legs: 47,
                    quality: "Rare",
                    by: "DIIV"
                }, {
                    name: "Cyborg",
                    offset: 118,
                    hatOnly: !1,
                    legs: 0,
                    quality: "Rare",
                    by: "TheAdam"
                }, {
                    name: "Gaping Maw",
                    offset: 119,
                    hatOnly: !1,
                    legs: 21,
                    quality: "Rare",
                    by: "CoolKing"
                }, {
                    name: "Rainbow",
                    offset: 120,
                    hatOnly: !1,
                    legs: 47,
                    quality: "Legendary",
                    by: "FabioJRTV"
                }, {
                    name: "Penguin",
                    offset: 121,
                    hatOnly: !1,
                    legs: 9,
                    lvl: 101,
                    quality: "Rare",
                    by: "Demoness",
                    gems: 3
                }, {
                    name: "Freia",
                    offset: 123,
                    hatOnly: !1,
                    legs: 48,
                    quality: "Epic",
                    by: "Coffee",
                    gems: 3
                }, {
                    name: "King",
                    offset: 124,
                    hatOnly: !1,
                    legs: 50,
                    quality: "Legendary",
                    by: "Demoness"
                }, {
                    name: "LAPA",
                    offset: 125,
                    hatOnly: !1,
                    legs: 0,
                    quality: "Epic",
                    by: "Demoness"
                }, {
                    name: "Leprechaun",
                    offset: 126,
                    hatOnly: !1,
                    legs: 14,
                    quality: "Rare",
                    by: "Demoness"
                }, {
                    name: "Gramma",
                    offset: 127,
                    hatOnly: !1,
                    legs: 8,
                    quality: "Epic",
                    by: "Katydid"
                }, {
                    name: "Queen",
                    offset: 128,
                    hatOnly: !1,
                    legs: 49,
                    lvl: 77,
                    quality: "Rare",
                    by: "Demoness"
                }, {
                    name: "Astronaut",
                    offset: 109,
                    hatOnly: !1,
                    legs: 7,
                    quality: "Common",
                    by: "Katydid"
                }, {
                    name: "Hannah",
                    offset: 129,
                    hatOnly: !1,
                    legs: 50,
                    quality: "Rare",
                    by: "Demoness",
                    gems: 2
                }, {
                    name: "Wendigo",
                    offset: 130,
                    hatOnly: !1,
                    legs: 21,
                    quality: "Rare",
                    by: "D21"
                }, {
                    name: "Dark Crusader",
                    offset: 131,
                    hatOnly: !1,
                    legs: 47,
                    quality: "Rare",
                    by: "Carnage"
                }, {
                    name: "Sunbeam ",
                    offset: 132,
                    hatOnly: !1,
                    legs: 7,
                    quality: "Epic",
                    by: "D21"
                }, {
                    name: "Kitten Luly",
                    offset: 134,
                    hatOnly: !1,
                    legs: 6,
                    quality: "Rare",
                    by: "Yuuki"
                }, {
                    name: "Goldfish",
                    offset: 135,
                    hatOnly: !1,
                    legs: 51,
                    quality: "Rare",
                    by: "GiraffidaeW",
                    gems: 2
                }, {
                    name: "Axolotl",
                    offset: 137,
                    hatOnly: !1,
                    legs: 53,
                    quality: "Epic",
                    by: "GiraffidaeW"
                }, {
                    name: "Pig",
                    offset: 138,
                    hatOnly: !1,
                    legs: 53,
                    quality: "Epic",
                    by: "GiraffidaeW"
                }, {
                    name: "Blind Master",
                    offset: 139,
                    hatOnly: !1,
                    legs: 0,
                    quality: "Rare",
                    by: "Carnage"
                }, {
                    name: "Knight",
                    offset: 142,
                    hatOnly: !1,
                    legs: 55,
                    quality: "Legendary",
                    by: "Katydid"
                }, {
                    name: "Vampire",
                    offset: 143,
                    hatOnly: !1,
                    legs: 9,
                    quality: "Rare",
                    by: "CoolKing"
                }, {
                    name: "Slug",
                    offset: 144,
                    hatOnly: !1,
                    legs: 54,
                    quality: "Rare",
                    by: "CoolKing"
                }, {
                    name: "Walrus",
                    offset: 146,
                    hatOnly: !1,
                    legs: 53,
                    quality: "Common",
                    by: "CoolKing"
                }, {
                    name: "cOCO",
                    offset: 147,
                    hatOnly: !1,
                    legs: 48,
                    quality: "Legendary",
                    by: "mONGASSS"
                }, {
                    name: "Byul",
                    offset: 148,
                    hatOnly: !1,
                    legs: 57,
                    quality: "Epic",
                    by: "Coffee"
                }, {
                    name: "Fill",
                    offset: 149,
                    hatOnly: !1,
                    legs: 47,
                    quality: "Epic",
                    by: "KebuFill"
                }, {
                    name: "Krampus",
                    offset: 150,
                    hatOnly: !1,
                    legs: 58,
                    quality: "Rare",
                    by: "KebuFill"
                }, {
                    name: "Cultist Leader",
                    offset: 151,
                    hatOnly: !1,
                    legs: 34,
                    quality: "Rare",
                    by: "KebuFill"
                }, {
                    name: "DarkSquare",
                    offset: 152,
                    hatOnly: !1,
                    legs: 60,
                    quality: "Legendary",
                    by: "GeneralSquares"
                }, {
                    name: "dUMMY dUNNO",
                    offset: 153,
                    hatOnly: !1,
                    legs: 23,
                    quality: "Rare",
                    by: "mONGASSS"
                }, {
                    name: "Blu",
                    offset: 154,
                    hatOnly: !1,
                    legs: 59,
                    lvl: 108,
                    quality: "Epic",
                    by: "ARK77"
                }, {
                    name: "bLOOM",
                    offset: 155,
                    hatOnly: !1,
                    legs: 5,
                    quality: "Rare",
                    by: "mONGASSS"
                }, {
                    name: "Crimson",
                    offset: 156,
                    hatOnly: !1,
                    legs: 48,
                    quality: "Common",
                    by: "KebuFill"
                }, {
                    name: "Musketeer",
                    offset: 157,
                    hatOnly: !1,
                    legs: 47,
                    quality: "Common",
                    by: "KebuFill"
                }, {
                    name: "Droid",
                    offset: 158,
                    hatOnly: !1,
                    legs: 23,
                    quality: "Rare",
                    by: "KebuFill"
                }, {
                    name: "ZeroTwo",
                    offset: 159,
                    hatOnly: !1,
                    legs: 2,
                    quality: "Rare",
                    by: "Strelizia"
                }, {
                    name: "Power Girl",
                    offset: 160,
                    hatOnly: !1,
                    legs: 61,
                    quality: "Epic",
                    by: "ARK77"
                }, {
                    name: "GODSPEED",
                    offset: 161,
                    hatOnly: !1,
                    legs: 62,
                    quality: "Legendary",
                    by: "ARK77"
                }, {
                    name: "BlackNBlue",
                    offset: 162,
                    hatOnly: !1,
                    legs: 63,
                    quality: "Common",
                    by: "ARK77"
                }, {
                    name: "Spitfire",
                    offset: 163,
                    hatOnly: !1,
                    legs: 64,
                    quality: "Epic",
                    lvl: 89,
                    by: "Demoness"
                }, {
                    name: "Pyotoru",
                    offset: 165,
                    hatOnly: !1,
                    legs: 7,
                    quality: "Rare",
                    by: "Demoness"
                }, {
                    name: "Izumi Sagiri",
                    offset: 166,
                    hatOnly: !1,
                    legs: 66,
                    lvl: 50,
                    quality: "Rare",
                    by: "JennyAisaka"
                }, {
                    name: "~Ramba~",
                    offset: 167,
                    hatOnly: !1,
                    legs: 67,
                    quality: "Common",
                    by: "ARK77"
                }, {
                    name: "Ryoko",
                    offset: 168,
                    hatOnly: !1,
                    legs: 68,
                    quality: "Common",
                    by: "ARK77"
                }, {
                    name: "Oculus",
                    offset: 169,
                    hatOnly: !1,
                    legs: 69,
                    quality: "Epic",
                    by: "Demoness"
                }, {
                    name: "Cotton Candy",
                    offset: 170,
                    hatOnly: !1,
                    legs: 70,
                    quality: "Rare",
                    by: "Demoness"
                }, {
                    name: "Heavy",
                    offset: 171,
                    hatOnly: !1,
                    legs: 71,
                    quality: "Legendary",
                    by: "ARK77"
                }, {
                    name: "Eva",
                    offset: 172,
                    hatOnly: !1,
                    legs: 72,
                    quality: "Common",
                    by: "Flash"
                }, {
                    name: "Senko",
                    offset: 173,
                    hatOnly: !1,
                    legs: 73,
                    quality: "Epic",
                    by: "Flash"
                }, {
                    name: "FunniBoi",
                    offset: 174,
                    hatOnly: !1,
                    legs: 74,
                    quality: "Rare",
                    by: "ARK77"
                }, {
                    name: "Ravage",
                    offset: 175,
                    hatOnly: !1,
                    legs: 75,
                    quality: "Legendary",
                    by: "ARK77"
                }];
                for (var i = 0; i < exports.hats.length; i++) exports.hats[i].id = i;
                exports.goldCostBySkinQuality = {
                    Common: 400,
                    Rare: 2e3,
                    Epic: 6500,
                    Legendary: 15e3
                }
            },
            9285: (__unused_webpack_module, exports) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.tileTypes = void 0, exports.tileTypes = [{
                    name: "Metal_Ground_1",
                    img: {
                        x: 0,
                        y: 0,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0
                }, {
                    name: "Crate",
                    img: {
                        x: 166,
                        y: 100,
                        w: 18,
                        h: 32
                    },
                    pathing: 5,
                    w: 1,
                    h: 1,
                    ground: !1
                }, {
                    name: "Wall Top",
                    img: {
                        x: 0,
                        y: 44,
                        w: 16,
                        h: 53
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    noShow: !0,
                    isBorder: !0
                }, {
                    name: "Wall Top 2",
                    img: {
                        x: 16,
                        y: 44,
                        w: 16,
                        h: 53
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    noShow: !0,
                    isBorder: !0
                }, {
                    name: "Wall Top 3",
                    img: {
                        x: 32,
                        y: 44,
                        w: 16,
                        h: 53
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    noShow: !0,
                    isBorder: !0
                }, {
                    name: "Wall Top 4",
                    img: {
                        x: 48,
                        y: 44,
                        w: 16,
                        h: 53
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    noShow: !0,
                    isBorder: !0
                }, {
                    name: "Wall Left",
                    img: {
                        x: 0,
                        y: 97,
                        w: 24,
                        h: 56
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    noShow: !0,
                    isBorder: !0
                }, {
                    name: "Wall Left 2 ",
                    img: {
                        x: 24,
                        y: 97,
                        w: 24,
                        h: 56
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    noShow: !0,
                    isBorder: !0
                }, {
                    name: "Wall Left 3",
                    img: {
                        x: 48,
                        y: 97,
                        w: 24,
                        h: 56
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    noShow: !0,
                    isBorder: !0
                }, {
                    name: "Wall Left 4",
                    img: {
                        x: 72,
                        y: 97,
                        w: 24,
                        h: 56
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    noShow: !0,
                    isBorder: !0
                }, {
                    name: "Wall Right",
                    img: {
                        x: 0,
                        y: 152,
                        w: 24,
                        h: 56
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    noShow: !0,
                    isBorder: !0
                }, {
                    name: "Wall Right 2 ",
                    img: {
                        x: 24,
                        y: 152,
                        w: 24,
                        h: 56
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    noShow: !0,
                    isBorder: !0
                }, {
                    name: "Wall Right 3",
                    img: {
                        x: 48,
                        y: 152,
                        w: 24,
                        h: 56
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    noShow: !0,
                    isBorder: !0
                }, {
                    name: "Wall Right 4",
                    img: {
                        x: 72,
                        y: 152,
                        w: 24,
                        h: 56
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    noShow: !0,
                    isBorder: !0
                }, {
                    name: "Wall Bottom",
                    img: {
                        x: 0,
                        y: 204,
                        w: 16,
                        h: 42
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    noShow: !0,
                    isBorder: !0
                }, {
                    name: "Wall Bottom 2",
                    img: {
                        x: 16,
                        y: 204,
                        w: 16,
                        h: 42
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    noShow: !0,
                    isBorder: !0
                }, {
                    name: "Wall Bottom 3",
                    img: {
                        x: 32,
                        y: 204,
                        w: 16,
                        h: 42
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    noShow: !0,
                    isBorder: !0
                }, {
                    name: "Wall Bottom 4",
                    img: {
                        x: 48,
                        y: 204,
                        w: 16,
                        h: 42
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    noShow: !0,
                    isBorder: !0
                }, {
                    name: "Metal_Ground_2",
                    img: {
                        x: 16,
                        y: 0,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0
                }, {
                    name: "Metal_Ground_3",
                    img: {
                        x: 32,
                        y: 0,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0
                }, {
                    name: "Metal_Ground_4",
                    img: {
                        x: 48,
                        y: 0,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0
                }, {
                    name: "Metal_Ground_5",
                    img: {
                        x: 64,
                        y: 0,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0
                }, {
                    name: "Metal_Ground_6",
                    img: {
                        x: 80,
                        y: 0,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0
                }, {
                    name: "Wall Corner 1",
                    img: {
                        x: 64,
                        y: 43,
                        w: 24,
                        h: 54
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    noShow: !0
                }, {
                    name: "Wall Corner 2",
                    img: {
                        x: 88,
                        y: 43,
                        w: 24,
                        h: 54
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    noShow: !0
                }, {
                    name: "Wall Corner 3",
                    img: {
                        x: 176,
                        y: 43,
                        w: 24,
                        h: 54
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    noShow: !0
                }, {
                    name: "Wall Corner 4",
                    img: {
                        x: 196,
                        y: 43,
                        w: 24,
                        h: 54
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    noShow: !0
                }, {
                    name: "Wall Bottom High 1",
                    img: {
                        x: 112,
                        y: 43,
                        w: 16,
                        h: 54
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    noShow: !0
                }, {
                    name: "Wall Bottom High 2",
                    img: {
                        x: 128,
                        y: 43,
                        w: 16,
                        h: 54
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    noShow: !0
                }, {
                    name: "Wall Bottom High 3",
                    img: {
                        x: 144,
                        y: 43,
                        w: 16,
                        h: 54
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    noShow: !0
                }, {
                    name: "Wall Bottom High 4",
                    img: {
                        x: 160,
                        y: 43,
                        w: 16,
                        h: 54
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    noShow: !0
                }, {
                    name: "Crate Placeholder",
                    img: {
                        x: 166,
                        y: 100,
                        w: 18,
                        h: 32
                    },
                    pathing: 5,
                    w: 1,
                    h: 1,
                    ground: !1,
                    noShow: !0
                }, {
                    name: "Metal_Ground_7",
                    img: {
                        x: 96,
                        y: 0,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0
                }, {
                    name: "Metal_Ground_8",
                    img: {
                        x: 112,
                        y: 0,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0
                }, {
                    name: "Metal_Ground_9",
                    img: {
                        x: 128,
                        y: 0,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0
                }, {
                    name: "Metal_Ground_10",
                    img: {
                        x: 144,
                        y: 0,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0
                }, {
                    name: "Metal_Ground_11",
                    img: {
                        x: 160,
                        y: 0,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0
                }, {
                    name: "Metal_Ground_12",
                    img: {
                        x: 176,
                        y: 0,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0
                }, {
                    name: "Metal_Ground_13",
                    img: {
                        x: 192,
                        y: 0,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0
                }, {
                    name: "Metal_Ground_14",
                    img: {
                        x: 208,
                        y: 0,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0
                }, {
                    name: "Metal_Ground_15",
                    img: {
                        x: 224,
                        y: 0,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0
                }, {
                    name: "Metal_Ground_16",
                    img: {
                        x: 240,
                        y: 0,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0
                }, {
                    name: "Black Block",
                    img: {
                        x: 220,
                        y: 43,
                        w: 16,
                        h: 54
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    noShow: !0
                }, {
                    name: "Wall Lower Top 1",
                    img: {
                        x: 0,
                        y: 270,
                        w: 16,
                        h: 44
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    collection: [0, 1, 2, 3]
                }, {
                    name: "Wall Lower Top 2",
                    img: {
                        x: 16,
                        y: 270,
                        w: 16,
                        h: 44
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    noShow: !0
                }, {
                    name: "Wall Lower Top 3",
                    img: {
                        x: 32,
                        y: 270,
                        w: 16,
                        h: 44
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    noShow: !0
                }, {
                    name: "Wall Lower Top 4",
                    img: {
                        x: 48,
                        y: 270,
                        w: 16,
                        h: 44
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    noShow: !0
                }, {
                    name: "Wall Lower Right Bottom",
                    img: {
                        x: 64,
                        y: 270,
                        w: 24,
                        h: 44
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1
                }, {
                    name: "Wall Lower Left Bottom",
                    img: {
                        x: 88,
                        y: 270,
                        w: 24,
                        h: 44
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1
                }, {
                    name: "Wall Lower Top 1",
                    img: {
                        x: 112,
                        y: 270,
                        w: 16,
                        h: 44
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    collection: [0, 1, 2, 3]
                }, {
                    name: "Wall Lower Top 2",
                    img: {
                        x: 128,
                        y: 270,
                        w: 16,
                        h: 44
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    noShow: !0
                }, {
                    name: "Wall Lower Top 3",
                    img: {
                        x: 144,
                        y: 270,
                        w: 16,
                        h: 44
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    noShow: !0
                }, {
                    name: "Wall Lower Top 4",
                    img: {
                        x: 160,
                        y: 270,
                        w: 16,
                        h: 44
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    noShow: !0
                }, {
                    name: "Wall Lower Left Top",
                    img: {
                        x: 176,
                        y: 270,
                        w: 24,
                        h: 44
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1
                }, {
                    name: "Wall Lower Right Top",
                    img: {
                        x: 196,
                        y: 270,
                        w: 24,
                        h: 44
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1
                }, {
                    name: "Wall Lower Black",
                    img: {
                        x: 220,
                        y: 270,
                        w: 16,
                        h: 44
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1
                }, {
                    name: "Wall Lower Left 1",
                    img: {
                        x: 0,
                        y: 325,
                        w: 24,
                        h: 45
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    collection: [0, 1, 2, 3]
                }, {
                    name: "Wall Lower Left 2",
                    img: {
                        x: 24,
                        y: 325,
                        w: 24,
                        h: 45
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    noShow: !0
                }, {
                    name: "Wall Lower Left 3",
                    img: {
                        x: 48,
                        y: 325,
                        w: 24,
                        h: 45
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    noShow: !0
                }, {
                    name: "Wall Lower Left 4",
                    img: {
                        x: 72,
                        y: 325,
                        w: 24,
                        h: 45
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    noShow: !0
                }, {
                    name: "Wall Lower Right 1",
                    img: {
                        x: 0,
                        y: 380,
                        w: 24,
                        h: 45
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    collection: [0, 1, 2, 3]
                }, {
                    name: "Wall Lower Right 2",
                    img: {
                        x: 24,
                        y: 380,
                        w: 24,
                        h: 45
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    noShow: !0
                }, {
                    name: "Wall Lower Right 3",
                    img: {
                        x: 48,
                        y: 380,
                        w: 24,
                        h: 45
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    noShow: !0
                }, {
                    name: "Wall Lower Right 4",
                    img: {
                        x: 72,
                        y: 380,
                        w: 24,
                        h: 45
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    noShow: !0
                }, {
                    name: "Spawning Point",
                    img: {
                        x: 0,
                        y: 16,
                        w: 1,
                        h: 1
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !0,
                    noShow: !0
                }, {
                    name: "Waypoint",
                    img: {
                        x: 0,
                        y: 16,
                        w: 1,
                        h: 1
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !0,
                    noShow: !0
                }, {
                    name: "Torch North",
                    img: {
                        x: 117,
                        y: 98,
                        w: 7,
                        h: 34
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !1,
                    isTorch: !0,
                    hideOnMinimap: !0
                }, {
                    name: "Torch Left",
                    img: {
                        x: 129,
                        y: 99,
                        w: 18,
                        h: 36
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !1,
                    isTorch: !0,
                    flameOffsetX: -.25,
                    flameOffsetY: -.2,
                    hideOnMinimap: !0
                }, {
                    name: "Torch Right",
                    img: {
                        x: 135,
                        y: 99,
                        w: 18,
                        h: 36
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !1,
                    isTorch: !0,
                    flameOffsetX: .25,
                    flameOffsetY: -.2,
                    hideOnMinimap: !0
                }, {
                    name: "Low Crate",
                    img: {
                        x: 184,
                        y: 100,
                        w: 18,
                        h: 32
                    },
                    pathing: 6,
                    w: 1,
                    h: 1,
                    ground: !1,
                    noShow: !0
                }, {
                    name: "Spikes",
                    img: {
                        x: 204,
                        y: 108,
                        w: 16,
                        h: 24
                    },
                    pathing: 8,
                    w: 1,
                    h: 1,
                    ground: !1
                }, {
                    name: "Grass 1",
                    img: {
                        x: 256,
                        y: 0,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    collection: [0, 1, 2, 3]
                }, {
                    name: "Grass 2",
                    img: {
                        x: 272,
                        y: 0,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    noShow: !0
                }, {
                    name: "Grass 3",
                    img: {
                        x: 288,
                        y: 0,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    noShow: !0
                }, {
                    name: "Grass 4",
                    img: {
                        x: 304,
                        y: 0,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    noShow: !0
                }, {
                    name: "Grass 5",
                    img: {
                        x: 320,
                        y: 0,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    isNotFull: !0
                }, {
                    name: "Grass 6",
                    img: {
                        x: 336,
                        y: 0,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    isNotFull: !0
                }, {
                    name: "Grass 7",
                    img: {
                        x: 352,
                        y: 0,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    isNotFull: !0
                }, {
                    name: "Grass 8",
                    img: {
                        x: 368,
                        y: 0,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    isNotFull: !0
                }, {
                    name: "Grass 9",
                    img: {
                        x: 384,
                        y: 0,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    isNotFull: !0
                }, {
                    name: "Grass 10",
                    img: {
                        x: 352,
                        y: 16,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    isNotFull: !0
                }, {
                    name: "Grass 11",
                    img: {
                        x: 368,
                        y: 16,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    isNotFull: !0
                }, {
                    name: "Grass 12",
                    img: {
                        x: 384,
                        y: 16,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    isNotFull: !0
                }, {
                    name: "Plate 1",
                    img: {
                        x: 224,
                        y: 16,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0
                }, {
                    name: "Plate 2",
                    img: {
                        x: 240,
                        y: 16,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0
                }, {
                    name: "Plate 3",
                    img: {
                        x: 256,
                        y: 16,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    isNotFull: !0
                }, {
                    name: "Wall 1x1",
                    img: {
                        x: 243,
                        y: 54,
                        w: 24,
                        h: 43
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1
                }, {
                    name: "Wall 1x1 2",
                    img: {
                        x: 267,
                        y: 54,
                        w: 24,
                        h: 43
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1
                }, {
                    name: "Water 1",
                    img: {
                        x: 384,
                        y: 32,
                        w: 16,
                        h: 16
                    },
                    img2: {
                        x: 368,
                        y: 32,
                        w: 16,
                        h: 16
                    },
                    w: 1,
                    h: 1,
                    ground: !0,
                    pathing: 9
                }, {
                    name: "Water Border Top",
                    img: {
                        x: 352,
                        y: 32,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    isNotFull: !0
                }, {
                    name: "Border Bottom",
                    img: {
                        x: 304,
                        y: 16,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    isNotFull: !0
                }, {
                    name: "Water Border Right",
                    img: {
                        x: 320,
                        y: 16,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    isNotFull: !0
                }, {
                    name: "Water Border Left",
                    img: {
                        x: 336,
                        y: 16,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    isNotFull: !0
                }, {
                    name: "Border Top",
                    img: {
                        x: 336,
                        y: 32,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    isNotFull: !0
                }, {
                    name: "Border Right",
                    img: {
                        x: 320,
                        y: 32,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    isNotFull: !0
                }, {
                    name: "Border Left",
                    img: {
                        x: 304,
                        y: 32,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    isNotFull: !0
                }, {
                    name: "Tree 2x2",
                    img: {
                        x: 363,
                        y: 48,
                        w: 36,
                        h: 45
                    },
                    pathing: 0,
                    w: 2,
                    h: 2,
                    ground: !1,
                    isNotFull: !0
                }, {
                    name: "Tree 2x2 2",
                    img: {
                        x: 327,
                        y: 48,
                        w: 36,
                        h: 45
                    },
                    pathing: 0,
                    w: 2,
                    h: 2,
                    ground: !1,
                    isNotFull: !0
                }, {
                    name: "Grass B 1",
                    img: {
                        x: 160,
                        y: 16,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    collection: [0, 1, 2, 3]
                }, {
                    name: "Grass B 2",
                    img: {
                        x: 176,
                        y: 16,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    noShow: !0
                }, {
                    name: "Grass B 3",
                    img: {
                        x: 192,
                        y: 16,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    noShow: !0
                }, {
                    name: "Grass B 4",
                    img: {
                        x: 208,
                        y: 16,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    noShow: !0
                }, {
                    name: "Grass C 1",
                    img: {
                        x: 336,
                        y: 96,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    collection: [0, 1, 2, 3]
                }, {
                    name: "Grass C 2",
                    img: {
                        x: 352,
                        y: 96,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    noShow: !0
                }, {
                    name: "Grass C 3",
                    img: {
                        x: 368,
                        y: 96,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    noShow: !0
                }, {
                    name: "Grass C 4",
                    img: {
                        x: 384,
                        y: 96,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    noShow: !0
                }, {
                    name: "Grass D 1",
                    img: {
                        x: 336,
                        y: 112,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    collection: [0, 1, 2, 3]
                }, {
                    name: "Grass D 2",
                    img: {
                        x: 352,
                        y: 112,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    noShow: !0
                }, {
                    name: "Grass D 3",
                    img: {
                        x: 368,
                        y: 112,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    noShow: !0
                }, {
                    name: "Grass D 4",
                    img: {
                        x: 384,
                        y: 112,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    noShow: !0
                }, {
                    name: "Dirt 1",
                    img: {
                        x: 336,
                        y: 128,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    collection: [0, 1, 2, 3]
                }, {
                    name: "Dirt 2",
                    img: {
                        x: 352,
                        y: 128,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    noShow: !0
                }, {
                    name: "GDirt 3",
                    img: {
                        x: 368,
                        y: 128,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    noShow: !0
                }, {
                    name: "Dirt 4",
                    img: {
                        x: 384,
                        y: 128,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    noShow: !0
                }, {
                    name: "Moving Walkway Right",
                    img: {
                        x: 136,
                        y: 16,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    shiftX: .15,
                    editable: ["shiftX"],
                    editableCaption: ["speed"]
                }, {
                    name: "Moving Walkway Left",
                    img: {
                        x: 124,
                        y: 140,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    shiftX: -.15,
                    editable: ["shiftX"],
                    editableCaption: ["speed"]
                }, {
                    name: "Moving Walkway Up",
                    img: {
                        x: 116,
                        y: 164,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    shiftY: -.15,
                    editable: ["shiftY"],
                    editableCaption: ["speed"]
                }, {
                    name: "Moving Walkway Down",
                    img: {
                        x: 132,
                        y: 164,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    shiftY: .15,
                    editable: ["shiftY"],
                    editableCaption: ["speed"]
                }, {
                    name: "Teleporter",
                    img: {
                        x: 186,
                        y: 134,
                        w: 24,
                        h: 22
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    channel: 1,
                    editable: ["channel"],
                    editableCaption: ["channel"],
                    ground: !0,
                    isTeleporter: !0,
                    isNotFull: !0
                }, {
                    name: "Wall Inner Top Left",
                    img: {
                        x: 240,
                        y: 271,
                        w: 16,
                        h: 43
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1
                }, {
                    name: "Wall Inner Top Right",
                    img: {
                        x: 260,
                        y: 271,
                        w: 16,
                        h: 43
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1
                }, {
                    name: "Wall Inner Bot Left",
                    img: {
                        x: 280,
                        y: 271,
                        w: 16,
                        h: 43
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1
                }, {
                    name: "Wall Inner Bot Right",
                    img: {
                        x: 300,
                        y: 271,
                        w: 16,
                        h: 43
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1
                }, {
                    name: "Pillar N 1",
                    img: {
                        x: 106,
                        y: 218,
                        w: 18,
                        h: 49
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1
                }, {
                    name: "Pillar N 2",
                    img: {
                        x: 130,
                        y: 222,
                        w: 20,
                        h: 41
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1
                }, {
                    name: "Pillar N 3",
                    img: {
                        x: 213,
                        y: 148,
                        w: 18,
                        h: 32
                    },
                    pathing: 5,
                    w: 1,
                    h: 1,
                    ground: !1
                }, {
                    name: "Pillar N 4",
                    img: {
                        x: 267,
                        y: 151,
                        w: 18,
                        h: 30
                    },
                    pathing: 5,
                    w: 1,
                    h: 1,
                    ground: !1
                }, {
                    name: "Trunk 1",
                    img: {
                        x: 262,
                        y: 110,
                        w: 20,
                        h: 38
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1
                }, {
                    name: "Trunk 2",
                    img: {
                        x: 282,
                        y: 109,
                        w: 20,
                        h: 38
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1
                }, {
                    name: "Stone N 1 2x2",
                    img: {
                        x: 154,
                        y: 182,
                        w: 32,
                        h: 32
                    },
                    pathing: 10,
                    w: 2,
                    h: 2,
                    ground: !0,
                    isNotFull: !0
                }, {
                    name: "Stone N 2 2x2",
                    img: {
                        x: 267,
                        y: 182,
                        w: 32,
                        h: 32
                    },
                    pathing: 10,
                    w: 2,
                    h: 2,
                    ground: !0,
                    isNotFull: !0
                }, {
                    name: "Stone N 1",
                    img: {
                        x: 188,
                        y: 180,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0
                }, {
                    name: "Stone N 2",
                    img: {
                        x: 208,
                        y: 180,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0
                }, {
                    name: "Stone N 3",
                    img: {
                        x: 228,
                        y: 180,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0
                }, {
                    name: "Stone N 4",
                    img: {
                        x: 248,
                        y: 180,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0
                }, {
                    name: "Stone N 5",
                    img: {
                        x: 188,
                        y: 198,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0
                }, {
                    name: "Stone N 6",
                    img: {
                        x: 208,
                        y: 198,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0
                }, {
                    name: "Stone N 7",
                    img: {
                        x: 228,
                        y: 198,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0
                }, {
                    name: "Stone N 8",
                    img: {
                        x: 248,
                        y: 198,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0
                }, {
                    name: "Stone N 9",
                    img: {
                        x: 301,
                        y: 180,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0
                }, {
                    name: "Stone N 10",
                    img: {
                        x: 301,
                        y: 198,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0
                }, {
                    name: "Carpet Red Top Left",
                    img: {
                        x: 154,
                        y: 217,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    isNotFull: !0
                }, {
                    name: "Carpet Red Top",
                    img: {
                        x: 170,
                        y: 217,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    isNotFull: !0
                }, {
                    name: "Carpet Red Top Right",
                    img: {
                        x: 186,
                        y: 217,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    isNotFull: !0
                }, {
                    name: "Carpet Red Mid Left",
                    img: {
                        x: 154,
                        y: 233,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    isNotFull: !0
                }, {
                    name: "Carpet Red Mid",
                    img: {
                        x: 170,
                        y: 233,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    isNotFull: !0
                }, {
                    name: "Carpet Red Mid Left",
                    img: {
                        x: 186,
                        y: 233,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    isNotFull: !0
                }, {
                    name: "Carpet Red Bot Left",
                    img: {
                        x: 154,
                        y: 249,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    isNotFull: !0
                }, {
                    name: "Carpet Red Bot Mid",
                    img: {
                        x: 170,
                        y: 249,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    isNotFull: !0
                }, {
                    name: "Carpet Red Bot Right",
                    img: {
                        x: 186,
                        y: 249,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    isNotFull: !0
                }, {
                    name: "Carpet Blue Top Left",
                    img: {
                        x: 204,
                        y: 217,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    isNotFull: !0
                }, {
                    name: "Carpet Blue Top",
                    img: {
                        x: 220,
                        y: 217,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    isNotFull: !0
                }, {
                    name: "Carpet Blue Top Right",
                    img: {
                        x: 236,
                        y: 217,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    isNotFull: !0
                }, {
                    name: "Carpet Blue Mid Left",
                    img: {
                        x: 204,
                        y: 233,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    isNotFull: !0
                }, {
                    name: "Carpet Blue Mid",
                    img: {
                        x: 220,
                        y: 233,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    isNotFull: !0
                }, {
                    name: "Carpet Blue Mid Left",
                    img: {
                        x: 236,
                        y: 233,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    isNotFull: !0
                }, {
                    name: "Carpet Blue Bot Left",
                    img: {
                        x: 204,
                        y: 249,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    isNotFull: !0
                }, {
                    name: "Carpet Blue Bot Left",
                    img: {
                        x: 220,
                        y: 249,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    isNotFull: !0
                }, {
                    name: "Carpet Blue Bot Left",
                    img: {
                        x: 236,
                        y: 249,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    isNotFull: !0
                }, {
                    name: "Ground Stones",
                    img: {
                        x: 234,
                        y: 146,
                        w: 22,
                        h: 15
                    },
                    pathing: 10,
                    noGrid: !0,
                    isNotFull: !0
                }, {
                    name: "Ground Stones 2",
                    img: {
                        x: 234,
                        y: 164,
                        w: 16,
                        h: 11
                    },
                    pathing: 10,
                    noGrid: !0,
                    isNotFull: !0
                }, {
                    name: "Plant",
                    img: {
                        x: 252,
                        y: 165,
                        w: 14,
                        h: 13
                    },
                    pathing: 10,
                    noGrid: !0,
                    isNotFull: !0
                }, {
                    name: "Plant 2",
                    img: {
                        x: 133,
                        y: 197,
                        w: 17,
                        h: 17
                    },
                    pathing: 10,
                    noGrid: !0,
                    isNotFull: !0
                }, {
                    name: "Plant 3",
                    img: {
                        x: 86,
                        y: 236,
                        w: 17,
                        h: 14
                    },
                    pathing: 10,
                    noGrid: !0,
                    isNotFull: !0
                }, {
                    name: "Plant 4",
                    img: {
                        x: 86,
                        y: 253,
                        w: 17,
                        h: 14
                    },
                    pathing: 10,
                    noGrid: !0,
                    isNotFull: !0
                }, {
                    name: "Ground Stones 3",
                    img: {
                        x: 325,
                        y: 240,
                        w: 29,
                        h: 14
                    },
                    pathing: 10,
                    noGrid: !0,
                    isNotFull: !0
                }, {
                    name: "Ground Stones 4",
                    img: {
                        x: 356,
                        y: 241,
                        w: 14,
                        h: 13
                    },
                    pathing: 10,
                    noGrid: !0,
                    isNotFull: !0
                }, {
                    name: "Ground Stones 5",
                    img: {
                        x: 372,
                        y: 241,
                        w: 18,
                        h: 13
                    },
                    pathing: 10,
                    noGrid: !0,
                    isNotFull: !0
                }, {
                    name: "Ground Stones 6",
                    img: {
                        x: 392,
                        y: 242,
                        w: 18,
                        h: 12
                    },
                    pathing: 10,
                    noGrid: !0,
                    isNotFull: !0
                }, {
                    name: "Ground Stones 7",
                    img: {
                        x: 413,
                        y: 243,
                        w: 22,
                        h: 10
                    },
                    pathing: 10,
                    noGrid: !0,
                    isNotFull: !0
                }, {
                    name: "Ground Stones 8",
                    img: {
                        x: 437,
                        y: 247,
                        w: 8,
                        h: 6
                    },
                    pathing: 10,
                    noGrid: !0,
                    isNotFull: !0
                }, {
                    name: "Ground Stones 9",
                    img: {
                        x: 448,
                        y: 245,
                        w: 13,
                        h: 7
                    },
                    pathing: 10,
                    noGrid: !0,
                    isNotFull: !0
                }, {
                    name: "Flag",
                    img: {
                        x: 252,
                        y: 221,
                        w: 15,
                        h: 30
                    },
                    pathing: 10,
                    noGrid: !0,
                    isNotFull: !0
                }, {
                    name: "Flag 2",
                    img: {
                        x: 269,
                        y: 221,
                        w: 15,
                        h: 30
                    },
                    pathing: 10,
                    noGrid: !0,
                    isNotFull: !0
                }, {
                    name: "Flag 3",
                    img: {
                        x: 285,
                        y: 221,
                        w: 15,
                        h: 30
                    },
                    pathing: 10,
                    noGrid: !0,
                    isNotFull: !0
                }, {
                    name: "Flag 4",
                    img: {
                        x: 301,
                        y: 221,
                        w: 15,
                        h: 30
                    },
                    pathing: 10,
                    noGrid: !0,
                    isNotFull: !0
                }, {
                    name: "Ground Stones 10",
                    img: {
                        x: 287,
                        y: 149,
                        w: 19,
                        h: 12
                    },
                    pathing: 10,
                    noGrid: !0,
                    isNotFull: !0
                }, {
                    name: "Candles",
                    img: {
                        x: 289,
                        y: 165,
                        w: 14,
                        h: 12
                    },
                    pathing: 10,
                    noGrid: !0,
                    isNotFull: !0
                }, {
                    name: "Candles",
                    img: {
                        x: 306,
                        y: 168,
                        w: 4,
                        h: 8
                    },
                    pathing: 10,
                    noGrid: !0,
                    isNotFull: !0
                }, {
                    name: "Books",
                    img: {
                        x: 320,
                        y: 96,
                        w: 13,
                        h: 18
                    },
                    pathing: 10,
                    noGrid: !0,
                    isNotFull: !0
                }, {
                    name: "Books 2",
                    img: {
                        x: 319,
                        y: 116,
                        w: 16,
                        h: 12
                    },
                    pathing: 10,
                    noGrid: !0,
                    isNotFull: !0
                }, {
                    name: "Table",
                    img: {
                        x: 354,
                        y: 144,
                        w: 16,
                        h: 23
                    },
                    pathing: 8,
                    w: 1,
                    h: 1,
                    ground: !1
                }, {
                    name: "Table 2",
                    img: {
                        x: 372,
                        y: 144,
                        w: 31,
                        h: 23
                    },
                    pathing: 8,
                    w: 2,
                    h: 1,
                    ground: !1
                }, {
                    name: "Table 3",
                    img: {
                        x: 336,
                        y: 167,
                        w: 33,
                        h: 23
                    },
                    pathing: 8,
                    w: 2,
                    h: 1,
                    ground: !1
                }, {
                    name: "Table 4",
                    img: {
                        x: 371,
                        y: 167,
                        w: 33,
                        h: 23
                    },
                    pathing: 8,
                    w: 2,
                    h: 1,
                    ground: !1
                }, {
                    name: "Tree 2x2 3",
                    img: {
                        x: 340,
                        y: 190,
                        w: 34,
                        h: 45
                    },
                    pathing: 0,
                    w: 2,
                    h: 2,
                    ground: !1,
                    isNotFull: !0
                }, {
                    name: "Tree 2x2 4",
                    img: {
                        x: 378,
                        y: 190,
                        w: 34,
                        h: 45
                    },
                    pathing: 0,
                    w: 2,
                    h: 2,
                    ground: !1,
                    isNotFull: !0
                }, {
                    name: "Lab Floor 1",
                    img: {
                        x: 320,
                        y: 261,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0
                }, {
                    name: "Lab Floor 2",
                    img: {
                        x: 320,
                        y: 277,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0
                }, {
                    name: "Lab Floor 3",
                    img: {
                        x: 320,
                        y: 293,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0
                }, {
                    name: "Lab Floor 2x2",
                    img: {
                        x: 336,
                        y: 261,
                        w: 32,
                        h: 32
                    },
                    pathing: 10,
                    w: 2,
                    h: 2,
                    ground: !0
                }, {
                    name: "Lab Floor Top Left",
                    img: {
                        x: 368,
                        y: 261,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0
                }, {
                    name: "Lab Floor Top",
                    img: {
                        x: 384,
                        y: 261,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0
                }, {
                    name: "Lab Floor Top Right",
                    img: {
                        x: 400,
                        y: 261,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0
                }, {
                    name: "Lab Floor Mid Left",
                    img: {
                        x: 368,
                        y: 277,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0
                }, {
                    name: "Lab Floor Mid",
                    img: {
                        x: 384,
                        y: 277,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0
                }, {
                    name: "Lab Floor Mid Right",
                    img: {
                        x: 400,
                        y: 277,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0
                }, {
                    name: "Lab Floor Bot Left",
                    img: {
                        x: 368,
                        y: 293,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0
                }, {
                    name: "Lab Floor Bot",
                    img: {
                        x: 384,
                        y: 293,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0
                }, {
                    name: "Lab Floor Bot Right",
                    img: {
                        x: 400,
                        y: 293,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0
                }, {
                    name: "Lab Grass 1",
                    img: {
                        x: 416,
                        y: 261,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    collection: [0, 1, 2, 3, 4, 5]
                }, {
                    name: "Lab Grass 2",
                    img: {
                        x: 432,
                        y: 261,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    noShow: !0
                }, {
                    name: "Lab Gras 3",
                    img: {
                        x: 448,
                        y: 261,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    noShow: !0
                }, {
                    name: "Lab Grass 4",
                    img: {
                        x: 416,
                        y: 277,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    noShow: !0
                }, {
                    name: "Lab Grass 5",
                    img: {
                        x: 432,
                        y: 277,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    noShow: !0
                }, {
                    name: "Lab Grass 6",
                    img: {
                        x: 448,
                        y: 277,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    noShow: !0
                }, {
                    name: "Lab Grass 7",
                    img: {
                        x: 416,
                        y: 293,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    collection: [0, 1, 2, 3]
                }, {
                    name: "Lab Grass 8",
                    img: {
                        x: 432,
                        y: 293,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    noShow: !0
                }, {
                    name: "Lab Grass 9",
                    img: {
                        x: 448,
                        y: 293,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    noShow: !0
                }, {
                    name: "Lab Grass 10",
                    img: {
                        x: 464,
                        y: 293,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    noShow: !0
                }, {
                    name: "Ground Stones Lab",
                    img: {
                        x: 417,
                        y: 188,
                        w: 22,
                        h: 16
                    },
                    pathing: 10,
                    noGrid: !0,
                    isNotFull: !0
                }, {
                    name: "Lab Lamp",
                    img: {
                        x: 435,
                        y: 206,
                        w: 20,
                        h: 29
                    },
                    pathing: 10,
                    noGrid: !0,
                    isNotFull: !0
                }, {
                    name: "Lab Lamp 2",
                    img: {
                        x: 441,
                        y: 154,
                        w: 14,
                        h: 25
                    },
                    pathing: 10,
                    noGrid: !0,
                    isNotFull: !0
                }, {
                    name: "Tires",
                    img: {
                        x: 418,
                        y: 207,
                        w: 16,
                        h: 28
                    },
                    pathing: 5,
                    w: 1,
                    h: 1,
                    ground: !1
                }, {
                    name: "Lab Obstacle 1",
                    img: {
                        x: 401,
                        y: 311,
                        w: 24,
                        h: 43
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1
                }, {
                    name: "Lab Obstacle 2",
                    img: {
                        x: 425,
                        y: 311,
                        w: 24,
                        h: 43
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1
                }, {
                    name: "Lab Obstacle 3",
                    img: {
                        x: 449,
                        y: 311,
                        w: 24,
                        h: 43
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1
                }, {
                    name: "Wall Lab Top 0",
                    img: {
                        x: 484,
                        y: 270,
                        w: 16,
                        h: 44
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    collection: [0, 1, 2, 3, 4]
                }, {
                    name: "Wall Lab Top 1",
                    img: {
                        x: 500,
                        y: 270,
                        w: 16,
                        h: 44
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    noShow: !0
                }, {
                    name: "Wall Lab Top 2",
                    img: {
                        x: 516,
                        y: 270,
                        w: 16,
                        h: 44
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    noShow: !0
                }, {
                    name: "Wall Lab Top 3",
                    img: {
                        x: 532,
                        y: 270,
                        w: 16,
                        h: 44
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    noShow: !0
                }, {
                    name: "Wall Lab Top 4",
                    img: {
                        x: 548,
                        y: 270,
                        w: 16,
                        h: 44
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    noShow: !0
                }, {
                    name: "Wall Lab Right Bottom",
                    img: {
                        x: 564,
                        y: 270,
                        w: 24,
                        h: 44
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1
                }, {
                    name: "Wall Lab Left Bottom",
                    img: {
                        x: 588,
                        y: 270,
                        w: 24,
                        h: 44
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1
                }, {
                    name: "Wall Lab Bot 1",
                    img: {
                        x: 612,
                        y: 270,
                        w: 16,
                        h: 44
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    collection: [0, 1]
                }, {
                    name: "Wall Lab Bot 2",
                    img: {
                        x: 628,
                        y: 270,
                        w: 16,
                        h: 44
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    noShow: !0
                }, {
                    name: "Wall Lab Left Top",
                    img: {
                        x: 676,
                        y: 270,
                        w: 24,
                        h: 44
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1
                }, {
                    name: "Wall Lab Right Top",
                    img: {
                        x: 696,
                        y: 270,
                        w: 24,
                        h: 44
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1
                }, {
                    name: "Wall Lab Black",
                    img: {
                        x: 720,
                        y: 270,
                        w: 16,
                        h: 44
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1
                }, {
                    name: "Wall Lab Left 1",
                    img: {
                        x: 500,
                        y: 325,
                        w: 24,
                        h: 45
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    collection: [0, 1, 2, 3]
                }, {
                    name: "Wall Lab Left 2",
                    img: {
                        x: 524,
                        y: 325,
                        w: 24,
                        h: 45
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    noShow: !0
                }, {
                    name: "Wall Lab Left 3",
                    img: {
                        x: 548,
                        y: 325,
                        w: 24,
                        h: 45
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    noShow: !0
                }, {
                    name: "Wall Lab Left 4",
                    img: {
                        x: 572,
                        y: 325,
                        w: 24,
                        h: 45
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    noShow: !0
                }, {
                    name: "Wall Lab Right 1",
                    img: {
                        x: 500,
                        y: 380,
                        w: 24,
                        h: 45
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    collection: [0, 1, 2, 3]
                }, {
                    name: "Wall Lab Right 2",
                    img: {
                        x: 524,
                        y: 380,
                        w: 24,
                        h: 45
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    noShow: !0
                }, {
                    name: "Wall Lab Right 3",
                    img: {
                        x: 548,
                        y: 380,
                        w: 24,
                        h: 45
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    noShow: !0
                }, {
                    name: "Wall Lab Right 4",
                    img: {
                        x: 572,
                        y: 380,
                        w: 24,
                        h: 45
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    noShow: !0
                }, {
                    name: "Spiderweb",
                    img: {
                        x: 482,
                        y: 39,
                        w: 44,
                        h: 33
                    },
                    pathing: 10,
                    noGrid: !0,
                    isNotFull: !0
                }, {
                    name: "Halloween Lamps 1",
                    img: {
                        x: 530,
                        y: 42,
                        w: 34,
                        h: 27
                    },
                    pathing: 10,
                    noGrid: !0,
                    isNotFull: !0
                }, {
                    name: "Hallowen Lamps 2",
                    img: {
                        x: 575,
                        y: 39,
                        w: 34,
                        h: 27
                    },
                    pathing: 10,
                    noGrid: !0,
                    isNotFull: !0
                }, {
                    name: "Hallowen Crate 1",
                    img: {
                        x: 482,
                        y: 74,
                        w: 16,
                        h: 33
                    },
                    w: 1,
                    h: 1,
                    pathing: 5
                }, {
                    name: "Hallowen Crate 1",
                    img: {
                        x: 502,
                        y: 74,
                        w: 16,
                        h: 33
                    },
                    w: 1,
                    h: 1,
                    pathing: 5
                }, {
                    name: "Hallowen Crate 1",
                    img: {
                        x: 502,
                        y: 74,
                        w: 16,
                        h: 33
                    },
                    w: 1,
                    h: 1,
                    pathing: 5,
                    noShow: !0
                }, {
                    name: "Hallowen Heap",
                    img: {
                        x: 541,
                        y: 71,
                        w: 38,
                        h: 33
                    },
                    w: 2,
                    h: 1,
                    pathing: 5
                }, {
                    name: "Hallowen Trunk",
                    img: {
                        x: 581,
                        y: 78,
                        w: 18,
                        h: 34
                    },
                    w: 1,
                    h: 1,
                    pathing: 0
                }, {
                    name: "Coffin",
                    img: {
                        x: 605,
                        y: 70,
                        w: 21,
                        h: 42
                    },
                    w: 1,
                    h: 1,
                    pathing: 0
                }, {
                    name: "Halloween Grass 1",
                    img: {
                        x: 462,
                        y: 116,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    collection: [0, 1, 2, 3, 4, 5, 6, 7, 8]
                }, {
                    name: "Halloween Grass 2",
                    img: {
                        x: 478,
                        y: 116,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    noShow: !0
                }, {
                    name: "Halloween Grass 3",
                    img: {
                        x: 494,
                        y: 116,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    noShow: !0
                }, {
                    name: "Halloween Grass 4",
                    img: {
                        x: 462,
                        y: 132,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    noShow: !0
                }, {
                    name: "Halloween Grass 5",
                    img: {
                        x: 478,
                        y: 132,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    noShow: !0
                }, {
                    name: "Halloween Grass 6",
                    img: {
                        x: 494,
                        y: 132,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    noShow: !0
                }, {
                    name: "Halloween Grass 7",
                    img: {
                        x: 462,
                        y: 148,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    noShow: !0
                }, {
                    name: "Halloween Grass 8",
                    img: {
                        x: 478,
                        y: 148,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    noShow: !0
                }, {
                    name: "Halloween Grass 9",
                    img: {
                        x: 494,
                        y: 148,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    noShow: !0
                }, {
                    name: "Halloween Grass 10",
                    img: {
                        x: 510,
                        y: 116,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    collection: [0, 1, 2, 3]
                }, {
                    name: "Halloween Grass 11",
                    img: {
                        x: 526,
                        y: 116,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    noShow: !0
                }, {
                    name: "Halloween Grass 12",
                    img: {
                        x: 542,
                        y: 116,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    noShow: !0
                }, {
                    name: "Halloween Grass 13",
                    img: {
                        x: 558,
                        y: 116,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    noShow: !0
                }, {
                    name: "Halloween Water",
                    img: {
                        x: 462,
                        y: 164,
                        w: 16,
                        h: 16
                    },
                    img2: {
                        x: 478,
                        y: 164,
                        w: 16,
                        h: 16
                    },
                    w: 1,
                    h: 1,
                    ground: !0,
                    pathing: 9
                }, {
                    name: "Halloween Water Border Top",
                    img: {
                        x: 558,
                        y: 148,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    isNotFull: !0
                }, {
                    name: "Halloween Border Bottom",
                    img: {
                        x: 510,
                        y: 132,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    isNotFull: !0
                }, {
                    name: "Halloween Water Border Right",
                    img: {
                        x: 526,
                        y: 132,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    isNotFull: !0
                }, {
                    name: "Halloween Water Border Left",
                    img: {
                        x: 542,
                        y: 132,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    isNotFull: !0
                }, {
                    name: "Halloween Border Top",
                    img: {
                        x: 542,
                        y: 148,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    isNotFull: !0
                }, {
                    name: "Halloween Border Right",
                    img: {
                        x: 526,
                        y: 148,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    isNotFull: !0
                }, {
                    name: "Halloween Border Left",
                    img: {
                        x: 510,
                        y: 148,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    isNotFull: !0
                }, {
                    name: "Dark Dirt 1",
                    img: {
                        x: 462,
                        y: 180,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    collection: [0, 1, 2, 3]
                }, {
                    name: "Dark Dirt 2",
                    img: {
                        x: 478,
                        y: 180,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    noShow: !0
                }, {
                    name: "Dark Dirt 3",
                    img: {
                        x: 494,
                        y: 180,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    noShow: !0
                }, {
                    name: "Dark Dirt 4",
                    img: {
                        x: 510,
                        y: 180,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    noShow: !0
                }, {
                    name: "Invisible Blocker Low (only movement)",
                    img: {
                        x: 0,
                        y: 16,
                        w: 1,
                        h: 1
                    },
                    pathing: 8,
                    w: 1,
                    h: 1
                }, {
                    name: "Invisible Blocker Medium (projectiles)",
                    img: {
                        x: 0,
                        y: 16,
                        w: 1,
                        h: 1
                    },
                    pathing: 5,
                    w: 1,
                    h: 1
                }, {
                    name: "Invisible Blocker High (everything)",
                    img: {
                        x: 0,
                        y: 16,
                        w: 1,
                        h: 1
                    },
                    pathing: 0,
                    w: 1,
                    h: 1
                }, {
                    name: "Wall Winter Top 0",
                    img: {
                        x: 834,
                        y: 270,
                        w: 16,
                        h: 44
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    collection: [0, 1]
                }, {
                    name: "Wall Winter Top 1",
                    img: {
                        x: 850,
                        y: 270,
                        w: 16,
                        h: 44
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    noShow: !0
                }, {
                    name: "Wall Winter Right Bottom",
                    img: {
                        x: 914,
                        y: 270,
                        w: 24,
                        h: 44
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1
                }, {
                    name: "Wall Winter Left Bottom",
                    img: {
                        x: 938,
                        y: 270,
                        w: 24,
                        h: 44
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1
                }, {
                    name: "Wall Winter Bot 1",
                    img: {
                        x: 962,
                        y: 270,
                        w: 16,
                        h: 44
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    collection: [0, 1]
                }, {
                    name: "Wall Winter Bot 2",
                    img: {
                        x: 978,
                        y: 270,
                        w: 16,
                        h: 44
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    noShow: !0
                }, {
                    name: "Wall Winter Left Top",
                    img: {
                        x: 1026,
                        y: 270,
                        w: 24,
                        h: 44
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1
                }, {
                    name: "Wall Winter Right Top",
                    img: {
                        x: 1046,
                        y: 270,
                        w: 24,
                        h: 44
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1
                }, {
                    name: "Wall Winter Black",
                    img: {
                        x: 1070,
                        y: 270,
                        w: 16,
                        h: 44
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1
                }, {
                    name: "Wall Winter Left 1",
                    img: {
                        x: 850,
                        y: 325,
                        w: 24,
                        h: 45
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    collection: [0, 1, 2, 3]
                }, {
                    name: "Wall Winter Left 2",
                    img: {
                        x: 874,
                        y: 325,
                        w: 24,
                        h: 45
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    noShow: !0
                }, {
                    name: "Wall Winter Left 3",
                    img: {
                        x: 898,
                        y: 325,
                        w: 24,
                        h: 45
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    noShow: !0
                }, {
                    name: "Wall Winter Left 4",
                    img: {
                        x: 922,
                        y: 325,
                        w: 24,
                        h: 45
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    noShow: !0
                }, {
                    name: "Wall Winter Right 1",
                    img: {
                        x: 850,
                        y: 380,
                        w: 24,
                        h: 45
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    collection: [0, 1, 2, 3]
                }, {
                    name: "Wall Winter Right 2",
                    img: {
                        x: 874,
                        y: 380,
                        w: 24,
                        h: 45
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    noShow: !0
                }, {
                    name: "Wall Winter Right 3",
                    img: {
                        x: 898,
                        y: 380,
                        w: 24,
                        h: 45
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    noShow: !0
                }, {
                    name: "Wall Winter Right 4",
                    img: {
                        x: 922,
                        y: 380,
                        w: 24,
                        h: 45
                    },
                    pathing: 0,
                    w: 1,
                    h: 1,
                    ground: !1,
                    noShow: !0
                }, {
                    name: "Christmas Lights 1",
                    img: {
                        x: 703,
                        y: 0,
                        w: 33,
                        h: 45
                    },
                    pathing: 10,
                    noGrid: !0,
                    isNotFull: !0
                }, {
                    name: "Christmas Lights 2",
                    img: {
                        x: 744,
                        y: 0,
                        w: 33,
                        h: 45
                    },
                    pathing: 10,
                    noGrid: !0,
                    isNotFull: !0
                }, {
                    name: "Christmas Lights 3",
                    img: {
                        x: 783,
                        y: 0,
                        w: 33,
                        h: 32
                    },
                    pathing: 10,
                    noGrid: !0,
                    isNotFull: !0
                }, {
                    name: "Ice 1",
                    img: {
                        x: 635,
                        y: 63,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    ground: !0,
                    w: 1,
                    h: 1,
                    isNotFull: !1
                }, {
                    name: "Spikes 2",
                    img: {
                        x: 651,
                        y: 61,
                        w: 16,
                        h: 23
                    },
                    pathing: 8,
                    ground: !1,
                    w: 1,
                    h: 1,
                    isNotFull: !1
                }, {
                    name: "Spikes 3",
                    img: {
                        x: 667,
                        y: 61,
                        w: 16,
                        h: 23
                    },
                    pathing: 8,
                    ground: !1,
                    w: 1,
                    h: 1,
                    isNotFull: !1
                }, {
                    name: "Tree Winter",
                    img: {
                        x: 688,
                        y: 52,
                        w: 19,
                        h: 39
                    },
                    pathing: 0,
                    ground: !1,
                    w: 1,
                    h: 1
                }, {
                    name: "Winter Block 1",
                    img: {
                        x: 711,
                        y: 52,
                        w: 18,
                        h: 40
                    },
                    pathing: 0,
                    ground: !1,
                    w: 1,
                    h: 1
                }, {
                    name: "Winter Block 2",
                    img: {
                        x: 736,
                        y: 53,
                        w: 18,
                        h: 40
                    },
                    pathing: 0,
                    ground: !1,
                    w: 1,
                    h: 1
                }, {
                    name: "Gift",
                    img: {
                        x: 757,
                        y: 55,
                        w: 18,
                        h: 33
                    },
                    pathing: 5,
                    ground: !1,
                    w: 1,
                    h: 1
                }, {
                    name: "Winter Crate 1",
                    img: {
                        x: 780,
                        y: 57,
                        w: 20,
                        h: 35
                    },
                    pathing: 5,
                    ground: !1,
                    w: 1,
                    h: 1
                }, {
                    name: "Winter Crate 2",
                    img: {
                        x: 801,
                        y: 57,
                        w: 20,
                        h: 36
                    },
                    pathing: 5,
                    ground: !1,
                    w: 1,
                    h: 1,
                    noShow: !0
                }, {
                    name: "Winter Crate 1",
                    img: {
                        x: 780,
                        y: 57,
                        w: 20,
                        h: 35
                    },
                    pathing: 5,
                    ground: !1,
                    w: 1,
                    h: 1,
                    noShow: !0
                }, {
                    name: "Winter Crate 2",
                    img: {
                        x: 801,
                        y: 57,
                        w: 20,
                        h: 36
                    },
                    pathing: 5,
                    ground: !1,
                    w: 1,
                    h: 1
                }, {
                    name: "Winter Block 3",
                    img: {
                        x: 631,
                        y: 129,
                        w: 23,
                        h: 55
                    },
                    pathing: 0,
                    ground: !1,
                    w: 1,
                    h: 1
                }, {
                    name: "Winter Block 4",
                    img: {
                        x: 662,
                        y: 134,
                        w: 18,
                        h: 50
                    },
                    pathing: 0,
                    ground: !1,
                    w: 1,
                    h: 1
                }, {
                    name: "Winter Block 5",
                    img: {
                        x: 683,
                        y: 141,
                        w: 24,
                        h: 43
                    },
                    pathing: 0,
                    ground: !1,
                    w: 1,
                    h: 1
                }, {
                    name: "Winter Block 6",
                    img: {
                        x: 711,
                        y: 138,
                        w: 24,
                        h: 45
                    },
                    pathing: 0,
                    ground: !1,
                    w: 1,
                    h: 1
                }, {
                    name: "Winter Block 7",
                    img: {
                        x: 739,
                        y: 139,
                        w: 24,
                        h: 45
                    },
                    pathing: 0,
                    ground: !1,
                    w: 1,
                    h: 1
                }, {
                    name: "Winter Block 8",
                    img: {
                        x: 768,
                        y: 149,
                        w: 24,
                        h: 36
                    },
                    pathing: 5,
                    ground: !1,
                    w: 1,
                    h: 1
                }, {
                    name: "Winter Statue",
                    img: {
                        x: 677,
                        y: 93,
                        w: 16,
                        h: 36
                    },
                    pathing: 5,
                    ground: !1,
                    w: 1,
                    h: 1
                }, {
                    name: "Snow Stain 1",
                    img: {
                        x: 658,
                        y: 104,
                        w: 15,
                        h: 10
                    },
                    pathing: 10,
                    ground: !0,
                    noGrid: !0
                }, {
                    name: "Snow Stain 2",
                    img: {
                        x: 635,
                        y: 81,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    ground: !0,
                    noGrid: !0
                }, {
                    name: "Snow Stones",
                    img: {
                        x: 632,
                        y: 101,
                        w: 24,
                        h: 13
                    },
                    pathing: 10,
                    ground: !0,
                    noGrid: !0
                }, {
                    name: "Snow Tree 2x2 1",
                    img: {
                        x: 614,
                        y: 0,
                        w: 38,
                        h: 58
                    },
                    pathing: 0,
                    w: 2,
                    h: 2
                }, {
                    name: "Snow Tree 2x2 2",
                    img: {
                        x: 653,
                        y: 0,
                        w: 36,
                        h: 59
                    },
                    pathing: 0,
                    w: 2,
                    h: 2
                }, {
                    name: "Snow Border Top",
                    img: {
                        x: 683,
                        y: 190,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    isNotFull: !0
                }, {
                    name: "Snow Border Left",
                    img: {
                        x: 683,
                        y: 206,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    isNotFull: !0
                }, {
                    name: "Snow Border Right",
                    img: {
                        x: 699,
                        y: 206,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    isNotFull: !0
                }, {
                    name: "Snow Border Bottom",
                    img: {
                        x: 715,
                        y: 206,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    isNotFull: !0
                }, {
                    name: "Snow 1",
                    img: {
                        x: 619,
                        y: 206,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    collection: [0, 1, 2, 3]
                }, {
                    name: "Snow 2",
                    img: {
                        x: 635,
                        y: 206,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    noShow: !0
                }, {
                    name: "Snow 3",
                    img: {
                        x: 651,
                        y: 206,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    noShow: !0
                }, {
                    name: "Snow 4",
                    img: {
                        x: 667,
                        y: 206,
                        w: 16,
                        h: 16
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    ground: !0,
                    noShow: !0
                }, {
                    name: "Barrel",
                    img: {
                        x: 97,
                        y: 97,
                        w: 16,
                        h: 28
                    },
                    img2: {
                        x: 757,
                        y: 104,
                        w: 16,
                        h: 28
                    },
                    img3: {
                        x: 777,
                        y: 105,
                        w: 16,
                        h: 28
                    },
                    deathImg1: {
                        x: 828,
                        y: 5,
                        w: 38,
                        h: 34
                    },
                    deathImg2: {
                        x: 880,
                        y: 13,
                        w: 32,
                        h: 26
                    },
                    deathImg3: {
                        x: 922,
                        y: 23,
                        w: 32,
                        h: 15
                    },
                    deathImg4: {
                        x: 959,
                        y: 24,
                        w: 35,
                        h: 14
                    },
                    pathing: 5,
                    w: 1,
                    h: 1,
                    ground: !1,
                    movable: !0,
                    radius: .6,
                    hp: 100
                }, {
                    name: "Hallowen Barrel",
                    img: {
                        x: 523,
                        y: 81,
                        w: 16,
                        h: 25
                    },
                    img2: {
                        x: 757,
                        y: 104,
                        w: 16,
                        h: 25
                    },
                    img3: {
                        x: 777,
                        y: 105,
                        w: 16,
                        h: 25
                    },
                    deathImg1: {
                        x: 828,
                        y: 5,
                        w: 38,
                        h: 34
                    },
                    deathImg2: {
                        x: 880,
                        y: 13,
                        w: 32,
                        h: 26
                    },
                    deathImg3: {
                        x: 922,
                        y: 23,
                        w: 32,
                        h: 15
                    },
                    deathImg4: {
                        x: 959,
                        y: 24,
                        w: 35,
                        h: 14
                    },
                    w: 1,
                    h: 1,
                    pathing: 5,
                    movable: !0,
                    radius: .6,
                    hp: 100
                }, {
                    name: "Winter Barrel 1",
                    img: {
                        x: 823,
                        y: 65,
                        w: 16,
                        h: 29
                    },
                    img2: {
                        x: 821,
                        y: 169,
                        w: 16,
                        h: 29
                    },
                    img4: {
                        x: 842,
                        y: 170,
                        w: 16,
                        h: 29
                    },
                    deathImg1: {
                        x: 1006,
                        y: 5,
                        w: 38,
                        h: 34
                    },
                    deathImg2: {
                        x: 1058,
                        y: 13,
                        w: 32,
                        h: 26
                    },
                    deathImg3: {
                        x: 1100,
                        y: 23,
                        w: 32,
                        h: 15
                    },
                    deathImg4: {
                        x: 1131,
                        y: 24,
                        w: 35,
                        h: 14
                    },
                    pathing: 5,
                    ground: !1,
                    w: 1,
                    h: 1,
                    movable: !0,
                    radius: .6,
                    hp: 100
                }, {
                    name: "Winter Barrel 2",
                    img: {
                        x: 843,
                        y: 65,
                        w: 16,
                        h: 29
                    },
                    img2: {
                        x: 821,
                        y: 169,
                        w: 16,
                        h: 29
                    },
                    img4: {
                        x: 842,
                        y: 170,
                        w: 16,
                        h: 29
                    },
                    deathImg1: {
                        x: 1006,
                        y: 5,
                        w: 38,
                        h: 34
                    },
                    deathImg2: {
                        x: 1058,
                        y: 13,
                        w: 32,
                        h: 26
                    },
                    deathImg3: {
                        x: 1100,
                        y: 23,
                        w: 32,
                        h: 15
                    },
                    deathImg4: {
                        x: 1131,
                        y: 24,
                        w: 35,
                        h: 14
                    },
                    pathing: 5,
                    ground: !1,
                    w: 1,
                    h: 1,
                    movable: !0,
                    radius: .6,
                    hp: 100
                }, {
                    name: "Bush 1",
                    img: {
                        x: 864,
                        y: 48,
                        w: 16,
                        h: 40
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    blockVision: !0,
                    collection: [0, 1, 2, 3]
                }, {
                    name: "Bush 2",
                    img: {
                        x: 881,
                        y: 48,
                        w: 16,
                        h: 40
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    blockVision: !0,
                    noShow: !0
                }, {
                    name: "Bush 3",
                    img: {
                        x: 898,
                        y: 48,
                        w: 16,
                        h: 40
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    blockVision: !0,
                    noShow: !0
                }, {
                    name: "Bush 4",
                    img: {
                        x: 915,
                        y: 48,
                        w: 16,
                        h: 40
                    },
                    pathing: 10,
                    w: 1,
                    h: 1,
                    blockVision: !0,
                    noShow: !0
                }];
                for (var i = 0; i < exports.tileTypes.length; i++) exports.tileTypes[i].id = i
            },
            5927: (__unused_webpack_module, exports) => {
                "use strict";
                var ChestLootType;
                Object.defineProperty(exports, "__esModule", {
                        value: !0
                    }), exports.convertStringToChests = exports.convertChestsToString = exports.additionalChestLoot = exports.ChestLootType = exports.treasureChests = void 0, exports.treasureChests = [{
                        id: 0,
                        waitTime: 1800,
                        gold: [30, 42]
                    }, {
                        id: 1,
                        waitTime: 7200,
                        gold: [100, 128]
                    }, {
                        id: 2,
                        waitTime: 28800,
                        gold: [380, 472]
                    }, {
                        id: 3,
                        waitTime: 86400,
                        gold: [1920, 2688]
                    }],
                    function(ChestLootType) {
                        ChestLootType[ChestLootType.NameColor = 0] = "NameColor"
                    }(ChestLootType = exports.ChestLootType || (exports.ChestLootType = {})), exports.additionalChestLoot = [{
                        type: ChestLootType.NameColor,
                        colorIndex: 501,
                        chances: [0, 0, .001, .007]
                    }], exports.convertChestsToString = function(chests) {
                        if (!chests) return "";
                        var str = "";
                        for (var k in chests) str += k + "," + chests[k].count + "," + chests[k].openTime + ";";
                        return str
                    }, exports.convertStringToChests = function(str) {
                        for (var chests = [], i = 0; i < exports.treasureChests.length; i++) chests[i] = {
                            count: 0,
                            openTime: 0
                        };
                        if (!str) return chests;
                        var a1 = str.split(";");
                        for (i = 0; i < a1.length; i++)
                            if (a1[i]) {
                                var a2 = a1[i].split(",");
                                chests[parseInt(a2[0])] = {
                                    count: parseInt(a2[1]),
                                    openTime: parseInt(a2[2])
                                }
                            } return chests
                    }
            },
            2007: (__unused_webpack_module, exports) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.weapons = void 0, exports.weapons = [{
                    id: 0,
                    name: "Laser Gun",
                    cooldown: 17,
                    dmg: 28,
                    projectileSpeed: .75,
                    lifetime: 60,
                    collision: !0,
                    dieOnCollision: !0,
                    addHeight: !0,
                    description: "A basic laser gun.",
                    soundName: "laser",
                    volume: .8,
                    bouncePower: .15,
                    bounceSpeed: .11,
                    frame: 0,
                    isLaser: !0,
                    light: "light_blue",
                    particle: "particleBlue",
                    _r: 58,
                    _g: 58,
                    _b: 230,
                    selfImmuneTicks: 2,
                    img: "weapon_laser",
                    ammoImgSmall: "ammoLaserSmall",
                    projectileImg: "laserBlue",
                    muzzleFlash: "muzzleFlashLaserBlue",
                    muzzleFlashAnimationType: "row",
                    directions: 16,
                    projectileScale: .85,
                    zombieStunTime: 5,
                    ammoSize: 999999,
                    startAmmoSize: 999999
                }, {
                    id: 1,
                    name: "Grenade Launcher",
                    cooldown: 4,
                    dmg: 60,
                    projectileSpeed: .5,
                    range: 9.5,
                    aoe: 2.1,
                    bounceBack: .15,
                    aoeCursor: !0,
                    collision: !1,
                    dieOnCollision: !1,
                    description: "A powerful weapon that launches explosive grenades. Grenades can be shot over small obstacles like crates.",
                    ammoImg: "ammoGL",
                    ammoImgSmall: "ammoGrenadeSmall",
                    soundName: "grenade_launch",
                    projectileImg: "grenade",
                    isGrenade: !0,
                    impactSound: "explo",
                    impactSoundVolume: 1,
                    ammoSize: 8,
                    clipSize: 1,
                    cooldown2: 55,
                    ammoMsg: "Picked up some grenade rounds",
                    reload2Sound: "reload_gl",
                    frame: 1,
                    speedModifier: 1.03,
                    img: "weapon_gl"
                }, {
                    id: 2,
                    name: "Flamethrower",
                    cooldown: 2,
                    dmg: 4,
                    dieOnCollision: !0,
                    projectileSpeed: .45,
                    lifetime: 16,
                    projectileSize: 1,
                    collision: !1,
                    addHeight: !0,
                    description: "A short range weapon, that can kill an enemy very fast.",
                    bouncePower: .15,
                    bounceSpeed: .15,
                    recoil: .2,
                    flameDeath: !0,
                    ammoImg: "ammoFlame",
                    ammoImgSmall: "ammoFlameSmall",
                    ammoSize: 100,
                    ammoMsg: "Picked up some gas",
                    clipSize: 50,
                    cooldown2: 60,
                    reload2Sound: "reload_flame",
                    frame: 2,
                    img: "weapon_flame",
                    speedModifier: 1.13,
                    selfImmuneTicks: 60,
                    zombieStunTime: 1,
                    noTeleport: !0
                }, {
                    id: 3,
                    name: "Minigun",
                    cooldown: 2,
                    dmg: 5.55,
                    projectileSpeed: 3,
                    lifetime: 20,
                    collision: !0,
                    dieOnCollision: !0,
                    addHeight: !0,
                    description: "A strong, fast firing weapon.",
                    bouncePower: .15,
                    bounceSpeed: .19,
                    soundName: "mg",
                    volume: .7,
                    recoil: .7,
                    scattering: .03 * Math.PI,
                    recoilTime: 1,
                    bounceBack: .05,
                    bounceBackTarget: .05,
                    normalProjectile: !0,
                    spawnBullets: !0,
                    frames: 2,
                    ammoImg: "ammoMG",
                    ammoImgSmall: "ammoMGSmall",
                    ammoSize: 100,
                    ammoMsg: "Picked up some minigun bullets",
                    clipSize: 50,
                    cooldown2: 60,
                    reload2Sound: "reload_mg",
                    projectileImg: "projectile",
                    directions: 16,
                    projectileScale: .7,
                    muzzleFlash: "muzzleFlashMG",
                    frame: 3,
                    img: "weapon_mg",
                    zombieStunTime: 2
                }, {
                    id: 4,
                    name: "Rocket Launcher",
                    cooldown: 4,
                    dmg: 60,
                    projectileSpeed: .6,
                    projectileSize: .25,
                    lifetime: 130,
                    aoe: 2.3,
                    soundName: "rocket_launch",
                    volume: .9,
                    bounceStun: !0,
                    collision: !0,
                    dieOnCollision: !0,
                    bounceBackTarget: .33,
                    description: "A powerful weapon that launches explosive rockets.",
                    ammoImg: "ammoRL",
                    ammoImgSmall: "ammoRocketSmall",
                    ammoSize: 8,
                    recoilTime: 6,
                    clipSize: 1,
                    cooldown2: 55,
                    ammoMsg: "Picked up some rockets",
                    reload2Sound: "reload_rl",
                    frame: 5,
                    isRocket: !0,
                    img: "weapon_rl",
                    projectileImg: "rocket",
                    selfImmuneTicks: 3
                }, {
                    id: 5,
                    name: "Laser Gun R",
                    cooldown: 17,
                    dmg: 28,
                    projectileSpeed: .75,
                    lifetime: 100,
                    collision: !0,
                    dieOnCollision: !0,
                    reflections: 8,
                    addHeight: !0,
                    description: "A laser gun that gets reflected from walls and obstacles.",
                    soundName: "laser",
                    volume: .8,
                    bouncePower: .15,
                    bounceSpeed: .11,
                    frame: 6,
                    isLaser: !0,
                    light: "light_green",
                    particle: "particleGreen",
                    ammoImg: "ammoLaser",
                    ammoImgSmall: "ammoLaser2Small",
                    ammoSize: 20,
                    clipSize: 999999,
                    cooldown2: 20,
                    muzzleFlash: "muzzleFlashLaserGreen",
                    muzzleFlashAnimationType: "row",
                    ammoMsg: "Picked up a battery",
                    reload2Sound: "laser_recharge",
                    _r: 60,
                    _g: 240,
                    _b: 40,
                    projectileImg: "laserGreen",
                    directions: 16,
                    projectileScale: .85,
                    selfImmuneTicks: 1,
                    img: "weapon_laser_r",
                    zombieStunTime: 5
                }, {
                    id: 6,
                    name: "Homie Launcher",
                    cooldown: 4,
                    dmg: 50,
                    projectileSpeed: .36,
                    turnRadius: .16,
                    projectileSize: .2,
                    lifetime: 250,
                    aoe: 1.9,
                    soundName: "rocket_launch",
                    volume: .9,
                    bounceStun: !0,
                    collision: !0,
                    dieOnCollision: !0,
                    bounceBackTarget: .25,
                    description: "A powerful weapon that launches your homies.",
                    ammoImg: "ammoHoming",
                    ammoImgSmall: "ammoRocket2Small",
                    ammoSize: 7,
                    recoilTime: 6,
                    clipSize: 1,
                    cooldown2: 70,
                    ammoMsg: "Picked up some homing missiles",
                    reload2Sound: "reload_rl2",
                    frame: 7,
                    isHeatSeeking: !0,
                    isRocket: !0,
                    img: "weapon_homing",
                    projectileImg: "homingRocket",
                    speedModifier: .9,
                    selfImmuneTicks: 3
                }, {
                    id: 7,
                    name: "Remote Controlled Launcher",
                    cooldown: 4,
                    dmg: 58,
                    projectileSpeed: .39,
                    turnRadius: .2,
                    projectileSize: .2,
                    lifetime: 250,
                    aoe: 1.9,
                    soundName: "rocket_launch",
                    volume: .9,
                    bounceStun: !0,
                    collision: !0,
                    dieOnCollision: !0,
                    bounceBackTarget: .285,
                    description: "A powerful weapon that launches homing missiles that follow your mouse cursor.",
                    ammoImg: "ammoNapalm",
                    ammoImgSmall: "ammoRocket3Small",
                    ammoSize: 7,
                    recoilTime: 6,
                    clipSize: 1,
                    cooldown2: 70,
                    ammoMsg: "Picked up some homing missiles",
                    reload2Sound: "reload_rl2",
                    frame: 11,
                    isHeatSeeking2: !0,
                    isRocket: !0,
                    img: "weapon_homing_2",
                    projectileImg: "homingRocket2",
                    speedModifier: .95,
                    selfImmuneTicks: 3
                }, {
                    id: 8,
                    name: "Sniper Rifle",
                    cooldown: 35,
                    dmg: 65,
                    projectileSpeed: 8,
                    collision: !0,
                    dieOnCollision: !0,
                    addHeight: !0,
                    requiredStandTime: 20,
                    description: "A sniper rifle with high range and damage. You need to aim first by pressing and holding F before you can shoot.",
                    lifetime: 20,
                    bouncePower: .15,
                    bounceSpeed: .35,
                    soundName: "sniper",
                    volume: .9,
                    recoil: 1.2,
                    recoilTime: 7,
                    normalProjectile: !0,
                    muzzleFlash: "muzzleFlashMG",
                    spawnBullets: !0,
                    bounceBackTarget: .22,
                    ammoImg: "ammoSniper",
                    ammoImgSmall: "ammoSniperSmall",
                    ammoSize: 10,
                    ammoMsg: "Picked up some sniper rounds",
                    clipSize: 5,
                    cooldown2: 70,
                    hasLine: !0,
                    reload2Sound: "reload_mg",
                    frame: 9,
                    projectileImg: "projectile",
                    directions: 16,
                    projectileScale: .6,
                    img: "weapon_sniper",
                    isSniper: !0,
                    lastShotSound: "bing",
                    speedModifier: 1.1,
                    zombieStunTime: 10
                }, {
                    id: 9,
                    name: "Shotgun",
                    cooldown: 22,
                    dmg: 7,
                    dmgLossPerRange: .15,
                    projectiles: 7,
                    scattering: .09 * Math.PI,
                    projectileSpeed: 3,
                    lifetime: 20,
                    collision: !0,
                    dieOnCollision: !0,
                    addHeight: !0,
                    description: "The shotgun deals more damage, the closer you are to the target.",
                    bouncePower: .25,
                    bounceSpeed: .4,
                    soundName: "shotgun",
                    volume: .8,
                    recoil: 1.4,
                    recoilTime: 5,
                    bounceBack: .3,
                    bounceBackTarget: .05,
                    normalProjectile: !0,
                    muzzleFlash: "muzzleFlashMG",
                    spawnBullets: !0,
                    ammoImg: "ammoShotgun",
                    ammoImgSmall: "ammoShotgunSmall",
                    ammoSize: 10,
                    ammoMsg: "Picked up some shotgun shells",
                    clipSize: 5,
                    cooldown2: 55,
                    reload2Sound: "shotgun_reload_long",
                    frame: 10,
                    projectileImg: "projectile",
                    directions: 16,
                    projectileScale: .55,
                    img: "weapon_shotgun",
                    speedModifier: 1.05,
                    zombieStunTime: 10
                }, {
                    id: 10,
                    name: "Rapid Rocket Launcher",
                    cooldown: 15,
                    dmg: 42,
                    projectileSpeed: .6,
                    projectileSize: .2,
                    lifetime: 130,
                    aoe: 1.45,
                    soundName: "rocket_launch",
                    volume: .75,
                    bounceStun: !0,
                    collision: !0,
                    dieOnCollision: !0,
                    bounceBackTarget: .22,
                    description: "A rocket launcher with a high fire rate.",
                    ammoImgSmall: "ammoRocketSmall",
                    ammoSize: 16,
                    recoilTime: 6,
                    clipSize: 8,
                    cooldown2: 60,
                    ammoMsg: "Picked up some rockets",
                    reload2Sound: "reload_rl",
                    frame: 12,
                    isRocket: !0,
                    img: "weapon_rapid_rl",
                    projectileImg: "rocket",
                    projectileScale: .8,
                    speedModifier: 1.05,
                    selfImmuneTicks: 3
                }, {
                    id: 11,
                    name: "Rapid Grenade Launcher",
                    cooldown: 18,
                    dmg: 42,
                    projectileSpeed: .5,
                    range: 9.5,
                    aoe: 1.5,
                    bounceBack: .1,
                    aoeCursor: !0,
                    collision: !1,
                    dieOnCollision: !1,
                    description: "A grenade launcher with high fire rate. Grenades can be shot over small obstacles like crates.",
                    ammoImgSmall: "ammoGrenadeSmall",
                    soundName: "grenade_launch",
                    volume: .88,
                    projectileImg: "grenade",
                    projectileScale: .8,
                    isGrenade: !0,
                    impactSound: "explo",
                    impactSoundVolume: .8,
                    ammoSize: 16,
                    clipSize: 8,
                    cooldown2: 60,
                    ammoMsg: "Picked up some grenade rounds",
                    reload2Sound: "reload_gl",
                    frame: 13,
                    speedModifier: 1.05,
                    img: "weapon_rapid_gl"
                }, {
                    id: 12,
                    name: "Zombie Melee",
                    cooldown: 16,
                    dmg: 30,
                    dieOnCollision: !0,
                    projectileSpeed: .3,
                    lifetime: 1,
                    projectileSize: .8,
                    collision: !0,
                    addHeight: !0,
                    description: "Dangerous zombie melee claws.",
                    bouncePower: .15,
                    bounceSpeed: .11,
                    recoil: 0,
                    noWeapon: !0,
                    soundName: "zombie_att",
                    impactSound: "zombie_bite",
                    impactSoundVolume: .8,
                    ammoImgSmall: "blank",
                    reload2Sound: "reload_flame",
                    img: "zombie_weapon",
                    speedModifier: 1,
                    zombieStunTime: 6,
                    noTeleport: !0,
                    selfImmuneTicks: 3,
                    slowTicks: 3,
                    slowPerc: .5,
                    corpseLifesteal: 20,
                    ammoSize: 999999,
                    startAmmoSize: 999999
                }, {
                    id: 13,
                    name: "Zombie Ranged",
                    cooldown: 20,
                    dmg: 44,
                    dieOnCollision: !0,
                    projectileSpeed: .45,
                    lifetime: 40,
                    projectileSize: .3,
                    collision: !0,
                    addHeight: !0,
                    description: "Dangerous zombie poison.",
                    bouncePower: .15,
                    bounceSpeed: .11,
                    recoil: 0,
                    noWeapon: !0,
                    soundName: "zombie_att",
                    impactSound: "zombie_bite",
                    impactSoundVolume: .8,
                    ammoImgSmall: "blank",
                    reload2Sound: "reload_flame",
                    img: "zombie_weapon",
                    isZombieRangedWeapon: !0,
                    projectileScale: 1.15,
                    speedModifier: 1,
                    zombieStunTime: 6,
                    selfImmuneTicks: 10,
                    slowTicks: 10,
                    slowPerc: .5,
                    ammoSize: 999999,
                    startAmmoSize: 999999
                }, {
                    id: 14,
                    name: "Zombie Boss Melee",
                    cooldown: 22,
                    dmg: 110,
                    dieOnCollision: !0,
                    projectileSpeed: .8,
                    startAtOrigin: !0,
                    lifetime: 1,
                    projectileSize: 1,
                    collision: !0,
                    addHeight: !0,
                    description: "Dangerous zombie melee fists.",
                    bouncePower: .15,
                    bounceSpeed: .11,
                    recoil: 0,
                    noWeapon: !0,
                    soundName: "zombie_boss_hit",
                    impactSound: "zombie_boss_hit",
                    poundSmokeSize: .8,
                    impactSoundVolume: .8,
                    ammoImgSmall: "blank",
                    reload2Sound: "reload_flame",
                    img: "zombie_weapon",
                    speedModifier: 1,
                    zombieStunTime: 6,
                    noTeleport: !0,
                    selfImmuneTicks: 3,
                    slowTicks: 3,
                    slowPerc: .5,
                    ammoSize: 999999,
                    startAmmoSize: 999999
                }, {
                    id: 15,
                    name: "Heal Beam",
                    dmg: -5,
                    selfHeal: 3.75,
                    autoAimRange: 3,
                    heals: !0,
                    isBeam: !0,
                    dieOnCollision: !0,
                    projectileSpeed: 10.5,
                    soundName: "heal_wpn",
                    friendly: !0,
                    beamRenderStartOffset: 1.2,
                    lifetime: 5,
                    cooldown: 5,
                    projectileSize: .01,
                    collision: !0,
                    addHeight: !0,
                    description: "A sweapon that heals you and your allies.",
                    bouncePower: 0,
                    recoil: .2,
                    ammoImg: "ammoFlame",
                    ammoImgSmall: "ammoHealSmall",
                    ammoSize: 100,
                    ammoMsg: "Picked up some energy",
                    clipSize: 40,
                    cooldown2: 60,
                    reload2Sound: "reload_flame",
                    frame: 15,
                    img: "weapon_heal",
                    speedModifier: 1.15,
                    selfImmuneTicks: 60,
                    zombieStunTime: 1,
                    noTeleport: !0,
                    disableByBot: !0,
                    beamColors: ["rgba(93, 194, 57, 0.7)", "rgba(126, 225, 92, 0.4)", "rgba(160, 242, 131, 0.15)"],
                    beamWidths: [.1, .21, .35],
                    muzzleFlashParticle: "particleGreen"
                }, {
                    id: 16,
                    name: "Energy Rifle",
                    cooldown: 20,
                    dmg: 20,
                    canTriggerCombo: !0,
                    mode2Weapon: 17,
                    projectileSpeed: 3,
                    projectileSize: .2,
                    muzzleFlashDisplayTime: 4,
                    lifetime: 8,
                    fadeOutAt: 4,
                    collision: !0,
                    dieOnCollision: !0,
                    addHeight: !0,
                    description: "This weapon has two fire modes: a basic ray and an energy ball. If you hit the ball with the ray, you'll get a big explosion.",
                    bouncePower: .2,
                    bounceSpeed: .25,
                    soundName: "asmd1",
                    volume: .55,
                    recoil: 1.2,
                    recoilTime: 5,
                    bounceBack: .2,
                    bounceBackTarget: .27,
                    isLaser: !0,
                    light: "light_red",
                    particle: "particleRed",
                    _r: 230,
                    _g: 58,
                    _b: 58,
                    projectileImg: "laserRed",
                    ammoImg: "ammoMG",
                    ammoImgSmall: "ammoASMDSmall",
                    ammoSize: 28,
                    ammoMsg: "Picked up some energy",
                    clipSize: 14,
                    cooldown2: 60,
                    reload2Sound: "asmd_reload",
                    directions: 16,
                    muzzleFlash: "muzzleFlashMG",
                    frame: 14,
                    img: "weapon_asmd",
                    zombieStunTime: 12,
                    muzzleFlashParticle: "particleWhite",
                    muzzleFlashLight2: "light_white",
                    muzzleFlashLight: "light_red",
                    hitLight1: "light_red",
                    hitLight2: "light_white"
                }, {
                    id: 17,
                    dummyFor: 16,
                    name: "ASMD 2nd Mode",
                    cooldown: 20,
                    dmg: 45,
                    comboDmg: 100,
                    projectileSpeed: .35,
                    projectileSize: .28,
                    projectileScale: 1.45,
                    bounceBack: .2,
                    lifetime: 100,
                    aoe: 1.4,
                    comboAoe: 3.1,
                    redExplosion: !0,
                    soundName: "asmd_ball_launch",
                    impactSound: "asmd_explo_1",
                    impactSoundCombo: "asmd_explo_2",
                    volume: .9,
                    bounceStun: !0,
                    collision: !0,
                    dieOnCollision: !0,
                    description: "",
                    ammoImg: "ammoRL",
                    ammoImgSmall: "ammoASMDSmall",
                    ammoSize: 40,
                    recoilTime: 6,
                    clipSize: 20,
                    cooldown2: 60,
                    ammoMsg: "Picked up some energy",
                    reload2Sound: "asmd_reload",
                    frame: 17,
                    isRocket: !0,
                    img: "weapon_asmd",
                    projectileImg: "fireballMedium",
                    selfImmuneTicks: 30,
                    noWeapon: !0,
                    directions: 1,
                    noRocketEffects: !0,
                    glowLightImg: "light_red",
                    flySound: "asmd_fly",
                    projectileWiggle: !0,
                    spawnLight: "light_red"
                }]
            },
            8394: (__unused_webpack_module, exports, __webpack_require__) => {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: !0
                }), exports.createBounce2 = exports.createBounce = exports.badSeededRand = exports.deleteFromArray = exports.distanceSq = exports.distance = exports.arrayContains = void 0;
                var Weapons_1 = __webpack_require__(2007);
                exports.arrayContains = function(arr, val) {
                    for (var i = 0; i < arr.length; i++)
                        if (arr[i] === val) return !0;
                    return !1
                }, exports.distance = function(a, b) {
                    return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2))
                }, exports.distanceSq = function(a, b) {
                    return Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2)
                }, exports.deleteFromArray = function(arr, el) {
                    for (var i = 0; i < arr.length; i++)
                        if (arr[i] === el) return void arr.splice(i, 1)
                };
                exports.badSeededRand = function(seed, min, max) {
                    return min + .5 * (Math.sin(124.283 * seed) + 1) * (max - min)
                }, exports.createBounce = function(player, projectile, objX, objY, objAOE, killer, noBounce, flameDeath, weapon) {
                    var vecX = 0,
                        vecY = 0,
                        vecH = 0,
                        speed = 0,
                        sound = "",
                        volume = 0;
                    if (weapon && weapon.isBeam && killer && weapon.bounceSpeed) {
                        var gunWeight = weapon.bounceSpeed / (weapon.bounceSpeed + .25),
                            projVecX = player.x - killer.x,
                            projVecY = player.y - killer.y;
                        0 === (projVecLen = Math.sqrt(projVecX * projVecX + projVecY * projVecY)) && (projVecLen = .001), 0 === (plVecLen = Math.sqrt(Math.pow(player.x - player.x0, 2) + Math.pow(player.y - player.y0, 2))) && (plVecLen = .001), vecX = projVecX / projVecLen * gunWeight + (player.x - player.x0) / plVecLen * (1 - gunWeight), vecY = projVecY / projVecLen * gunWeight + (player.y - player.y0) / plVecLen * (1 - gunWeight), vecH = weapon.bouncePower || 0, speed = 1.5 * weapon.bounceSpeed
                    }
                    if (flameDeath) 0 === (plVecLen = Math.sqrt(Math.pow(player.x - player.x0, 2) + Math.pow(player.y - player.y0, 2))) && (plVecLen = .001), vecX = (player.x - player.x0) / plVecLen, vecY = (player.y - player.y0) / plVecLen, vecH = Weapons_1.weapons[2].bouncePower || 0, speed = 1.5 * (Weapons_1.weapons[2].bounceSpeed || 0);
                    else if (projectile && projectile.weapon.aoe) vecX = player.x - projectile.x, vecY = player.y - projectile.y, 0 === vecX && 0 === vecY && (vecX = .01), speed = 2.5 * (vecH = Math.max(.2 * (Math.min(Math.max(projectile.weapon.aoe - Math.sqrt(vecX * vecX + vecY * vecY), 1), 1.8) + .2), .001)), sound = "punch", volume = .95;
                    else if (void 0 === objX || void 0 === objY || void 0 === objAOE || !(objX || objY || objAOE) || 0 === objX && 0 === objY && 0 === objAOE)
                        if (!projectile && void 0 === killer || noBounce) vecX = Math.random() - .5, vecY = Math.random() - .5, vecH = .12, speed = .1, sound = "gun_impact", volume = .55;
                        else if (projectile && !projectile.weapon.aoe && void 0 !== projectile.weapon.bounceSpeed) {
                        var projVecLen, plVecLen;
                        gunWeight = projectile.weapon.bounceSpeed / (projectile.weapon.bounceSpeed + .25);
                        0 === (projVecLen = Math.sqrt(projectile.vecX * projectile.vecX + projectile.vecY * projectile.vecY)) && (projVecLen = .001), 0 === (plVecLen = Math.sqrt(Math.pow(player.x - player.x0, 2) + Math.pow(player.y - player.y0, 2))) && (plVecLen = .001), vecX = projectile.vecX / projVecLen * gunWeight + (player.x - player.x0) / plVecLen * (1 - gunWeight), vecY = projectile.vecY / projVecLen * gunWeight + (player.y - player.y0) / plVecLen * (1 - gunWeight), vecH = projectile.weapon.bouncePower || 0, speed = 1.5 * projectile.weapon.bounceSpeed
                    } else killer && killer.isZombie && (vecX = player.x - killer.x, vecY = player.y - killer.y, vecH = .15, speed = .11);
                    else vecX = player.x - objX, vecY = player.y - objY, 0 === vecX && 0 === vecY && (vecX = .01), speed = 2.5 * (vecH = Math.max(.2 * (Math.min(Math.max(objAOE - Math.sqrt(vecX * vecX + vecY * vecY), 1), 1.8) + .2), .001)), sound = "punch", volume = .95;
                    0 === vecX && 0 === vecY && (vecX = .01, vecY = .01, vecH = .01, speed = .02);
                    var len = Math.sqrt(vecX * vecX + vecY * vecY);
                    return {
                        x: vecX *= speed / len,
                        y: vecY *= speed / len,
                        z: vecH,
                        sound,
                        volume
                    }
                }, exports.createBounce2 = function(x, y, vecX, vecY, vecH, game) {
                    for (var h = 0, points = [], running = !0; running;) {
                        var wallSmash = void 0,
                            oldX = x,
                            oldY = y;
                        x += vecX, y += vecY;
                        var block = game.getHeight3(Math.floor(x), Math.floor(y));
                        block > h && (x -= 2 * vecX, wallSmash = vecX > 0 ? "right" : "left", (block = game.getHeight3(Math.floor(x), Math.floor(y))) > h && (x += 2 * vecX, y -= 2 * vecY, wallSmash = vecY > 0 ? "bottom" : "top", (block = game.getHeight3(Math.floor(x), Math.floor(y))) > h && (x -= 2 * vecX, vecX > 0 && vecY > 0 ? wallSmash = "rightbottom" : vecX > 0 && vecY < 0 ? wallSmash = "righttop" : vecX < 0 && vecY > 0 ? wallSmash = "leftbottom" : vecX < 0 && vecY < 0 && (wallSmash = "lefttop")))), vecX = x - oldX, vecY = y - oldY, wallSmash && (vecX *= .5, vecY *= .5);
                        var hitsGround = !1;
                        (h += vecH) < block && (h = block, vecX *= .75, vecY *= .75, (vecH *= -.6) < .05 ? running = !1 : hitsGround = !0), vecH -= .04, vecX *= .97, vecY *= .97, points.push({
                            x,
                            y,
                            h,
                            hitsGround,
                            wallSmash,
                            vecH
                        })
                    }
                    return points
                }
            },
            9217: module => {
                var view, doc, URL, save_link, can_use_save_link, webkit_req_fs, req_fs, throw_outside, fs_min_size, deletion_queue, dispatch, FileSaver, FS_proto, saveAs = saveAs || navigator.msSaveOrOpenBlob && navigator.msSaveOrOpenBlob.bind(navigator) || (view = self, doc = view.document, URL = view.URL || view.webkitURL || view, save_link = doc.createElementNS("http://www.w3.org/1999/xhtml", "a"), can_use_save_link = !view.externalHost && "download" in save_link, webkit_req_fs = view.webkitRequestFileSystem, req_fs = view.requestFileSystem || webkit_req_fs || view.mozRequestFileSystem, throw_outside = function(ex) {
                    (view.setImmediate || view.setTimeout)((function() {
                        throw ex
                    }), 0)
                }, fs_min_size = 0, deletion_queue = [], dispatch = function(filesaver, event_types, event) {
                    for (var i = (event_types = [].concat(event_types)).length; i--;) {
                        var listener = filesaver["on" + event_types[i]];
                        if ("function" == typeof listener) try {
                            listener.call(filesaver, event || filesaver)
                        } catch (ex) {
                            throw_outside(ex)
                        }
                    }
                }, FileSaver = function(blob, name) {
                    var object_url, target_view, slice, node, event, filesaver = this,
                        type = blob.type,
                        blob_changed = !1,
                        get_object_url = function() {
                            var object_url = (view.URL || view.webkitURL || view).createObjectURL(blob);
                            return deletion_queue.push(object_url), object_url
                        },
                        dispatch_all = function() {
                            dispatch(filesaver, "writestart progress write writeend".split(" "))
                        },
                        fs_error = function() {
                            !blob_changed && object_url || (object_url = get_object_url()), target_view ? target_view.location.href = object_url : window.open(object_url, "_blank"), filesaver.readyState = filesaver.DONE, dispatch_all()
                        },
                        abortable = function(func) {
                            return function() {
                                if (filesaver.readyState !== filesaver.DONE) return func.apply(this, arguments)
                            }
                        },
                        create_if_not_found = {
                            create: !0,
                            exclusive: !1
                        };
                    if (filesaver.readyState = filesaver.INIT, name || (name = "download"), can_use_save_link) return object_url = get_object_url(), save_link.href = object_url, save_link.download = name, node = save_link, (event = doc.createEvent("MouseEvents")).initMouseEvent("click", !0, !1, view, 0, 0, 0, 0, 0, !1, !1, !1, !1, 0, null), node.dispatchEvent(event), filesaver.readyState = filesaver.DONE, void dispatch_all();
                    view.chrome && type && "application/octet-stream" !== type && (slice = blob.slice || blob.webkitSlice, blob = slice.call(blob, 0, blob.size, "application/octet-stream"), blob_changed = !0), webkit_req_fs && "download" !== name && (name += ".download"), ("application/octet-stream" === type || webkit_req_fs) && (target_view = view), req_fs ? (fs_min_size += blob.size, req_fs(view.TEMPORARY, fs_min_size, abortable((function(fs) {
                        fs.root.getDirectory("saved", create_if_not_found, abortable((function(dir) {
                            var save = function() {
                                dir.getFile(name, create_if_not_found, abortable((function(file) {
                                    file.createWriter(abortable((function(writer) {
                                        writer.onwriteend = function(event) {
                                            target_view.location.href = file.toURL(), deletion_queue.push(file), filesaver.readyState = filesaver.DONE, dispatch(filesaver, "writeend", event)
                                        }, writer.onerror = function() {
                                            var error = writer.error;
                                            error.code !== error.ABORT_ERR && fs_error()
                                        }, "writestart progress write abort".split(" ").forEach((function(event) {
                                            writer["on" + event] = filesaver["on" + event]
                                        })), writer.write(blob), filesaver.abort = function() {
                                            writer.abort(), filesaver.readyState = filesaver.DONE
                                        }, filesaver.readyState = filesaver.WRITING
                                    })), fs_error)
                                })), fs_error)
                            };
                            dir.getFile(name, {
                                create: !1
                            }, abortable((function(file) {
                                file.remove(), save()
                            })), abortable((function(ex) {
                                ex.code === ex.NOT_FOUND_ERR ? save() : fs_error()
                            })))
                        })), fs_error)
                    })), fs_error)) : fs_error()
                }, (FS_proto = FileSaver.prototype).abort = function() {
                    this.readyState = this.DONE, dispatch(this, "abort")
                }, FS_proto.readyState = FS_proto.INIT = 0, FS_proto.WRITING = 1, FS_proto.DONE = 2, FS_proto.error = FS_proto.onwritestart = FS_proto.onprogress = FS_proto.onwrite = FS_proto.onabort = FS_proto.onerror = FS_proto.onwriteend = null, view.addEventListener("unload", (function() {
                    for (var i = deletion_queue.length; i--;) {
                        var file = deletion_queue[i];
                        "string" == typeof file ? URL.revokeObjectURL(file) : file.remove()
                    }
                    deletion_queue.length = 0
                }), !1), function(blob, name) {
                    return new FileSaver(blob, name)
                });
                module.exports = saveAs
            },
            1301: module => {
                module.exports = function e(t, n, r) {
                    function s(o, u) {
                        if (!n[o]) {
                            if (!t[o]) {
                                if (i) return i(o, !0);
                                var f = new Error("Cannot find module '" + o + "'");
                                throw f.code = "MODULE_NOT_FOUND", f
                            }
                            var l = n[o] = {
                                exports: {}
                            };
                            t[o][0].call(l.exports, (function(e) {
                                var n = t[o][1][e];
                                return s(n || e)
                            }), l, l.exports, e, t, n, r)
                        }
                        return n[o].exports
                    }
                    for (var i = void 0, o = 0; o < r.length; o++) s(r[o]);
                    return s
                }({
                    1: [function(require, module, exports) {
                        function EventEmitter() {
                            this._events = this._events || {}, this._maxListeners = this._maxListeners || void 0
                        }

                        function isFunction(arg) {
                            return "function" == typeof arg
                        }

                        function isNumber(arg) {
                            return "number" == typeof arg
                        }

                        function isObject(arg) {
                            return "object" == typeof arg && null !== arg
                        }

                        function isUndefined(arg) {
                            return void 0 === arg
                        }
                        module.exports = EventEmitter, EventEmitter.EventEmitter = EventEmitter, EventEmitter.prototype._events = void 0, EventEmitter.prototype._maxListeners = void 0, EventEmitter.defaultMaxListeners = 10, EventEmitter.prototype.setMaxListeners = function(n) {
                            if (!isNumber(n) || n < 0 || isNaN(n)) throw TypeError("n must be a positive number");
                            return this._maxListeners = n, this
                        }, EventEmitter.prototype.emit = function(type) {
                            var er, handler, len, args, i, listeners;
                            if (this._events || (this._events = {}), "error" === type && (!this._events.error || isObject(this._events.error) && !this._events.error.length)) {
                                if ((er = arguments[1]) instanceof Error) throw er;
                                var err = new Error('Uncaught, unspecified "error" event. (' + er + ")");
                                throw err.context = er, err
                            }
                            if (isUndefined(handler = this._events[type])) return !1;
                            if (isFunction(handler)) switch (arguments.length) {
                                case 1:
                                    handler.call(this);
                                    break;
                                case 2:
                                    handler.call(this, arguments[1]);
                                    break;
                                case 3:
                                    handler.call(this, arguments[1], arguments[2]);
                                    break;
                                default:
                                    args = Array.prototype.slice.call(arguments, 1), handler.apply(this, args)
                            } else if (isObject(handler))
                                for (args = Array.prototype.slice.call(arguments, 1), len = (listeners = handler.slice()).length, i = 0; i < len; i++) listeners[i].apply(this, args);
                            return !0
                        }, EventEmitter.prototype.addListener = function(type, listener) {
                            var m;
                            if (!isFunction(listener)) throw TypeError("listener must be a function");
                            return this._events || (this._events = {}), this._events.newListener && this.emit("newListener", type, isFunction(listener.listener) ? listener.listener : listener), this._events[type] ? isObject(this._events[type]) ? this._events[type].push(listener) : this._events[type] = [this._events[type], listener] : this._events[type] = listener, isObject(this._events[type]) && !this._events[type].warned && (m = isUndefined(this._maxListeners) ? EventEmitter.defaultMaxListeners : this._maxListeners) && m > 0 && this._events[type].length > m && (this._events[type].warned = !0, console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.", this._events[type].length), "function" == typeof console.trace && console.trace()), this
                        }, EventEmitter.prototype.on = EventEmitter.prototype.addListener, EventEmitter.prototype.once = function(type, listener) {
                            if (!isFunction(listener)) throw TypeError("listener must be a function");
                            var fired = !1;

                            function g() {
                                this.removeListener(type, g), fired || (fired = !0, listener.apply(this, arguments))
                            }
                            return g.listener = listener, this.on(type, g), this
                        }, EventEmitter.prototype.removeListener = function(type, listener) {
                            var list, position, length, i;
                            if (!isFunction(listener)) throw TypeError("listener must be a function");
                            if (!this._events || !this._events[type]) return this;
                            if (length = (list = this._events[type]).length, position = -1, list === listener || isFunction(list.listener) && list.listener === listener) delete this._events[type], this._events.removeListener && this.emit("removeListener", type, listener);
                            else if (isObject(list)) {
                                for (i = length; i-- > 0;)
                                    if (list[i] === listener || list[i].listener && list[i].listener === listener) {
                                        position = i;
                                        break
                                    } if (position < 0) return this;
                                1 === list.length ? (list.length = 0, delete this._events[type]) : list.splice(position, 1), this._events.removeListener && this.emit("removeListener", type, listener)
                            }
                            return this
                        }, EventEmitter.prototype.removeAllListeners = function(type) {
                            var key, listeners;
                            if (!this._events) return this;
                            if (!this._events.removeListener) return 0 === arguments.length ? this._events = {} : this._events[type] && delete this._events[type], this;
                            if (0 === arguments.length) {
                                for (key in this._events) "removeListener" !== key && this.removeAllListeners(key);
                                return this.removeAllListeners("removeListener"), this._events = {}, this
                            }
                            if (isFunction(listeners = this._events[type])) this.removeListener(type, listeners);
                            else if (listeners)
                                for (; listeners.length;) this.removeListener(type, listeners[listeners.length - 1]);
                            return delete this._events[type], this
                        }, EventEmitter.prototype.listeners = function(type) {
                            return this._events && this._events[type] ? isFunction(this._events[type]) ? [this._events[type]] : this._events[type].slice() : []
                        }, EventEmitter.prototype.listenerCount = function(type) {
                            if (this._events) {
                                var evlistener = this._events[type];
                                if (isFunction(evlistener)) return 1;
                                if (evlistener) return evlistener.length
                            }
                            return 0
                        }, EventEmitter.listenerCount = function(emitter, type) {
                            return emitter.listenerCount(type)
                        }
                    }, {}],
                    2: [function(require, module, exports) {
                        var UA, browser, mode, platform, ua;
                        ua = navigator.userAgent.toLowerCase(), platform = navigator.platform.toLowerCase(), mode = "ie" === (UA = ua.match(/(opera|ie|firefox|chrome|version)[\s\/:]([\w\d\.]+)?.*?(safari|version[\s\/:]([\w\d\.]+)|$)/) || [null, "unknown", 0])[1] && document.documentMode, (browser = {
                            name: "version" === UA[1] ? UA[3] : UA[1],
                            version: mode || parseFloat("opera" === UA[1] && UA[4] ? UA[4] : UA[2]),
                            platform: {
                                name: ua.match(/ip(?:ad|od|hone)/) ? "ios" : (ua.match(/(?:webos|android)/) || platform.match(/mac|win|linux/) || ["other"])[0]
                            }
                        })[browser.name] = !0, browser[browser.name + parseInt(browser.version, 10)] = !0, browser.platform[browser.platform.name] = !0, module.exports = browser
                    }, {}],
                    3: [function(require, module, exports) {
                        var EventEmitter, GIF, browser, extend = function(child, parent) {
                                for (var key in parent) hasProp.call(parent, key) && (child[key] = parent[key]);

                                function ctor() {
                                    this.constructor = child
                                }
                                return ctor.prototype = parent.prototype, child.prototype = new ctor, child.__super__ = parent.prototype, child
                            },
                            hasProp = {}.hasOwnProperty,
                            indexOf = [].indexOf || function(item) {
                                for (var i = 0, l = this.length; i < l; i++)
                                    if (i in this && this[i] === item) return i;
                                return -1
                            },
                            slice = [].slice;
                        EventEmitter = require("events").EventEmitter, browser = require("./browser.coffee"), GIF = function(superClass) {
                            var defaults, frameDefaults;

                            function GIF(options) {
                                var base, key, value;
                                for (key in this.running = !1, this.options = {}, this.frames = [], this.freeWorkers = [], this.activeWorkers = [], this.setOptions(options), defaults) value = defaults[key], null == (base = this.options)[key] && (base[key] = value)
                            }
                            return extend(GIF, superClass), defaults = {
                                workerScript: "gif.worker.js",
                                workers: 2,
                                repeat: 0,
                                background: "#fff",
                                quality: 10,
                                width: null,
                                height: null,
                                transparent: null,
                                debug: !1,
                                dither: !1
                            }, frameDefaults = {
                                delay: 500,
                                copy: !1
                            }, GIF.prototype.setOption = function(key, value) {
                                if (this.options[key] = value, null != this._canvas && ("width" === key || "height" === key)) return this._canvas[key] = value
                            }, GIF.prototype.setOptions = function(options) {
                                var key, results, value;
                                for (key in results = [], options) hasProp.call(options, key) && (value = options[key], results.push(this.setOption(key, value)));
                                return results
                            }, GIF.prototype.addFrame = function(image, options) {
                                var frame, key;
                                for (key in null == options && (options = {}), (frame = {}).transparent = this.options.transparent, frameDefaults) frame[key] = options[key] || frameDefaults[key];
                                if (null == this.options.width && this.setOption("width", image.width), null == this.options.height && this.setOption("height", image.height), "undefined" != typeof ImageData && null !== ImageData && image instanceof ImageData) frame.data = image.data;
                                else if ("undefined" != typeof CanvasRenderingContext2D && null !== CanvasRenderingContext2D && image instanceof CanvasRenderingContext2D || "undefined" != typeof WebGLRenderingContext && null !== WebGLRenderingContext && image instanceof WebGLRenderingContext) options.copy ? frame.data = this.getContextData(image) : frame.context = image;
                                else {
                                    if (null == image.childNodes) throw new Error("Invalid image");
                                    options.copy ? frame.data = this.getImageData(image) : frame.image = image
                                }
                                return this.frames.push(frame)
                            }, GIF.prototype.render = function() {
                                var j, numWorkers, ref;
                                if (this.running) throw new Error("Already running");
                                if (null == this.options.width || null == this.options.height) throw new Error("Width and height must be set prior to rendering");
                                if (this.running = !0, this.nextFrame = 0, this.finishedFrames = 0, this.imageParts = function() {
                                        var j, ref, results;
                                        for (results = [], j = 0, ref = this.frames.length; 0 <= ref ? j < ref : j > ref; 0 <= ref ? ++j : --j) results.push(null);
                                        return results
                                    }.call(this), numWorkers = this.spawnWorkers(), !0 === this.options.globalPalette) this.renderNextFrame();
                                else
                                    for (j = 0, ref = numWorkers; 0 <= ref ? j < ref : j > ref; 0 <= ref ? ++j : --j) this.renderNextFrame();
                                return this.emit("start"), this.emit("progress", 0)
                            }, GIF.prototype.abort = function() {
                                for (var worker; null != (worker = this.activeWorkers.shift());) this.log("killing active worker"), worker.terminate();
                                return this.running = !1, this.emit("abort")
                            }, GIF.prototype.spawnWorkers = function() {
                                var numWorkers, ref, results, _this;
                                return numWorkers = Math.min(this.options.workers, this.frames.length),
                                    function() {
                                        results = [];
                                        for (var j = ref = this.freeWorkers.length; ref <= numWorkers ? j < numWorkers : j > numWorkers; ref <= numWorkers ? j++ : j--) results.push(j);
                                        return results
                                    }.apply(this).forEach((_this = this, function(i) {
                                        var worker;
                                        return _this.log("spawning worker " + i), (worker = new Worker(_this.options.workerScript)).onmessage = function(event) {
                                            return _this.activeWorkers.splice(_this.activeWorkers.indexOf(worker), 1), _this.freeWorkers.push(worker), _this.frameFinished(event.data)
                                        }, _this.freeWorkers.push(worker)
                                    })), numWorkers
                            }, GIF.prototype.frameFinished = function(frame) {
                                var j, ref;
                                if (this.log("frame " + frame.index + " finished - " + this.activeWorkers.length + " active"), this.finishedFrames++, this.emit("progress", this.finishedFrames / this.frames.length), this.imageParts[frame.index] = frame, !0 === this.options.globalPalette && (this.options.globalPalette = frame.globalPalette, this.log("global palette analyzed"), this.frames.length > 2))
                                    for (j = 1, ref = this.freeWorkers.length; 1 <= ref ? j < ref : j > ref; 1 <= ref ? ++j : --j) this.renderNextFrame();
                                return indexOf.call(this.imageParts, null) >= 0 ? this.renderNextFrame() : this.finishRendering()
                            }, GIF.prototype.finishRendering = function() {
                                var data, frame, i, image, j, k, l, len, len1, len2, len3, offset, page, ref, ref1, ref2;
                                for (len = 0, j = 0, len1 = (ref = this.imageParts).length; j < len1; j++) len += ((frame = ref[j]).data.length - 1) * frame.pageSize + frame.cursor;
                                for (len += frame.pageSize - frame.cursor, this.log("rendering finished - filesize " + Math.round(len / 1e3) + "kb"), data = new Uint8Array(len), offset = 0, k = 0, len2 = (ref1 = this.imageParts).length; k < len2; k++)
                                    for (i = l = 0, len3 = (ref2 = (frame = ref1[k]).data).length; l < len3; i = ++l) page = ref2[i], data.set(page, offset), i === frame.data.length - 1 ? offset += frame.cursor : offset += frame.pageSize;
                                return image = new Blob([data], {
                                    type: "image/gif"
                                }), this.emit("finished", image, data)
                            }, GIF.prototype.renderNextFrame = function() {
                                var frame, task, worker;
                                if (0 === this.freeWorkers.length) throw new Error("No free workers");
                                if (!(this.nextFrame >= this.frames.length)) return frame = this.frames[this.nextFrame++], worker = this.freeWorkers.shift(), task = this.getTask(frame), this.log("starting frame " + (task.index + 1) + " of " + this.frames.length), this.activeWorkers.push(worker), worker.postMessage(task)
                            }, GIF.prototype.getContextData = function(ctx) {
                                return ctx.getImageData(0, 0, this.options.width, this.options.height).data
                            }, GIF.prototype.getImageData = function(image) {
                                var ctx;
                                return null == this._canvas && (this._canvas = document.createElement("canvas"), this._canvas.width = this.options.width, this._canvas.height = this.options.height), (ctx = this._canvas.getContext("2d")).setFill = this.options.background, ctx.fillRect(0, 0, this.options.width, this.options.height), ctx.drawImage(image, 0, 0), this.getContextData(ctx)
                            }, GIF.prototype.getTask = function(frame) {
                                var index, task;
                                if (task = {
                                        index: index = this.frames.indexOf(frame),
                                        last: index === this.frames.length - 1,
                                        delay: frame.delay,
                                        transparent: frame.transparent,
                                        width: this.options.width,
                                        height: this.options.height,
                                        quality: this.options.quality,
                                        dither: this.options.dither,
                                        globalPalette: this.options.globalPalette,
                                        repeat: this.options.repeat,
                                        canTransfer: "chrome" === browser.name
                                    }, null != frame.data) task.data = frame.data;
                                else if (null != frame.context) task.data = this.getContextData(frame.context);
                                else {
                                    if (null == frame.image) throw new Error("Invalid frame");
                                    task.data = this.getImageData(frame.image)
                                }
                                return task
                            }, GIF.prototype.log = function() {
                                var args;
                                if (args = 1 <= arguments.length ? slice.call(arguments, 0) : [], this.options.debug) return console.log.apply(console, args)
                            }, GIF
                        }(EventEmitter), module.exports = GIF
                    }, {
                        "./browser.coffee": 2,
                        events: 1
                    }]
                }, {}, [3])(3)
            }
        },
        __webpack_module_cache__ = {};

    function __webpack_require__(moduleId) {
        if (__webpack_module_cache__[moduleId]) return __webpack_module_cache__[moduleId].exports;
        var module = __webpack_module_cache__[moduleId] = {
            exports: {}
        };
        return __webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__), module.exports
    }
    __webpack_require__(2174)
})();

//# sourceMappingURL=client-bundle.js.map